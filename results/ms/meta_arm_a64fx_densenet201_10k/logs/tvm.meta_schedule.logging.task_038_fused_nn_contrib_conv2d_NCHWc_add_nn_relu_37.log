2024-04-29 14:03:22 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37"
2024-04-29 14:03:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1600), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:03:22 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:03:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1600), ic_0 * T.int64(40) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 40])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:03:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1600), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 40])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:03:22 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1600), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 40])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 15:05:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:05:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 15:05:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 15:05:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 15:05:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 15:05:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 15:05:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 15:05:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 15:05:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9974  0.9968  0.9961  0.9955  0.9949  0.9947  0.9946  0.9932  0.9927  0.9926  0.9924  0.9907  0.9895  0.9889  0.9883
[17 : 32]:	0.9881  0.9881  0.9879  0.9879  0.9878  0.9868  0.9861  0.9858  0.9855  0.9849  0.9839  0.9836  0.9826  0.9824  0.9809  0.9807
[33 : 48]:	0.9806  0.9805  0.9795  0.9795  0.9793  0.9790  0.9789  0.9785  0.9785  0.9777  0.9776  0.9775  0.9775  0.9773  0.9770  0.9765
[49 : 64]:	0.9764  0.9759  0.9758  0.9754  0.9753  0.9744  0.9742  0.9741  0.9731  0.9730  0.9727  0.9716  0.9716  0.9716  0.9710  0.9703
2024-04-29 15:05:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:05:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #1: GFLOPs: 58.2477. Time: 1379.1414 us. Best GFLOPs: 58.2477
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #2: GFLOPs: 41.8173. Time: 1921.0159 us. Best GFLOPs: 58.2477
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #3: GFLOPs: 38.6885. Time: 2076.3731 us. Best GFLOPs: 58.2477
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #4: GFLOPs: 118.2856. Time: 679.1339 us. Best GFLOPs: 118.2856
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #5: GFLOPs: 0.7514. Time: 106912.9997 us. Best GFLOPs: 118.2856
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #6: GFLOPs: 125.0606. Time: 642.3425 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #7: GFLOPs: 116.7477. Time: 688.0800 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #8: GFLOPs: 29.8613. Time: 2690.1659 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #9: GFLOPs: 2.8024. Time: 28665.2687 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #10: GFLOPs: 97.6813. Time: 822.3864 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #11: GFLOPs: 104.3479. Time: 769.8457 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #12: GFLOPs: 22.4972. Time: 3570.7419 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #13: GFLOPs: 104.0954. Time: 771.7131 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #14: GFLOPs: 86.2261. Time: 931.6408 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(800), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1600), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[800, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #16: GFLOPs: 3.9465. Time: 20355.2290 us. Best GFLOPs: 125.0606
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #17: GFLOPs: 152.5803. Time: 526.4884 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #18: GFLOPs: 67.9984. Time: 1181.3773 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #19: GFLOPs: 99.0114. Time: 811.3388 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #20: GFLOPs: 54.8967. Time: 1463.3259 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #21: GFLOPs: 34.7697. Time: 2310.3976 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #22: GFLOPs: 6.2705. Time: 12811.1614 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #23: GFLOPs: 18.2715. Time: 4396.5669 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #24: GFLOPs: 12.6534. Time: 6348.6414 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #25: GFLOPs: 77.6768. Time: 1034.1804 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #26: GFLOPs: 32.9226. Time: 2440.0210 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #27: GFLOPs: 78.5853. Time: 1022.2233 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #28: GFLOPs: 11.4009. Time: 7046.0775 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #29: GFLOPs: 1.7114. Time: 46939.9137 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #30: GFLOPs: 24.3602. Time: 3297.6622 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #31: GFLOPs: 35.1622. Time: 2284.6087 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #32: GFLOPs: 93.6988. Time: 857.3406 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #33: GFLOPs: 17.5858. Time: 4567.9874 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #34: GFLOPs: 44.9248. Time: 1788.1391 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #35: GFLOPs: 60.1854. Time: 1334.7384 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #36: GFLOPs: 43.1051. Time: 1863.6251 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #37: GFLOPs: 85.7277. Time: 937.0579 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #38: GFLOPs: 11.4329. Time: 7026.3593 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #39: GFLOPs: 123.5710. Time: 650.0859 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #40: GFLOPs: 12.6299. Time: 6360.4475 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #41: GFLOPs: 15.1888. Time: 5288.8946 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(400), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(400), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(25), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1600), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[25, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #43: GFLOPs: 45.6351. Time: 1760.3058 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #44: GFLOPs: 32.9321. Time: 2439.3126 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #45: GFLOPs: 16.9567. Time: 4737.4585 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #46: GFLOPs: 116.3277. Time: 690.5645 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #47: GFLOPs: 6.7495. Time: 11901.8949 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #48: GFLOPs: 76.3406. Time: 1052.2818 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #49: GFLOPs: 71.7570. Time: 1119.4967 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #50: GFLOPs: 81.6743. Time: 983.5629 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #51: GFLOPs: 120.3278. Time: 667.6080 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #52: GFLOPs: 72.9449. Time: 1101.2672 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #53: GFLOPs: 19.4361. Time: 4133.1324 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #54: GFLOPs: 47.1978. Time: 1702.0221 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #55: GFLOPs: 100.0955. Time: 802.5510 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #56: GFLOPs: 101.3581. Time: 792.5537 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #57: GFLOPs: 13.9661. Time: 5751.8984 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #58: GFLOPs: 5.7252. Time: 14031.3543 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #59: GFLOPs: 24.2622. Time: 3310.9859 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #60: GFLOPs: 139.1443. Time: 577.3270 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #61: GFLOPs: 44.8551. Time: 1790.9163 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #62: GFLOPs: 69.3423. Time: 1158.4810 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #63: GFLOPs: 6.4593. Time: 12436.5444 us. Best GFLOPs: 152.5803
2024-04-29 17:07:18 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #64: GFLOPs: 31.5015. Time: 2550.0912 us. Best GFLOPs: 152.5803
2024-04-29 18:21:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:21:19 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 18:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 18:21:22 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 18:21:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 18:21:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 18:21:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 18:21:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x959eb68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0c4748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc973b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad37958)]: 0 failure(s)
2024-04-29 18:21:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9604  0.9604  0.9442  0.9278  0.9078  0.9045  0.8826  0.8826  0.8826  0.8811  0.8782  0.8617  0.8565  0.8474  0.8466  0.8416
[17 : 32]:	0.8394  0.8384  0.8307  0.8307  0.8307  0.8307  0.8258  0.8246  0.8174  0.8113  0.7977  0.7966  0.7928  0.7922  0.7922  0.7901
[33 : 48]:	0.7847  0.7796  0.7739  0.7731  0.7716  0.7713  0.7668  0.7615  0.7558  0.7534  0.7534  0.7509  0.7499  0.7497  0.7486  0.7476
[49 : 64]:	0.7457  0.7446  0.7409  0.7407  0.7405  0.7359  0.7337  0.7329  0.7283  0.7281  0.7273  0.7262  0.7231  0.7229  0.7217  0.7217
2024-04-29 18:21:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:21:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #65: GFLOPs: 43.2774. Time: 1856.2066 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #66: GFLOPs: 72.5965. Time: 1106.5510 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #67: GFLOPs: 40.2619. Time: 1995.2319 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #68: GFLOPs: 149.0163. Time: 539.0804 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #69: GFLOPs: 108.4149. Time: 740.9661 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #70: GFLOPs: 150.8934. Time: 532.3743 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #71: GFLOPs: 152.3956. Time: 527.1268 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #72: GFLOPs: 150.6234. Time: 533.3288 us. Best GFLOPs: 152.5803
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #73: GFLOPs: 153.3881. Time: 523.7157 us. Best GFLOPs: 153.3881
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #74: GFLOPs: 153.2728. Time: 524.1097 us. Best GFLOPs: 153.3881
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #75: GFLOPs: 236.5451. Time: 339.6044 us. Best GFLOPs: 236.5451
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #76: GFLOPs: 246.2254. Time: 326.2531 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #77: GFLOPs: 158.4979. Time: 506.8319 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #78: GFLOPs: 235.3864. Time: 341.2763 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #79: GFLOPs: 163.6234. Time: 490.9552 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #80: GFLOPs: 107.0101. Time: 750.6935 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #81: GFLOPs: 96.1157. Time: 835.7819 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #82: GFLOPs: 84.6474. Time: 949.0169 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #83: GFLOPs: 84.2775. Time: 953.1822 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #84: GFLOPs: 79.4558. Time: 1011.0250 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #85: GFLOPs: 84.2524. Time: 953.4661 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #86: GFLOPs: 83.6443. Time: 960.3975 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #87: GFLOPs: 180.5372. Time: 444.9596 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #88: GFLOPs: 93.9684. Time: 854.8804 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #89: GFLOPs: 106.7552. Time: 752.4856 us. Best GFLOPs: 246.2254
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #90: GFLOPs: 249.6807. Time: 321.7380 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #91: GFLOPs: 221.6217. Time: 362.4726 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #92: GFLOPs: 186.0543. Time: 431.7651 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #93: GFLOPs: 166.5993. Time: 482.1854 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #94: GFLOPs: 134.0264. Time: 599.3730 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #95: GFLOPs: 107.7615. Time: 745.4588 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #96: GFLOPs: 184.2529. Time: 435.9866 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #97: GFLOPs: 139.0354. Time: 577.7791 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #98: GFLOPs: 99.7359. Time: 805.4452 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #99: GFLOPs: 189.9989. Time: 422.8013 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #100: GFLOPs: 187.0193. Time: 429.5374 us. Best GFLOPs: 249.6807
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #101: GFLOPs: 292.9606. Time: 274.2067 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #102: GFLOPs: 140.0791. Time: 573.4742 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #103: GFLOPs: 276.4728. Time: 290.5594 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #104: GFLOPs: 110.4323. Time: 727.4300 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #105: GFLOPs: 182.9457. Time: 439.1017 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #106: GFLOPs: 48.6216. Time: 1652.1827 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #107: GFLOPs: 130.5846. Time: 615.1705 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #108: GFLOPs: 94.1761. Time: 852.9949 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #109: GFLOPs: 112.5874. Time: 713.5059 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #110: GFLOPs: 3.1613. Time: 25410.9840 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #111: GFLOPs: 155.1924. Time: 517.6269 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #112: GFLOPs: 93.8690. Time: 855.7859 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #113: GFLOPs: 126.2798. Time: 636.1413 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #114: GFLOPs: 156.3506. Time: 513.7926 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #115: GFLOPs: 103.3457. Time: 777.3112 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #116: GFLOPs: 102.0453. Time: 787.2167 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #117: GFLOPs: 115.5043. Time: 695.4870 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #118: GFLOPs: 130.9706. Time: 613.3572 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #119: GFLOPs: 214.1343. Time: 375.1466 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #120: GFLOPs: 81.2376. Time: 988.8492 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #121: GFLOPs: 137.6428. Time: 583.6251 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #122: GFLOPs: 77.4197. Time: 1037.6138 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #123: GFLOPs: 59.8645. Time: 1341.8935 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #124: GFLOPs: 217.1794. Time: 369.8866 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #125: GFLOPs: 116.1058. Time: 691.8845 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #126: GFLOPs: 57.4661. Time: 1397.8975 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #127: GFLOPs: 1.8350. Time: 43776.9230 us. Best GFLOPs: 292.9606
2024-04-29 18:23:00 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #128: GFLOPs: 127.9884. Time: 627.6487 us. Best GFLOPs: 292.9606
