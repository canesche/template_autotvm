2024-04-29 14:03:02 [INFO] [task_scheduler.cc:160] Initializing Task #33: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32"
2024-04-29 14:03:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1760), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:03:03 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:03:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(20) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 20])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:03:03 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(20) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 20])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:03:03 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(20) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 20])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:57:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:57:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:57:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 14:57:53 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:57:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 14:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 14:58:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 14:58:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 14:58:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9993  0.9990  0.9985  0.9983  0.9982  0.9975  0.9975  0.9974  0.9972  0.9970  0.9967  0.9961  0.9961  0.9961
[17 : 32]:	0.9955  0.9953  0.9953  0.9953  0.9948  0.9946  0.9941  0.9941  0.9939  0.9929  0.9925  0.9913  0.9913  0.9912  0.9907  0.9904
[33 : 48]:	0.9901  0.9900  0.9899  0.9897  0.9893  0.9886  0.9885  0.9877  0.9876  0.9874  0.9874  0.9874  0.9866  0.9865  0.9865  0.9864
[49 : 64]:	0.9859  0.9852  0.9840  0.9837  0.9837  0.9836  0.9833  0.9829  0.9822  0.9821  0.9818  0.9811  0.9805  0.9803  0.9797  0.9784
2024-04-29 14:58:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:58:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #1: GFLOPs: 27.8609. Time: 3171.4618 us. Best GFLOPs: 27.8609
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #2: GFLOPs: 42.7124. Time: 2068.7166 us. Best GFLOPs: 42.7124
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #3: GFLOPs: 9.5156. Time: 9285.7565 us. Best GFLOPs: 42.7124
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #4: GFLOPs: 5.6379. Time: 15672.6060 us. Best GFLOPs: 42.7124
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #5: GFLOPs: 2.4550. Time: 35991.3853 us. Best GFLOPs: 42.7124
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #6: GFLOPs: 4.1016. Time: 21543.0288 us. Best GFLOPs: 42.7124
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #7: GFLOPs: 70.2808. Time: 1257.2412 us. Best GFLOPs: 70.2808
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #8: GFLOPs: 107.5336. Time: 821.6964 us. Best GFLOPs: 107.5336
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #9: GFLOPs: 9.4045. Time: 9395.5212 us. Best GFLOPs: 107.5336
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(55), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(55) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused, ax3_ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 55])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #11: GFLOPs: 53.1507. Time: 1662.4425 us. Best GFLOPs: 107.5336
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #12: GFLOPs: 111.3270. Time: 793.6971 us. Best GFLOPs: 111.3270
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #13: GFLOPs: 149.5028. Time: 591.0255 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #14: GFLOPs: 62.0346. Time: 1424.3647 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #15: GFLOPs: 3.3377. Time: 26473.0140 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #16: GFLOPs: 30.8912. Time: 2860.3569 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #17: GFLOPs: 2.4284. Time: 36385.9490 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #18: GFLOPs: 130.1960. Time: 678.6686 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #19: GFLOPs: 130.5659. Time: 676.7461 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #20: GFLOPs: 34.3003. Time: 2576.0691 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #21: GFLOPs: 40.2945. Time: 2192.8547 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #22: GFLOPs: 87.6696. Time: 1007.8744 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #23: GFLOPs: 16.8024. Time: 5258.7565 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #24: GFLOPs: 7.5783. Time: 11659.5331 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #25: GFLOPs: 74.5650. Time: 1185.0056 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #26: GFLOPs: 3.0417. Time: 29049.7858 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #27: GFLOPs: 74.6688. Time: 1183.3581 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #28: GFLOPs: 88.9730. Time: 993.1097 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(880), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[880, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #30: GFLOPs: 18.0152. Time: 4904.7548 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #31: GFLOPs: 69.4734. Time: 1271.8534 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #32: GFLOPs: 105.8221. Time: 834.9853 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(440), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(440), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(160), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1760), ic_0 * T.int64(11) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[160, 11])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #34: GFLOPs: 4.0700. Time: 21710.1044 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #35: GFLOPs: 23.5249. Time: 3756.0169 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #36: GFLOPs: 25.6814. Time: 3440.6241 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #37: GFLOPs: 20.1267. Time: 4390.1840 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #38: GFLOPs: 42.5685. Time: 2075.7100 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #39: GFLOPs: 19.0216. Time: 4645.2533 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #40: GFLOPs: 18.4365. Time: 4792.6556 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #41: GFLOPs: 41.9329. Time: 2107.1744 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #42: GFLOPs: 20.9417. Time: 4219.3273 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #43: GFLOPs: 66.9524. Time: 1319.7435 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #44: GFLOPs: 4.9486. Time: 17855.6798 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #45: GFLOPs: 86.0758. Time: 1026.5361 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #46: GFLOPs: 22.0000. Time: 4016.3622 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #47: GFLOPs: 52.9439. Time: 1668.9352 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #48: GFLOPs: 66.5676. Time: 1327.3707 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #49: GFLOPs: 60.0734. Time: 1470.8655 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #50: GFLOPs: 3.7088. Time: 23824.6880 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #51: GFLOPs: 99.6088. Time: 887.0692 us. Best GFLOPs: 149.5028
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #52: GFLOPs: 218.7861. Time: 403.8645 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #53: GFLOPs: 24.3655. Time: 3626.4352 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #54: GFLOPs: 83.3674. Time: 1059.8857 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #55: GFLOPs: 8.6969. Time: 10159.9567 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #56: GFLOPs: 93.8976. Time: 941.0246 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #57: GFLOPs: 67.5979. Time: 1307.1399 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #58: GFLOPs: 8.3386. Time: 10596.4388 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #59: GFLOPs: 51.6411. Time: 1711.0392 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #60: GFLOPs: 7.3152. Time: 12078.9738 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #61: GFLOPs: 35.6280. Time: 2480.0705 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #62: GFLOPs: 31.4823. Time: 2806.6501 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #63: GFLOPs: 2.3058. Time: 38320.0177 us. Best GFLOPs: 218.7861
2024-04-29 17:06:52 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #64: GFLOPs: 46.9693. Time: 1881.2257 us. Best GFLOPs: 218.7861
2024-04-29 18:57:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:57:23 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 18:57:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 18:57:25 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 18:57:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 18:57:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 18:57:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 18:57:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1c4c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6551b78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xabbd048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f0c9d8)]: 0 failure(s)
2024-04-29 18:57:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9261  0.8891  0.8230  0.7892  0.7633  0.7571  0.7260  0.7259  0.7230  0.7207  0.7019  0.6968  0.6944  0.6907  0.6897  0.6870
[17 : 32]:	0.6869  0.6774  0.6743  0.6645  0.6577  0.6536  0.6453  0.6370  0.6343  0.6331  0.6299  0.6299  0.6285  0.6222  0.6163  0.6133
[33 : 48]:	0.6096  0.6069  0.6066  0.6051  0.6051  0.6034  0.6014  0.6006  0.5970  0.5954  0.5954  0.5954  0.5899  0.5897  0.5865  0.5863
[49 : 64]:	0.5851  0.5850  0.5839  0.5809  0.5782  0.5771  0.5763  0.5757  0.5748  0.5720  0.5700  0.5700  0.5694  0.5682  0.5670  0.5654
2024-04-29 18:57:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:57:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #65: GFLOPs: 109.7320. Time: 805.2343 us. Best GFLOPs: 218.7861
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #66: GFLOPs: 45.7397. Time: 1931.7989 us. Best GFLOPs: 218.7861
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #67: GFLOPs: 100.1686. Time: 882.1122 us. Best GFLOPs: 218.7861
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #68: GFLOPs: 284.6358. Time: 310.4316 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #69: GFLOPs: 110.5336. Time: 799.3940 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #70: GFLOPs: 57.6218. Time: 1533.4464 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #71: GFLOPs: 95.7065. Time: 923.2384 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #72: GFLOPs: 84.3485. Time: 1047.5573 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #73: GFLOPs: 208.8118. Time: 423.1558 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #74: GFLOPs: 241.6951. Time: 365.5843 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #75: GFLOPs: 101.3617. Time: 871.7291 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #76: GFLOPs: 236.0137. Time: 374.3848 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #77: GFLOPs: 92.3914. Time: 956.3658 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #78: GFLOPs: 86.3481. Time: 1023.2988 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #79: GFLOPs: 145.4989. Time: 607.2894 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #80: GFLOPs: 96.5126. Time: 915.5271 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #81: GFLOPs: 255.2307. Time: 346.1963 us. Best GFLOPs: 284.6358
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #82: GFLOPs: 290.5166. Time: 304.1476 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #83: GFLOPs: 89.9443. Time: 982.3845 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #84: GFLOPs: 106.2863. Time: 831.3387 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #85: GFLOPs: 252.6625. Time: 349.7153 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #86: GFLOPs: 140.9677. Time: 626.8099 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #87: GFLOPs: 124.4356. Time: 710.0858 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #88: GFLOPs: 144.5024. Time: 611.4771 us. Best GFLOPs: 290.5166
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #89: GFLOPs: 306.0688. Time: 288.6930 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #90: GFLOPs: 130.8351. Time: 675.3533 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #91: GFLOPs: 211.8910. Time: 417.0065 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #92: GFLOPs: 210.8534. Time: 419.0585 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #93: GFLOPs: 136.4240. Time: 647.6862 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #94: GFLOPs: 124.1742. Time: 711.5807 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #95: GFLOPs: 159.7583. Time: 553.0851 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #96: GFLOPs: 140.0706. Time: 630.8242 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #97: GFLOPs: 112.3350. Time: 786.5755 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #98: GFLOPs: 114.1211. Time: 774.2643 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #99: GFLOPs: 109.4588. Time: 807.2434 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #100: GFLOPs: 88.7503. Time: 995.6011 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #101: GFLOPs: 88.4474. Time: 999.0114 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #102: GFLOPs: 152.3895. Time: 579.8294 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #103: GFLOPs: 139.6896. Time: 632.5450 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #104: GFLOPs: 92.9844. Time: 950.2667 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #105: GFLOPs: 204.8032. Time: 431.4384 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #106: GFLOPs: 134.3476. Time: 657.6966 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #107: GFLOPs: 133.8557. Time: 660.1135 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #108: GFLOPs: 134.3651. Time: 657.6110 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #109: GFLOPs: 167.1662. Time: 528.5753 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #110: GFLOPs: 122.1677. Time: 723.2678 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #111: GFLOPs: 121.9780. Time: 724.3922 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #112: GFLOPs: 156.7938. Time: 563.5424 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #113: GFLOPs: 161.2920. Time: 547.8260 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #114: GFLOPs: 118.3890. Time: 746.3525 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #115: GFLOPs: 155.2160. Time: 569.2708 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #116: GFLOPs: 103.4907. Time: 853.7962 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #117: GFLOPs: 171.6283. Time: 514.8331 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #118: GFLOPs: 145.3820. Time: 607.7778 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #119: GFLOPs: 72.3264. Time: 1221.6823 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #120: GFLOPs: 128.0791. Time: 689.8857 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #121: GFLOPs: 138.1120. Time: 639.7701 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #122: GFLOPs: 74.3807. Time: 1187.9421 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #123: GFLOPs: 121.6602. Time: 726.2849 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #124: GFLOPs: 134.3454. Time: 657.7073 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #125: GFLOPs: 116.7959. Time: 756.5327 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #126: GFLOPs: 49.0441. Time: 1801.6420 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #127: GFLOPs: 4.4660. Time: 19785.0853 us. Best GFLOPs: 306.0688
2024-04-29 18:59:15 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_32] Trial #128: GFLOPs: 130.5831. Time: 676.6566 us. Best GFLOPs: 306.0688
