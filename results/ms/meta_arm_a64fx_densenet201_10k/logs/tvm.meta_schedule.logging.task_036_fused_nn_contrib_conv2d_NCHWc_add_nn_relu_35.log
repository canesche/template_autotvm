2024-04-29 14:03:14 [INFO] [task_scheduler.cc:160] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35"
2024-04-29 14:03:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1664), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:03:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:03:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:03:14 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:03:14 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 15:02:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:02:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 15:02:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 15:02:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 15:02:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 15:02:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 15:02:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 15:02:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 15:02:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9982  0.9982  0.9977  0.9970  0.9967  0.9965  0.9964  0.9956  0.9955  0.9944  0.9943  0.9941  0.9941  0.9940  0.9940
[17 : 32]:	0.9939  0.9934  0.9934  0.9929  0.9925  0.9919  0.9911  0.9906  0.9903  0.9899  0.9898  0.9896  0.9892  0.9886  0.9883  0.9878
[33 : 48]:	0.9867  0.9863  0.9858  0.9857  0.9852  0.9849  0.9834  0.9827  0.9819  0.9809  0.9807  0.9801  0.9796  0.9795  0.9788  0.9781
[49 : 64]:	0.9781  0.9780  0.9780  0.9778  0.9778  0.9777  0.9767  0.9766  0.9757  0.9746  0.9746  0.9742  0.9739  0.9732  0.9732  0.9729
2024-04-29 15:02:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:02:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #1: GFLOPs: 99.2183. Time: 842.0126 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #2: GFLOPs: 44.0654. Time: 1895.8869 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #3: GFLOPs: 54.6766. Time: 1527.9479 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #4: GFLOPs: 3.3759. Time: 24746.9848 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #5: GFLOPs: 92.8165. Time: 900.0878 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #6: GFLOPs: 65.9365. Time: 1267.0221 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #7: GFLOPs: 2.6108. Time: 31999.2412 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #8: GFLOPs: 52.9548. Time: 1577.6292 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #9: GFLOPs: 59.3590. Time: 1407.4197 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #10: GFLOPs: 73.4909. Time: 1136.7804 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #11: GFLOPs: 48.8268. Time: 1711.0080 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #13: GFLOPs: 97.9293. Time: 853.0951 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #14: GFLOPs: 4.6009. Time: 18157.9493 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #15: GFLOPs: 89.1138. Time: 937.4869 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #16: GFLOPs: 76.0031. Time: 1099.2061 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #17: GFLOPs: 17.1667. Time: 4866.5869 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #18: GFLOPs: 16.9028. Time: 4942.5651 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #19: GFLOPs: 70.8773. Time: 1178.6998 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #20: GFLOPs: 40.2182. Time: 2077.2426 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #21: GFLOPs: 33.6760. Time: 2480.7901 us. Best GFLOPs: 99.2183
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #22: GFLOPs: 100.0162. Time: 835.2951 us. Best GFLOPs: 100.0162
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #23: GFLOPs: 21.6001. Time: 3867.7109 us. Best GFLOPs: 100.0162
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #24: GFLOPs: 126.8555. Time: 658.5684 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #25: GFLOPs: 12.2949. Time: 6794.9404 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #26: GFLOPs: 2.7914. Time: 29928.7133 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #27: GFLOPs: 76.9351. Time: 1085.8895 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #28: GFLOPs: 120.6919. Time: 692.2011 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1664), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1664), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1664, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #30: GFLOPs: 42.5851. Time: 1961.7892 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #31: GFLOPs: 3.2936. Time: 25364.9155 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #32: GFLOPs: 4.6084. Time: 18128.3850 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #33: GFLOPs: 61.7579. Time: 1352.7516 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #34: GFLOPs: 26.7676. Time: 3121.0516 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #35: GFLOPs: 53.8186. Time: 1552.3083 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #36: GFLOPs: 39.5110. Time: 2114.4262 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #37: GFLOPs: 14.2951. Time: 5844.1687 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #38: GFLOPs: 3.3682. Time: 24803.3066 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #39: GFLOPs: 28.5850. Time: 2922.6131 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #40: GFLOPs: 4.1717. Time: 20025.9579 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #41: GFLOPs: 73.3317. Time: 1139.2493 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #42: GFLOPs: 87.4327. Time: 955.5129 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #43: GFLOPs: 79.8612. Time: 1046.1032 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #44: GFLOPs: 112.5627. Time: 742.1909 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #45: GFLOPs: 55.5806. Time: 1503.0963 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(52) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #47: GFLOPs: 55.6105. Time: 1502.2901 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #48: GFLOPs: 89.7242. Time: 931.1089 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #49: GFLOPs: 75.3852. Time: 1108.2159 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #50: GFLOPs: 1.9999. Time: 41773.8320 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #51: GFLOPs: 68.7391. Time: 1215.3639 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #52: GFLOPs: 24.9000. Time: 3355.1445 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #53: GFLOPs: 119.9424. Time: 696.5262 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #54: GFLOPs: 70.8078. Time: 1179.8561 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #55: GFLOPs: 5.5759. Time: 14982.9634 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #56: GFLOPs: 14.9031. Time: 5605.7664 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #57: GFLOPs: 84.7164. Time: 986.1495 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #58: GFLOPs: 74.2486. Time: 1125.1806 us. Best GFLOPs: 126.8555
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #59: GFLOPs: 180.2585. Time: 463.4625 us. Best GFLOPs: 180.2585
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #60: GFLOPs: 34.4896. Time: 2422.2694 us. Best GFLOPs: 180.2585
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #61: GFLOPs: 177.7405. Time: 470.0282 us. Best GFLOPs: 180.2585
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #62: GFLOPs: 57.5063. Time: 1452.7631 us. Best GFLOPs: 180.2585
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #63: GFLOPs: 6.1128. Time: 13666.9095 us. Best GFLOPs: 180.2585
2024-04-29 17:07:08 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #64: GFLOPs: 63.1221. Time: 1323.5156 us. Best GFLOPs: 180.2585
2024-04-29 18:31:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:31:30 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 18:31:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 18:31:33 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 18:31:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 18:31:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 18:31:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 18:31:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69bf498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe66488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x996e658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xac834f8)]: 0 failure(s)
2024-04-29 18:31:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8002  0.7923  0.7921  0.7808  0.7808  0.7387  0.7280  0.7160  0.7125  0.6987  0.6869  0.6853  0.6848  0.6816  0.6771  0.6743
[17 : 32]:	0.6718  0.6712  0.6658  0.6651  0.6643  0.6600  0.6587  0.6578  0.6549  0.6528  0.6527  0.6527  0.6523  0.6489  0.6482  0.6477
[33 : 48]:	0.6427  0.6415  0.6415  0.6415  0.6393  0.6391  0.6377  0.6351  0.6349  0.6349  0.6339  0.6328  0.6324  0.6318  0.6311  0.6292
[49 : 64]:	0.6285  0.6281  0.6280  0.6275  0.6258  0.6258  0.6233  0.6233  0.6232  0.6227  0.6218  0.6202  0.6197  0.6189  0.6157  0.6157
2024-04-29 18:31:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:31:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #65: GFLOPs: 76.1054. Time: 1097.7288 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #66: GFLOPs: 50.1051. Time: 1667.3563 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #67: GFLOPs: 127.2720. Time: 656.4132 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #68: GFLOPs: 154.0785. Time: 542.2108 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #69: GFLOPs: 154.0031. Time: 542.4763 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #70: GFLOPs: 108.2831. Time: 771.5246 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #71: GFLOPs: 129.4189. Time: 645.5241 us. Best GFLOPs: 180.2585
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #72: GFLOPs: 238.5148. Time: 350.2636 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #73: GFLOPs: 105.3090. Time: 793.3131 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #74: GFLOPs: 152.7969. Time: 546.7588 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #75: GFLOPs: 224.5888. Time: 371.9822 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #76: GFLOPs: 25.4416. Time: 3283.7181 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #77: GFLOPs: 135.7114. Time: 615.5935 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #78: GFLOPs: 201.3176. Time: 414.9813 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #79: GFLOPs: 183.9145. Time: 454.2494 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #80: GFLOPs: 127.4601. Time: 655.4445 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #81: GFLOPs: 105.9254. Time: 788.6966 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #82: GFLOPs: 205.2569. Time: 407.0169 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #83: GFLOPs: 56.7695. Time: 1471.6185 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #84: GFLOPs: 154.8683. Time: 539.4457 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #85: GFLOPs: 104.8098. Time: 797.0921 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #86: GFLOPs: 104.5599. Time: 798.9966 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #87: GFLOPs: 123.9704. Time: 673.8950 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #88: GFLOPs: 168.2625. Time: 496.5043 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #89: GFLOPs: 154.5146. Time: 540.6804 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #90: GFLOPs: 142.1201. Time: 587.8342 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #91: GFLOPs: 115.5839. Time: 722.7911 us. Best GFLOPs: 238.5148
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #92: GFLOPs: 357.1911. Time: 233.8889 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #93: GFLOPs: 121.8356. Time: 685.7029 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #94: GFLOPs: 137.5204. Time: 607.4955 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #95: GFLOPs: 147.4847. Time: 566.4524 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #96: GFLOPs: 143.2074. Time: 583.3709 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #97: GFLOPs: 85.9791. Time: 971.6674 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #98: GFLOPs: 111.5733. Time: 748.7724 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #99: GFLOPs: 116.4145. Time: 717.6343 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #100: GFLOPs: 111.3774. Time: 750.0898 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #101: GFLOPs: 155.0920. Time: 538.6676 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #102: GFLOPs: 178.0004. Time: 469.3420 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #103: GFLOPs: 274.1890. Time: 304.6915 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #104: GFLOPs: 152.2556. Time: 548.7026 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #105: GFLOPs: 116.7629. Time: 715.4930 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #106: GFLOPs: 76.6089. Time: 1090.5141 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #107: GFLOPs: 204.4441. Time: 408.6351 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #108: GFLOPs: 167.0021. Time: 500.2515 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #109: GFLOPs: 104.6292. Time: 798.4675 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #110: GFLOPs: 95.6250. Time: 873.6530 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #111: GFLOPs: 73.6327. Time: 1134.5921 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #112: GFLOPs: 112.1296. Time: 745.0576 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #113: GFLOPs: 176.2769. Time: 473.9306 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #114: GFLOPs: 80.0727. Time: 1043.3396 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #115: GFLOPs: 74.6384. Time: 1119.3043 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #116: GFLOPs: 181.1982. Time: 461.0590 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #117: GFLOPs: 106.1555. Time: 786.9875 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #118: GFLOPs: 149.1547. Time: 560.1100 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #119: GFLOPs: 206.0689. Time: 405.4132 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #120: GFLOPs: 92.4766. Time: 903.3970 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #121: GFLOPs: 86.6789. Time: 963.8218 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #122: GFLOPs: 115.6955. Time: 722.0940 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #123: GFLOPs: 146.6873. Time: 569.5316 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #124: GFLOPs: 81.5179. Time: 1024.8424 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #125: GFLOPs: 106.5569. Time: 784.0225 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #126: GFLOPs: 170.3570. Time: 490.4000 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #127: GFLOPs: 105.5021. Time: 791.8617 us. Best GFLOPs: 357.1911
2024-04-29 18:33:36 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(104), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(1664), ic_0 * T.int64(16) + ic_1)
                                v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[104, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b106)
b133 = sch.decompose_reduction(block=b106, loop=l117)
