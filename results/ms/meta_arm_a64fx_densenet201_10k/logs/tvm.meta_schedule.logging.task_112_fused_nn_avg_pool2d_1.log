2024-04-29 14:07:53 [INFO] [task_scheduler.cc:160] Initializing Task #112: "fused_nn_avg_pool2d_1"
2024-04-29 14:07:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 14:07:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
                for ax0_1 in range(T.int64(2)):
                    for ax0_2, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("pool_sum_rf"):
                            vrv0_rv1_fused_0 = T.axis.spatial(T.int64(2), ax0_1 + ax0_2)
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_1)
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3 + ax4_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), ax6)
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                    for ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3 + ax4_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=5)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4), T.int64(2)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(14), T.int64(14), T.int64(4), T.int64(2)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3 + ax3_1)
                        v_ax4, v_rv0, v_rv1 = T.axis.remap("SRR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 16:54:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:54:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:54:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x113b0748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x136b2bd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbf44c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb6c27c8)]: 0 failure(s)
2024-04-29 16:54:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:55:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x113b0748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x136b2bd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbf44c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb6c27c8)]: 0 failure(s)
2024-04-29 16:55:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x113b0748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x136b2bd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbf44c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb6c27c8)]: 0 failure(s)
2024-04-29 16:55:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x113b0748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x136b2bd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbf44c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb6c27c8)]: 0 failure(s)
2024-04-29 16:55:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x113b0748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x136b2bd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xbf44c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb6c27c8)]: 0 failure(s)
2024-04-29 16:55:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9958  0.9938  0.9924  0.9920  0.9917  0.9885  0.9870  0.9869  0.9805  0.9804  0.9800  0.9784  0.9737  0.9736  0.9645
[17 : 32]:	0.9642  0.9635  0.9579  0.9570  0.9511  0.9483  0.9480  0.9453  0.9364  0.9333  0.9325  0.9299  0.9277  0.9257  0.9240  0.9140
[33 : 48]:	0.9129  0.9104  0.9096  0.9088  0.9011  0.8961  0.8953  0.8923  0.8913  0.8910  0.8904  0.8900  0.8898  0.8876  0.8853  0.8782
[49 : 64]:	0.8746  0.8736  0.8721  0.8662  0.8661  0.8661  0.8651  0.8630  0.8624  0.8622  0.8575  0.8524  0.8519  0.8518  0.8511  0.8509
2024-04-29 16:55:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:55:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #1: GFLOPs: 57.7713. Time: 21.7132 us. Best GFLOPs: 57.7713
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #2: GFLOPs: 50.1597. Time: 25.0081 us. Best GFLOPs: 57.7713
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #3: GFLOPs: 32.0859. Time: 39.0951 us. Best GFLOPs: 57.7713
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #4: GFLOPs: 44.5359. Time: 28.1661 us. Best GFLOPs: 57.7713
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #5: GFLOPs: 85.5292. Time: 14.6663 us. Best GFLOPs: 85.5292
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #6: GFLOPs: 117.1293. Time: 10.7095 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #7: GFLOPs: 112.2087. Time: 11.1792 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #8: GFLOPs: 50.8326. Time: 24.6771 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #9: GFLOPs: 54.3234. Time: 23.0913 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #10: GFLOPs: 50.7451. Time: 24.7196 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #11: GFLOPs: 78.4028. Time: 15.9994 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #12: GFLOPs: 95.5332. Time: 13.1305 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #13: GFLOPs: 44.2265. Time: 28.3631 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #14: GFLOPs: 31.0968. Time: 40.3386 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #15: GFLOPs: 37.2472. Time: 33.6777 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #16: GFLOPs: 105.9505. Time: 11.8395 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #17: GFLOPs: 26.2049. Time: 47.8690 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #18: GFLOPs: 112.3543. Time: 11.1647 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #19: GFLOPs: 109.6736. Time: 11.4376 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #20: GFLOPs: 40.8467. Time: 30.7100 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #21: GFLOPs: 80.5962. Time: 15.5640 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #22: GFLOPs: 109.0598. Time: 11.5020 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #23: GFLOPs: 107.4282. Time: 11.6766 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #24: GFLOPs: 91.7029. Time: 13.6790 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #25: GFLOPs: 50.8812. Time: 24.6535 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #26: GFLOPs: 97.4860. Time: 12.8675 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #27: GFLOPs: 28.3043. Time: 44.3184 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #28: GFLOPs: 54.5136. Time: 23.0108 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #29: GFLOPs: 73.8318. Time: 16.9900 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #30: GFLOPs: 28.6142. Time: 43.8383 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #31: GFLOPs: 48.3306. Time: 25.9546 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #32: GFLOPs: 26.4303. Time: 47.4607 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #33: GFLOPs: 50.9602. Time: 24.6153 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #34: GFLOPs: 69.9968. Time: 17.9208 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #35: GFLOPs: 103.7474. Time: 12.0909 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #36: GFLOPs: 48.2945. Time: 25.9740 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #37: GFLOPs: 73.7873. Time: 17.0002 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #38: GFLOPs: 26.8899. Time: 46.6496 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #39: GFLOPs: 108.7815. Time: 11.5314 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #40: GFLOPs: 102.8911. Time: 12.1915 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #41: GFLOPs: 31.1072. Time: 40.3250 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #42: GFLOPs: 36.4112. Time: 34.4510 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #43: GFLOPs: 97.2726. Time: 12.8957 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #44: GFLOPs: 30.6454. Time: 40.9327 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #45: GFLOPs: 28.3314. Time: 44.2759 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #46: GFLOPs: 101.0732. Time: 12.4108 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #47: GFLOPs: 89.2651. Time: 14.0525 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #48: GFLOPs: 40.9241. Time: 30.6519 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #49: GFLOPs: 65.9664. Time: 19.0157 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #50: GFLOPs: 92.9369. Time: 13.4973 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #51: GFLOPs: 41.4503. Time: 30.2627 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #52: GFLOPs: 74.7228. Time: 16.7874 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #53: GFLOPs: 35.6768. Time: 35.1601 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #54: GFLOPs: 31.1597. Time: 40.2571 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #55: GFLOPs: 41.2002. Time: 30.4465 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #56: GFLOPs: 76.4322. Time: 16.4119 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #57: GFLOPs: 49.7278. Time: 25.2253 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #58: GFLOPs: 48.4169. Time: 25.9083 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #59: GFLOPs: 106.2270. Time: 11.8087 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #60: GFLOPs: 95.9164. Time: 13.0781 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #61: GFLOPs: 83.6786. Time: 14.9907 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #62: GFLOPs: 22.1721. Time: 56.5756 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #63: GFLOPs: 37.1608. Time: 33.7560 us. Best GFLOPs: 117.1293
2024-04-29 17:18:05 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_avg_pool2d_1] Trial #64: GFLOPs: 57.1995. Time: 21.9303 us. Best GFLOPs: 117.1293
