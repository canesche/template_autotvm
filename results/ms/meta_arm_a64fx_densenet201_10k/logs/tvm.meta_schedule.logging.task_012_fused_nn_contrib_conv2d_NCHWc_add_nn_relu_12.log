2024-04-29 14:01:41 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12"
2024-04-29 14:01:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(376), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(376), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1504), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:01:41 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:01:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(376), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(376), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(376), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1504), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[376, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:01:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(376), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(376), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(376), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1504), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[376, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:01:41 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(376), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(376), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(376), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1504), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[376, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:26:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:26:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:26:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x95542f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xee84c58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1079bbf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa6d5848)]: 0 failure(s)
2024-04-29 14:26:18 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:26:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x95542f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xee84c58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1079bbf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa6d5848)]: 0 failure(s)
2024-04-29 14:26:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x95542f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xee84c58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1079bbf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa6d5848)]: 0 failure(s)
2024-04-29 14:26:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x95542f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xee84c58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1079bbf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa6d5848)]: 0 failure(s)
2024-04-29 14:26:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x95542f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xee84c58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1079bbf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa6d5848)]: 0 failure(s)
2024-04-29 14:26:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9992  0.9991  0.9990  0.9982  0.9981  0.9969  0.9968  0.9954  0.9953  0.9946  0.9945  0.9942  0.9940  0.9939  0.9931
[17 : 32]:	0.9931  0.9931  0.9929  0.9925  0.9923  0.9911  0.9907  0.9906  0.9902  0.9896  0.9896  0.9893  0.9890  0.9889  0.9885  0.9883
[33 : 48]:	0.9882  0.9880  0.9877  0.9876  0.9872  0.9868  0.9864  0.9842  0.9839  0.9838  0.9830  0.9829  0.9820  0.9816  0.9811  0.9810
[49 : 64]:	0.9808  0.9797  0.9793  0.9793  0.9791  0.9788  0.9780  0.9777  0.9776  0.9773  0.9772  0.9772  0.9771  0.9768  0.9767  0.9754
2024-04-29 14:26:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:26:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #1: GFLOPs: 107.5888. Time: 175.4710 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #2: GFLOPs: 1.3322. Time: 14170.6794 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #3: GFLOPs: 1.8501. Time: 10204.3230 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #4: GFLOPs: 49.7402. Time: 379.5466 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #5: GFLOPs: 53.4105. Time: 353.4648 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #6: GFLOPs: 8.0328. Time: 2350.1902 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #7: GFLOPs: 59.9684. Time: 314.8111 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #8: GFLOPs: 89.9009. Time: 209.9948 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #9: GFLOPs: 45.2114. Time: 417.5654 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #10: GFLOPs: 0.5339. Time: 35357.3157 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #11: GFLOPs: 27.5615. Time: 684.9677 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(376), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(376), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(752), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1504), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(98)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[752, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #13: GFLOPs: 58.2482. Time: 324.1082 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #14: GFLOPs: 97.8031. Time: 193.0279 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #15: GFLOPs: 14.1890. Time: 1330.5184 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #16: GFLOPs: 0.9123. Time: 20693.2086 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #17: GFLOPs: 21.8158. Time: 865.3701 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #18: GFLOPs: 56.6456. Time: 333.2775 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #19: GFLOPs: 18.3722. Time: 1027.5715 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #20: GFLOPs: 29.3147. Time: 644.0016 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #21: GFLOPs: 15.6137. Time: 1209.1111 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #22: GFLOPs: 4.9182. Time: 3838.5143 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #23: GFLOPs: 21.9611. Time: 859.6437 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #24: GFLOPs: 34.9311. Time: 540.4559 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #25: GFLOPs: 95.9116. Time: 196.8346 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #26: GFLOPs: 2.2188. Time: 8508.4083 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #27: GFLOPs: 52.6705. Time: 358.4303 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #28: GFLOPs: 62.9903. Time: 299.7081 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #29: GFLOPs: 0.5789. Time: 32611.0310 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #30: GFLOPs: 2.4088. Time: 7837.5398 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #31: GFLOPs: 101.6351. Time: 185.7499 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #32: GFLOPs: 7.9853. Time: 2364.1978 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #33: GFLOPs: 92.0642. Time: 205.0603 us. Best GFLOPs: 107.5888
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #34: GFLOPs: 121.8577. Time: 154.9243 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #35: GFLOPs: 13.4075. Time: 1408.0690 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #36: GFLOPs: 72.1513. Time: 261.6546 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #37: GFLOPs: 63.8911. Time: 295.4826 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #38: GFLOPs: 71.1783. Time: 265.2314 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #39: GFLOPs: 3.4092. Time: 5537.6294 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #40: GFLOPs: 50.2642. Time: 375.5896 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #41: GFLOPs: 73.5178. Time: 256.7910 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #42: GFLOPs: 3.2636. Time: 5784.6099 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #43: GFLOPs: 6.8603. Time: 2751.8832 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #44: GFLOPs: 4.6168. Time: 4089.0956 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #45: GFLOPs: 89.4535. Time: 211.0450 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #46: GFLOPs: 6.6391. Time: 2843.5679 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #47: GFLOPs: 92.5976. Time: 203.8792 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #48: GFLOPs: 13.9190. Time: 1356.3286 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #49: GFLOPs: 45.9655. Time: 410.7153 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #50: GFLOPs: 75.3889. Time: 250.4178 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #51: GFLOPs: 3.8378. Time: 4919.1291 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #52: GFLOPs: 2.2998. Time: 8208.9272 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #53: GFLOPs: 8.8968. Time: 2121.9650 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #54: GFLOPs: 109.0345. Time: 173.1444 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #55: GFLOPs: 14.7149. Time: 1282.9647 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #56: GFLOPs: 69.1438. Time: 273.0355 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #57: GFLOPs: 0.4792. Time: 39396.7300 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #58: GFLOPs: 4.9780. Time: 3792.4190 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #59: GFLOPs: 86.3206. Time: 218.7046 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #60: GFLOPs: 45.6406. Time: 413.6391 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #61: GFLOPs: 15.0737. Time: 1252.4296 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #62: GFLOPs: 28.8575. Time: 654.2057 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #63: GFLOPs: 56.0232. Time: 336.9801 us. Best GFLOPs: 121.8577
2024-04-29 17:05:28 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #64: GFLOPs: 13.6261. Time: 1385.4824 us. Best GFLOPs: 121.8577
