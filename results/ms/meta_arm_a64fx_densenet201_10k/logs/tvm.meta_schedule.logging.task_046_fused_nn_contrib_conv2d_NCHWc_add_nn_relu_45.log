2024-04-29 14:03:54 [INFO] [task_scheduler.cc:160] Initializing Task #46: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45"
2024-04-29 14:03:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(336), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(336), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1344), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:03:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:03:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(336), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(336), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(21), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1344), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[21, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:03:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(336), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(336), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(21), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1344), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[21, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:03:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(336), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(336), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(21), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1344), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[21, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 15:18:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:18:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 15:18:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xce4a5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc6d4f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd862958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad34b98)]: 0 failure(s)
2024-04-29 15:18:13 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 15:18:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xce4a5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc6d4f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd862958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad34b98)]: 0 failure(s)
2024-04-29 15:18:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xce4a5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc6d4f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd862958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad34b98)]: 0 failure(s)
2024-04-29 15:18:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xce4a5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc6d4f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd862958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad34b98)]: 0 failure(s)
2024-04-29 15:18:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xce4a5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc6d4f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd862958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad34b98)]: 0 failure(s)
2024-04-29 15:18:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9982  0.9966  0.9963  0.9961  0.9959  0.9953  0.9950  0.9947  0.9936  0.9934  0.9932  0.9925  0.9915  0.9913  0.9904
[17 : 32]:	0.9902  0.9899  0.9896  0.9895  0.9885  0.9883  0.9878  0.9878  0.9866  0.9855  0.9850  0.9850  0.9847  0.9824  0.9822  0.9822
[33 : 48]:	0.9822  0.9816  0.9806  0.9789  0.9786  0.9785  0.9784  0.9773  0.9772  0.9770  0.9767  0.9762  0.9760  0.9750  0.9750  0.9749
[49 : 64]:	0.9746  0.9739  0.9735  0.9724  0.9719  0.9716  0.9712  0.9712  0.9703  0.9697  0.9692  0.9679  0.9675  0.9674  0.9670  0.9666
2024-04-29 15:18:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:18:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #1: GFLOPs: 10.1403. Time: 6655.2660 us. Best GFLOPs: 10.1403
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #2: GFLOPs: 42.8813. Time: 1573.8019 us. Best GFLOPs: 42.8813
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #3: GFLOPs: 3.3765. Time: 19987.3567 us. Best GFLOPs: 42.8813
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #4: GFLOPs: 7.0791. Time: 9533.1719 us. Best GFLOPs: 42.8813
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #5: GFLOPs: 5.3272. Time: 12668.3428 us. Best GFLOPs: 42.8813
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #6: GFLOPs: 112.8787. Time: 597.8695 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #7: GFLOPs: 110.6118. Time: 610.1225 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #8: GFLOPs: 3.4697. Time: 19450.1735 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #9: GFLOPs: 46.3320. Time: 1456.5903 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #10: GFLOPs: 38.1432. Time: 1769.2969 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #11: GFLOPs: 2.3891. Time: 28247.4340 us. Best GFLOPs: 112.8787
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #12: GFLOPs: 173.8767. Time: 388.1298 us. Best GFLOPs: 173.8767
2024-04-29 17:08:03 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #13: GFLOPs: 65.6149. Time: 1028.5281 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #14: GFLOPs: 54.7235. Time: 1233.2301 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #15: GFLOPs: 56.2073. Time: 1200.6754 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #16: GFLOPs: 12.7389. Time: 5297.6981 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #17: GFLOPs: 68.9438. Time: 978.8658 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #18: GFLOPs: 91.5636. Time: 737.0474 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #19: GFLOPs: 44.6572. Time: 1511.2174 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #20: GFLOPs: 143.2430. Time: 471.1345 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #21: GFLOPs: 23.6766. Time: 2850.3506 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #22: GFLOPs: 4.7106. Time: 14326.6399 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #23: GFLOPs: 92.7169. Time: 727.8791 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #24: GFLOPs: 105.2163. Time: 641.4096 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #25: GFLOPs: 137.6809. Time: 490.1676 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #26: GFLOPs: 74.3763. Time: 907.3685 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #27: GFLOPs: 74.6193. Time: 904.4140 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #28: GFLOPs: 8.9731. Time: 7521.0126 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #29: GFLOPs: 13.0498. Time: 5171.4689 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #30: GFLOPs: 46.6054. Time: 1448.0440 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #31: GFLOPs: 37.2384. Time: 1812.2887 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #32: GFLOPs: 52.2244. Time: 1292.2454 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #33: GFLOPs: 105.0978. Time: 642.1324 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #34: GFLOPs: 86.0343. Time: 784.4165 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #35: GFLOPs: 68.1515. Time: 990.2463 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #36: GFLOPs: 73.4624. Time: 918.6566 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #37: GFLOPs: 2.3154. Time: 29147.1750 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #38: GFLOPs: 10.2108. Time: 6609.3400 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #39: GFLOPs: 1.5781. Time: 42764.9360 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #40: GFLOPs: 7.6603. Time: 8809.9685 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #41: GFLOPs: 32.2588. Time: 2092.0438 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #42: GFLOPs: 25.1054. Time: 2688.1328 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #43: GFLOPs: 91.6221. Time: 736.5765 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #44: GFLOPs: 107.2089. Time: 629.4880 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #45: GFLOPs: 45.1241. Time: 1495.5793 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #46: GFLOPs: 28.9622. Time: 2330.1688 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:121] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(336), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(336), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(84), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1344), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[84, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=448)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #48: GFLOPs: 3.9405. Time: 17126.3835 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #49: GFLOPs: 71.7383. Time: 940.7355 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #50: GFLOPs: 34.0205. Time: 1983.7085 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #51: GFLOPs: 11.5378. Time: 5849.1890 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #52: GFLOPs: 45.7172. Time: 1476.1765 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #53: GFLOPs: 94.1887. Time: 716.5051 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #54: GFLOPs: 71.3009. Time: 946.5057 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #55: GFLOPs: 85.7957. Time: 786.5983 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #56: GFLOPs: 103.1871. Time: 654.0228 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #57: GFLOPs: 21.6965. Time: 3110.4849 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #58: GFLOPs: 17.4727. Time: 3862.4012 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #59: GFLOPs: 112.1909. Time: 601.5346 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #60: GFLOPs: 54.8038. Time: 1231.4245 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #61: GFLOPs: 57.5977. Time: 1171.6906 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #62: GFLOPs: 79.8158. Time: 845.5309 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #63: GFLOPs: 90.7519. Time: 743.6398 us. Best GFLOPs: 173.8767
2024-04-29 17:08:04 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #64: GFLOPs: 86.1769. Time: 783.1181 us. Best GFLOPs: 173.8767
