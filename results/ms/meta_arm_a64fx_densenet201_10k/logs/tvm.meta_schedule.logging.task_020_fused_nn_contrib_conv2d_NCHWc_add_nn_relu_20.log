2024-04-29 14:02:12 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20"
2024-04-29 14:02:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(312), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(312), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1248), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:02:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:02:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(312), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(312), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1248), ic_0 * T.int64(52) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:02:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(312), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(312), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1248), ic_0 * T.int64(52) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:02:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(312), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(312), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1248), ic_0 * T.int64(52) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:38:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:38:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:38:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69b3228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9a2b548)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcf57e08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x133bdd98)]: 0 failure(s)
2024-04-29 14:38:22 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:38:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69b3228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9a2b548)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcf57e08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x133bdd98)]: 0 failure(s)
2024-04-29 14:38:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69b3228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9a2b548)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcf57e08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x133bdd98)]: 0 failure(s)
2024-04-29 14:38:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69b3228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9a2b548)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcf57e08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x133bdd98)]: 0 failure(s)
2024-04-29 14:38:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69b3228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9a2b548)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcf57e08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x133bdd98)]: 0 failure(s)
2024-04-29 14:38:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9991  0.9991  0.9990  0.9985  0.9984  0.9983  0.9975  0.9974  0.9972  0.9958  0.9950  0.9948  0.9946  0.9945  0.9941
[17 : 32]:	0.9933  0.9931  0.9930  0.9927  0.9923  0.9914  0.9900  0.9897  0.9893  0.9891  0.9891  0.9884  0.9884  0.9883  0.9878  0.9867
[33 : 48]:	0.9856  0.9856  0.9855  0.9850  0.9841  0.9832  0.9827  0.9827  0.9825  0.9819  0.9813  0.9798  0.9787  0.9787  0.9776  0.9763
[49 : 64]:	0.9760  0.9753  0.9749  0.9747  0.9739  0.9738  0.9735  0.9728  0.9725  0.9718  0.9718  0.9707  0.9706  0.9705  0.9704  0.9702
2024-04-29 14:38:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:38:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #1: GFLOPs: 35.2286. Time: 444.7373 us. Best GFLOPs: 35.2286
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #2: GFLOPs: 0.3293. Time: 47581.0573 us. Best GFLOPs: 35.2286
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #3: GFLOPs: 11.1828. Time: 1401.0311 us. Best GFLOPs: 35.2286
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #4: GFLOPs: 6.4214. Time: 2439.8911 us. Best GFLOPs: 35.2286
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #5: GFLOPs: 36.6205. Time: 427.8334 us. Best GFLOPs: 36.6205
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #6: GFLOPs: 88.1875. Time: 177.6606 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #7: GFLOPs: 53.4333. Time: 293.2151 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #8: GFLOPs: 16.3554. Time: 957.9394 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #9: GFLOPs: 34.6612. Time: 452.0168 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #10: GFLOPs: 5.7456. Time: 2726.8438 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #11: GFLOPs: 11.3247. Time: 1383.4789 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #12: GFLOPs: 0.8964. Time: 17478.0874 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #13: GFLOPs: 0.3901. Time: 40167.1447 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #14: GFLOPs: 66.8579. Time: 234.3397 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #15: GFLOPs: 11.5044. Time: 1361.8697 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #16: GFLOPs: 70.0560. Time: 223.6420 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #17: GFLOPs: 5.8160. Time: 2693.8657 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #18: GFLOPs: 67.7933. Time: 231.1063 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #19: GFLOPs: 0.9493. Time: 16503.5469 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #20: GFLOPs: 2.1025. Time: 7451.7824 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #21: GFLOPs: 27.9389. Time: 560.7755 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #22: GFLOPs: 10.0701. Time: 1555.8325 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #23: GFLOPs: 50.5610. Time: 309.8722 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #24: GFLOPs: 72.3461. Time: 216.5626 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #25: GFLOPs: 21.0373. Time: 744.7479 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #26: GFLOPs: 16.6837. Time: 939.0880 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #27: GFLOPs: 20.0456. Time: 781.5903 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #28: GFLOPs: 17.4916. Time: 895.7140 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #29: GFLOPs: 2.3313. Time: 6720.4827 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #30: GFLOPs: 5.4479. Time: 2875.8520 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #31: GFLOPs: 8.2485. Time: 1899.4415 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #32: GFLOPs: 7.1351. Time: 2195.8133 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #33: GFLOPs: 22.4974. Time: 696.4117 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #34: GFLOPs: 18.3113. Time: 855.6186 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #35: GFLOPs: 9.8004. Time: 1598.6600 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #36: GFLOPs: 20.9332. Time: 748.4500 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #37: GFLOPs: 39.8974. Time: 392.6936 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #38: GFLOPs: 3.8448. Time: 4074.9372 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #39: GFLOPs: 63.3502. Time: 247.3150 us. Best GFLOPs: 88.1875
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #40: GFLOPs: 95.6439. Time: 163.8103 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #41: GFLOPs: 95.4293. Time: 164.1787 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #42: GFLOPs: 68.1995. Time: 229.7297 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #43: GFLOPs: 0.9132. Time: 17157.3235 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #44: GFLOPs: 52.7947. Time: 296.7621 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #45: GFLOPs: 37.3561. Time: 419.4083 us. Best GFLOPs: 95.6439
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #46: GFLOPs: 111.4749. Time: 140.5469 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #47: GFLOPs: 3.1078. Time: 5041.3525 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #48: GFLOPs: 10.6906. Time: 1465.5295 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #49: GFLOPs: 6.9885. Time: 2241.9058 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #50: GFLOPs: 3.3663. Time: 4654.1762 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #51: GFLOPs: 98.7022. Time: 158.7345 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #52: GFLOPs: 75.7089. Time: 206.9433 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #53: GFLOPs: 98.2477. Time: 159.4689 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #54: GFLOPs: 10.6771. Time: 1467.3873 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #55: GFLOPs: 31.9117. Time: 490.9635 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #56: GFLOPs: 20.5013. Time: 764.2172 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #57: GFLOPs: 0.2415. Time: 64879.7453 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #58: GFLOPs: 92.4876. Time: 169.4005 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #59: GFLOPs: 1.9232. Time: 8146.6738 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #60: GFLOPs: 48.5467. Time: 322.7293 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #61: GFLOPs: 15.1889. Time: 1031.5090 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #62: GFLOPs: 18.4804. Time: 847.7894 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #63: GFLOPs: 7.8848. Time: 1987.0425 us. Best GFLOPs: 111.4749
2024-04-29 17:05:55 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #64: GFLOPs: 0.9431. Time: 16612.5721 us. Best GFLOPs: 111.4749
