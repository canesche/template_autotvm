2024-04-29 14:02:40 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27"
2024-04-29 14:02:40 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:02:40 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:02:40 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:02:40 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:02:40 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:48:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:48:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:48:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x134b0898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12513148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x656fb68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd0c56c8)]: 0 failure(s)
2024-04-29 14:48:43 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:48:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x134b0898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12513148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x656fb68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd0c56c8)]: 0 failure(s)
2024-04-29 14:48:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x134b0898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12513148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x656fb68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd0c56c8)]: 0 failure(s)
2024-04-29 14:48:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x134b0898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12513148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x656fb68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd0c56c8)]: 0 failure(s)
2024-04-29 14:48:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x134b0898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12513148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x656fb68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd0c56c8)]: 0 failure(s)
2024-04-29 14:48:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9982  0.9981  0.9980  0.9976  0.9971  0.9962  0.9948  0.9946  0.9941  0.9941  0.9939  0.9937  0.9934  0.9934  0.9926
[17 : 32]:	0.9926  0.9925  0.9925  0.9922  0.9917  0.9917  0.9912  0.9909  0.9906  0.9906  0.9902  0.9901  0.9887  0.9877  0.9875  0.9870
[33 : 48]:	0.9862  0.9854  0.9847  0.9846  0.9844  0.9843  0.9837  0.9827  0.9825  0.9823  0.9818  0.9815  0.9809  0.9806  0.9802  0.9797
[49 : 64]:	0.9795  0.9795  0.9792  0.9786  0.9785  0.9781  0.9777  0.9772  0.9762  0.9761  0.9758  0.9753  0.9745  0.9739  0.9713  0.9702
2024-04-29 14:48:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:48:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #1: GFLOPs: 66.4731. Time: 193.4255 us. Best GFLOPs: 66.4731
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #2: GFLOPs: 36.3224. Time: 353.9857 us. Best GFLOPs: 66.4731
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #3: GFLOPs: 1.5243. Time: 8434.8348 us. Best GFLOPs: 66.4731
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #4: GFLOPs: 12.4698. Time: 1031.1013 us. Best GFLOPs: 66.4731
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #5: GFLOPs: 8.9777. Time: 1432.1695 us. Best GFLOPs: 66.4731
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #6: GFLOPs: 111.8106. Time: 114.9945 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #7: GFLOPs: 9.9627. Time: 1290.5684 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #8: GFLOPs: 47.2318. Time: 272.2233 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #9: GFLOPs: 43.4134. Time: 296.1669 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #10: GFLOPs: 1.7833. Time: 7210.1423 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #11: GFLOPs: 27.8741. Time: 461.2741 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #12: GFLOPs: 2.2438. Time: 5730.2229 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #13: GFLOPs: 25.3507. Time: 507.1884 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #14: GFLOPs: 7.3476. Time: 1749.8937 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #15: GFLOPs: 86.0631. Time: 149.3973 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #16: GFLOPs: 9.5421. Time: 1347.4567 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #17: GFLOPs: 45.7302. Time: 281.1620 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #18: GFLOPs: 24.3132. Time: 528.8314 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #19: GFLOPs: 39.4358. Time: 326.0387 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #20: GFLOPs: 2.2957. Time: 5600.7739 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #21: GFLOPs: 3.2348. Time: 3974.7305 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #22: GFLOPs: 47.9226. Time: 268.2992 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #23: GFLOPs: 8.5509. Time: 1503.6561 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #24: GFLOPs: 12.8942. Time: 997.1629 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #25: GFLOPs: 23.4055. Time: 549.3413 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #26: GFLOPs: 41.8635. Time: 307.1318 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #27: GFLOPs: 8.9604. Time: 1434.9306 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #28: GFLOPs: 2.4332. Time: 5284.1504 us. Best GFLOPs: 111.8106
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #29: GFLOPs: 176.4425. Time: 72.8714 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #30: GFLOPs: 4.4359. Time: 2898.5585 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #31: GFLOPs: 1.2991. Time: 9896.9615 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #32: GFLOPs: 23.3872. Time: 549.7711 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #33: GFLOPs: 5.7432. Time: 2238.7513 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #34: GFLOPs: 26.2727. Time: 489.3899 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #35: GFLOPs: 3.3955. Time: 3786.6642 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #36: GFLOPs: 19.1232. Time: 672.3564 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #37: GFLOPs: 0.2211. Time: 58145.0053 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #38: GFLOPs: 0.0915. Time: 140559.1740 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #39: GFLOPs: 28.6701. Time: 448.4669 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #40: GFLOPs: 1.4935. Time: 8608.8852 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #41: GFLOPs: 2.6635. Time: 4827.3821 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #42: GFLOPs: 64.1888. Time: 200.3092 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #43: GFLOPs: 36.3272. Time: 353.9386 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #44: GFLOPs: 18.7130. Time: 687.0963 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #45: GFLOPs: 3.1756. Time: 4048.8338 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #46: GFLOPs: 19.4570. Time: 660.8213 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #47: GFLOPs: 36.2951. Time: 354.2514 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #48: GFLOPs: 18.0394. Time: 712.7525 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #49: GFLOPs: 46.8311. Time: 274.5525 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #50: GFLOPs: 19.2135. Time: 669.1967 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #51: GFLOPs: 5.1608. Time: 2491.3830 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #52: GFLOPs: 40.0085. Time: 321.3719 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #53: GFLOPs: 62.6042. Time: 205.3792 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #54: GFLOPs: 5.4968. Time: 2339.1013 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #55: GFLOPs: 3.3606. Time: 3825.9934 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #56: GFLOPs: 105.4211. Time: 121.9642 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #57: GFLOPs: 71.6343. Time: 179.4895 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #58: GFLOPs: 23.0004. Time: 559.0175 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #59: GFLOPs: 32.6547. Time: 393.7440 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #60: GFLOPs: 1.0262. Time: 12529.8719 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #61: GFLOPs: 5.3741. Time: 2392.5134 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #62: GFLOPs: 10.1577. Time: 1265.8011 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #63: GFLOPs: 0.7315. Time: 17576.3523 us. Best GFLOPs: 176.4425
2024-04-29 17:06:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #64: GFLOPs: 101.8691. Time: 126.2168 us. Best GFLOPs: 176.4425
