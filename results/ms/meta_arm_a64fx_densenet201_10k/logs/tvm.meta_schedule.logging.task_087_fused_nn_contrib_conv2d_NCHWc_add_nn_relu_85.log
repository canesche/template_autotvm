2024-04-29 14:06:34 [INFO] [task_scheduler.cc:160] Initializing Task #87: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85"
2024-04-29 14:06:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:06:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:06:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:06:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:06:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 16:20:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:20:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:21:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb456358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef77ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99157d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x982b2c8)]: 0 failure(s)
2024-04-29 16:21:02 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:21:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb456358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef77ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99157d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x982b2c8)]: 0 failure(s)
2024-04-29 16:21:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb456358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef77ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99157d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x982b2c8)]: 0 failure(s)
2024-04-29 16:21:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb456358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef77ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99157d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x982b2c8)]: 0 failure(s)
2024-04-29 16:21:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb456358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef77ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99157d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x982b2c8)]: 0 failure(s)
2024-04-29 16:21:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9977  0.9976  0.9971  0.9967  0.9965  0.9964  0.9961  0.9961  0.9961  0.9956  0.9952  0.9950  0.9942  0.9940  0.9937
[17 : 32]:	0.9930  0.9929  0.9927  0.9923  0.9921  0.9918  0.9917  0.9913  0.9910  0.9899  0.9898  0.9891  0.9887  0.9885  0.9882  0.9870
[33 : 48]:	0.9866  0.9863  0.9859  0.9855  0.9847  0.9845  0.9843  0.9831  0.9823  0.9820  0.9814  0.9810  0.9809  0.9806  0.9787  0.9785
[49 : 64]:	0.9780  0.9776  0.9770  0.9761  0.9747  0.9743  0.9739  0.9724  0.9722  0.9718  0.9714  0.9713  0.9712  0.9711  0.9711  0.9704
2024-04-29 16:21:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:21:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #1: GFLOPs: 34.0180. Time: 1893.8801 us. Best GFLOPs: 34.0180
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #2: GFLOPs: 30.3608. Time: 2122.0137 us. Best GFLOPs: 34.0180
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #3: GFLOPs: 53.8707. Time: 1195.9371 us. Best GFLOPs: 53.8707
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #4: GFLOPs: 46.9211. Time: 1373.0720 us. Best GFLOPs: 53.8707
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #5: GFLOPs: 98.3249. Time: 655.2358 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #6: GFLOPs: 59.4735. Time: 1083.2717 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #7: GFLOPs: 5.6577. Time: 11387.3600 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #8: GFLOPs: 2.3861. Time: 27000.5765 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #9: GFLOPs: 89.8968. Time: 716.6660 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #10: GFLOPs: 6.8883. Time: 9352.9590 us. Best GFLOPs: 98.3249
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #11: GFLOPs: 121.5447. Time: 530.0601 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #12: GFLOPs: 15.4319. Time: 4174.8648 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #13: GFLOPs: 57.8726. Time: 1113.2373 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #14: GFLOPs: 78.6357. Time: 819.2971 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #15: GFLOPs: 6.0482. Time: 10652.0872 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #16: GFLOPs: 14.3291. Time: 4496.1719 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #17: GFLOPs: 19.0088. Time: 3389.2713 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #18: GFLOPs: 38.3680. Time: 1679.1571 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #19: GFLOPs: 49.9170. Time: 1290.6620 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #20: GFLOPs: 31.5958. Time: 2039.0679 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #21: GFLOPs: 65.5605. Time: 982.6947 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #22: GFLOPs: 15.6753. Time: 4110.0394 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #23: GFLOPs: 51.3488. Time: 1254.6726 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #24: GFLOPs: 15.5373. Time: 4146.5382 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #25: GFLOPs: 108.4611. Time: 594.0010 us. Best GFLOPs: 121.5447
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #26: GFLOPs: 166.1525. Time: 387.7521 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #27: GFLOPs: 43.0040. Time: 1498.1410 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #28: GFLOPs: 89.0985. Time: 723.0870 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #29: GFLOPs: 100.0811. Time: 643.7375 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #30: GFLOPs: 33.0692. Time: 1948.2191 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #31: GFLOPs: 12.3417. Time: 5220.1858 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #32: GFLOPs: 33.0815. Time: 1947.4910 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #33: GFLOPs: 5.7462. Time: 11211.9622 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #34: GFLOPs: 114.7735. Time: 561.3317 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #35: GFLOPs: 12.6937. Time: 5075.4457 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #36: GFLOPs: 29.8592. Time: 2157.6569 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #37: GFLOPs: 66.7300. Time: 965.4722 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #38: GFLOPs: 42.2954. Time: 1523.2401 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #39: GFLOPs: 11.7897. Time: 5464.6198 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #40: GFLOPs: 59.1532. Time: 1089.1384 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #41: GFLOPs: 59.8939. Time: 1075.6686 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #42: GFLOPs: 66.1765. Time: 973.5476 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #43: GFLOPs: 69.8038. Time: 922.9575 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #44: GFLOPs: 67.9903. Time: 947.5767 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #45: GFLOPs: 39.7624. Time: 1620.2737 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #46: GFLOPs: 82.2310. Time: 783.4758 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #47: GFLOPs: 59.2928. Time: 1086.5731 us. Best GFLOPs: 166.1525
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #48: GFLOPs: 223.1809. Time: 288.6716 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #49: GFLOPs: 45.4848. Time: 1416.4302 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #50: GFLOPs: 73.2625. Time: 879.3861 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #51: GFLOPs: 20.1422. Time: 3198.5649 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #52: GFLOPs: 20.2523. Time: 3181.1700 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #53: GFLOPs: 78.3433. Time: 822.3545 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #54: GFLOPs: 7.5394. Time: 8545.1979 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:121] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(320), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(320), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[320, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #56: GFLOPs: 135.0624. Time: 477.0092 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #57: GFLOPs: 52.7362. Time: 1221.6656 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #58: GFLOPs: 98.1329. Time: 656.5180 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #59: GFLOPs: 118.9996. Time: 541.3967 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #60: GFLOPs: 3.2144. Time: 20042.6266 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #61: GFLOPs: 98.9834. Time: 650.8770 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #62: GFLOPs: 4.1170. Time: 15648.7130 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #63: GFLOPs: 65.7712. Time: 979.5464 us. Best GFLOPs: 223.1809
2024-04-29 17:13:33 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_85] Trial #64: GFLOPs: 51.5670. Time: 1249.3652 us. Best GFLOPs: 223.1809
