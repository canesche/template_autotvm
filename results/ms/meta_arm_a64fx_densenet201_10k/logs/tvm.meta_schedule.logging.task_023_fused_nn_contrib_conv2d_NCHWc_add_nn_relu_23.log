2024-04-29 14:02:24 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23"
2024-04-29 14:02:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1152), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:02:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:02:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:02:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:02:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:42:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:42:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:42:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x654a878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e34eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec00868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd6c1d8)]: 0 failure(s)
2024-04-29 14:42:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:42:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x654a878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e34eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec00868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd6c1d8)]: 0 failure(s)
2024-04-29 14:42:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x654a878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e34eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec00868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd6c1d8)]: 0 failure(s)
2024-04-29 14:42:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x654a878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e34eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec00868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd6c1d8)]: 0 failure(s)
2024-04-29 14:42:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x654a878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e34eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec00868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd6c1d8)]: 0 failure(s)
2024-04-29 14:43:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9994  0.9989  0.9982  0.9976  0.9971  0.9969  0.9962  0.9960  0.9960  0.9959  0.9955  0.9950  0.9945  0.9940
[17 : 32]:	0.9940  0.9932  0.9921  0.9912  0.9908  0.9901  0.9895  0.9888  0.9885  0.9883  0.9881  0.9878  0.9874  0.9870  0.9863  0.9855
[33 : 48]:	0.9853  0.9845  0.9843  0.9842  0.9839  0.9838  0.9833  0.9823  0.9820  0.9819  0.9815  0.9810  0.9794  0.9793  0.9791  0.9788
[49 : 64]:	0.9784  0.9773  0.9772  0.9772  0.9770  0.9758  0.9748  0.9748  0.9744  0.9743  0.9738  0.9729  0.9726  0.9725  0.9723  0.9723
2024-04-29 14:43:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:43:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #1: GFLOPs: 3.7814. Time: 3824.8622 us. Best GFLOPs: 3.7814
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #2: GFLOPs: 23.2213. Time: 622.8441 us. Best GFLOPs: 23.2213
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #3: GFLOPs: 20.9421. Time: 690.6292 us. Best GFLOPs: 23.2213
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #4: GFLOPs: 9.0906. Time: 1591.0036 us. Best GFLOPs: 23.2213
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #5: GFLOPs: 57.2123. Time: 252.7995 us. Best GFLOPs: 57.2123
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #6: GFLOPs: 4.7991. Time: 3013.7636 us. Best GFLOPs: 57.2123
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #7: GFLOPs: 6.8150. Time: 2122.2696 us. Best GFLOPs: 57.2123
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #8: GFLOPs: 62.7625. Time: 230.4439 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #9: GFLOPs: 6.2697. Time: 2306.8392 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #10: GFLOPs: 12.3653. Time: 1169.6626 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #11: GFLOPs: 36.0452. Time: 401.2524 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #12: GFLOPs: 7.4582. Time: 1939.2294 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #13: GFLOPs: 58.1578. Time: 248.6896 us. Best GFLOPs: 62.7625
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #14: GFLOPs: 73.3004. Time: 197.3146 us. Best GFLOPs: 73.3004
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #15: GFLOPs: 2.2773. Time: 6350.9604 us. Best GFLOPs: 73.3004
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #16: GFLOPs: 16.7868. Time: 861.5814 us. Best GFLOPs: 73.3004
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #17: GFLOPs: 97.3584. Time: 148.5567 us. Best GFLOPs: 97.3584
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #18: GFLOPs: 64.0250. Time: 225.8997 us. Best GFLOPs: 97.3584
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #19: GFLOPs: 129.6679. Time: 111.5406 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #20: GFLOPs: 5.6204. Time: 2573.3583 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #21: GFLOPs: 5.6584. Time: 2556.0756 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #22: GFLOPs: 0.6184. Time: 23389.4614 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #23: GFLOPs: 1.6646. Time: 8688.6183 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #24: GFLOPs: 17.9794. Time: 804.4355 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #25: GFLOPs: 40.5150. Time: 356.9846 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #26: GFLOPs: 13.8388. Time: 1045.1239 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #27: GFLOPs: 5.9640. Time: 2425.0934 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #28: GFLOPs: 15.2730. Time: 946.9805 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #29: GFLOPs: 10.6482. Time: 1358.2759 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #30: GFLOPs: 31.8424. Time: 454.2136 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #31: GFLOPs: 54.0344. Time: 267.6670 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #32: GFLOPs: 33.6739. Time: 429.5090 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #33: GFLOPs: 20.0143. Time: 722.6448 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #34: GFLOPs: 80.1772. Time: 180.3909 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #35: GFLOPs: 29.5203. Time: 489.9414 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #36: GFLOPs: 69.7382. Time: 207.3931 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #37: GFLOPs: 28.4354. Time: 508.6347 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #38: GFLOPs: 51.1487. Time: 282.7683 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #39: GFLOPs: 14.2214. Time: 1017.0027 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #40: GFLOPs: 38.3430. Time: 377.2067 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #41: GFLOPs: 10.8893. Time: 1328.2016 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #42: GFLOPs: 13.9026. Time: 1040.3279 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #43: GFLOPs: 28.1221. Time: 514.3008 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #44: GFLOPs: 40.0859. Time: 360.8057 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #45: GFLOPs: 75.9806. Time: 190.3543 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #46: GFLOPs: 87.5071. Time: 165.2806 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #47: GFLOPs: 28.7042. Time: 503.8709 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #48: GFLOPs: 48.2098. Time: 300.0060 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #49: GFLOPs: 100.8248. Time: 143.4491 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #50: GFLOPs: 107.8307. Time: 134.1290 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #51: GFLOPs: 2.4874. Time: 5814.6214 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #52: GFLOPs: 80.7916. Time: 179.0191 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #53: GFLOPs: 17.6846. Time: 817.8411 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #54: GFLOPs: 98.2973. Time: 147.1376 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #55: GFLOPs: 51.0318. Time: 283.4161 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #56: GFLOPs: 83.7692. Time: 172.6557 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #57: GFLOPs: 104.7344. Time: 138.0944 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #58: GFLOPs: 1.6730. Time: 8644.9023 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #59: GFLOPs: 20.2247. Time: 715.1256 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #60: GFLOPs: 85.2403. Time: 169.6760 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #61: GFLOPs: 2.0064. Time: 7208.4057 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #62: GFLOPs: 84.4460. Time: 171.2719 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #63: GFLOPs: 66.5363. Time: 217.3734 us. Best GFLOPs: 129.6679
2024-04-29 17:06:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #64: GFLOPs: 64.9439. Time: 222.7036 us. Best GFLOPs: 129.6679
