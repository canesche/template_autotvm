2024-04-28 20:36:14 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip"
2024-04-28 20:36:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:36:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:36:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(58), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), oh_0 * T.int64(56) + kh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(8), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(56) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 8, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:14 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(8), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(56) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(113) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(2)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(112), ow_1 * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 8, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:14 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(8), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(56) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(113) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(112), T.int64(4)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(56) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 8, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:40:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:40:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:40:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 20:40:28 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:40:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 20:40:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 20:40:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 20:40:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 20:40:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9988  0.9987  0.9972  0.9970  0.9966  0.9959  0.9956  0.9948  0.9943  0.9942  0.9941  0.9939  0.9935  0.9928  0.9926
[17 : 32]:	0.9923  0.9923  0.9919  0.9918  0.9908  0.9895  0.9895  0.9889  0.9887  0.9882  0.9878  0.9878  0.9876  0.9871  0.9870  0.9870
[33 : 48]:	0.9866  0.9864  0.9862  0.9858  0.9857  0.9854  0.9853  0.9852  0.9848  0.9847  0.9847  0.9844  0.9844  0.9844  0.9840  0.9834
[49 : 64]:	0.9832  0.9827  0.9824  0.9797  0.9782  0.9780  0.9772  0.9771  0.9770  0.9759  0.9756  0.9749  0.9748  0.9745  0.9743  0.9743
2024-04-28 20:40:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:40:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #1: GFLOPs: 16.0229. Time: 526.0958 us. Best GFLOPs: 16.0229
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #2: GFLOPs: 3.6164. Time: 2330.9188 us. Best GFLOPs: 16.0229
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #3: GFLOPs: 14.6724. Time: 574.5168 us. Best GFLOPs: 16.0229
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #4: GFLOPs: 13.9424. Time: 604.6004 us. Best GFLOPs: 16.0229
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #5: GFLOPs: 39.8736. Time: 211.4074 us. Best GFLOPs: 39.8736
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #6: GFLOPs: 12.7708. Time: 660.0661 us. Best GFLOPs: 39.8736
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #7: GFLOPs: 10.7572. Time: 783.6233 us. Best GFLOPs: 39.8736
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #8: GFLOPs: 17.3152. Time: 486.8297 us. Best GFLOPs: 39.8736
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #9: GFLOPs: 60.5538. Time: 139.2079 us. Best GFLOPs: 60.5538
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #10: GFLOPs: 27.4767. Time: 306.7899 us. Best GFLOPs: 60.5538
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #11: GFLOPs: 19.5553. Time: 431.0626 us. Best GFLOPs: 60.5538
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #12: GFLOPs: 27.7747. Time: 303.4982 us. Best GFLOPs: 60.5538
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #13: GFLOPs: 62.7945. Time: 134.2405 us. Best GFLOPs: 62.7945
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #14: GFLOPs: 3.4100. Time: 2472.0110 us. Best GFLOPs: 62.7945
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(58), T.int64(114)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(14), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), oco_2_init * T.int64(4) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(56) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(2) * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(2) * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(8), T.int64(1)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(112), ow_1 * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(2) * T.int64(2) + oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b107)
b125 = sch.decompose_reduction(block=b107, loop=l111)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #16: GFLOPs: 65.5861. Time: 128.5267 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), oco_1 * T.int64(8) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(56) + oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0 in T.grid(T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("PaddedInput"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(114), kh_0 + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(56) + oh_1 * T.int64(28) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), kw_0 + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(8), oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                                v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(56) + oh_1 * T.int64(28) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b114)
b135 = sch.decompose_reduction(block=b114, loop=l121)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #18: GFLOPs: 21.3068. Time: 395.6277 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #19: GFLOPs: 21.9179. Time: 384.5977 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #20: GFLOPs: 11.9850. Time: 703.3439 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #21: GFLOPs: 45.2362. Time: 186.3454 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #22: GFLOPs: 6.9396. Time: 1214.7128 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #23: GFLOPs: 23.7796. Time: 354.4869 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #24: GFLOPs: 31.2379. Time: 269.8506 us. Best GFLOPs: 65.5861
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #25: GFLOPs: 98.2963. Time: 85.7567 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #26: GFLOPs: 5.6547. Time: 1490.7119 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #27: GFLOPs: 25.8992. Time: 325.4757 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #28: GFLOPs: 9.0081. Time: 935.7717 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #29: GFLOPs: 6.0357. Time: 1396.6115 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #30: GFLOPs: 26.6738. Time: 316.0246 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #31: GFLOPs: 52.6309. Time: 160.1639 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #32: GFLOPs: 48.3310. Time: 174.4134 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #33: GFLOPs: 48.5981. Time: 173.4547 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #34: GFLOPs: 59.0385. Time: 142.7808 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(392) * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(392) // T.int64(14) * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0 in range(T.int64(3)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(4)):
                        for ax3_ax4_fused in T.vectorized(T.int64(40)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(392) * T.int64(2) + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), kh_0 + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(392) // T.int64(14) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(392) * T.int64(2) + oco_2 + oco_3)
                                v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(392) // T.int64(14) * T.int64(4) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(6272)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(8), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(50176))
                    v_i2 = T.axis.spatial(T.int64(112), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(50176) // T.int64(448))
                    v_i3 = T.axis.spatial(T.int64(112), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(448) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b62)
l81 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l79, l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b63)
l99 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l99)
l100 = sch.fuse(l98, preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l101, l102, l103, l104, l105, preserve_unit_iters=True)
l107, l108 = sch.split(loop=l106, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b109)
b126 = sch.decompose_reduction(block=b109, loop=l112)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #36: GFLOPs: 17.9119. Time: 470.6137 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #37: GFLOPs: 14.9660. Time: 563.2480 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #38: GFLOPs: 30.2782. Time: 278.4043 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(30), T.int64(58)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(2) + oco_1 * T.int64(2) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(56) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(2) + oco_1 * T.int64(2) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(56) + ow_2 * T.int64(8) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) * T.int64(28) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b110)
b131 = sch.decompose_reduction(block=b110, loop=l117)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #40: GFLOPs: 9.8423. Time: 856.4665 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(56) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(112) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0 in T.grid(T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(112)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), kh_0 + oh_1 * T.int64(56) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), kw_0 + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused + oco_1 + oco_2 + oco_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(56) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(112) + ow_2 * T.int64(8) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(112), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 56, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b114)
b135 = sch.decompose_reduction(block=b114, loop=l121)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #42: GFLOPs: 86.8803. Time: 97.0251 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #43: GFLOPs: 2.8511. Time: 2956.5611 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #44: GFLOPs: 45.6769. Time: 184.5477 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(56), T.int64(1)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(16) * T.int64(2) + oco_2_init * T.int64(2) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(16) * T.int64(7) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0 in range(T.int64(3)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(112)):
                    for ax3_ax4_fused in T.vectorized(T.int64(36)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(16) * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(16) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(16) * T.int64(2) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_2 * T.int64(56) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(16) * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(6272)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(8), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(50176))
                    v_i2 = T.axis.spatial(T.int64(112), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(50176) // T.int64(448))
                    v_i3 = T.axis.spatial(T.int64(112), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(448) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 56])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 16, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b62)
l81 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l79, l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b63)
l98 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l100, l101, l102, l103, l104, preserve_unit_iters=True)
l106, l107 = sch.split(loop=l105, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b108)
b124 = sch.decompose_reduction(block=b108, loop=l110)
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #46: GFLOPs: 91.7659. Time: 91.8595 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #47: GFLOPs: 17.5731. Time: 479.6871 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #48: GFLOPs: 40.5408. Time: 207.9278 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #49: GFLOPs: 34.2322. Time: 246.2467 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #50: GFLOPs: 20.6804. Time: 407.6105 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #51: GFLOPs: 4.0382. Time: 2087.4323 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #52: GFLOPs: 27.9247. Time: 301.8682 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #53: GFLOPs: 90.3235. Time: 93.3264 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #54: GFLOPs: 3.6371. Time: 2317.6786 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #55: GFLOPs: 6.5662. Time: 1283.7875 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #56: GFLOPs: 91.5134. Time: 92.1130 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #57: GFLOPs: 49.8812. Time: 168.9928 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #58: GFLOPs: 32.7104. Time: 257.7030 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #59: GFLOPs: 6.1103. Time: 1379.5670 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #60: GFLOPs: 0.9641. Time: 8743.7728 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #61: GFLOPs: 3.5340. Time: 2385.2802 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #62: GFLOPs: 12.1232. Time: 695.3238 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #63: GFLOPs: 46.8648. Time: 179.8701 us. Best GFLOPs: 98.2963
2024-04-28 21:32:38 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #64: GFLOPs: 44.0573. Time: 191.3319 us. Best GFLOPs: 98.2963
2024-04-28 22:19:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:19:13 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-28 22:19:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 22:19:18 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-28 22:19:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 22:19:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 22:19:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 22:20:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 22:20:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0080  1.0032  0.9972  0.9821  0.9821  0.9768  0.9711  0.9690  0.9603  0.9481  0.9481  0.9218  0.9118  0.9088  0.9021  0.9006
[17 : 32]:	0.8980  0.8977  0.8961  0.8947  0.8915  0.8907  0.8901  0.8841  0.8830  0.8807  0.8783  0.8740  0.8660  0.8464  0.8413  0.8351
[33 : 48]:	0.8346  0.8303  0.8266  0.8261  0.8169  0.8169  0.8155  0.8150  0.8142  0.8080  0.8065  0.8064  0.8044  0.8038  0.7981  0.7933
[49 : 64]:	0.7920  0.7916  0.7916  0.7907  0.7899  0.7896  0.7882  0.7877  0.7866  0.7832  0.7814  0.7811  0.7793  0.7789  0.7777  0.7777
2024-04-28 22:20:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:20:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #65: GFLOPs: 70.2269. Time: 120.0334 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #66: GFLOPs: 68.6478. Time: 122.7944 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #67: GFLOPs: 66.5185. Time: 126.7251 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #68: GFLOPs: 66.0909. Time: 127.5451 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #69: GFLOPs: 65.0336. Time: 129.6187 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #70: GFLOPs: 80.6834. Time: 104.4771 us. Best GFLOPs: 98.2963
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #71: GFLOPs: 114.7822. Time: 73.4397 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #72: GFLOPs: 111.0178. Time: 75.9299 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #73: GFLOPs: 80.5578. Time: 104.6400 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #74: GFLOPs: 66.1172. Time: 127.4942 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #75: GFLOPs: 68.5834. Time: 122.9098 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #76: GFLOPs: 55.0058. Time: 153.2488 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #77: GFLOPs: 47.5727. Time: 177.1936 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #78: GFLOPs: 67.7328. Time: 124.4533 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #79: GFLOPs: 54.0087. Time: 156.0779 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #80: GFLOPs: 63.8650. Time: 131.9904 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #81: GFLOPs: 60.7137. Time: 138.8414 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #82: GFLOPs: 47.1415. Time: 178.8140 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #83: GFLOPs: 45.8957. Time: 183.6679 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #84: GFLOPs: 53.5863. Time: 157.3083 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #85: GFLOPs: 56.8517. Time: 148.2728 us. Best GFLOPs: 114.7822
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #86: GFLOPs: 124.1706. Time: 67.8870 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #87: GFLOPs: 64.6392. Time: 130.4095 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #88: GFLOPs: 63.8211. Time: 132.0813 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #89: GFLOPs: 62.2168. Time: 135.4869 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #90: GFLOPs: 57.4605. Time: 146.7019 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #91: GFLOPs: 48.9688. Time: 172.1415 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #92: GFLOPs: 74.5879. Time: 113.0153 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #93: GFLOPs: 92.2512. Time: 91.3762 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #94: GFLOPs: 54.6698. Time: 154.1906 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #95: GFLOPs: 105.2653. Time: 80.0793 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #96: GFLOPs: 90.2982. Time: 93.3525 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #97: GFLOPs: 50.0346. Time: 168.4749 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #98: GFLOPs: 59.5028. Time: 141.6667 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #99: GFLOPs: 51.7097. Time: 163.0170 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #100: GFLOPs: 56.3424. Time: 149.6131 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #101: GFLOPs: 45.0744. Time: 187.0146 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #102: GFLOPs: 28.2124. Time: 298.7895 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #103: GFLOPs: 84.2530. Time: 100.0507 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #104: GFLOPs: 73.7819. Time: 114.2498 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #105: GFLOPs: 55.3170. Time: 152.3867 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #106: GFLOPs: 100.4636. Time: 83.9067 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #107: GFLOPs: 41.9899. Time: 200.7521 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #108: GFLOPs: 42.3158. Time: 199.2064 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #109: GFLOPs: 61.6919. Time: 136.6397 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #110: GFLOPs: 53.9030. Time: 156.3840 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #111: GFLOPs: 58.6211. Time: 143.7976 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #112: GFLOPs: 59.1085. Time: 142.6117 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #113: GFLOPs: 59.8572. Time: 140.8280 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #114: GFLOPs: 34.7377. Time: 242.6633 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #115: GFLOPs: 42.3587. Time: 199.0042 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #116: GFLOPs: 51.9716. Time: 162.1958 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #117: GFLOPs: 34.6320. Time: 243.4040 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #118: GFLOPs: 85.8516. Time: 98.1877 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #119: GFLOPs: 68.9444. Time: 122.2662 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #120: GFLOPs: 52.5856. Time: 160.3019 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #121: GFLOPs: 54.9382. Time: 153.4372 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #122: GFLOPs: 81.0613. Time: 103.9900 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #123: GFLOPs: 56.5813. Time: 148.9816 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #124: GFLOPs: 53.2965. Time: 158.1635 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #125: GFLOPs: 76.6655. Time: 109.9525 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #126: GFLOPs: 55.3925. Time: 152.1789 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #127: GFLOPs: 23.6499. Time: 356.4309 us. Best GFLOPs: 124.1706
2024-04-28 22:21:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #128: GFLOPs: 29.6462. Time: 284.3388 us. Best GFLOPs: 124.1706
2024-04-28 23:54:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:54:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:54:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 23:54:17 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:54:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 23:54:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 23:54:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 23:55:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-28 23:55:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9716  0.9578  0.9096  0.9096  0.8943  0.8914  0.8784  0.8625  0.8598  0.8474  0.8425  0.8425  0.8425  0.8298  0.8164  0.8097
[17 : 32]:	0.7961  0.7921  0.7898  0.7898  0.7894  0.7858  0.7839  0.7808  0.7773  0.7739  0.7724  0.7724  0.7615  0.7610  0.7597  0.7520
[33 : 48]:	0.7510  0.7495  0.7495  0.7495  0.7442  0.7440  0.7431  0.7383  0.7375  0.7361  0.7359  0.7347  0.7347  0.7319  0.7270  0.7244
[49 : 64]:	0.7214  0.7214  0.7210  0.7205  0.7204  0.7170  0.7097  0.7093  0.7066  0.7066  0.7029  0.7029  0.7027  0.7020  0.6997  0.6997
2024-04-28 23:55:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:55:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #129: GFLOPs: 43.0753. Time: 195.6937 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #130: GFLOPs: 86.9910. Time: 96.9016 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #131: GFLOPs: 102.8046. Time: 81.9960 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #132: GFLOPs: 101.2130. Time: 83.2854 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #133: GFLOPs: 107.9611. Time: 78.0797 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #134: GFLOPs: 95.2390. Time: 88.5096 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #135: GFLOPs: 85.6696. Time: 98.3963 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #136: GFLOPs: 92.1937. Time: 91.4332 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #137: GFLOPs: 65.3562. Time: 128.9789 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #138: GFLOPs: 86.5667. Time: 97.3765 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #139: GFLOPs: 107.5613. Time: 78.3699 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #140: GFLOPs: 102.3644. Time: 82.3487 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #141: GFLOPs: 95.9806. Time: 87.8257 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #142: GFLOPs: 103.1891. Time: 81.6905 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #143: GFLOPs: 79.9113. Time: 105.4865 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #144: GFLOPs: 88.7816. Time: 94.9473 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #145: GFLOPs: 62.4605. Time: 134.9584 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #146: GFLOPs: 78.1463. Time: 107.8691 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #147: GFLOPs: 96.5868. Time: 87.2746 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #148: GFLOPs: 94.2671. Time: 89.4222 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #149: GFLOPs: 87.5162. Time: 96.3201 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #150: GFLOPs: 101.4644. Time: 83.0790 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #151: GFLOPs: 72.3482. Time: 116.5138 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #152: GFLOPs: 61.2668. Time: 137.5878 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #153: GFLOPs: 56.0001. Time: 150.5279 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #154: GFLOPs: 90.1866. Time: 93.4681 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #155: GFLOPs: 104.2291. Time: 80.8754 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #156: GFLOPs: 104.0915. Time: 80.9823 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #157: GFLOPs: 58.6183. Time: 143.8043 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #158: GFLOPs: 116.9242. Time: 72.0943 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #159: GFLOPs: 82.0166. Time: 102.7788 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #160: GFLOPs: 62.9536. Time: 133.9014 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #161: GFLOPs: 72.2281. Time: 116.7076 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #162: GFLOPs: 61.4377. Time: 137.2052 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #163: GFLOPs: 110.6978. Time: 76.1494 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #164: GFLOPs: 75.2527. Time: 112.0168 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #165: GFLOPs: 103.5174. Time: 81.4314 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #166: GFLOPs: 110.2743. Time: 76.4418 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #167: GFLOPs: 94.7524. Time: 88.9642 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #168: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(6)):
                    for ax3_ax4_fused in T.vectorized(T.int64(24)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        for oci_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(8), oco_1 * T.int64(8) + oco_2_init * T.int64(2) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        for oci_3_fused in T.vectorized(T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(8), oco_1 * T.int64(8) + oco_2 * T.int64(2) + oco_3)
                                v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 4, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b65)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b111)
b132 = sch.decompose_reduction(block=b111, loop=l118)
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #169: GFLOPs: 71.2901. Time: 118.2432 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #170: GFLOPs: 61.8942. Time: 136.1931 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #171: GFLOPs: 60.7367. Time: 138.7886 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #172: GFLOPs: 93.7250. Time: 89.9394 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #173: GFLOPs: 101.8749. Time: 82.7443 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #174: GFLOPs: 94.6050. Time: 89.1027 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #175: GFLOPs: 69.2194. Time: 121.7804 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #176: GFLOPs: 90.1112. Time: 93.5463 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #177: GFLOPs: 68.5365. Time: 122.9938 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #178: GFLOPs: 66.0864. Time: 127.5538 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #179: GFLOPs: 63.0261. Time: 133.7472 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #180: GFLOPs: 93.9221. Time: 89.7506 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #181: GFLOPs: 99.6581. Time: 84.5849 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #182: GFLOPs: 87.9088. Time: 95.8899 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #183: GFLOPs: 103.1079. Time: 81.7548 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #184: GFLOPs: 64.3466. Time: 131.0025 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #185: GFLOPs: 54.7005. Time: 154.1041 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #186: GFLOPs: 67.9592. Time: 124.0387 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #187: GFLOPs: 57.6169. Time: 146.3036 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #188: GFLOPs: 71.1248. Time: 118.5180 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #189: GFLOPs: 85.8685. Time: 98.1683 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #190: GFLOPs: 43.4185. Time: 194.1471 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #191: GFLOPs: 16.0891. Time: 523.9305 us. Best GFLOPs: 124.1706
2024-04-28 23:57:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #192: GFLOPs: 45.3755. Time: 185.7735 us. Best GFLOPs: 124.1706
2024-04-29 00:53:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:53:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:53:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 00:53:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:54:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 00:54:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 00:54:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 00:54:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 00:54:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9232  0.8635  0.8635  0.8628  0.8628  0.8587  0.8510  0.8356  0.8353  0.8279  0.8197  0.8197  0.8197  0.8197  0.8192  0.8176
[17 : 32]:	0.8155  0.8099  0.8099  0.8051  0.7999  0.7957  0.7957  0.7903  0.7903  0.7903  0.7903  0.7879  0.7879  0.7874  0.7874  0.7775
[33 : 48]:	0.7746  0.7746  0.7722  0.7699  0.7695  0.7685  0.7685  0.7677  0.7677  0.7673  0.7673  0.7624  0.7611  0.7599  0.7586  0.7557
[49 : 64]:	0.7557  0.7556  0.7556  0.7551  0.7551  0.7551  0.7549  0.7540  0.7519  0.7509  0.7456  0.7456  0.7430  0.7430  0.7428  0.7404
2024-04-29 00:54:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:54:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #193: GFLOPs: 18.5470. Time: 454.4977 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #194: GFLOPs: 83.0510. Time: 101.4987 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #195: GFLOPs: 102.2903. Time: 82.4083 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #196: GFLOPs: 66.6308. Time: 126.5115 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #197: GFLOPs: 111.8126. Time: 75.3902 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #198: GFLOPs: 100.5969. Time: 83.7955 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #199: GFLOPs: 60.5447. Time: 139.2288 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #200: GFLOPs: 104.2568. Time: 80.8539 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #201: GFLOPs: 111.8450. Time: 75.3683 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #202: GFLOPs: 105.5732. Time: 79.8457 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #203: GFLOPs: 64.1409. Time: 131.4227 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #204: GFLOPs: 103.9851. Time: 81.0652 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #205: GFLOPs: 87.6059. Time: 96.2214 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #206: GFLOPs: 83.4239. Time: 101.0450 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #207: GFLOPs: 104.4125. Time: 80.7333 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #208: GFLOPs: 80.4152. Time: 104.8256 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #209: GFLOPs: 63.9701. Time: 131.7735 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #210: GFLOPs: 58.9724. Time: 142.9410 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #211: GFLOPs: 101.7940. Time: 82.8101 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #212: GFLOPs: 92.0813. Time: 91.5449 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #213: GFLOPs: 105.7912. Time: 79.6812 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #214: GFLOPs: 95.3254. Time: 88.4294 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #215: GFLOPs: 80.5519. Time: 104.6476 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #216: GFLOPs: 98.3882. Time: 85.6766 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #217: GFLOPs: 97.6876. Time: 86.2911 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #218: GFLOPs: 105.8090. Time: 79.6678 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #219: GFLOPs: 62.6375. Time: 134.5771 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #220: GFLOPs: 89.5023. Time: 94.1827 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #221: GFLOPs: 86.5801. Time: 97.3615 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #222: GFLOPs: 79.6573. Time: 105.8229 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #223: GFLOPs: 91.4629. Time: 92.1638 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #224: GFLOPs: 69.0881. Time: 122.0118 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #225: GFLOPs: 84.3729. Time: 99.9085 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #226: GFLOPs: 85.2309. Time: 98.9027 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #227: GFLOPs: 101.2389. Time: 83.2641 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #228: GFLOPs: 112.4200. Time: 74.9828 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #229: GFLOPs: 101.2130. Time: 83.2855 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #230: GFLOPs: 112.5893. Time: 74.8701 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #231: GFLOPs: 65.0777. Time: 129.5308 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #232: GFLOPs: 90.3177. Time: 93.3324 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #233: GFLOPs: 71.9258. Time: 117.1981 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #234: GFLOPs: 65.4605. Time: 128.7733 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #235: GFLOPs: 64.7875. Time: 130.1111 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #236: GFLOPs: 113.7603. Time: 74.0994 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #237: GFLOPs: 59.2346. Time: 142.3083 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #238: GFLOPs: 114.2328. Time: 73.7929 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #239: GFLOPs: 88.6194. Time: 95.1210 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #240: GFLOPs: 86.2834. Time: 97.6963 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #241: GFLOPs: 104.1526. Time: 80.9348 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #242: GFLOPs: 109.8851. Time: 76.7126 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #243: GFLOPs: 110.0931. Time: 76.5677 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #244: GFLOPs: 51.6498. Time: 163.2063 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #245: GFLOPs: 102.9128. Time: 81.9098 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #246: GFLOPs: 59.5373. Time: 141.5847 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #247: GFLOPs: 92.5867. Time: 91.0451 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #248: GFLOPs: 105.9557. Time: 79.5574 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #249: GFLOPs: 79.0410. Time: 106.6481 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #250: GFLOPs: 88.0715. Time: 95.7128 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #251: GFLOPs: 55.5801. Time: 151.6652 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #252: GFLOPs: 91.2881. Time: 92.3403 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #253: GFLOPs: 53.7225. Time: 156.9095 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #254: GFLOPs: 48.6619. Time: 173.2272 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #255: GFLOPs: 39.2669. Time: 214.6735 us. Best GFLOPs: 124.1706
2024-04-29 00:56:43 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #256: GFLOPs: 34.1319. Time: 246.9704 us. Best GFLOPs: 124.1706
2024-04-29 01:50:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:50:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:50:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 01:50:34 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:50:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 01:51:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 01:51:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 01:51:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x514b188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ac578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33a0ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59241f8)]: 0 failure(s)
2024-04-29 01:51:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9017  0.9017  0.9017  0.8855  0.8663  0.8605  0.8423  0.8421  0.8365  0.8365  0.8320  0.8320  0.8232  0.8206  0.8206  0.8193
[17 : 32]:	0.8175  0.8171  0.8170  0.8154  0.8100  0.8100  0.8098  0.8072  0.8072  0.8023  0.7977  0.7977  0.7968  0.7915  0.7915  0.7825
[33 : 48]:	0.7825  0.7814  0.7794  0.7794  0.7794  0.7769  0.7769  0.7744  0.7744  0.7740  0.7723  0.7715  0.7681  0.7665  0.7665  0.7660
[49 : 64]:	0.7654  0.7654  0.7634  0.7619  0.7607  0.7605  0.7590  0.7583  0.7564  0.7536  0.7522  0.7517  0.7509  0.7500  0.7492  0.7481
2024-04-29 01:51:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:51:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #257: GFLOPs: 34.4022. Time: 245.0296 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #258: GFLOPs: 115.1305. Time: 73.2175 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #259: GFLOPs: 116.9411. Time: 72.0839 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #260: GFLOPs: 109.6313. Time: 76.8902 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #261: GFLOPs: 111.0562. Time: 75.9036 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #262: GFLOPs: 63.2931. Time: 133.1830 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #263: GFLOPs: 93.3960. Time: 90.2562 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #264: GFLOPs: 111.8929. Time: 75.3360 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #265: GFLOPs: 100.8442. Time: 83.5901 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #266: GFLOPs: 108.7234. Time: 77.5322 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #267: GFLOPs: 99.7496. Time: 84.5073 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #268: GFLOPs: 63.1259. Time: 133.5359 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #269: GFLOPs: 61.5987. Time: 136.8466 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #270: GFLOPs: 104.5686. Time: 80.6128 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #271: GFLOPs: 63.3022. Time: 133.1639 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #272: GFLOPs: 103.5499. Time: 81.4059 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #273: GFLOPs: 109.7258. Time: 76.8239 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #274: GFLOPs: 109.3597. Time: 77.0811 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #275: GFLOPs: 114.1331. Time: 73.8574 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #276: GFLOPs: 49.4399. Time: 170.5012 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #277: GFLOPs: 121.0420. Time: 69.6417 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #278: GFLOPs: 71.4486. Time: 117.9809 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #279: GFLOPs: 104.6822. Time: 80.5253 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #280: GFLOPs: 105.4032. Time: 79.9745 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #281: GFLOPs: 117.3522. Time: 71.8314 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #282: GFLOPs: 101.6444. Time: 82.9319 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #283: GFLOPs: 94.1369. Time: 89.5458 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #284: GFLOPs: 66.5359. Time: 126.6920 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #285: GFLOPs: 61.4833. Time: 137.1034 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #286: GFLOPs: 110.1133. Time: 76.5536 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #287: GFLOPs: 58.7923. Time: 143.3788 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #288: GFLOPs: 98.6237. Time: 85.4720 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #289: GFLOPs: 86.6834. Time: 97.2455 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #290: GFLOPs: 90.8171. Time: 92.8192 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #291: GFLOPs: 102.5917. Time: 82.1662 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #292: GFLOPs: 104.3395. Time: 80.7898 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #293: GFLOPs: 102.4702. Time: 82.2636 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #294: GFLOPs: 62.9385. Time: 133.9334 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #295: GFLOPs: 107.4411. Time: 78.4575 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #296: GFLOPs: 101.1324. Time: 83.3518 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #297: GFLOPs: 61.6594. Time: 136.7117 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #298: GFLOPs: 78.5900. Time: 107.2600 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #299: GFLOPs: 107.7105. Time: 78.2613 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #300: GFLOPs: 119.0153. Time: 70.8276 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #301: GFLOPs: 28.6239. Time: 294.4939 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #302: GFLOPs: 71.1581. Time: 118.4625 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #303: GFLOPs: 47.0219. Time: 179.2690 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #304: GFLOPs: 92.9199. Time: 90.7186 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #305: GFLOPs: 86.5659. Time: 97.3775 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #306: GFLOPs: 100.0459. Time: 84.2570 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #307: GFLOPs: 104.0474. Time: 81.0166 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #308: GFLOPs: 104.2929. Time: 80.8259 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #309: GFLOPs: 101.8532. Time: 82.7619 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #310: GFLOPs: 90.5110. Time: 93.1331 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #311: GFLOPs: 110.2177. Time: 76.4811 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #312: GFLOPs: 102.6452. Time: 82.1233 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #313: GFLOPs: 80.7344. Time: 104.4111 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #314: GFLOPs: 107.8507. Time: 78.1596 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #315: GFLOPs: 115.6437. Time: 72.8926 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #316: GFLOPs: 93.4004. Time: 90.2520 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #317: GFLOPs: 112.8292. Time: 74.7109 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #318: GFLOPs: 29.6680. Time: 284.1300 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #319: GFLOPs: 17.3933. Time: 484.6437 us. Best GFLOPs: 124.1706
2024-04-29 01:53:28 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip] Trial #320: GFLOPs: 7.0144. Time: 1201.7561 us. Best GFLOPs: 124.1706
