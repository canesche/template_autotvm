2024-04-28 20:36:34 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2"
2024-04-28 20:36:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:36:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:36:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)):
                with T.block("PaddedInput"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                with T.block("DepthwiseConv2d"):
                    v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + oco_1 * T.int64(3) + oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[12, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + oco_1 * T.int64(3) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(57) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(57), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(28), T.int64(8), T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[12, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(28), T.int64(10), T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(28) + kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(8) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + oco_1 * T.int64(3) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(28), T.int64(56), T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(36), oco_0 * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(56), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[12, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:49:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:49:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:49:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 20:49:10 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:49:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 20:49:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 20:49:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 20:49:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 20:49:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9998  0.9997  0.9993  0.9981  0.9980  0.9977  0.9976  0.9963  0.9957  0.9952  0.9938  0.9933  0.9932  0.9928  0.9926
[17 : 32]:	0.9915  0.9912  0.9907  0.9892  0.9892  0.9887  0.9886  0.9880  0.9878  0.9877  0.9873  0.9873  0.9867  0.9865  0.9865  0.9864
[33 : 48]:	0.9848  0.9846  0.9843  0.9839  0.9834  0.9834  0.9831  0.9827  0.9825  0.9811  0.9810  0.9799  0.9789  0.9788  0.9779  0.9778
[49 : 64]:	0.9773  0.9760  0.9758  0.9758  0.9752  0.9752  0.9746  0.9742  0.9740  0.9738  0.9717  0.9716  0.9714  0.9713  0.9708  0.9704
2024-04-28 20:49:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:49:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #1: GFLOPs: 31.5023. Time: 301.0336 us. Best GFLOPs: 31.5023
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #2: GFLOPs: 37.1626. Time: 255.1833 us. Best GFLOPs: 37.1626
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #3: GFLOPs: 26.3247. Time: 360.2418 us. Best GFLOPs: 37.1626
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #4: GFLOPs: 54.9126. Time: 172.6975 us. Best GFLOPs: 54.9126
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #5: GFLOPs: 65.3815. Time: 145.0451 us. Best GFLOPs: 65.3815
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #6: GFLOPs: 17.3823. Time: 545.5703 us. Best GFLOPs: 65.3815
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #7: GFLOPs: 33.0354. Time: 287.0636 us. Best GFLOPs: 65.3815
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #8: GFLOPs: 48.9198. Time: 193.8534 us. Best GFLOPs: 65.3815
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #9: GFLOPs: 92.8389. Time: 102.1476 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #10: GFLOPs: 27.7041. Time: 342.3052 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #11: GFLOPs: 84.5661. Time: 112.1403 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #12: GFLOPs: 11.0604. Time: 857.4099 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #13: GFLOPs: 13.3161. Time: 712.1646 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #14: GFLOPs: 43.0185. Time: 220.4460 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #15: GFLOPs: 13.4017. Time: 707.6182 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #16: GFLOPs: 47.6069. Time: 199.1993 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(58), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b65)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #18: GFLOPs: 44.2939. Time: 214.0985 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #19: GFLOPs: 6.8061. Time: 1393.3443 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #20: GFLOPs: 2.9002. Time: 3269.8121 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #21: GFLOPs: 55.1187. Time: 172.0517 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #22: GFLOPs: 37.6042. Time: 252.1866 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #23: GFLOPs: 31.5609. Time: 300.4755 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #24: GFLOPs: 10.3996. Time: 911.8917 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #25: GFLOPs: 1.9112. Time: 4961.8456 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #26: GFLOPs: 53.8139. Time: 176.2234 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #27: GFLOPs: 15.2583. Time: 621.5165 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #28: GFLOPs: 22.8228. Time: 415.5175 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #29: GFLOPs: 19.6902. Time: 481.6227 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #30: GFLOPs: 38.5238. Time: 246.1664 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #31: GFLOPs: 32.6512. Time: 290.4417 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #32: GFLOPs: 34.8428. Time: 272.1732 us. Best GFLOPs: 92.8389
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #33: GFLOPs: 122.3454. Time: 77.5122 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #34: GFLOPs: 61.7783. Time: 153.5049 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #35: GFLOPs: 21.4981. Time: 441.1216 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_1 in range(T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(9), T.int64(16), T.int64(3)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(9) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(9) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(56) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(9) + oco_2 * T.int64(3) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(56) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(9), T.int64(14), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(9) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 3, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b63)
l81 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b64)
l99 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b108)
b125 = sch.decompose_reduction(block=b108, loop=l111)
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #37: GFLOPs: 8.4462. Time: 1122.7856 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #38: GFLOPs: 114.8901. Time: 82.5420 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #39: GFLOPs: 5.5141. Time: 1719.8090 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #40: GFLOPs: 9.0910. Time: 1043.1487 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #41: GFLOPs: 19.8009. Time: 478.9300 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #42: GFLOPs: 5.4426. Time: 1742.4095 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #43: GFLOPs: 27.3227. Time: 347.0842 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #44: GFLOPs: 18.7095. Time: 506.8688 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #45: GFLOPs: 13.4217. Time: 706.5631 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #46: GFLOPs: 33.3571. Time: 284.2949 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #47: GFLOPs: 18.9470. Time: 500.5162 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #48: GFLOPs: 67.2730. Time: 140.9669 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #49: GFLOPs: 52.5788. Time: 180.3628 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #50: GFLOPs: 4.0167. Time: 2360.9809 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #51: GFLOPs: 33.0756. Time: 286.7144 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #52: GFLOPs: 34.8572. Time: 272.0603 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #53: GFLOPs: 93.0654. Time: 101.8989 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #54: GFLOPs: 22.3610. Time: 424.0982 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for i0_i1_fused in T.parallel(T.int64(36)):
            for i2, i3 in T.grid(T.int64(58), T.int64(58)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSS", [i0_i1_fused, i2, i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(36), oco_1 * T.int64(36) + oco_2_init * T.int64(6) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused // T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused % T.int64(2) * T.int64(28) + ow_1 + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(6), T.int64(14), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(36), oco_1 * T.int64(36) + oco_2 * T.int64(6) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused // T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused % T.int64(2) * T.int64(28) + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(7056)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(36), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(12544))
                    v_i2 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(12544) // T.int64(224))
                    v_i3 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(224) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 6, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69 = sch.get_loops(block=b62)
l70 = sch.fuse(l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l70)
l71 = sch.fuse(l69, preserve_unit_iters=True)
sch.vectorize(loop=l71)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b105)
b127 = sch.decompose_reduction(block=b105, loop=l113)
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #56: GFLOPs: 23.0142. Time: 412.0622 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #57: GFLOPs: 2.9700. Time: 3193.0681 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #58: GFLOPs: 1.5206. Time: 6236.7149 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #59: GFLOPs: 47.3521. Time: 200.2712 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #60: GFLOPs: 21.6817. Time: 437.3848 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #61: GFLOPs: 9.1302. Time: 1038.6755 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #62: GFLOPs: 61.6319. Time: 153.8694 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #63: GFLOPs: 67.8456. Time: 139.7772 us. Best GFLOPs: 122.3454
2024-04-28 21:32:49 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #64: GFLOPs: 44.5167. Time: 213.0270 us. Best GFLOPs: 122.3454
2024-04-28 22:25:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:25:47 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-28 22:25:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 22:25:53 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-28 22:26:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 22:26:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 22:26:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 22:26:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-28 22:26:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9663  0.9627  0.9323  0.9298  0.9271  0.9164  0.9164  0.8841  0.8776  0.8655  0.8655  0.8655  0.8514  0.8508  0.8377  0.8323
[17 : 32]:	0.8109  0.8109  0.8094  0.8036  0.8036  0.8026  0.7993  0.7993  0.7993  0.7970  0.7891  0.7891  0.7891  0.7877  0.7833  0.7804
[33 : 48]:	0.7797  0.7793  0.7736  0.7724  0.7721  0.7721  0.7720  0.7717  0.7688  0.7688  0.7683  0.7677  0.7639  0.7634  0.7629  0.7614
[49 : 64]:	0.7554  0.7533  0.7533  0.7513  0.7513  0.7504  0.7465  0.7463  0.7454  0.7399  0.7390  0.7373  0.7355  0.7316  0.7315  0.7294
2024-04-28 22:26:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:26:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #65: GFLOPs: 121.5267. Time: 78.0344 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #66: GFLOPs: 115.1602. Time: 82.3484 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #67: GFLOPs: 114.8151. Time: 82.5960 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #68: GFLOPs: 119.0060. Time: 79.6873 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #69: GFLOPs: 117.1346. Time: 80.9604 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #70: GFLOPs: 120.6920. Time: 78.5741 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #71: GFLOPs: 111.0980. Time: 85.3595 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #72: GFLOPs: 113.3359. Time: 83.6739 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #73: GFLOPs: 87.4437. Time: 108.4499 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #74: GFLOPs: 101.8694. Time: 93.0924 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #75: GFLOPs: 80.6427. Time: 117.5961 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #76: GFLOPs: 80.6128. Time: 117.6397 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #77: GFLOPs: 105.7378. Time: 89.6866 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #78: GFLOPs: 116.0456. Time: 81.7202 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #79: GFLOPs: 106.8569. Time: 88.7473 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #80: GFLOPs: 102.3643. Time: 92.6423 us. Best GFLOPs: 122.3454
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #81: GFLOPs: 184.9705. Time: 51.2691 us. Best GFLOPs: 184.9705
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #82: GFLOPs: 193.6490. Time: 48.9714 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #83: GFLOPs: 108.0912. Time: 87.7339 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #84: GFLOPs: 130.5776. Time: 72.6255 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #85: GFLOPs: 130.7731. Time: 72.5170 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #86: GFLOPs: 98.5889. Time: 96.1900 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #87: GFLOPs: 176.0504. Time: 53.8668 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #88: GFLOPs: 180.2551. Time: 52.6102 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #89: GFLOPs: 107.2846. Time: 88.3935 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #90: GFLOPs: 92.6806. Time: 102.3220 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #91: GFLOPs: 97.2235. Time: 97.5408 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #92: GFLOPs: 97.0314. Time: 97.7339 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #93: GFLOPs: 87.2606. Time: 108.6774 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #94: GFLOPs: 90.8565. Time: 104.3763 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #95: GFLOPs: 42.7503. Time: 221.8290 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #96: GFLOPs: 156.1725. Time: 60.7230 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #97: GFLOPs: 110.9550. Time: 85.4695 us. Best GFLOPs: 193.6490
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #98: GFLOPs: 229.7795. Time: 41.2711 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #99: GFLOPs: 62.1656. Time: 152.5485 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #100: GFLOPs: 113.4273. Time: 83.6065 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #101: GFLOPs: 145.4414. Time: 65.2033 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #102: GFLOPs: 139.7131. Time: 67.8767 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #103: GFLOPs: 161.6161. Time: 58.6777 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #104: GFLOPs: 98.3559. Time: 96.4179 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #105: GFLOPs: 43.0771. Time: 220.1464 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #106: GFLOPs: 91.8292. Time: 103.2707 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #107: GFLOPs: 127.9686. Time: 74.1062 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #108: GFLOPs: 162.1728. Time: 58.4763 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #109: GFLOPs: 145.1508. Time: 65.3339 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #110: GFLOPs: 133.7256. Time: 70.9158 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #111: GFLOPs: 78.9527. Time: 120.1132 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #112: GFLOPs: 153.5302. Time: 61.7681 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #113: GFLOPs: 110.0988. Time: 86.1341 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #114: GFLOPs: 110.2504. Time: 86.0157 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #115: GFLOPs: 100.8885. Time: 93.9975 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #116: GFLOPs: 139.4219. Time: 68.0185 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #117: GFLOPs: 132.8982. Time: 71.3573 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #118: GFLOPs: 72.1217. Time: 131.4898 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #119: GFLOPs: 123.8289. Time: 76.5836 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #120: GFLOPs: 111.9347. Time: 84.7214 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #121: GFLOPs: 61.5031. Time: 154.1917 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #122: GFLOPs: 83.4301. Time: 113.6671 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #123: GFLOPs: 130.3628. Time: 72.7451 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #124: GFLOPs: 145.7215. Time: 65.0780 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #125: GFLOPs: 105.1891. Time: 90.1545 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #126: GFLOPs: 95.3227. Time: 99.4859 us. Best GFLOPs: 229.7795
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for b_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(28), T.int64(8), T.int64(4)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(36), oco_0 * T.int64(36) + oco_1 * T.int64(12) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0 in T.grid(T.int64(3), T.int64(3)):
                        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(36), oco_1 * T.int64(12) + ax1)
                                v_i2 = T.axis.spatial(T.int64(58), oh_1 * T.int64(2) + kh_0 + ax2)
                                v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(7) + kw_0 + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                        for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(36), oco_0 * T.int64(36) + oco_1 * T.int64(12) + oco_2 * T.int64(3) + oco_3)
                                v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(7) + ow_2 + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(36), T.int64(56), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b64)
sch.annotate(block_or_loop=l83, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l83, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b65)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b118)
b143 = sch.decompose_reduction(block=b118, loop=l129)
2024-04-28 22:28:39 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #128: GFLOPs: 14.7557. Time: 642.6846 us. Best GFLOPs: 229.7795
2024-04-29 01:20:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:20:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:20:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-29 01:20:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:21:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-29 01:21:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-29 01:21:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-29 01:21:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3c600e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a66138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bd7b18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48e79f8)]: 0 failure(s)
2024-04-29 01:21:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9830  0.9383  0.9270  0.9270  0.8626  0.8512  0.8380  0.8380  0.8355  0.8294  0.8191  0.8102  0.8078  0.7956  0.7885  0.7885
[17 : 32]:	0.7879  0.7843  0.7838  0.7838  0.7797  0.7736  0.7662  0.7640  0.7545  0.7537  0.7537  0.7473  0.7430  0.7426  0.7415  0.7415
[33 : 48]:	0.7258  0.7252  0.7233  0.7181  0.7178  0.7178  0.7123  0.7115  0.7115  0.7078  0.7070  0.7015  0.6990  0.6969  0.6932  0.6928
[49 : 64]:	0.6886  0.6882  0.6846  0.6841  0.6841  0.6840  0.6823  0.6792  0.6791  0.6776  0.6759  0.6759  0.6759  0.6759  0.6737  0.6712
2024-04-29 01:21:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:21:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #129: GFLOPs: 227.6438. Time: 41.6583 us. Best GFLOPs: 229.7795
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #130: GFLOPs: 227.2069. Time: 41.7385 us. Best GFLOPs: 229.7795
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #131: GFLOPs: 216.7325. Time: 43.7556 us. Best GFLOPs: 229.7795
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #132: GFLOPs: 229.9570. Time: 41.2393 us. Best GFLOPs: 229.9570
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #133: GFLOPs: 225.1651. Time: 42.1169 us. Best GFLOPs: 229.9570
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #134: GFLOPs: 190.9489. Time: 49.6639 us. Best GFLOPs: 229.9570
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #135: GFLOPs: 211.9493. Time: 44.7431 us. Best GFLOPs: 229.9570
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #136: GFLOPs: 237.3204. Time: 39.9597 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #137: GFLOPs: 158.7152. Time: 59.7502 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #138: GFLOPs: 218.4331. Time: 43.4150 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #139: GFLOPs: 145.0082. Time: 65.3981 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #140: GFLOPs: 197.1661. Time: 48.0978 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #141: GFLOPs: 145.0444. Time: 65.3818 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #142: GFLOPs: 151.1503. Time: 62.7406 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #143: GFLOPs: 183.3204. Time: 51.7306 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #144: GFLOPs: 185.9064. Time: 51.0110 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #145: GFLOPs: 184.6912. Time: 51.3466 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #146: GFLOPs: 175.4094. Time: 54.0636 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #147: GFLOPs: 180.2086. Time: 52.6238 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #148: GFLOPs: 181.3333. Time: 52.2974 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #149: GFLOPs: 170.8329. Time: 55.5119 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #150: GFLOPs: 75.6845. Time: 125.2999 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #151: GFLOPs: 71.3719. Time: 132.8712 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #152: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(288), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(144) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(144) // T.int64(72) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(144) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(144) // T.int64(72) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(144) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(144) // T.int64(72) * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(144) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(144) // T.int64(72) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 36, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b109)
b127 = sch.decompose_reduction(block=b109, loop=l113)
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #153: GFLOPs: 95.8953. Time: 98.8919 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #154: GFLOPs: 102.9055. Time: 92.1551 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #155: GFLOPs: 188.6766. Time: 50.2620 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #156: GFLOPs: 191.6372. Time: 49.4855 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #157: GFLOPs: 204.1008. Time: 46.4636 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #158: GFLOPs: 222.1931. Time: 42.6803 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #159: GFLOPs: 189.6196. Time: 50.0120 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #160: GFLOPs: 181.6834. Time: 52.1967 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #161: GFLOPs: 231.5215. Time: 40.9606 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #162: GFLOPs: 193.4104. Time: 49.0318 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #163: GFLOPs: 224.6163. Time: 42.2198 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #164: GFLOPs: 188.3160. Time: 50.3583 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #165: GFLOPs: 146.1964. Time: 64.8666 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #166: GFLOPs: 74.7189. Time: 126.9192 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #167: GFLOPs: 74.9434. Time: 126.5389 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #168: GFLOPs: 178.8939. Time: 53.0105 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #169: GFLOPs: 182.5137. Time: 51.9592 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #170: GFLOPs: 226.0671. Time: 41.9489 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #171: GFLOPs: 101.4408. Time: 93.4857 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #172: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(36), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(36), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(288), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(72) * T.int64(9) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(18) // T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(36) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(36) // T.int64(18) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(72) * T.int64(9) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(18) // T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(36) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(36) // T.int64(18) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(72) * T.int64(9) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(18) // T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(36) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(36) // T.int64(18) * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(36), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(72) * T.int64(9) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(18) // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(72) // T.int64(36) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(36) // T.int64(18) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 9, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b109)
b127 = sch.decompose_reduction(block=b109, loop=l113)
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #173: GFLOPs: 163.0849. Time: 58.1493 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #174: GFLOPs: 132.0014. Time: 71.8421 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #175: GFLOPs: 135.3591. Time: 70.0600 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #176: GFLOPs: 105.6158. Time: 89.7902 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #177: GFLOPs: 174.0975. Time: 54.4710 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #178: GFLOPs: 133.8497. Time: 70.8501 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #179: GFLOPs: 180.7673. Time: 52.4612 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #180: GFLOPs: 184.3047. Time: 51.4543 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #181: GFLOPs: 181.3073. Time: 52.3049 us. Best GFLOPs: 237.3204
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #182: GFLOPs: 241.5295. Time: 39.2634 us. Best GFLOPs: 241.5295
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #183: GFLOPs: 145.2681. Time: 65.2811 us. Best GFLOPs: 241.5295
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #184: GFLOPs: 58.3171. Time: 162.6154 us. Best GFLOPs: 241.5295
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #185: GFLOPs: 158.7222. Time: 59.7476 us. Best GFLOPs: 241.5295
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #186: GFLOPs: 143.7635. Time: 65.9643 us. Best GFLOPs: 241.5295
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #187: GFLOPs: 253.8110. Time: 37.3635 us. Best GFLOPs: 253.8110
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #188: GFLOPs: 253.3241. Time: 37.4353 us. Best GFLOPs: 253.8110
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #189: GFLOPs: 253.1260. Time: 37.4646 us. Best GFLOPs: 253.8110
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #190: GFLOPs: 1.0278. Time: 9226.7535 us. Best GFLOPs: 253.8110
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #191: GFLOPs: 46.2649. Time: 204.9777 us. Best GFLOPs: 253.8110
2024-04-29 01:23:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_2] Trial #192: GFLOPs: 16.0249. Time: 591.7814 us. Best GFLOPs: 253.8110
