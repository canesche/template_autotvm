2024-04-28 20:38:15 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_global_avg_pool2d"
2024-04-28 20:38:15 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-28 20:38:15 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:38:15 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(49)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(49), T.int64(1)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(49)):
                with T.block("adaptive_pool_sum"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[49, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:15 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(49), T.int64(1)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                with T.block("adaptive_pool_sum"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[49, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:15 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(320)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSRR", [ax2, ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 21:28:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:28:46 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:28:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59313e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ed5d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x557b9d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c342e8)]: 0 failure(s)
2024-04-28 21:28:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:28:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59313e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ed5d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x557b9d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c342e8)]: 0 failure(s)
2024-04-28 21:28:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59313e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ed5d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x557b9d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c342e8)]: 0 failure(s)
2024-04-28 21:28:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59313e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ed5d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x557b9d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c342e8)]: 0 failure(s)
2024-04-28 21:28:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59313e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x55ed5d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x557b9d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c342e8)]: 0 failure(s)
2024-04-28 21:28:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9965  0.9915  0.9846  0.9805  0.9604  0.9602  0.9593  0.9568  0.9554  0.9512  0.9413  0.9336  0.9278  0.9175  0.9147
[17 : 32]:	0.9000  0.8974  0.8897  0.8842  0.8788  0.8759  0.8671  0.8655  0.8648  0.8643  0.8610  0.8512  0.8509  0.8435  0.8403  0.8393
[33 : 48]:	0.8370  0.8356  0.8330  0.8316  0.8181  0.8165  0.8128  0.8096  0.8089  0.7966  0.7874  0.7872  0.7818  0.7811  0.7795  0.7775
[49 : 64]:	0.7681  0.7618  0.7526  0.7501  0.7419  0.7418  0.7276  0.7258  0.7174  0.7134  0.7112  0.7099  0.7078  0.7019  0.7017  0.6992
2024-04-28 21:28:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:28:59 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 1.5598. Time: 41.0307 us. Best GFLOPs: 1.5598
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 5.0267. Time: 12.7319 us. Best GFLOPs: 5.0267
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 5.2712. Time: 12.1415 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 2.6539. Time: 24.1158 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 4.8417. Time: 13.2185 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 2.6679. Time: 23.9885 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 2.3779. Time: 26.9147 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 2.3193. Time: 27.5944 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 1.7210. Time: 37.1877 us. Best GFLOPs: 5.2712
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 6.1407. Time: 10.4222 us. Best GFLOPs: 6.1407
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 2.9417. Time: 21.7559 us. Best GFLOPs: 6.1407
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 2.7725. Time: 23.0843 us. Best GFLOPs: 6.1407
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 6.5138. Time: 9.8253 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 2.7431. Time: 23.3317 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 3.1794. Time: 20.1298 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 4.7845. Time: 13.3765 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 2.8799. Time: 22.2228 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 3.0321. Time: 21.1073 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 6.0424. Time: 10.5919 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.9841. Time: 12.8409 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 3.2565. Time: 19.6529 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 4.9271. Time: 12.9893 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 2.1476. Time: 29.8012 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 3.0372. Time: 21.0719 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 2.6967. Time: 23.7331 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 2.8193. Time: 22.7009 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 5.7387. Time: 11.1524 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 6.0006. Time: 10.6656 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 3.1421. Time: 20.3683 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 5.0608. Time: 12.6461 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 2.7398. Time: 23.3597 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 5.2778. Time: 12.1263 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 2.7587. Time: 23.1990 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 2.8967. Time: 22.0943 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 2.1024. Time: 30.4416 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 2.3583. Time: 27.1384 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 2.1719. Time: 29.4667 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 5.9209. Time: 10.8091 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 4.7943. Time: 13.3492 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 2.7497. Time: 23.2754 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 3.2659. Time: 19.5966 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 3.1527. Time: 20.3000 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 2.0426. Time: 31.3324 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 4.8605. Time: 13.1674 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 2.7912. Time: 22.9294 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 5.2589. Time: 12.1698 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 4.1745. Time: 15.3312 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 2.8442. Time: 22.5023 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 4.8880. Time: 13.0933 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 5.8620. Time: 10.9177 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 1.9341. Time: 33.0902 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 5.8974. Time: 10.8522 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 5.0299. Time: 12.7239 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 2.9652. Time: 21.5835 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.1995. Time: 29.0975 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 4.7728. Time: 13.4092 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 1.8872. Time: 33.9126 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 3.1319. Time: 20.4349 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 1.8260. Time: 35.0497 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.9648. Time: 32.5737 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 6.4387. Time: 9.9398 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 4.9665. Time: 12.8864 us. Best GFLOPs: 6.5138
2024-04-28 21:34:44 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 2.3332. Time: 27.4296 us. Best GFLOPs: 6.5138
