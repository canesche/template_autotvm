2024-04-28 20:37:05 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_contrib_conv2d_NCHWc_add_clip_3"
2024-04-28 20:37:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(32), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:37:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:37:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(12) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:37:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(2), T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(12) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:37:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:01:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:01:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:01:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:01:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:01:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:01:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:01:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:01:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:01:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9989  0.9988  0.9984  0.9976  0.9970  0.9966  0.9961  0.9961  0.9945  0.9943  0.9935  0.9935  0.9932  0.9916  0.9913
[17 : 32]:	0.9903  0.9900  0.9894  0.9894  0.9888  0.9885  0.9880  0.9876  0.9869  0.9862  0.9858  0.9846  0.9833  0.9825  0.9824  0.9821
[33 : 48]:	0.9817  0.9808  0.9803  0.9795  0.9795  0.9782  0.9779  0.9776  0.9775  0.9775  0.9775  0.9763  0.9762  0.9756  0.9754  0.9740
[49 : 64]:	0.9736  0.9735  0.9734  0.9728  0.9726  0.9725  0.9723  0.9717  0.9712  0.9708  0.9690  0.9687  0.9674  0.9667  0.9662  0.9654
2024-04-28 21:01:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:01:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #1: GFLOPs: 9.5667. Time: 1054.2153 us. Best GFLOPs: 9.5667
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(24) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(24) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 12, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #3: GFLOPs: 21.3654. Time: 472.0417 us. Best GFLOPs: 21.3654
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #4: GFLOPs: 29.6309. Time: 340.3668 us. Best GFLOPs: 29.6309
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #5: GFLOPs: 41.7673. Time: 241.4656 us. Best GFLOPs: 41.7673
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #6: GFLOPs: 33.8024. Time: 298.3631 us. Best GFLOPs: 41.7673
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #7: GFLOPs: 32.8446. Time: 307.0634 us. Best GFLOPs: 41.7673
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #8: GFLOPs: 129.1517. Time: 78.0894 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #9: GFLOPs: 8.4371. Time: 1195.3606 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #10: GFLOPs: 43.0348. Time: 234.3542 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #11: GFLOPs: 4.9270. Time: 2046.9486 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(42), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(21) // T.int64(7) * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(21) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(21) // T.int64(7) * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(21) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(32), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 16, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #13: GFLOPs: 19.5138. Time: 516.8326 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #14: GFLOPs: 15.5017. Time: 650.5978 us. Best GFLOPs: 129.1517
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #15: GFLOPs: 170.6873. Time: 59.0868 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #16: GFLOPs: 4.1922. Time: 2405.7537 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #17: GFLOPs: 4.7036. Time: 2144.2026 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #18: GFLOPs: 54.1802. Time: 186.1449 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #19: GFLOPs: 78.6392. Time: 128.2487 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #20: GFLOPs: 76.7654. Time: 131.3792 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #21: GFLOPs: 84.8634. Time: 118.8425 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #22: GFLOPs: 56.8557. Time: 177.3856 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(24) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(24) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(32), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(24) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #24: GFLOPs: 30.0952. Time: 335.1154 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #25: GFLOPs: 59.6716. Time: 169.0146 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #26: GFLOPs: 35.5975. Time: 283.3170 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #27: GFLOPs: 14.1985. Time: 710.3132 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(24) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(24) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("compute"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 24])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #29: GFLOPs: 85.6568. Time: 117.7416 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #30: GFLOPs: 75.9298. Time: 132.8251 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #31: GFLOPs: 19.5772. Time: 515.1585 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #32: GFLOPs: 53.3507. Time: 189.0392 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #33: GFLOPs: 47.9114. Time: 210.5006 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(84), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 16, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #35: GFLOPs: 55.1232. Time: 182.9608 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #36: GFLOPs: 29.3972. Time: 343.0726 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #37: GFLOPs: 95.6776. Time: 105.4100 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #38: GFLOPs: 47.8316. Time: 210.8518 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #39: GFLOPs: 49.8748. Time: 202.2140 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #40: GFLOPs: 76.5621. Time: 131.7281 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #41: GFLOPs: 32.3648. Time: 311.6159 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #42: GFLOPs: 68.2569. Time: 147.7561 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #43: GFLOPs: 114.5042. Time: 88.0786 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #44: GFLOPs: 7.3067. Time: 1380.2937 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #45: GFLOPs: 90.7682. Time: 111.1114 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #46: GFLOPs: 15.5177. Time: 649.9269 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #47: GFLOPs: 74.9613. Time: 134.5411 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #48: GFLOPs: 22.0874. Time: 456.6119 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #49: GFLOPs: 3.8744. Time: 2603.0950 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #50: GFLOPs: 2.6648. Time: 3784.6849 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #51: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 24, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #52: GFLOPs: 25.4236. Time: 396.6940 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #53: GFLOPs: 19.0742. Time: 528.7455 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #54: GFLOPs: 29.2206. Time: 345.1460 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #55: GFLOPs: 46.0555. Time: 218.9833 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #56: GFLOPs: 78.6183. Time: 128.2828 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #57: GFLOPs: 41.0991. Time: 245.3919 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #58: GFLOPs: 68.3202. Time: 147.6193 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(12) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(12) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 3, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #60: GFLOPs: 25.8357. Time: 390.3665 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #61: GFLOPs: 3.9743. Time: 2537.6567 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #62: GFLOPs: 32.9441. Time: 306.1364 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #63: GFLOPs: 85.1314. Time: 118.4684 us. Best GFLOPs: 170.6873
2024-04-28 21:33:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #64: GFLOPs: 11.3287. Time: 890.2502 us. Best GFLOPs: 170.6873
2024-04-28 21:54:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:54:46 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2024-04-28 21:54:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:54:49 [INFO] [evolutionary_search.cc:723] Sampled 455 candidate(s)
2024-04-28 21:54:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:54:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:55:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:55:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 21:55:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9666  0.9587  0.9483  0.9440  0.9007  0.8298  0.8223  0.8195  0.8144  0.8140  0.8138  0.8040  0.8038  0.8002  0.7904  0.7863
[17 : 32]:	0.7856  0.7844  0.7835  0.7794  0.7766  0.7745  0.7733  0.7691  0.7622  0.7575  0.7573  0.7571  0.7494  0.7488  0.7423  0.7422
[33 : 48]:	0.7382  0.7374  0.7371  0.7352  0.7318  0.7316  0.7315  0.7314  0.7314  0.7306  0.7236  0.7233  0.7223  0.7223  0.7213  0.7213
[49 : 64]:	0.7198  0.7191  0.7156  0.7139  0.7135  0.7109  0.7098  0.7078  0.7077  0.7059  0.7022  0.6972  0.6951  0.6946  0.6946  0.6939
2024-04-28 21:55:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:55:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #65: GFLOPs: 170.8517. Time: 59.0300 us. Best GFLOPs: 170.8517
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #66: GFLOPs: 171.7571. Time: 58.7188 us. Best GFLOPs: 171.7571
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #67: GFLOPs: 174.1168. Time: 57.9231 us. Best GFLOPs: 174.1168
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #68: GFLOPs: 126.8466. Time: 79.5085 us. Best GFLOPs: 174.1168
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #69: GFLOPs: 174.7048. Time: 57.7281 us. Best GFLOPs: 174.7048
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #70: GFLOPs: 67.8260. Time: 148.6949 us. Best GFLOPs: 174.7048
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #71: GFLOPs: 95.9748. Time: 105.0836 us. Best GFLOPs: 174.7048
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #72: GFLOPs: 122.9091. Time: 82.0556 us. Best GFLOPs: 174.7048
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #73: GFLOPs: 187.7900. Time: 53.7056 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #74: GFLOPs: 83.5830. Time: 120.6630 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #75: GFLOPs: 139.3948. Time: 72.3511 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #76: GFLOPs: 164.3455. Time: 61.3669 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #77: GFLOPs: 173.6142. Time: 58.0907 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #78: GFLOPs: 108.6853. Time: 92.7943 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #79: GFLOPs: 126.9786. Time: 79.4258 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #80: GFLOPs: 86.7398. Time: 116.2716 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #81: GFLOPs: 144.5157. Time: 69.7874 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #82: GFLOPs: 135.9789. Time: 74.1687 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #83: GFLOPs: 146.4301. Time: 68.8750 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #84: GFLOPs: 141.4828. Time: 71.2834 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #85: GFLOPs: 139.4499. Time: 72.3226 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #86: GFLOPs: 95.4990. Time: 105.6071 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #87: GFLOPs: 97.8955. Time: 103.0218 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #88: GFLOPs: 141.3073. Time: 71.3719 us. Best GFLOPs: 187.7900
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #89: GFLOPs: 240.4458. Time: 41.9445 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #90: GFLOPs: 105.1300. Time: 95.9325 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #91: GFLOPs: 174.8180. Time: 57.6907 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #92: GFLOPs: 129.0133. Time: 78.1732 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #93: GFLOPs: 107.7597. Time: 93.5913 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #94: GFLOPs: 127.9430. Time: 78.8271 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #95: GFLOPs: 123.2683. Time: 81.8165 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #96: GFLOPs: 102.3346. Time: 98.5529 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #97: GFLOPs: 131.6293. Time: 76.6195 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #98: GFLOPs: 92.5755. Time: 108.9421 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #99: GFLOPs: 225.6453. Time: 44.6957 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #100: GFLOPs: 102.3598. Time: 98.5286 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #101: GFLOPs: 118.8486. Time: 84.8590 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #102: GFLOPs: 113.0412. Time: 89.2186 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #103: GFLOPs: 138.0471. Time: 73.0575 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #104: GFLOPs: 123.3569. Time: 81.7577 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #105: GFLOPs: 76.2414. Time: 132.2821 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #106: GFLOPs: 128.4506. Time: 78.5156 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #107: GFLOPs: 114.8559. Time: 87.8089 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #108: GFLOPs: 112.2663. Time: 89.8344 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #109: GFLOPs: 93.3933. Time: 107.9882 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #110: GFLOPs: 145.3285. Time: 69.3971 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #111: GFLOPs: 141.3476. Time: 71.3516 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #112: GFLOPs: 140.6702. Time: 71.6952 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #113: GFLOPs: 171.4391. Time: 58.8278 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #114: GFLOPs: 149.7092. Time: 67.3665 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #115: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(12) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #116: GFLOPs: 123.8205. Time: 81.4516 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #117: GFLOPs: 115.6739. Time: 87.1880 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #118: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(24), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(24) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(7), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(24) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(24) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 24, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #119: GFLOPs: 185.5656. Time: 54.3494 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #120: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(12) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #121: GFLOPs: 170.2756. Time: 59.2297 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #122: GFLOPs: 115.2503. Time: 87.5084 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #123: GFLOPs: 203.3770. Time: 49.5896 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #124: GFLOPs: 76.5266. Time: 131.7891 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #125: GFLOPs: 95.4941. Time: 105.6126 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #126: GFLOPs: 51.8956. Time: 194.3396 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #127: GFLOPs: 27.0482. Time: 372.8673 us. Best GFLOPs: 240.4458
2024-04-28 21:56:45 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #128: GFLOPs: 16.6684. Time: 605.0599 us. Best GFLOPs: 240.4458
2024-04-28 22:46:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:46:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:46:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 22:46:48 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:46:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 22:46:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 22:47:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 22:47:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 22:47:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9545  0.9522  0.9429  0.9297  0.9290  0.9275  0.9108  0.9004  0.8977  0.8916  0.8915  0.8857  0.8791  0.8786  0.8680  0.8577
[17 : 32]:	0.8519  0.8507  0.8417  0.8372  0.8334  0.8169  0.8121  0.8112  0.8086  0.7995  0.7958  0.7901  0.7862  0.7754  0.7700  0.7691
[33 : 48]:	0.7544  0.7521  0.7518  0.7484  0.7345  0.7341  0.7316  0.7277  0.7261  0.7260  0.7103  0.7095  0.7063  0.7055  0.7055  0.7055
[49 : 64]:	0.7032  0.7030  0.7020  0.7020  0.6952  0.6938  0.6930  0.6882  0.6879  0.6855  0.6848  0.6797  0.6791  0.6788  0.6786  0.6746
2024-04-28 22:47:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:47:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #129: GFLOPs: 187.4763. Time: 53.7955 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #130: GFLOPs: 238.9185. Time: 42.2126 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #131: GFLOPs: 117.1577. Time: 86.0837 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #132: GFLOPs: 95.4920. Time: 105.6149 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #133: GFLOPs: 116.0738. Time: 86.8876 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #134: GFLOPs: 123.1839. Time: 81.8725 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #135: GFLOPs: 178.3699. Time: 56.5419 us. Best GFLOPs: 240.4458
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #136: GFLOPs: 247.3540. Time: 40.7730 us. Best GFLOPs: 247.3540
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #137: GFLOPs: 147.3580. Time: 68.4413 us. Best GFLOPs: 247.3540
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #138: GFLOPs: 296.0433. Time: 34.0672 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #139: GFLOPs: 150.1732. Time: 67.1583 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #140: GFLOPs: 174.9173. Time: 57.6580 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #141: GFLOPs: 189.7386. Time: 53.1541 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #142: GFLOPs: 128.1242. Time: 78.7156 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #143: GFLOPs: 254.9188. Time: 39.5631 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #144: GFLOPs: 68.0599. Time: 148.1838 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #145: GFLOPs: 292.7226. Time: 34.4537 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #146: GFLOPs: 143.1913. Time: 70.4329 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #147: GFLOPs: 156.4085. Time: 64.4810 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #148: GFLOPs: 143.2479. Time: 70.4051 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #149: GFLOPs: 54.6391. Time: 184.5818 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #150: GFLOPs: 84.6797. Time: 119.1003 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #151: GFLOPs: 258.0918. Time: 39.0767 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #152: GFLOPs: 145.1357. Time: 69.4893 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #153: GFLOPs: 112.2686. Time: 89.8326 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #154: GFLOPs: 211.6653. Time: 47.6478 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #155: GFLOPs: 183.2830. Time: 55.0263 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #156: GFLOPs: 146.1778. Time: 68.9939 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #157: GFLOPs: 120.7841. Time: 83.4992 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #158: GFLOPs: 132.1254. Time: 76.3318 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #159: GFLOPs: 113.7262. Time: 88.6812 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #160: GFLOPs: 142.1513. Time: 70.9482 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #161: GFLOPs: 126.5583. Time: 79.6896 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #162: GFLOPs: 115.4551. Time: 87.3532 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #163: GFLOPs: 91.6300. Time: 110.0663 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #164: GFLOPs: 271.9958. Time: 37.0792 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #165: GFLOPs: 161.4320. Time: 62.4744 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #166: GFLOPs: 200.8569. Time: 50.2117 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #167: GFLOPs: 206.7385. Time: 48.7833 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #168: GFLOPs: 208.4776. Time: 48.3763 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #169: GFLOPs: 115.3207. Time: 87.4550 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #170: GFLOPs: 185.1931. Time: 54.4587 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #171: GFLOPs: 166.6901. Time: 60.5038 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #172: GFLOPs: 127.2273. Time: 79.2705 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #173: GFLOPs: 137.5132. Time: 73.3411 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #174: GFLOPs: 177.4490. Time: 56.8354 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #175: GFLOPs: 175.9841. Time: 57.3084 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #176: GFLOPs: 176.4777. Time: 57.1482 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #177: GFLOPs: 105.9451. Time: 95.1944 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #178: GFLOPs: 211.4751. Time: 47.6906 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #179: GFLOPs: 169.9416. Time: 59.3461 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #180: GFLOPs: 169.3465. Time: 59.5547 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #181: GFLOPs: 160.4410. Time: 62.8603 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #182: GFLOPs: 164.4044. Time: 61.3449 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #183: GFLOPs: 173.6252. Time: 58.0870 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #184: GFLOPs: 115.7698. Time: 87.1158 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #185: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(6) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #186: GFLOPs: 135.4712. Time: 74.4467 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #187: GFLOPs: 155.6715. Time: 64.7863 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #188: GFLOPs: 153.2632. Time: 65.8043 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #189: GFLOPs: 146.8161. Time: 68.6939 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #190: GFLOPs: 10.1584. Time: 992.8134 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #191: GFLOPs: 4.2630. Time: 2365.7757 us. Best GFLOPs: 296.0433
2024-04-28 22:48:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #192: GFLOPs: 5.1198. Time: 1969.8867 us. Best GFLOPs: 296.0433
2024-04-28 23:52:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:52:10 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:52:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 23:52:12 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:52:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 23:52:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 23:52:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 23:52:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-28 23:52:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9269  0.9192  0.8903  0.8494  0.8488  0.8314  0.8024  0.8024  0.7960  0.7960  0.7889  0.7843  0.7838  0.7715  0.7695  0.7683
[17 : 32]:	0.7629  0.7617  0.7429  0.7322  0.7252  0.7202  0.7202  0.7152  0.7071  0.7068  0.7007  0.6891  0.6855  0.6715  0.6707  0.6663
[33 : 48]:	0.6658  0.6655  0.6643  0.6605  0.6594  0.6571  0.6550  0.6459  0.6440  0.6440  0.6438  0.6424  0.6407  0.6293  0.6239  0.6226
[49 : 64]:	0.6226  0.6225  0.6220  0.6214  0.6199  0.6162  0.6140  0.6133  0.6133  0.6130  0.6115  0.6093  0.6048  0.6031  0.6031  0.6029
2024-04-28 23:52:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:52:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #193: GFLOPs: 128.8275. Time: 78.2859 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #194: GFLOPs: 102.3678. Time: 98.5210 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #195: GFLOPs: 143.9431. Time: 70.0650 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #196: GFLOPs: 122.3412. Time: 82.4364 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #197: GFLOPs: 292.7479. Time: 34.4507 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #198: GFLOPs: 195.6743. Time: 51.5417 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #199: GFLOPs: 90.9302. Time: 110.9133 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #200: GFLOPs: 97.5337. Time: 103.4040 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #201: GFLOPs: 118.7195. Time: 84.9513 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #202: GFLOPs: 126.9030. Time: 79.4731 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #203: GFLOPs: 292.4114. Time: 34.4904 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #204: GFLOPs: 263.2023. Time: 38.3180 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #205: GFLOPs: 220.8250. Time: 45.6713 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #206: GFLOPs: 233.6815. Time: 43.1586 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #207: GFLOPs: 176.6366. Time: 57.0967 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #208: GFLOPs: 277.7042. Time: 36.3170 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #209: GFLOPs: 122.3663. Time: 82.4196 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #210: GFLOPs: 192.0054. Time: 52.5265 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #211: GFLOPs: 207.9961. Time: 48.4883 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #212: GFLOPs: 283.3976. Time: 35.5874 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #213: GFLOPs: 213.9080. Time: 47.1482 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #214: GFLOPs: 210.1045. Time: 48.0017 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #215: GFLOPs: 184.0937. Time: 54.7839 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #216: GFLOPs: 220.1992. Time: 45.8012 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #217: GFLOPs: 180.3613. Time: 55.9176 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #218: GFLOPs: 90.5175. Time: 111.4190 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #219: GFLOPs: 205.0739. Time: 49.1792 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #220: GFLOPs: 162.1448. Time: 62.1998 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #221: GFLOPs: 194.6427. Time: 51.8148 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #222: GFLOPs: 182.3431. Time: 55.3099 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #223: GFLOPs: 136.1538. Time: 74.0734 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #224: GFLOPs: 145.4217. Time: 69.3526 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #225: GFLOPs: 83.2727. Time: 121.1126 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #226: GFLOPs: 196.7720. Time: 51.2541 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #227: GFLOPs: 264.7004. Time: 38.1011 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #228: GFLOPs: 293.6231. Time: 34.3480 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #229: GFLOPs: 169.3066. Time: 59.5687 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #230: GFLOPs: 232.3793. Time: 43.4005 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #231: GFLOPs: 187.7375. Time: 53.7206 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #232: GFLOPs: 170.2175. Time: 59.2499 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #233: GFLOPs: 267.3263. Time: 37.7268 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #234: GFLOPs: 188.8366. Time: 53.4079 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #235: GFLOPs: 146.8854. Time: 68.6615 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #236: GFLOPs: 205.0692. Time: 49.1803 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #237: GFLOPs: 164.9941. Time: 61.1257 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #238: GFLOPs: 144.7784. Time: 69.6608 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #239: GFLOPs: 237.0796. Time: 42.5400 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #240: GFLOPs: 180.1402. Time: 55.9863 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #241: GFLOPs: 247.2383. Time: 40.7921 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #242: GFLOPs: 225.8430. Time: 44.6566 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #243: GFLOPs: 126.1848. Time: 79.9255 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #244: GFLOPs: 116.2043. Time: 86.7901 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #245: GFLOPs: 222.7602. Time: 45.2746 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #246: GFLOPs: 177.9426. Time: 56.6777 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #247: GFLOPs: 188.2875. Time: 53.5637 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #248: GFLOPs: 130.3364. Time: 77.3796 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #249: GFLOPs: 204.9586. Time: 49.2069 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #250: GFLOPs: 140.3731. Time: 71.8469 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #251: GFLOPs: 113.9533. Time: 88.5044 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #252: GFLOPs: 137.3188. Time: 73.4450 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #253: GFLOPs: 165.8575. Time: 60.8075 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #254: GFLOPs: 65.7946. Time: 153.2858 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #255: GFLOPs: 27.8876. Time: 361.6437 us. Best GFLOPs: 296.0433
2024-04-28 23:54:10 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #256: GFLOPs: 34.7529. Time: 290.2022 us. Best GFLOPs: 296.0433
2024-04-29 00:02:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:02:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:02:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 00:02:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:02:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 00:03:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 00:03:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 00:03:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 00:03:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8831  0.8174  0.8088  0.8072  0.7918  0.7888  0.7863  0.7860  0.7856  0.7856  0.7615  0.7547  0.7460  0.7408  0.7322  0.7173
[17 : 32]:	0.7173  0.7169  0.7050  0.7043  0.7043  0.7043  0.7006  0.6994  0.6986  0.6980  0.6969  0.6918  0.6857  0.6813  0.6781  0.6781
[33 : 48]:	0.6770  0.6679  0.6661  0.6641  0.6627  0.6602  0.6588  0.6544  0.6524  0.6516  0.6510  0.6508  0.6493  0.6469  0.6459  0.6455
[49 : 64]:	0.6439  0.6437  0.6431  0.6425  0.6397  0.6357  0.6353  0.6352  0.6315  0.6315  0.6312  0.6310  0.6290  0.6279  0.6262  0.6257
2024-04-29 00:03:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:03:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #257: GFLOPs: 150.5692. Time: 66.9817 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #258: GFLOPs: 273.2187. Time: 36.9132 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #259: GFLOPs: 283.7849. Time: 35.5388 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #260: GFLOPs: 126.7499. Time: 79.5691 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #261: GFLOPs: 240.8658. Time: 41.8714 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #262: GFLOPs: 192.9148. Time: 52.2789 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #263: GFLOPs: 211.6092. Time: 47.6604 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #264: GFLOPs: 233.6033. Time: 43.1731 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #265: GFLOPs: 257.5095. Time: 39.1651 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #266: GFLOPs: 242.1605. Time: 41.6475 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #267: GFLOPs: 201.3103. Time: 50.0987 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #268: GFLOPs: 240.8477. Time: 41.8745 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #269: GFLOPs: 123.4510. Time: 81.6954 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #270: GFLOPs: 135.3432. Time: 74.5170 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #271: GFLOPs: 143.3829. Time: 70.3388 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #272: GFLOPs: 154.9176. Time: 65.1015 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #273: GFLOPs: 153.9584. Time: 65.5071 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #274: GFLOPs: 125.6866. Time: 80.2423 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #275: GFLOPs: 232.1196. Time: 43.4491 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #276: GFLOPs: 269.0903. Time: 37.4795 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #277: GFLOPs: 129.1117. Time: 78.1136 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #278: GFLOPs: 158.0340. Time: 63.8178 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #279: GFLOPs: 278.8802. Time: 36.1638 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #280: GFLOPs: 204.1644. Time: 49.3983 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #281: GFLOPs: 222.2746. Time: 45.3735 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #282: GFLOPs: 233.4321. Time: 43.2047 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #283: GFLOPs: 133.6476. Time: 75.4625 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #284: GFLOPs: 176.3467. Time: 57.1906 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #285: GFLOPs: 60.5748. Time: 166.4947 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #286: GFLOPs: 200.5897. Time: 50.2786 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #287: GFLOPs: 130.8878. Time: 77.0536 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #288: GFLOPs: 129.3047. Time: 77.9970 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #289: GFLOPs: 227.4660. Time: 44.3379 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #290: GFLOPs: 72.3885. Time: 139.3228 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #291: GFLOPs: 79.1743. Time: 127.3820 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #292: GFLOPs: 187.7973. Time: 53.7035 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #293: GFLOPs: 196.7594. Time: 51.2574 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #294: GFLOPs: 234.2941. Time: 43.0458 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #295: GFLOPs: 138.3645. Time: 72.8899 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #296: GFLOPs: 188.4304. Time: 53.5231 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #297: GFLOPs: 130.0666. Time: 77.5401 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #298: GFLOPs: 143.2847. Time: 70.3870 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #299: GFLOPs: 134.2324. Time: 75.1337 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #300: GFLOPs: 150.7916. Time: 66.8829 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #301: GFLOPs: 142.2995. Time: 70.8743 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #302: GFLOPs: 130.7473. Time: 77.1364 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #303: GFLOPs: 113.6950. Time: 88.7055 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #304: GFLOPs: 142.0879. Time: 70.9799 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #305: GFLOPs: 84.1345. Time: 119.8720 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #306: GFLOPs: 129.0244. Time: 78.1664 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #307: GFLOPs: 178.1176. Time: 56.6220 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #308: GFLOPs: 121.4964. Time: 83.0097 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #309: GFLOPs: 129.5979. Time: 77.8205 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #310: GFLOPs: 154.9560. Time: 65.0854 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #311: GFLOPs: 95.1304. Time: 106.0164 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #312: GFLOPs: 193.4180. Time: 52.1429 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #313: GFLOPs: 128.5785. Time: 78.4375 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #314: GFLOPs: 151.2427. Time: 66.6834 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #315: GFLOPs: 131.7425. Time: 76.5537 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #316: GFLOPs: 198.4115. Time: 50.8306 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #317: GFLOPs: 160.6904. Time: 62.7628 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #318: GFLOPs: 69.8692. Time: 144.3465 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #319: GFLOPs: 30.5247. Time: 330.4001 us. Best GFLOPs: 296.0433
2024-04-29 00:04:43 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #320: GFLOPs: 37.0167. Time: 272.4547 us. Best GFLOPs: 296.0433
2024-04-29 01:05:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:05:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:05:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 01:05:32 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:05:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 01:05:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 01:05:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 01:05:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fc1f58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d75018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x39a5488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3c59c38)]: 0 failure(s)
2024-04-29 01:05:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9582  0.9095  0.9086  0.9010  0.8930  0.8922  0.8922  0.8915  0.8873  0.8695  0.8669  0.8657  0.8520  0.8515  0.8401  0.8400
[17 : 32]:	0.8275  0.7940  0.7897  0.7719  0.7594  0.7559  0.7534  0.7460  0.7446  0.7192  0.7192  0.7148  0.7057  0.7048  0.7032  0.7022
[33 : 48]:	0.7005  0.6981  0.6946  0.6931  0.6931  0.6898  0.6865  0.6863  0.6850  0.6849  0.6771  0.6765  0.6740  0.6693  0.6673  0.6668
[49 : 64]:	0.6662  0.6580  0.6579  0.6578  0.6570  0.6539  0.6532  0.6515  0.6515  0.6501  0.6486  0.6477  0.6463  0.6463  0.6459  0.6438
2024-04-29 01:05:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:05:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #321: GFLOPs: 293.9214. Time: 34.3132 us. Best GFLOPs: 296.0433
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #322: GFLOPs: 257.9372. Time: 39.1001 us. Best GFLOPs: 296.0433
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #323: GFLOPs: 255.3073. Time: 39.5029 us. Best GFLOPs: 296.0433
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #324: GFLOPs: 293.3866. Time: 34.3757 us. Best GFLOPs: 296.0433
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #325: GFLOPs: 248.5919. Time: 40.5700 us. Best GFLOPs: 296.0433
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #326: GFLOPs: 300.5004. Time: 33.5619 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #327: GFLOPs: 296.0784. Time: 34.0632 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #328: GFLOPs: 261.7043. Time: 38.5373 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #329: GFLOPs: 242.9747. Time: 41.5079 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #330: GFLOPs: 247.4571. Time: 40.7561 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #331: GFLOPs: 199.9024. Time: 50.4515 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #332: GFLOPs: 247.7314. Time: 40.7109 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #333: GFLOPs: 268.2785. Time: 37.5929 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #334: GFLOPs: 188.7379. Time: 53.4359 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #335: GFLOPs: 233.4187. Time: 43.2072 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #336: GFLOPs: 264.2351. Time: 38.1682 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #337: GFLOPs: 234.3651. Time: 43.0328 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #338: GFLOPs: 272.3521. Time: 37.0307 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #339: GFLOPs: 238.6623. Time: 42.2579 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #340: GFLOPs: 218.7953. Time: 46.0950 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #341: GFLOPs: 204.0658. Time: 49.4222 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #342: GFLOPs: 178.7895. Time: 56.4092 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #343: GFLOPs: 118.6807. Time: 84.9791 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #344: GFLOPs: 195.6463. Time: 51.5490 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #345: GFLOPs: 233.1143. Time: 43.2637 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #346: GFLOPs: 297.3618. Time: 33.9162 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #347: GFLOPs: 197.6865. Time: 51.0170 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #348: GFLOPs: 238.6452. Time: 42.2610 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #349: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(32), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(conv2d_NCHWc[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 3, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #350: GFLOPs: 186.5855. Time: 54.0523 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #351: GFLOPs: 221.4029. Time: 45.5521 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #352: GFLOPs: 192.8867. Time: 52.2865 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #353: GFLOPs: 177.6995. Time: 56.7552 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #354: GFLOPs: 210.2435. Time: 47.9700 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #355: GFLOPs: 198.5860. Time: 50.7859 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #356: GFLOPs: 200.9894. Time: 50.1787 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #357: GFLOPs: 203.1856. Time: 49.6363 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #358: GFLOPs: 213.6620. Time: 47.2025 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #359: GFLOPs: 198.8671. Time: 50.7141 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #360: GFLOPs: 293.4939. Time: 34.3631 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #361: GFLOPs: 233.7726. Time: 43.1418 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #362: GFLOPs: 258.1921. Time: 39.0615 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #363: GFLOPs: 216.3614. Time: 46.6136 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #364: GFLOPs: 197.4312. Time: 51.0830 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #365: GFLOPs: 261.2670. Time: 38.6018 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #366: GFLOPs: 194.2548. Time: 51.9183 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #367: GFLOPs: 196.6796. Time: 51.2782 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #368: GFLOPs: 95.5939. Time: 105.5023 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #369: GFLOPs: 192.7106. Time: 52.3343 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #370: GFLOPs: 213.1124. Time: 47.3242 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #371: GFLOPs: 49.5497. Time: 203.5406 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #372: GFLOPs: 218.2939. Time: 46.2009 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #373: GFLOPs: 135.6942. Time: 74.3243 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #374: GFLOPs: 193.6445. Time: 52.0819 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #375: GFLOPs: 205.4481. Time: 49.0897 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #376: GFLOPs: 133.1923. Time: 75.7204 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #377: GFLOPs: 131.2179. Time: 76.8597 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #378: GFLOPs: 270.7993. Time: 37.2430 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #379: GFLOPs: 213.0455. Time: 47.3391 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #380: GFLOPs: 195.5581. Time: 51.5723 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #381: GFLOPs: 213.1767. Time: 47.3099 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #382: GFLOPs: 57.1885. Time: 176.3533 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #383: GFLOPs: 108.5585. Time: 92.9027 us. Best GFLOPs: 300.5004
2024-04-29 01:07:39 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_clip_3] Trial #384: GFLOPs: 67.0988. Time: 150.3065 us. Best GFLOPs: 300.5004
