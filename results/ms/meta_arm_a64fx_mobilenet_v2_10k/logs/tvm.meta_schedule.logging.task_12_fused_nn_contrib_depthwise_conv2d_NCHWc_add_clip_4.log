2024-04-28 20:36:56 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4"
2024-04-28 20:36:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:36:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:36:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(30), T.int64(30), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(30), T.int64(30), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(2)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + oco_1 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oco_0 * T.int64(24) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:57:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:57:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:57:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 20:57:46 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:57:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 20:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 20:58:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 20:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 20:58:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9992  0.9988  0.9984  0.9984  0.9979  0.9975  0.9970  0.9967  0.9966  0.9961  0.9956  0.9955  0.9954  0.9954  0.9952
[17 : 32]:	0.9940  0.9937  0.9935  0.9934  0.9932  0.9924  0.9920  0.9918  0.9917  0.9916  0.9916  0.9910  0.9906  0.9896  0.9896  0.9895
[33 : 48]:	0.9895  0.9892  0.9887  0.9886  0.9883  0.9882  0.9880  0.9879  0.9879  0.9873  0.9872  0.9870  0.9869  0.9858  0.9857  0.9857
[49 : 64]:	0.9851  0.9829  0.9821  0.9812  0.9810  0.9808  0.9806  0.9799  0.9791  0.9786  0.9781  0.9780  0.9777  0.9776  0.9773  0.9771
2024-04-28 20:58:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:58:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(6), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(28) * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(28) * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(4) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(28) * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(4) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(28) * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[12, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b63)
l76 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b107)
b128 = sch.decompose_reduction(block=b107, loop=l114)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #2: GFLOPs: 0.4573. Time: 6911.9499 us. Best GFLOPs: 0.4573
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #3: GFLOPs: 9.0164. Time: 350.5950 us. Best GFLOPs: 9.0164
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #4: GFLOPs: 15.3324. Time: 206.1708 us. Best GFLOPs: 15.3324
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #5: GFLOPs: 12.3580. Time: 255.7921 us. Best GFLOPs: 15.3324
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #6: GFLOPs: 6.7127. Time: 470.9143 us. Best GFLOPs: 15.3324
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #7: GFLOPs: 38.9026. Time: 81.2565 us. Best GFLOPs: 38.9026
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #8: GFLOPs: 2.5277. Time: 1250.5867 us. Best GFLOPs: 38.9026
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #9: GFLOPs: 55.3624. Time: 57.0981 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #10: GFLOPs: 0.7490. Time: 4220.5765 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(16), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b63)
l78 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b110)
b129 = sch.decompose_reduction(block=b110, loop=l115)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #12: GFLOPs: 16.7085. Time: 189.1900 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #13: GFLOPs: 35.7911. Time: 88.3205 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #14: GFLOPs: 9.3211. Time: 339.1341 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #15: GFLOPs: 3.5791. Time: 883.2195 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #16: GFLOPs: 22.5188. Time: 140.3758 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(1440)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(14), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(48), oco_1 * T.int64(3) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(4) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), oco_1 * T.int64(3) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(4) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #18: GFLOPs: 1.6072. Time: 1966.8214 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #19: GFLOPs: 5.6504. Time: 559.4456 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #20: GFLOPs: 11.4092. Time: 277.0646 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #21: GFLOPs: 27.2592. Time: 115.9642 us. Best GFLOPs: 55.3624
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #22: GFLOPs: 77.2335. Time: 40.9290 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #23: GFLOPs: 31.4729. Time: 100.4384 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #24: GFLOPs: 17.1551. Time: 184.2653 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #25: GFLOPs: 15.4941. Time: 204.0183 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #26: GFLOPs: 3.3018. Time: 957.3823 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #27: GFLOPs: 5.2884. Time: 597.7391 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #28: GFLOPs: 24.6640. Time: 128.1658 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #29: GFLOPs: 50.4284. Time: 62.6846 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #30: GFLOPs: 21.7352. Time: 145.4363 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #31: GFLOPs: 8.4060. Time: 376.0534 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(30)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(48), oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused * T.int64(2) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 6, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b62)
l79 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l99, l100, l101, l102, l103, preserve_unit_iters=True)
l105, l106 = sch.split(loop=l104, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b107)
b124 = sch.decompose_reduction(block=b107, loop=l110)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #33: GFLOPs: 8.5036. Time: 371.7339 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #34: GFLOPs: 24.9675. Time: 126.6081 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(12) + oco_1 * T.int64(12) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(3), T.int64(16)):
                        for ax4_fused in T.vectorized(T.int64(2)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(12) + ax1)
                                v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2 + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), ow_2 * T.int64(14) + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(12), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(12) + oco_1 * T.int64(12) + oco_2 * T.int64(12) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(12) + ax1)
                        v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(28), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=15)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b63)
l87 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b64)
l109 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b65)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b117)
b138 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #36: GFLOPs: 21.3170. Time: 148.2893 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #37: GFLOPs: 15.3070. Time: 206.5123 us. Best GFLOPs: 77.2335
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #38: GFLOPs: 78.1401. Time: 40.4541 us. Best GFLOPs: 78.1401
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(16), T.int64(6), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(24) + oco_1 * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ow_1 * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(24) + oco_1 * T.int64(6) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(24) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(1)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                    v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(4) * T.int64(24) + ax1)
                    v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                    v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + ax4)
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b64)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b108)
b129 = sch.decompose_reduction(block=b108, loop=l115)
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #40: GFLOPs: 105.3415. Time: 30.0080 us. Best GFLOPs: 105.3415
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #41: GFLOPs: 82.0645. Time: 38.5196 us. Best GFLOPs: 105.3415
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #42: GFLOPs: 2.2753. Time: 1389.3030 us. Best GFLOPs: 105.3415
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #43: GFLOPs: 25.5190. Time: 123.8719 us. Best GFLOPs: 105.3415
2024-04-28 21:33:02 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(48), oco_2_init * T.int64(24) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(30), T.int64(16), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), oco_2 * T.int64(24) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), ax2)
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(28), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(48), oco_2 * T.int64(24) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(2352)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(3136))
                    v_i2 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(3136) // T.int64(112))
                    v_i3 = T.axis.spatial(T.int64(28), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(112) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 24])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=13)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b62)
l84 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b63)
l100 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.annotate(block_or_loop=l100, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l100, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l101, l102, l103, l104, l105, preserve_unit_iters=True)
l107, l108 = sch.split(loop=l106, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
b125 = sch.decompose_reduction(block=b109, loop=l111)
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(16), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + oco_2 * T.int64(3) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(4) * T.int64(6) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b63)
l78 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b109)
b128 = sch.decompose_reduction(block=b109, loop=l114)
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #46: GFLOPs: 18.9138. Time: 167.1313 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #47: GFLOPs: 20.6135. Time: 153.3507 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #48: GFLOPs: 49.3750. Time: 64.0220 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #49: GFLOPs: 25.4446. Time: 124.2339 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #50: GFLOPs: 9.9353. Time: 318.1659 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #51: GFLOPs: 35.9593. Time: 87.9075 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #52: GFLOPs: 90.0228. Time: 35.1143 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #53: GFLOPs: 1.5882. Time: 1990.3919 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #54: GFLOPs: 40.4716. Time: 78.1064 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #55: GFLOPs: 20.0871. Time: 157.3690 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #56: GFLOPs: 11.5419. Time: 273.8790 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #57: GFLOPs: 35.6294. Time: 88.7212 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #58: GFLOPs: 9.4798. Time: 333.4544 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #59: GFLOPs: 78.2235. Time: 40.4110 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #60: GFLOPs: 37.2152. Time: 84.9408 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #61: GFLOPs: 6.9931. Time: 452.0302 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #62: GFLOPs: 7.3853. Time: 428.0258 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #63: GFLOPs: 9.6092. Time: 328.9641 us. Best GFLOPs: 105.3415
2024-04-28 21:33:03 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #64: GFLOPs: 47.3398. Time: 66.7744 us. Best GFLOPs: 105.3415
2024-04-28 22:50:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:50:27 [INFO] [evolutionary_search.cc:715] Picked top 56 candidate(s) from database
2024-04-28 22:50:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 22:50:32 [INFO] [evolutionary_search.cc:723] Sampled 456 candidate(s)
2024-04-28 22:50:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 22:50:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 22:51:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 22:51:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-28 22:51:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9955  0.9955  0.9786  0.9477  0.9311  0.9292  0.8929  0.8877  0.8789  0.8445  0.8445  0.8435  0.8403  0.8402  0.8370  0.8347
[17 : 32]:	0.8347  0.8347  0.8342  0.8308  0.8291  0.8216  0.8216  0.8213  0.8132  0.8111  0.8101  0.8095  0.8090  0.8078  0.8078  0.8078
[33 : 48]:	0.8045  0.7999  0.7999  0.7994  0.7980  0.7978  0.7978  0.7978  0.7946  0.7944  0.7918  0.7912  0.7906  0.7905  0.7862  0.7858
[49 : 64]:	0.7848  0.7823  0.7806  0.7772  0.7690  0.7684  0.7583  0.7558  0.7532  0.7531  0.7525  0.7516  0.7509  0.7508  0.7508  0.7501
2024-04-28 22:51:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:51:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #65: GFLOPs: 51.4513. Time: 61.4384 us. Best GFLOPs: 105.3415
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #66: GFLOPs: 104.4128. Time: 30.2749 us. Best GFLOPs: 105.3415
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #67: GFLOPs: 75.2072. Time: 42.0317 us. Best GFLOPs: 105.3415
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #68: GFLOPs: 131.7174. Time: 23.9990 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #69: GFLOPs: 37.8847. Time: 83.4396 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #70: GFLOPs: 68.0634. Time: 46.4433 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #71: GFLOPs: 75.9289. Time: 41.6322 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #72: GFLOPs: 96.0659. Time: 32.9054 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #73: GFLOPs: 90.6296. Time: 34.8792 us. Best GFLOPs: 131.7174
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #74: GFLOPs: 134.6294. Time: 23.4799 us. Best GFLOPs: 134.6294
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #75: GFLOPs: 138.4002. Time: 22.8402 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #76: GFLOPs: 44.0971. Time: 71.6847 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #77: GFLOPs: 75.1933. Time: 42.0395 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #78: GFLOPs: 96.4884. Time: 32.7613 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #79: GFLOPs: 137.6561. Time: 22.9637 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #80: GFLOPs: 80.0715. Time: 39.4783 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #81: GFLOPs: 85.7511. Time: 36.8635 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #82: GFLOPs: 88.9201. Time: 35.5498 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #83: GFLOPs: 68.2305. Time: 46.3296 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #84: GFLOPs: 74.5314. Time: 42.4129 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #85: GFLOPs: 113.1366. Time: 27.9405 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #86: GFLOPs: 80.1897. Time: 39.4201 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #87: GFLOPs: 88.7354. Time: 35.6237 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #88: GFLOPs: 104.8804. Time: 30.1399 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #89: GFLOPs: 82.3523. Time: 38.3849 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #90: GFLOPs: 87.3150. Time: 36.2033 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #91: GFLOPs: 86.7012. Time: 36.4596 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #92: GFLOPs: 87.6774. Time: 36.0536 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #93: GFLOPs: 130.2555. Time: 24.2684 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #94: GFLOPs: 91.3250. Time: 34.6136 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #95: GFLOPs: 91.5863. Time: 34.5149 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #96: GFLOPs: 91.2951. Time: 34.6250 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #97: GFLOPs: 90.5453. Time: 34.9117 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #98: GFLOPs: 112.1616. Time: 28.1833 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #99: GFLOPs: 110.9653. Time: 28.4872 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #100: GFLOPs: 116.1440. Time: 27.2170 us. Best GFLOPs: 138.4002
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #101: GFLOPs: 139.1540. Time: 22.7165 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #102: GFLOPs: 70.8531. Time: 44.6147 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #103: GFLOPs: 81.4782. Time: 38.7967 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #104: GFLOPs: 90.0065. Time: 35.1207 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #105: GFLOPs: 56.9925. Time: 55.4650 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #106: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(42), annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(6)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(16) + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(8), T.int64(4), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(16) + oco_1 * T.int64(16) + oco_2_init * T.int64(8) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(16) + oco_1 * T.int64(16) + oco_2 * T.int64(8) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b65)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b112)
b134 = sch.decompose_reduction(block=b112, loop=l120)
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #107: GFLOPs: 67.4682. Time: 46.8530 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #108: GFLOPs: 123.3249. Time: 25.6322 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #109: GFLOPs: 81.0678. Time: 38.9932 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #110: GFLOPs: 79.2822. Time: 39.8713 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #111: GFLOPs: 124.5654. Time: 25.3769 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #112: GFLOPs: 94.8570. Time: 33.3248 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #113: GFLOPs: 73.5593. Time: 42.9733 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #114: GFLOPs: 100.9579. Time: 31.3110 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #115: GFLOPs: 101.1219. Time: 31.2602 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #116: GFLOPs: 90.1854. Time: 35.0510 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #117: GFLOPs: 27.8640. Time: 113.4472 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #118: GFLOPs: 96.5412. Time: 32.7434 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #119: GFLOPs: 95.4135. Time: 33.1304 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #120: GFLOPs: 64.0280. Time: 49.3704 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #121: GFLOPs: 89.1766. Time: 35.4475 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #122: GFLOPs: 41.9757. Time: 75.3076 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #123: GFLOPs: 125.3553. Time: 25.2170 us. Best GFLOPs: 139.1540
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #124: GFLOPs: 140.9125. Time: 22.4330 us. Best GFLOPs: 140.9125
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #125: GFLOPs: 85.3611. Time: 37.0320 us. Best GFLOPs: 140.9125
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #126: GFLOPs: 8.7841. Time: 359.8639 us. Best GFLOPs: 140.9125
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #127: GFLOPs: 16.1622. Time: 195.5852 us. Best GFLOPs: 140.9125
2024-04-28 22:53:09 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #128: GFLOPs: 33.5816. Time: 94.1315 us. Best GFLOPs: 140.9125
2024-04-29 01:03:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:03:01 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:03:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-29 01:03:06 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-29 01:03:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-29 01:03:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-29 01:03:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x34f8208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x36acec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50e5618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3aaf748)]: 0 failure(s)
2024-04-29 01:04:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0436  1.0345  1.0333  1.0267  1.0055  1.0055  1.0036  1.0036  1.0036  0.9950  0.9950  0.9779  0.9582  0.9502  0.9433  0.9405
[17 : 32]:	0.9298  0.9298  0.9159  0.9146  0.9105  0.9105  0.9105  0.9078  0.9056  0.9056  0.9019  0.9019  0.8985  0.8974  0.8948  0.8918
[33 : 48]:	0.8893  0.8893  0.8893  0.8878  0.8861  0.8861  0.8861  0.8848  0.8815  0.8815  0.8786  0.8784  0.8780  0.8765  0.8736  0.8681
[49 : 64]:	0.8681  0.8613  0.8598  0.8598  0.8598  0.8594  0.8593  0.8593  0.8593  0.8574  0.8574  0.8574  0.8571  0.8567  0.8549  0.8548
2024-04-29 01:04:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:04:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #129: GFLOPs: 134.5107. Time: 23.5006 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #130: GFLOPs: 139.4243. Time: 22.6724 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #131: GFLOPs: 140.3688. Time: 22.5199 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #132: GFLOPs: 134.1690. Time: 23.5605 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #133: GFLOPs: 132.1034. Time: 23.9289 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #134: GFLOPs: 137.9525. Time: 22.9143 us. Best GFLOPs: 140.9125
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #135: GFLOPs: 141.2096. Time: 22.3858 us. Best GFLOPs: 141.2096
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #136: GFLOPs: 141.2847. Time: 22.3739 us. Best GFLOPs: 141.2847
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #137: GFLOPs: 132.9558. Time: 23.7755 us. Best GFLOPs: 141.2847
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #138: GFLOPs: 111.4369. Time: 28.3666 us. Best GFLOPs: 141.2847
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #139: GFLOPs: 103.0309. Time: 30.6810 us. Best GFLOPs: 141.2847
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #140: GFLOPs: 152.2541. Time: 20.7619 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #141: GFLOPs: 136.6635. Time: 23.1305 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #142: GFLOPs: 116.6958. Time: 27.0883 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #143: GFLOPs: 115.5274. Time: 27.3622 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #144: GFLOPs: 127.9105. Time: 24.7133 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #145: GFLOPs: 117.5253. Time: 26.8971 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #146: GFLOPs: 105.5719. Time: 29.9425 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #147: GFLOPs: 120.1040. Time: 26.3196 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #148: GFLOPs: 120.1887. Time: 26.3010 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #149: GFLOPs: 140.9441. Time: 22.4280 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #150: GFLOPs: 131.3686. Time: 24.0627 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #151: GFLOPs: 146.1964. Time: 21.6222 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #152: GFLOPs: 137.3531. Time: 23.0143 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #153: GFLOPs: 122.6112. Time: 25.7814 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #154: GFLOPs: 126.3092. Time: 25.0266 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #155: GFLOPs: 136.6666. Time: 23.1299 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #156: GFLOPs: 139.1703. Time: 22.7138 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #157: GFLOPs: 126.6087. Time: 24.9674 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #158: GFLOPs: 112.9410. Time: 27.9888 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #159: GFLOPs: 146.2229. Time: 21.6183 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #160: GFLOPs: 143.0026. Time: 22.1051 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #161: GFLOPs: 134.2430. Time: 23.5475 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #162: GFLOPs: 138.3003. Time: 22.8567 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #163: GFLOPs: 133.7966. Time: 23.6261 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #164: GFLOPs: 147.3196. Time: 21.4574 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #165: GFLOPs: 129.6564. Time: 24.3805 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #166: GFLOPs: 131.1283. Time: 24.1068 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #167: GFLOPs: 123.0821. Time: 25.6828 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #168: GFLOPs: 91.7680. Time: 34.4465 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #169: GFLOPs: 134.9744. Time: 23.4199 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #170: GFLOPs: 126.7742. Time: 24.9348 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #171: GFLOPs: 144.6627. Time: 21.8514 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #172: GFLOPs: 90.0877. Time: 35.0890 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #173: GFLOPs: 106.5449. Time: 29.6691 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #174: GFLOPs: 114.4587. Time: 27.6177 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #175: GFLOPs: 129.6134. Time: 24.3886 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #176: GFLOPs: 97.6030. Time: 32.3872 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #177: GFLOPs: 123.6044. Time: 25.5742 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #178: GFLOPs: 46.4148. Time: 68.1051 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #179: GFLOPs: 54.0949. Time: 58.4359 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #180: GFLOPs: 52.6974. Time: 59.9856 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #181: GFLOPs: 61.2610. Time: 51.6003 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #182: GFLOPs: 149.3655. Time: 21.1634 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #183: GFLOPs: 40.7174. Time: 77.6349 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #184: GFLOPs: 40.7998. Time: 77.4780 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #185: GFLOPs: 46.4872. Time: 67.9990 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #186: GFLOPs: 145.5897. Time: 21.7123 us. Best GFLOPs: 152.2541
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #187: GFLOPs: 154.8629. Time: 20.4122 us. Best GFLOPs: 154.8629
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #188: GFLOPs: 139.5838. Time: 22.6465 us. Best GFLOPs: 154.8629
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #189: GFLOPs: 103.4575. Time: 30.5545 us. Best GFLOPs: 154.8629
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #190: GFLOPs: 9.5039. Time: 332.6110 us. Best GFLOPs: 154.8629
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #191: GFLOPs: 26.4235. Time: 119.6316 us. Best GFLOPs: 154.8629
2024-04-29 01:05:29 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_4] Trial #192: GFLOPs: 46.2538. Time: 68.3422 us. Best GFLOPs: 154.8629
