2024-04-28 20:38:21 [INFO] [task_scheduler.cc:160] Initializing Task #34: "fused_nn_softmax"
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(40)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(20)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(20), T.int64(50)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(50) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(50) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(20)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(40), T.int64(25)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(25) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 * T.int64(25) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_0 in T.grid(T.int64(1), T.int64(40)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[20, 50])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(40)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(50)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(20), T.int64(50)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(50) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(50) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(50)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(40), T.int64(25)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(25) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 * T.int64(25) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_0 in T.grid(T.int64(1), T.int64(40)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[20, 50])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(40)))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(40), T.int64(25)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(25) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 * T.int64(25) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_0 in T.grid(T.int64(1), T.int64(40)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(25)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(25)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(25), T.int64(40)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(40) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(40) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(25)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(40), T.int64(25)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(25) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 * T.int64(25) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_1 in T.grid(T.int64(1), T.int64(25)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[25, 40])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(25)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(40)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(25), T.int64(40)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(40) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(40) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(40)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(25)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(40)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_1 = T.axis.spatial(T.int64(25), ax0 + ax0_1)
                            v_i0, vk_0 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(25) + vk_1])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(25) + vk_1]
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[25, 40])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=2)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(25)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    for ax0_1, ax1_1 in T.grid(T.int64(1), T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0, v_k = T.axis.remap("SR", [ax0_1, ax1_1])
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1, ax2 in T.grid(T.int64(25), T.int64(1), T.int64(40)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(25) + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(25) + vk_1]
                for ax0, ax1 in T.grid(T.int64(25), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[40, 25])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(500)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(500), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(500)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[500, 2])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(1), T.int64(500)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(2) + vk_1])
                for ax0, ax1 in T.grid(T.int64(2), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[500, 2])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:21 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(T_softmax_exp[v_i0, v_k])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-28 21:31:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:31:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:31:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-28 21:31:29 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:31:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-28 21:31:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-28 21:31:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-28 21:31:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-28 21:31:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9965  0.9955  0.9955  0.9949  0.9945  0.9929  0.9906  0.9900  0.9889  0.9880  0.9877  0.9871  0.9870  0.9868  0.9855
[17 : 32]:	0.9850  0.9839  0.9826  0.9823  0.9821  0.9817  0.9803  0.9790  0.9777  0.9768  0.9767  0.9765  0.9758  0.9753  0.9753  0.9745
[33 : 48]:	0.9745  0.9732  0.9730  0.9725  0.9722  0.9721  0.9713  0.9710  0.9703  0.9702  0.9699  0.9695  0.9688  0.9684  0.9677  0.9673
[49 : 64]:	0.9661  0.9661  0.9648  0.9634  0.9627  0.9625  0.9621  0.9620  0.9614  0.9608  0.9607  0.9604  0.9600  0.9598  0.9591  0.9578
2024-04-28 21:31:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:31:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #1: GFLOPs: 0.0177. Time: 225.9243 us. Best GFLOPs: 0.0177
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #2: GFLOPs: 0.0459. Time: 87.1868 us. Best GFLOPs: 0.0459
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #3: GFLOPs: 0.0380. Time: 105.1808 us. Best GFLOPs: 0.0459
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #4: GFLOPs: 0.1345. Time: 29.7389 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #5: GFLOPs: 0.0812. Time: 49.2711 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #6: GFLOPs: 0.0909. Time: 44.0157 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #7: GFLOPs: 0.0000. Time: 92939.5513 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #8: GFLOPs: 0.1030. Time: 38.8414 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #9: GFLOPs: 0.1058. Time: 37.8159 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #10: GFLOPs: 0.0673. Time: 59.4680 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #11: GFLOPs: 0.0070. Time: 572.6642 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #12: GFLOPs: 0.0054. Time: 734.9696 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #13: GFLOPs: 0.0048. Time: 828.4983 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #14: GFLOPs: 0.0397. Time: 100.8227 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #15: GFLOPs: 0.0069. Time: 577.6103 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #16: GFLOPs: 0.0346. Time: 115.7447 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #17: GFLOPs: 0.0793. Time: 50.4205 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #18: GFLOPs: 0.0000. Time: 92724.5473 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #19: GFLOPs: 0.0570. Time: 70.2285 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #20: GFLOPs: 0.0274. Time: 145.9750 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #21: GFLOPs: 0.0071. Time: 562.7240 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #22: GFLOPs: 0.0553. Time: 72.3358 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #23: GFLOPs: 0.0745. Time: 53.7257 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #24: GFLOPs: 0.0873. Time: 45.7985 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #25: GFLOPs: 0.0364. Time: 109.9416 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #26: GFLOPs: 0.0744. Time: 53.7504 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #27: GFLOPs: 0.1107. Time: 36.1251 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #28: GFLOPs: 0.0752. Time: 53.1589 us. Best GFLOPs: 0.1345
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #29: GFLOPs: 0.1583. Time: 25.2652 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #30: GFLOPs: 0.0304. Time: 131.7760 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #31: GFLOPs: 0.0875. Time: 45.7275 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #32: GFLOPs: 0.1263. Time: 31.6726 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #33: GFLOPs: 0.0050. Time: 796.4950 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #34: GFLOPs: 0.0340. Time: 117.6206 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #35: GFLOPs: 0.0860. Time: 46.5093 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #36: GFLOPs: 0.0053. Time: 754.4884 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #37: GFLOPs: 0.0346. Time: 115.7034 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #38: GFLOPs: 0.0048. Time: 828.9331 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #39: GFLOPs: 0.1069. Time: 37.4296 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #40: GFLOPs: 0.0239. Time: 167.6542 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #41: GFLOPs: 0.0070. Time: 572.4925 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #42: GFLOPs: 0.0343. Time: 116.5973 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #43: GFLOPs: 0.0787. Time: 50.8040 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #44: GFLOPs: 0.0767. Time: 52.1768 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #45: GFLOPs: 0.0373. Time: 107.3480 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #46: GFLOPs: 0.0319. Time: 125.3219 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #47: GFLOPs: 0.0410. Time: 97.5260 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #48: GFLOPs: 0.0071. Time: 565.0011 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #49: GFLOPs: 0.0293. Time: 136.5692 us. Best GFLOPs: 0.1583
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #50: GFLOPs: 0.1652. Time: 24.2075 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #51: GFLOPs: 0.0466. Time: 85.7511 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #52: GFLOPs: 0.0829. Time: 48.2665 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #53: GFLOPs: 0.0061. Time: 659.5589 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #54: GFLOPs: 0.0071. Time: 565.2685 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #55: GFLOPs: 0.0135. Time: 295.3738 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #56: GFLOPs: 0.1388. Time: 28.8192 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #57: GFLOPs: 0.0956. Time: 41.8284 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #58: GFLOPs: 0.0062. Time: 642.8994 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #59: GFLOPs: 0.1458. Time: 27.4382 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #60: GFLOPs: 0.0283. Time: 141.4751 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #61: GFLOPs: 0.0672. Time: 59.5467 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #62: GFLOPs: 0.0846. Time: 47.2744 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #63: GFLOPs: 0.0734. Time: 54.5022 us. Best GFLOPs: 0.1652
2024-04-28 21:34:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #64: GFLOPs: 0.0993. Time: 40.2736 us. Best GFLOPs: 0.1652
2024-04-29 00:42:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:42:46 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 00:42:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-29 00:42:46 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-29 00:42:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-29 00:42:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-29 00:42:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-29 00:42:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3d33788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b36f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x571e4b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x38b8618)]: 0 failure(s)
2024-04-29 00:43:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9987  0.9806  0.9655  0.9487  0.9423  0.9361  0.9229  0.9214  0.9200  0.9194  0.9137  0.8996  0.8979  0.8938  0.8923
[17 : 32]:	0.8882  0.8717  0.8714  0.8654  0.8650  0.8635  0.8620  0.8607  0.8540  0.8532  0.8529  0.8446  0.8441  0.8402  0.8349  0.8268
[33 : 48]:	0.8218  0.8166  0.8123  0.8120  0.8091  0.8039  0.8029  0.7952  0.7952  0.7941  0.7882  0.7861  0.7847  0.7833  0.7782  0.7690
[49 : 64]:	0.7652  0.7599  0.7576  0.7571  0.7538  0.7522  0.7515  0.7486  0.7480  0.7473  0.7455  0.7416  0.7389  0.7389  0.7386  0.7365
2024-04-29 00:43:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:43:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #65: GFLOPs: 0.0748. Time: 53.4856 us. Best GFLOPs: 0.1652
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #66: GFLOPs: 0.0756. Time: 52.9404 us. Best GFLOPs: 0.1652
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #67: GFLOPs: 0.1716. Time: 23.3083 us. Best GFLOPs: 0.1716
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #68: GFLOPs: 0.1658. Time: 24.1315 us. Best GFLOPs: 0.1716
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #69: GFLOPs: 0.1848. Time: 21.6488 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #70: GFLOPs: 0.1642. Time: 24.3543 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #71: GFLOPs: 0.1678. Time: 23.8348 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #72: GFLOPs: 0.1772. Time: 22.5684 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #73: GFLOPs: 0.1557. Time: 25.6925 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #74: GFLOPs: 0.1728. Time: 23.1521 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #75: GFLOPs: 0.1612. Time: 24.8147 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #76: GFLOPs: 0.1592. Time: 25.1209 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #77: GFLOPs: 0.1606. Time: 24.9096 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #78: GFLOPs: 0.1684. Time: 23.7530 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #79: GFLOPs: 0.1707. Time: 23.4292 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #80: GFLOPs: 0.1541. Time: 25.9512 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #81: GFLOPs: 0.1544. Time: 25.9110 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #82: GFLOPs: 0.1688. Time: 23.6985 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #83: GFLOPs: 0.1811. Time: 22.0886 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #84: GFLOPs: 0.1451. Time: 27.5712 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #85: GFLOPs: 0.1465. Time: 27.3116 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #86: GFLOPs: 0.1543. Time: 25.9242 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #87: GFLOPs: 0.1495. Time: 26.7595 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #88: GFLOPs: 0.1772. Time: 22.5758 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #89: GFLOPs: 0.1622. Time: 24.6660 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #90: GFLOPs: 0.1180. Time: 33.8999 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #91: GFLOPs: 0.1431. Time: 27.9562 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #92: GFLOPs: 0.1146. Time: 34.9101 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #93: GFLOPs: 0.1498. Time: 26.6985 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #94: GFLOPs: 0.1157. Time: 34.5677 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #95: GFLOPs: 0.1535. Time: 26.0586 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #96: GFLOPs: 0.1370. Time: 29.1997 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #97: GFLOPs: 0.1834. Time: 21.8140 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #98: GFLOPs: 0.1719. Time: 23.2665 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #99: GFLOPs: 0.1528. Time: 26.1737 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #100: GFLOPs: 0.1598. Time: 25.0292 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #101: GFLOPs: 0.1408. Time: 28.4142 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #102: GFLOPs: 0.1004. Time: 39.8380 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #103: GFLOPs: 0.1134. Time: 35.2789 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #104: GFLOPs: 0.1328. Time: 30.1135 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #105: GFLOPs: 0.1135. Time: 35.2432 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #106: GFLOPs: 0.1200. Time: 33.3200 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #107: GFLOPs: 0.1419. Time: 28.1885 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #108: GFLOPs: 0.1302. Time: 30.7294 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #109: GFLOPs: 0.1412. Time: 28.3300 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #110: GFLOPs: 0.1369. Time: 29.2130 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #111: GFLOPs: 0.1154. Time: 34.6507 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #112: GFLOPs: 0.1372. Time: 29.1518 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #113: GFLOPs: 0.0698. Time: 57.3207 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #114: GFLOPs: 0.0898. Time: 44.5389 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #115: GFLOPs: 0.1210. Time: 33.0600 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #116: GFLOPs: 0.1566. Time: 25.5485 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #117: GFLOPs: 0.1027. Time: 38.9389 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #118: GFLOPs: 0.0865. Time: 46.2640 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #119: GFLOPs: 0.1155. Time: 34.6430 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #120: GFLOPs: 0.1700. Time: 23.5248 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #121: GFLOPs: 0.1576. Time: 25.3795 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #122: GFLOPs: 0.0899. Time: 44.4785 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #123: GFLOPs: 0.1384. Time: 28.8984 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #124: GFLOPs: 0.1188. Time: 33.6631 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #125: GFLOPs: 0.0814. Time: 49.1620 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #126: GFLOPs: 0.0058. Time: 694.2840 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #127: GFLOPs: 0.0000. Time: 166201.0797 us. Best GFLOPs: 0.1848
2024-04-29 00:44:15 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_softmax] Trial #128: GFLOPs: 0.0049. Time: 823.9908 us. Best GFLOPs: 0.1848
