2024-04-28 20:36:26 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1"
2024-04-28 20:36:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:36:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:36:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(3), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(111), T.int64(15), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(6) + oco_2 * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), kh_1 + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ow_2 * T.int64(16) + kw_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(56), T.int64(8), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(24), oco_0 * T.int64(24) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(8) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(111), T.int64(17), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(6) + oco_2 * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_2 * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(3), T.int64(56), T.int64(8), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), oco_0 * T.int64(24) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(8) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(6) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=17)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(111), T.int64(15), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(6) + oco_2 * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_2 * T.int64(16) + kw_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(56), T.int64(8), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), oco_0 * T.int64(24) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(8) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)):
                    with T.block("compute"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:45:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:45:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:45:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 20:45:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:45:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 20:45:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 20:46:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 20:46:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 20:46:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9984  0.9980  0.9979  0.9977  0.9977  0.9970  0.9969  0.9968  0.9968  0.9961  0.9956  0.9951  0.9948  0.9942  0.9938
[17 : 32]:	0.9933  0.9932  0.9924  0.9922  0.9921  0.9915  0.9914  0.9910  0.9908  0.9900  0.9886  0.9884  0.9861  0.9848  0.9848  0.9847
[33 : 48]:	0.9847  0.9846  0.9843  0.9837  0.9835  0.9833  0.9830  0.9830  0.9817  0.9806  0.9803  0.9801  0.9798  0.9794  0.9793  0.9790
[49 : 64]:	0.9778  0.9775  0.9770  0.9761  0.9759  0.9755  0.9750  0.9749  0.9747  0.9739  0.9739  0.9733  0.9724  0.9722  0.9721  0.9715
2024-04-28 20:46:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:46:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #1: GFLOPs: 21.2166. Time: 297.9828 us. Best GFLOPs: 21.2166
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(12), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(57), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_fused_fused % T.int64(2) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oci_0 in T.grid(T.int64(28), T.int64(4)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(2), T.int64(1)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_0 + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b107)
b130 = sch.decompose_reduction(block=b107, loop=l116)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #3: GFLOPs: 1.0059. Time: 6285.3754 us. Best GFLOPs: 21.2166
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #4: GFLOPs: 9.4521. Time: 668.8667 us. Best GFLOPs: 21.2166
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #5: GFLOPs: 3.0936. Time: 2043.6606 us. Best GFLOPs: 21.2166
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(113), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(2)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(56)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("compute"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b107)
b129 = sch.decompose_reduction(block=b107, loop=l115)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #7: GFLOPs: 35.9475. Time: 175.8727 us. Best GFLOPs: 35.9475
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #8: GFLOPs: 1.8362. Time: 3443.0751 us. Best GFLOPs: 35.9475
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2736)):
            for i3 in range(T.int64(114)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(24), i0_i1_i2_fused // T.int64(114))
                        v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_fused % T.int64(114))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(8) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(8) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(8) + ax1)
                        v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 4, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #10: GFLOPs: 3.4201. Time: 1848.5344 us. Best GFLOPs: 35.9475
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #11: GFLOPs: 2.9822. Time: 2120.0017 us. Best GFLOPs: 35.9475
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #12: GFLOPs: 3.6877. Time: 1714.4128 us. Best GFLOPs: 35.9475
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #13: GFLOPs: 93.6365. Time: 67.5183 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #14: GFLOPs: 25.7654. Time: 245.3743 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #15: GFLOPs: 0.6686. Time: 9455.3232 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #16: GFLOPs: 1.2813. Time: 4934.0917 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(24) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0 in T.grid(T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(29), T.int64(13)):
                        for ax4_fused in T.vectorized(T.int64(2)):
                            with T.block("PaddedInput"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(32) // T.int64(8) * T.int64(28) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) * T.int64(14) + kw_0 + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(24) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("compute"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b65)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b113)
b134 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #18: GFLOPs: 17.7599. Time: 355.9798 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #19: GFLOPs: 33.9179. Time: 186.3965 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #20: GFLOPs: 8.2875. Time: 762.8599 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(112) * T.int64(3) + oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(112) // T.int64(16) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(112) * T.int64(3) + oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(112) // T.int64(16) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(113) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(8), T.int64(14), T.int64(1)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                    v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(112) * T.int64(3) + ax1)
                    v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(112) // T.int64(16) * T.int64(8) + ax2)
                    v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + ax4)
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
b96 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b96)
b112 = sch.decompose_reduction(block=b96, loop=l98)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(113), T.int64(5)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(24) + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(24), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(24) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("compute"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 24, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b63)
l76 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b65)
l110 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b111)
b132 = sch.decompose_reduction(block=b111, loop=l118)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #23: GFLOPs: 2.7774. Time: 2276.2828 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #24: GFLOPs: 39.5743. Time: 159.7545 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #25: GFLOPs: 15.3677. Time: 411.3935 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #26: GFLOPs: 13.2688. Time: 476.4679 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #27: GFLOPs: 5.6451. Time: 1119.9496 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #28: GFLOPs: 27.2789. Time: 231.7606 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(57), T.int64(17), T.int64(1)):
                with T.block("PaddedInput"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(56) + ax2)
                    v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(8) * T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(2), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(24), oco_2_init * T.int64(8) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(8) * T.int64(8) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(28), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(24), oco_2 * T.int64(8) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(8) * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(4704)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(24), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(12544))
                    v_i2 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(12544) // T.int64(224))
                    v_i3 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(224) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 3, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #30: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(4), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(4) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(4)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(5), T.int64(3), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(56) + oh_2 * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_2 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + oco_2 * T.int64(12) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(28)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), oco_1 * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(4) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=16)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b63)
l88 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b64)
l110 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b65)
l123 = sch.fuse(l121, l122, preserve_unit_iters=True)
sch.vectorize(loop=l123)
b124 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b124)
b146 = sch.decompose_reduction(block=b124, loop=l132)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(17), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(56) * T.int64(8) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(56) * T.int64(8) + oco_2_init * T.int64(4) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(7)):
                for oci_3_fused in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(56) * T.int64(8) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(4704)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(24), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(12544))
                    v_i2 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(12544) // T.int64(224))
                    v_i3 = T.axis.spatial(T.int64(56), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(224) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b62)
l80 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l99, l100, l101, l102, l103, preserve_unit_iters=True)
l105, l106 = sch.split(loop=l104, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b107)
b123 = sch.decompose_reduction(block=b107, loop=l109)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #32: GFLOPs: 2.8931. Time: 2185.2653 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #33: GFLOPs: 58.8841. Time: 107.3665 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #34: GFLOPs: 16.1668. Time: 391.0588 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #35: GFLOPs: 48.4610. Time: 130.4592 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #36: GFLOPs: 3.3726. Time: 1874.5731 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #37: GFLOPs: 11.1787. Time: 565.5531 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #38: GFLOPs: 52.7203. Time: 119.9192 us. Best GFLOPs: 93.6365
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #39: GFLOPs: 95.2766. Time: 66.3560 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #40: GFLOPs: 53.9080. Time: 117.2771 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #41: GFLOPs: 8.4374. Time: 749.3042 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #42: GFLOPs: 13.4586. Time: 469.7499 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(57), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(12) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(2), T.int64(4)):
                        for oci_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(12) + oco_1 * T.int64(6) + oco_2_init * T.int64(3) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(4)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(12) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                                v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b108)
b130 = sch.decompose_reduction(block=b108, loop=l116)
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #44: GFLOPs: 2.6589. Time: 2377.7590 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #45: GFLOPs: 2.5119. Time: 2516.9132 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #46: GFLOPs: 8.4796. Time: 745.5755 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #47: GFLOPs: 2.3498. Time: 2690.5572 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #48: GFLOPs: 15.7396. Time: 401.6736 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #49: GFLOPs: 28.6151. Time: 220.9386 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #50: GFLOPs: 4.3791. Time: 1443.7075 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #51: GFLOPs: 35.1808. Time: 179.7053 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #52: GFLOPs: 1.9914. Time: 3174.7115 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #53: GFLOPs: 3.2364. Time: 1953.4476 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #54: GFLOPs: 3.9510. Time: 1600.1618 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #55: GFLOPs: 84.2266. Time: 75.0615 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #56: GFLOPs: 26.4069. Time: 239.4139 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #57: GFLOPs: 21.6751. Time: 291.6792 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #58: GFLOPs: 4.3922. Time: 1439.4008 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #59: GFLOPs: 3.4176. Time: 1849.9076 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #60: GFLOPs: 26.1924. Time: 241.3749 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #61: GFLOPs: 20.1953. Time: 313.0513 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #62: GFLOPs: 82.1444. Time: 76.9642 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #63: GFLOPs: 15.0258. Time: 420.7544 us. Best GFLOPs: 95.2766
2024-04-28 21:32:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #64: GFLOPs: 6.0457. Time: 1045.7240 us. Best GFLOPs: 95.2766
2024-04-28 22:41:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:41:19 [INFO] [evolutionary_search.cc:715] Picked top 54 candidate(s) from database
2024-04-28 22:41:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 22:41:25 [INFO] [evolutionary_search.cc:723] Sampled 458 candidate(s)
2024-04-28 22:41:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 22:41:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 22:42:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 22:42:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-28 22:42:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0467  0.9736  0.9725  0.9665  0.9000  0.8836  0.8756  0.8712  0.8687  0.8687  0.8687  0.8681  0.8622  0.8620  0.8523  0.8415
[17 : 32]:	0.8376  0.8328  0.8316  0.8259  0.8248  0.8228  0.8182  0.8182  0.8109  0.8109  0.8097  0.8094  0.8094  0.8094  0.8071  0.8038
[33 : 48]:	0.7994  0.7937  0.7937  0.7873  0.7839  0.7834  0.7832  0.7822  0.7822  0.7816  0.7766  0.7759  0.7755  0.7755  0.7749  0.7743
[49 : 64]:	0.7722  0.7707  0.7707  0.7702  0.7679  0.7671  0.7664  0.7587  0.7574  0.7555  0.7537  0.7524  0.7524  0.7519  0.7517  0.7475
2024-04-28 22:42:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:42:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #65: GFLOPs: 66.4254. Time: 95.1771 us. Best GFLOPs: 95.2766
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #66: GFLOPs: 61.2857. Time: 103.1591 us. Best GFLOPs: 95.2766
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #67: GFLOPs: 68.0307. Time: 92.9312 us. Best GFLOPs: 95.2766
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #68: GFLOPs: 79.2536. Time: 79.7714 us. Best GFLOPs: 95.2766
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #69: GFLOPs: 54.2887. Time: 116.4547 us. Best GFLOPs: 95.2766
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #70: GFLOPs: 126.8555. Time: 49.8376 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #71: GFLOPs: 42.5929. Time: 148.4325 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #72: GFLOPs: 76.4022. Time: 82.7486 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #73: GFLOPs: 21.4152. Time: 295.2193 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #74: GFLOPs: 32.6762. Time: 193.4794 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #75: GFLOPs: 34.2844. Time: 184.4040 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #76: GFLOPs: 61.2256. Time: 103.2604 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #77: GFLOPs: 107.9340. Time: 58.5745 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #78: GFLOPs: 92.8808. Time: 68.0676 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #79: GFLOPs: 42.0203. Time: 150.4553 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #80: GFLOPs: 108.5415. Time: 58.2466 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #81: GFLOPs: 59.7918. Time: 105.7365 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #82: GFLOPs: 76.9891. Time: 82.1178 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #83: GFLOPs: 47.2702. Time: 133.7456 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #84: GFLOPs: 98.8892. Time: 63.9319 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #85: GFLOPs: 98.9477. Time: 63.8941 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #86: GFLOPs: 69.1825. Time: 91.3840 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #87: GFLOPs: 65.3349. Time: 96.7656 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #88: GFLOPs: 62.2186. Time: 101.6123 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #89: GFLOPs: 55.5515. Time: 113.8074 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #90: GFLOPs: 86.9124. Time: 72.7419 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #91: GFLOPs: 60.8599. Time: 103.8809 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #92: GFLOPs: 83.1734. Time: 76.0120 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #93: GFLOPs: 83.7328. Time: 75.5041 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #94: GFLOPs: 84.4909. Time: 74.8267 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #95: GFLOPs: 46.8059. Time: 135.0721 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #96: GFLOPs: 92.0159. Time: 68.7074 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #97: GFLOPs: 42.5100. Time: 148.7219 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #98: GFLOPs: 47.1301. Time: 134.1432 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #99: GFLOPs: 91.8541. Time: 68.8285 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #100: GFLOPs: 103.8027. Time: 60.9057 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #101: GFLOPs: 124.7354. Time: 50.6847 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #102: GFLOPs: 89.6371. Time: 70.5308 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #103: GFLOPs: 43.6658. Time: 144.7855 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #104: GFLOPs: 89.8725. Time: 70.3461 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #105: GFLOPs: 90.2416. Time: 70.0583 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #106: GFLOPs: 19.6905. Time: 321.0773 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #107: GFLOPs: 83.6172. Time: 75.6086 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #108: GFLOPs: 65.3404. Time: 96.7575 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #109: GFLOPs: 103.1828. Time: 61.2716 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #110: GFLOPs: 104.6851. Time: 60.3923 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #111: GFLOPs: 70.3149. Time: 89.9124 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #112: GFLOPs: 76.3508. Time: 82.8043 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #113: GFLOPs: 43.0732. Time: 146.7774 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #114: GFLOPs: 57.2754. Time: 110.3821 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #115: GFLOPs: 77.0322. Time: 82.0719 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #116: GFLOPs: 31.9915. Time: 197.6204 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #117: GFLOPs: 67.7275. Time: 93.3473 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #118: GFLOPs: 75.6823. Time: 83.5358 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #119: GFLOPs: 75.8859. Time: 83.3116 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #120: GFLOPs: 75.9781. Time: 83.2105 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #121: GFLOPs: 71.5857. Time: 88.3162 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #122: GFLOPs: 77.9657. Time: 81.0892 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #123: GFLOPs: 70.8362. Time: 89.2506 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #124: GFLOPs: 98.9212. Time: 63.9113 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #125: GFLOPs: 97.1277. Time: 65.0914 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #126: GFLOPs: 20.5714. Time: 307.3280 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #127: GFLOPs: 25.0988. Time: 251.8917 us. Best GFLOPs: 126.8555
2024-04-28 22:44:10 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(9), T.int64(17)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(56) // T.int64(7) * T.int64(3) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(392) * T.int64(56) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(392) // T.int64(56) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(2), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(56) // T.int64(7) * T.int64(3) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(392) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(56) // T.int64(7) * T.int64(3) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(392) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(24), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(56) // T.int64(7) * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(392) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(4) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b109)
b127 = sch.decompose_reduction(block=b109, loop=l113)
2024-04-29 00:35:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:35:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:35:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-29 00:35:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:35:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-29 00:36:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-29 00:36:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-29 00:36:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33fb5e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5569718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x508f988)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x59a5328)]: 0 failure(s)
2024-04-29 00:36:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9790  0.9503  0.9503  0.9503  0.9428  0.9428  0.9302  0.9183  0.9183  0.9067  0.8913  0.8677  0.8569  0.8336  0.8240  0.8203
[17 : 32]:	0.8143  0.8113  0.8111  0.8094  0.8016  0.8016  0.7992  0.7951  0.7951  0.7950  0.7949  0.7902  0.7881  0.7876  0.7876  0.7859
[33 : 48]:	0.7837  0.7812  0.7812  0.7803  0.7746  0.7746  0.7733  0.7730  0.7721  0.7691  0.7691  0.7689  0.7689  0.7689  0.7689  0.7684
[49 : 64]:	0.7679  0.7679  0.7662  0.7644  0.7644  0.7633  0.7622  0.7602  0.7576  0.7534  0.7496  0.7481  0.7473  0.7473  0.7462  0.7457
2024-04-29 00:36:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:36:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #129: GFLOPs: 134.0037. Time: 47.1791 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #130: GFLOPs: 112.6702. Time: 56.1122 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #131: GFLOPs: 121.5253. Time: 52.0235 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #132: GFLOPs: 81.7870. Time: 77.3005 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #133: GFLOPs: 125.8868. Time: 50.2211 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #134: GFLOPs: 125.2652. Time: 50.4703 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #135: GFLOPs: 111.9893. Time: 56.4534 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #136: GFLOPs: 128.7330. Time: 49.1107 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #137: GFLOPs: 125.7465. Time: 50.2771 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #138: GFLOPs: 110.7632. Time: 57.0783 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #139: GFLOPs: 109.1787. Time: 57.9067 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #140: GFLOPs: 38.4208. Time: 164.5507 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #141: GFLOPs: 102.2836. Time: 61.8103 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #142: GFLOPs: 105.6217. Time: 59.8568 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #143: GFLOPs: 118.8198. Time: 53.2081 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #144: GFLOPs: 62.7684. Time: 100.7222 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #145: GFLOPs: 106.5297. Time: 59.3466 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #146: GFLOPs: 51.0411. Time: 123.8644 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #147: GFLOPs: 81.8980. Time: 77.1957 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #148: GFLOPs: 108.0825. Time: 58.4940 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #149: GFLOPs: 104.8246. Time: 60.3119 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #150: GFLOPs: 102.7982. Time: 61.5009 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #151: GFLOPs: 93.8997. Time: 67.3291 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #152: GFLOPs: 66.0851. Time: 95.6671 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #153: GFLOPs: 65.3559. Time: 96.7345 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #154: GFLOPs: 104.5879. Time: 60.4484 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #155: GFLOPs: 105.2097. Time: 60.0912 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #156: GFLOPs: 118.4199. Time: 53.3878 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #157: GFLOPs: 122.1080. Time: 51.7753 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #158: GFLOPs: 103.1330. Time: 61.3012 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #159: GFLOPs: 104.4555. Time: 60.5250 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #160: GFLOPs: 115.2624. Time: 54.8503 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #161: GFLOPs: 100.3431. Time: 63.0056 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #162: GFLOPs: 97.9651. Time: 64.5350 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #163: GFLOPs: 28.9081. Time: 218.6990 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #164: GFLOPs: 94.5578. Time: 66.8605 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #165: GFLOPs: 105.4642. Time: 59.9462 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #166: GFLOPs: 107.3493. Time: 58.8935 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #167: GFLOPs: 100.4233. Time: 62.9553 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #168: GFLOPs: 123.3641. Time: 51.2481 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #169: GFLOPs: 86.2615. Time: 73.2908 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #170: GFLOPs: 105.2833. Time: 60.0492 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #171: GFLOPs: 104.1722. Time: 60.6897 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #172: GFLOPs: 14.2183. Time: 444.6492 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #173: GFLOPs: 51.2347. Time: 123.3965 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #174: GFLOPs: 33.2149. Time: 190.3415 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #175: GFLOPs: 107.0583. Time: 59.0536 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #176: GFLOPs: 121.3667. Time: 52.0915 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #177: GFLOPs: 118.7354. Time: 53.2459 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #178: GFLOPs: 119.6227. Time: 52.8510 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #179: GFLOPs: 110.9819. Time: 56.9658 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #180: GFLOPs: 100.8281. Time: 62.7025 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #181: GFLOPs: 104.0649. Time: 60.7522 us. Best GFLOPs: 134.0037
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #182: GFLOPs: 135.9572. Time: 46.5012 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #183: GFLOPs: 111.9406. Time: 56.4780 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #184: GFLOPs: 92.6573. Time: 68.2318 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #185: GFLOPs: 78.5849. Time: 80.4503 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #186: GFLOPs: 106.1228. Time: 59.5742 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #187: GFLOPs: 103.9434. Time: 60.8233 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #188: GFLOPs: 101.7448. Time: 62.1376 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #189: GFLOPs: 74.1739. Time: 85.2345 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #190: GFLOPs: 52.1529. Time: 121.2239 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #191: GFLOPs: 29.5195. Time: 214.1698 us. Best GFLOPs: 135.9572
2024-04-29 00:38:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_1] Trial #192: GFLOPs: 12.9815. Time: 487.0133 us. Best GFLOPs: 135.9572
