2024-04-28 20:37:25 [INFO] [task_scheduler.cc:160] Initializing Task #19: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6"
2024-04-28 20:37:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:37:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:37:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(16), T.int64(16), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(7), T.int64(7), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)):
                with T.block("PaddedInput"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(2)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + ax1)
                        v_i2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0 in T.grid(T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(2), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), oco_0 * T.int64(24) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 21:09:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:09:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:09:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 21:09:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:09:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 21:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 21:09:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 21:09:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 21:09:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9994  0.9991  0.9985  0.9982  0.9979  0.9960  0.9958  0.9958  0.9958  0.9957  0.9951  0.9936  0.9935  0.9933  0.9930
[17 : 32]:	0.9927  0.9925  0.9923  0.9923  0.9922  0.9918  0.9912  0.9911  0.9910  0.9907  0.9892  0.9891  0.9887  0.9886  0.9878  0.9876
[33 : 48]:	0.9874  0.9872  0.9865  0.9862  0.9857  0.9854  0.9850  0.9847  0.9839  0.9836  0.9832  0.9819  0.9817  0.9813  0.9812  0.9806
[49 : 64]:	0.9801  0.9798  0.9789  0.9788  0.9776  0.9773  0.9768  0.9766  0.9760  0.9744  0.9739  0.9737  0.9736  0.9729  0.9717  0.9713
2024-04-28 21:09:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:09:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #1: GFLOPs: 13.5453. Time: 116.6861 us. Best GFLOPs: 13.5453
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #2: GFLOPs: 14.6703. Time: 107.7377 us. Best GFLOPs: 14.6703
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #3: GFLOPs: 27.9783. Time: 56.4918 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #4: GFLOPs: 1.5239. Time: 1037.1774 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(98) * T.int64(48) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(98) * T.int64(48) + oco_2_init * T.int64(16) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(98) * T.int64(48) + oco_2 * T.int64(16) + oco_3)
                    v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(1176)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(96), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(784))
                    v_i2 = T.axis.spatial(T.int64(14), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(784) // T.int64(56))
                    v_i3 = T.axis.spatial(T.int64(14), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(56) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 3, 16])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b62)
l80 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l98, l99, l100, l101, l102, preserve_unit_iters=True)
l104, l105 = sch.split(loop=l103, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b106)
b122 = sch.decompose_reduction(block=b106, loop=l108)
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #6: GFLOPs: 4.3828. Time: 360.6283 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #7: GFLOPs: 20.1201. Time: 78.5556 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #8: GFLOPs: 4.7496. Time: 332.7738 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #9: GFLOPs: 13.5936. Time: 116.2716 us. Best GFLOPs: 27.9783
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #10: GFLOPs: 29.2072. Time: 54.1148 us. Best GFLOPs: 29.2072
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #11: GFLOPs: 4.7784. Time: 330.7689 us. Best GFLOPs: 29.2072
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #12: GFLOPs: 28.4924. Time: 55.4725 us. Best GFLOPs: 29.2072
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #13: GFLOPs: 45.0142. Time: 35.1121 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #14: GFLOPs: 3.8090. Time: 414.9499 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #15: GFLOPs: 32.2643. Time: 48.9875 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #16: GFLOPs: 14.2072. Time: 111.2494 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #17: GFLOPs: 4.6594. Time: 339.2187 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #18: GFLOPs: 41.0382. Time: 38.5139 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #19: GFLOPs: 8.4531. Time: 186.9781 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #20: GFLOPs: 10.3829. Time: 152.2260 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #21: GFLOPs: 3.4473. Time: 458.4841 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #22: GFLOPs: 0.7270. Time: 2174.1754 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #23: GFLOPs: 35.6057. Time: 44.3902 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #24: GFLOPs: 19.2565. Time: 82.0784 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #25: GFLOPs: 1.9210. Time: 822.7556 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #26: GFLOPs: 40.2098. Time: 39.3075 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #27: GFLOPs: 5.3308. Time: 296.4914 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #28: GFLOPs: 41.5472. Time: 38.0421 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #29: GFLOPs: 39.2247. Time: 40.2946 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #30: GFLOPs: 29.9438. Time: 52.7837 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #31: GFLOPs: 4.6255. Time: 341.7004 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #32: GFLOPs: 44.1776. Time: 35.7771 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #33: GFLOPs: 0.7220. Time: 2189.1573 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #34: GFLOPs: 3.4957. Time: 452.1366 us. Best GFLOPs: 45.0142
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #35: GFLOPs: 53.5632. Time: 29.5080 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #36: GFLOPs: 3.0297. Time: 521.6826 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #37: GFLOPs: 3.0130. Time: 524.5696 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #38: GFLOPs: 4.5889. Time: 344.4273 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #39: GFLOPs: 12.4607. Time: 126.8423 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(147), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(3)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(49) * T.int64(32) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1 in T.grid(T.int64(1), T.int64(2)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(49) * T.int64(32) + oco_1 * T.int64(32) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(49) * T.int64(32) + oco_1 * T.int64(32) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(49) * T.int64(32) + ax1)
                        v_i2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b64)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b109)
b130 = sch.decompose_reduction(block=b109, loop=l116)
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #41: GFLOPs: 12.9446. Time: 122.1007 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(4) * T.int64(48) + oco_1 * T.int64(12) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(4) * T.int64(48) + oco_1 * T.int64(12) + oco_2 * T.int64(12) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(4) * T.int64(48) + ax1)
                        v_i2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(14), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
l96 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b97)
b118 = sch.decompose_reduction(block=b97, loop=l104)
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #43: GFLOPs: 16.1915. Time: 97.6155 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #44: GFLOPs: 19.6361. Time: 80.4918 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #45: GFLOPs: 44.0758. Time: 35.8597 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #46: GFLOPs: 11.0613. Time: 142.8901 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #47: GFLOPs: 33.1056. Time: 47.7425 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #48: GFLOPs: 6.5404. Time: 241.6590 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #49: GFLOPs: 35.4444. Time: 44.5922 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #50: GFLOPs: 0.9150. Time: 1727.2861 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #51: GFLOPs: 1.2531. Time: 1261.3407 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #52: GFLOPs: 14.1690. Time: 111.5492 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #53: GFLOPs: 48.6686. Time: 32.4756 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                        for oci_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(3) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(14), ax2)
                            v_i3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l107, l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b110)
b134 = sch.decompose_reduction(block=b110, loop=l120)
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #55: GFLOPs: 1.7658. Time: 895.0839 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #56: GFLOPs: 20.6866. Time: 76.4041 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #57: GFLOPs: 10.9115. Time: 144.8518 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #58: GFLOPs: 4.5132. Time: 350.2047 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #59: GFLOPs: 19.8923. Time: 79.4552 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(16), T.int64(3)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(48) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(48) + oco_2_init * T.int64(16) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(48) + oco_2 * T.int64(16) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(48) + ax1)
                            v_i2 = T.axis.spatial(T.int64(14), ax2)
                            v_i3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 3, 16])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b107)
b124 = sch.decompose_reduction(block=b107, loop=l110)
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #61: GFLOPs: 12.0885. Time: 130.7474 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #62: GFLOPs: 17.7986. Time: 88.8017 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #63: GFLOPs: 15.1332. Time: 104.4424 us. Best GFLOPs: 53.5632
2024-04-28 21:33:53 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #64: GFLOPs: 1.9850. Time: 796.2428 us. Best GFLOPs: 53.5632
2024-04-28 22:06:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:06:28 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 22:06:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 22:06:33 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 22:06:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 22:06:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 22:07:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 22:07:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-28 22:07:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0063  1.0063  1.0009  1.0009  1.0009  1.0006  0.9884  0.9875  0.9872  0.9860  0.9842  0.9836  0.9836  0.9806  0.9731  0.9471
[17 : 32]:	0.9471  0.9471  0.9358  0.9267  0.9197  0.9103  0.9050  0.9036  0.9023  0.8922  0.8922  0.8915  0.8890  0.8838  0.8798  0.8777
[33 : 48]:	0.8745  0.8715  0.8586  0.8584  0.8578  0.8536  0.8500  0.8476  0.8456  0.8430  0.8430  0.8422  0.8418  0.8415  0.8414  0.8411
[49 : 64]:	0.8411  0.8406  0.8376  0.8376  0.8355  0.8355  0.8355  0.8335  0.8334  0.8296  0.8296  0.8294  0.8283  0.8283  0.8283  0.8281
2024-04-28 22:07:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:07:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #65: GFLOPs: 37.3345. Time: 42.3346 us. Best GFLOPs: 53.5632
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #66: GFLOPs: 81.0627. Time: 19.4978 us. Best GFLOPs: 81.0627
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #67: GFLOPs: 74.1323. Time: 21.3206 us. Best GFLOPs: 81.0627
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #68: GFLOPs: 75.5835. Time: 20.9112 us. Best GFLOPs: 81.0627
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #69: GFLOPs: 63.1508. Time: 25.0281 us. Best GFLOPs: 81.0627
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #70: GFLOPs: 95.2761. Time: 16.5891 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #71: GFLOPs: 68.7192. Time: 23.0000 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #72: GFLOPs: 75.8885. Time: 20.8272 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #73: GFLOPs: 78.8390. Time: 20.0477 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #74: GFLOPs: 79.0042. Time: 20.0058 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #75: GFLOPs: 30.0571. Time: 52.5847 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #76: GFLOPs: 62.7892. Time: 25.1722 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #77: GFLOPs: 62.0286. Time: 25.4809 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #78: GFLOPs: 46.4198. Time: 34.0489 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #79: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1176), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(588) // T.int64(49) * T.int64(8) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(588) * T.int64(7) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(588) // T.int64(49) * T.int64(8) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(588) * T.int64(7) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(588) // T.int64(49) * T.int64(8) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(588) * T.int64(7) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(588) // T.int64(49) * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(588) * T.int64(7) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 12, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b108)
b125 = sch.decompose_reduction(block=b108, loop=l111)
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #80: GFLOPs: 64.0456. Time: 24.6784 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #81: GFLOPs: 90.4939. Time: 17.4657 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #82: GFLOPs: 87.6999. Time: 18.0222 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #83: GFLOPs: 87.7023. Time: 18.0217 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #84: GFLOPs: 83.4955. Time: 18.9297 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #85: GFLOPs: 72.8500. Time: 21.6959 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #86: GFLOPs: 95.0604. Time: 16.6267 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #87: GFLOPs: 61.6238. Time: 25.6483 us. Best GFLOPs: 95.2761
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #88: GFLOPs: 101.5779. Time: 15.5599 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #89: GFLOPs: 23.0600. Time: 68.5406 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #90: GFLOPs: 72.5956. Time: 21.7719 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #91: GFLOPs: 76.7883. Time: 20.5831 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #92: GFLOPs: 18.1831. Time: 86.9237 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #93: GFLOPs: 91.4980. Time: 17.2741 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #94: GFLOPs: 48.6874. Time: 32.4631 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #95: GFLOPs: 59.3466. Time: 26.6324 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #96: GFLOPs: 91.5887. Time: 17.2570 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #97: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(48) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(48), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(48) + oco_2_init * T.int64(48) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(48), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(48) + oco_2 * T.int64(48) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(48) + ax1)
                            v_i2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(14))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 48])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b108)
b125 = sch.decompose_reduction(block=b108, loop=l111)
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #98: GFLOPs: 56.7694. Time: 27.8415 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #99: GFLOPs: 20.4023. Time: 77.4688 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #100: GFLOPs: 59.1459. Time: 26.7228 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #101: GFLOPs: 63.2964. Time: 24.9705 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #102: GFLOPs: 21.8114. Time: 72.4640 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #103: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(16), T.int64(16), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(12) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(12) + oco_1 * T.int64(4) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(12) + oco_1 * T.int64(4) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(96), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(14), ax2)
                            v_i3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(14))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b107)
b129 = sch.decompose_reduction(block=b107, loop=l115)
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #104: GFLOPs: 94.0366. Time: 16.8077 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #105: GFLOPs: 45.5697. Time: 34.6841 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #106: GFLOPs: 86.7478. Time: 18.2200 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #107: GFLOPs: 95.8116. Time: 16.4964 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #108: GFLOPs: 33.0552. Time: 47.8154 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #109: GFLOPs: 79.5418. Time: 19.8706 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #110: GFLOPs: 64.2523. Time: 24.5990 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #111: GFLOPs: 36.9566. Time: 42.7676 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #112: GFLOPs: 90.3009. Time: 17.5031 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #113: GFLOPs: 81.2515. Time: 19.4525 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #114: GFLOPs: 58.4479. Time: 27.0419 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #115: GFLOPs: 43.8565. Time: 36.0390 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #116: GFLOPs: 43.8103. Time: 36.0770 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #117: GFLOPs: 43.7379. Time: 36.1367 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #118: GFLOPs: 44.1238. Time: 35.8207 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #119: GFLOPs: 43.8178. Time: 36.0708 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #120: GFLOPs: 84.5955. Time: 18.6835 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #121: GFLOPs: 62.8702. Time: 25.1398 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #122: GFLOPs: 69.9666. Time: 22.5900 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #123: GFLOPs: 69.8561. Time: 22.6257 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #124: GFLOPs: 47.4062. Time: 33.3404 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #125: GFLOPs: 44.4058. Time: 35.5932 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #126: GFLOPs: 50.8143. Time: 31.1043 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #127: GFLOPs: 36.1594. Time: 43.7104 us. Best GFLOPs: 101.5779
2024-04-28 22:09:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #128: GFLOPs: 5.8600. Time: 269.7183 us. Best GFLOPs: 101.5779
2024-04-29 00:04:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:04:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:04:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 00:04:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:05:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 00:05:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 00:05:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 00:05:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 00:05:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9382  0.9366  0.9366  0.9357  0.9309  0.9309  0.9309  0.9226  0.9209  0.9089  0.9089  0.9081  0.9067  0.9056  0.9056  0.8975
[17 : 32]:	0.8952  0.8952  0.8952  0.8938  0.8826  0.8804  0.8760  0.8760  0.8754  0.8750  0.8739  0.8710  0.8663  0.8624  0.8621  0.8543
[33 : 48]:	0.8541  0.8538  0.8531  0.8531  0.8531  0.8531  0.8445  0.8433  0.8418  0.8418  0.8414  0.8414  0.8385  0.8373  0.8358  0.8358
[49 : 64]:	0.8353  0.8343  0.8322  0.8300  0.8295  0.8290  0.8269  0.8258  0.8238  0.8182  0.8152  0.8151  0.8134  0.8124  0.8123  0.8103
2024-04-29 00:05:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:05:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #129: GFLOPs: 38.4518. Time: 41.1046 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #130: GFLOPs: 85.0954. Time: 18.5738 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #131: GFLOPs: 85.1299. Time: 18.5663 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #132: GFLOPs: 68.0854. Time: 23.2141 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #133: GFLOPs: 85.6875. Time: 18.4455 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #134: GFLOPs: 85.3683. Time: 18.5144 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #135: GFLOPs: 81.8092. Time: 19.3199 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #136: GFLOPs: 67.6950. Time: 23.3480 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #137: GFLOPs: 69.1868. Time: 22.8446 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #138: GFLOPs: 68.4720. Time: 23.0831 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #139: GFLOPs: 74.0309. Time: 21.3498 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #140: GFLOPs: 83.6435. Time: 18.8962 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #141: GFLOPs: 86.0048. Time: 18.3774 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #142: GFLOPs: 73.2613. Time: 21.5741 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #143: GFLOPs: 78.3958. Time: 20.1611 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #144: GFLOPs: 86.6098. Time: 18.2490 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #145: GFLOPs: 81.1658. Time: 19.4730 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #146: GFLOPs: 80.2894. Time: 19.6856 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #147: GFLOPs: 87.7776. Time: 18.0062 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #148: GFLOPs: 70.5766. Time: 22.3947 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #149: GFLOPs: 85.8231. Time: 18.4163 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #150: GFLOPs: 58.8331. Time: 26.8649 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #151: GFLOPs: 85.8864. Time: 18.4027 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #152: GFLOPs: 79.9982. Time: 19.7572 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #153: GFLOPs: 82.0729. Time: 19.2578 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #154: GFLOPs: 78.4726. Time: 20.1414 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #155: GFLOPs: 75.8317. Time: 20.8428 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #156: GFLOPs: 81.4558. Time: 19.4037 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #157: GFLOPs: 92.0261. Time: 17.1750 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #158: GFLOPs: 82.1756. Time: 19.2337 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #159: GFLOPs: 82.3651. Time: 19.1895 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #160: GFLOPs: 75.3157. Time: 20.9856 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #161: GFLOPs: 75.5114. Time: 20.9312 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #162: GFLOPs: 31.5057. Time: 50.1670 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #163: GFLOPs: 81.3387. Time: 19.4316 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #164: GFLOPs: 82.8599. Time: 19.0749 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #165: GFLOPs: 87.4719. Time: 18.0692 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #166: GFLOPs: 85.0849. Time: 18.5761 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #167: GFLOPs: 82.4317. Time: 19.1740 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #168: GFLOPs: 89.7833. Time: 17.6040 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #169: GFLOPs: 81.8596. Time: 19.3080 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #170: GFLOPs: 69.1021. Time: 22.8726 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #171: GFLOPs: 87.0669. Time: 18.1532 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #172: GFLOPs: 84.7535. Time: 18.6487 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #173: GFLOPs: 75.2608. Time: 21.0009 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #174: GFLOPs: 86.7019. Time: 18.2296 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #175: GFLOPs: 33.6659. Time: 46.9479 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #176: GFLOPs: 37.3646. Time: 42.3006 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #177: GFLOPs: 89.2322. Time: 17.7127 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #178: GFLOPs: 48.7284. Time: 32.4358 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #179: GFLOPs: 81.0561. Time: 19.4994 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #180: GFLOPs: 70.6666. Time: 22.3662 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #181: GFLOPs: 86.2143. Time: 18.3327 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #182: GFLOPs: 79.8111. Time: 19.8036 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #183: GFLOPs: 80.0953. Time: 19.7333 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #184: GFLOPs: 88.5088. Time: 17.8575 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #185: GFLOPs: 79.6202. Time: 19.8510 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #186: GFLOPs: 46.5672. Time: 33.9411 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #187: GFLOPs: 68.2477. Time: 23.1589 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #188: GFLOPs: 87.4544. Time: 18.0728 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #189: GFLOPs: 35.8494. Time: 44.0885 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #190: GFLOPs: 9.5703. Time: 165.1517 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #191: GFLOPs: 5.1786. Time: 305.2096 us. Best GFLOPs: 101.5779
2024-04-29 00:07:03 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #192: GFLOPs: 2.0758. Time: 761.4026 us. Best GFLOPs: 101.5779
2024-04-29 01:18:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:18:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:18:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:18:17 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:18:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:18:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:18:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:19:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:19:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9384  0.9140  0.9140  0.8924  0.8913  0.8829  0.8794  0.8740  0.8728  0.8670  0.8659  0.8625  0.8624  0.8624  0.8620  0.8607
[17 : 32]:	0.8596  0.8596  0.8591  0.8586  0.8580  0.8561  0.8549  0.8549  0.8519  0.8508  0.8508  0.8505  0.8505  0.8491  0.8486  0.8486
[33 : 48]:	0.8458  0.8441  0.8433  0.8430  0.8430  0.8426  0.8425  0.8422  0.8420  0.8420  0.8403  0.8396  0.8395  0.8393  0.8382  0.8382
[49 : 64]:	0.8382  0.8382  0.8382  0.8381  0.8377  0.8358  0.8354  0.8346  0.8346  0.8330  0.8330  0.8327  0.8317  0.8317  0.8315  0.8314
2024-04-29 01:19:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:19:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #193: GFLOPs: 46.0047. Time: 34.3561 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #194: GFLOPs: 36.2532. Time: 43.5974 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #195: GFLOPs: 67.3285. Time: 23.4751 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #196: GFLOPs: 97.8876. Time: 16.1465 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #197: GFLOPs: 97.6049. Time: 16.1933 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #198: GFLOPs: 101.0781. Time: 15.6369 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #199: GFLOPs: 79.4971. Time: 19.8818 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #200: GFLOPs: 86.2386. Time: 18.3276 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #201: GFLOPs: 96.6184. Time: 16.3586 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #202: GFLOPs: 85.9411. Time: 18.3910 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #203: GFLOPs: 97.7859. Time: 16.1633 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #204: GFLOPs: 88.1176. Time: 17.9368 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #205: GFLOPs: 87.1752. Time: 18.1307 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #206: GFLOPs: 90.2323. Time: 17.5164 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #207: GFLOPs: 82.9394. Time: 19.0566 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #208: GFLOPs: 80.6324. Time: 19.6019 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #209: GFLOPs: 90.6040. Time: 17.4445 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #210: GFLOPs: 89.9209. Time: 17.5770 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #211: GFLOPs: 81.2083. Time: 19.4628 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #212: GFLOPs: 85.8274. Time: 18.4154 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #213: GFLOPs: 82.6520. Time: 19.1229 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #214: GFLOPs: 99.0916. Time: 15.9503 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #215: GFLOPs: 82.6735. Time: 19.1179 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #216: GFLOPs: 81.2232. Time: 19.4593 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #217: GFLOPs: 58.8211. Time: 26.8704 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #218: GFLOPs: 94.0954. Time: 16.7972 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #219: GFLOPs: 90.2379. Time: 17.5153 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #220: GFLOPs: 91.8319. Time: 17.2113 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #221: GFLOPs: 86.8568. Time: 18.1971 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #222: GFLOPs: 87.6589. Time: 18.0306 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #223: GFLOPs: 86.3108. Time: 18.3122 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #224: GFLOPs: 75.0487. Time: 21.0603 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #225: GFLOPs: 80.8847. Time: 19.5407 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #226: GFLOPs: 73.7777. Time: 21.4230 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #227: GFLOPs: 29.7408. Time: 53.1440 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #228: GFLOPs: 41.6630. Time: 37.9364 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #229: GFLOPs: 39.9412. Time: 39.5718 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #230: GFLOPs: 97.6574. Time: 16.1846 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #231: GFLOPs: 87.9287. Time: 17.9753 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #232: GFLOPs: 83.5710. Time: 18.9126 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #233: GFLOPs: 92.8421. Time: 17.0240 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #234: GFLOPs: 90.5907. Time: 17.4471 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #235: GFLOPs: 85.1374. Time: 18.5646 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #236: GFLOPs: 87.1136. Time: 18.1435 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #237: GFLOPs: 91.9247. Time: 17.1939 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #238: GFLOPs: 80.3485. Time: 19.6711 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #239: GFLOPs: 83.6754. Time: 18.8890 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #240: GFLOPs: 68.6160. Time: 23.0346 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #241: GFLOPs: 84.5423. Time: 18.6953 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #242: GFLOPs: 82.0540. Time: 19.2622 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #243: GFLOPs: 83.8373. Time: 18.8525 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #244: GFLOPs: 83.6394. Time: 18.8971 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #245: GFLOPs: 86.6248. Time: 18.2459 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #246: GFLOPs: 24.9982. Time: 63.2263 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #247: GFLOPs: 83.9690. Time: 18.8229 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #248: GFLOPs: 84.8434. Time: 18.6290 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #249: GFLOPs: 87.5878. Time: 18.0452 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #250: GFLOPs: 72.9055. Time: 21.6794 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #251: GFLOPs: 90.5476. Time: 17.4554 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #252: GFLOPs: 81.7032. Time: 19.3450 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #253: GFLOPs: 80.6765. Time: 19.5911 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #254: GFLOPs: 29.0035. Time: 54.4949 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #255: GFLOPs: 2.3501. Time: 672.5395 us. Best GFLOPs: 101.5779
2024-04-29 01:20:38 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #256: GFLOPs: 2.0458. Time: 772.5713 us. Best GFLOPs: 101.5779
2024-04-29 01:25:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:25:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:25:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:25:46 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:25:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:26:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:26:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:26:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3906818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x486f868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x593d4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x48edce8)]: 0 failure(s)
2024-04-29 01:26:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0054  0.9551  0.9099  0.9040  0.9035  0.9002  0.9002  0.9002  0.8976  0.8968  0.8881  0.8879  0.8864  0.8864  0.8861  0.8857
[17 : 32]:	0.8841  0.8816  0.8799  0.8795  0.8786  0.8785  0.8785  0.8785  0.8770  0.8770  0.8764  0.8764  0.8752  0.8752  0.8692  0.8692
[33 : 48]:	0.8692  0.8692  0.8692  0.8692  0.8687  0.8670  0.8670  0.8664  0.8664  0.8664  0.8664  0.8661  0.8655  0.8655  0.8641  0.8634
[49 : 64]:	0.8615  0.8610  0.8610  0.8607  0.8606  0.8598  0.8589  0.8588  0.8585  0.8573  0.8569  0.8569  0.8569  0.8568  0.8563  0.8554
2024-04-29 01:26:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:26:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #257: GFLOPs: 83.7851. Time: 18.8643 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #258: GFLOPs: 96.5990. Time: 16.3619 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #259: GFLOPs: 75.8856. Time: 20.8280 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #260: GFLOPs: 78.5137. Time: 20.1308 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #261: GFLOPs: 91.3784. Time: 17.2967 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #262: GFLOPs: 77.8035. Time: 20.3146 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #263: GFLOPs: 75.0889. Time: 21.0490 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #264: GFLOPs: 82.4819. Time: 19.1623 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #265: GFLOPs: 87.6864. Time: 18.0250 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #266: GFLOPs: 89.6886. Time: 17.6226 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #267: GFLOPs: 92.0146. Time: 17.1771 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #268: GFLOPs: 96.8462. Time: 16.3201 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #269: GFLOPs: 89.1359. Time: 17.7319 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #270: GFLOPs: 92.1987. Time: 17.1428 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #271: GFLOPs: 73.0868. Time: 21.6256 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #272: GFLOPs: 88.0970. Time: 17.9410 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #273: GFLOPs: 64.2937. Time: 24.5832 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #274: GFLOPs: 97.3992. Time: 16.2275 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #275: GFLOPs: 94.5849. Time: 16.7103 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #276: GFLOPs: 92.4806. Time: 17.0905 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #277: GFLOPs: 81.3192. Time: 19.4363 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #278: GFLOPs: 89.7606. Time: 17.6084 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #279: GFLOPs: 90.4742. Time: 17.4695 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #280: GFLOPs: 88.4660. Time: 17.8661 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #281: GFLOPs: 87.6917. Time: 18.0239 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #282: GFLOPs: 92.8738. Time: 17.0182 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #283: GFLOPs: 86.2315. Time: 18.3291 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #284: GFLOPs: 73.7336. Time: 21.4359 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #285: GFLOPs: 79.7878. Time: 19.8094 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #286: GFLOPs: 80.1492. Time: 19.7200 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #287: GFLOPs: 93.5000. Time: 16.9042 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #288: GFLOPs: 87.3346. Time: 18.0976 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #289: GFLOPs: 95.0644. Time: 16.6260 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #290: GFLOPs: 94.7523. Time: 16.6808 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #291: GFLOPs: 86.1878. Time: 18.3384 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #292: GFLOPs: 86.2626. Time: 18.3225 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #293: GFLOPs: 88.5562. Time: 17.8479 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #294: GFLOPs: 86.1119. Time: 18.3545 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #295: GFLOPs: 84.6709. Time: 18.6669 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #296: GFLOPs: 86.8193. Time: 18.2050 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #297: GFLOPs: 87.0715. Time: 18.1522 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #298: GFLOPs: 87.4746. Time: 18.0686 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #299: GFLOPs: 90.0681. Time: 17.5483 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #300: GFLOPs: 100.5651. Time: 15.7166 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #301: GFLOPs: 83.5757. Time: 18.9115 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #302: GFLOPs: 88.7077. Time: 17.8174 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #303: GFLOPs: 68.5021. Time: 23.0729 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #304: GFLOPs: 87.1450. Time: 18.1370 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #305: GFLOPs: 89.5593. Time: 17.6480 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #306: GFLOPs: 96.6089. Time: 16.3602 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #307: GFLOPs: 85.0706. Time: 18.5792 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #308: GFLOPs: 91.7201. Time: 17.2323 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #309: GFLOPs: 90.3837. Time: 17.4870 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #310: GFLOPs: 86.9185. Time: 18.1842 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #311: GFLOPs: 84.7073. Time: 18.6589 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #312: GFLOPs: 51.8934. Time: 30.4575 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #313: GFLOPs: 66.9657. Time: 23.6023 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #314: GFLOPs: 69.9218. Time: 22.6044 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #315: GFLOPs: 87.3095. Time: 18.1028 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #316: GFLOPs: 89.7856. Time: 17.6035 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #317: GFLOPs: 86.6565. Time: 18.2392 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #318: GFLOPs: 3.8131. Time: 414.5003 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #319: GFLOPs: 12.9069. Time: 122.4576 us. Best GFLOPs: 101.5779
2024-04-29 01:28:14 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_6] Trial #320: GFLOPs: 25.0454. Time: 63.1071 us. Best GFLOPs: 101.5779
