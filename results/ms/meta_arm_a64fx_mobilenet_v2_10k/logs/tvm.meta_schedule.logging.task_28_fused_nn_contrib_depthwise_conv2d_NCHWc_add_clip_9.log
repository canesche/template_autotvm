2024-04-28 20:38:03 [INFO] [task_scheduler.cc:160] Initializing Task #28: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9"
2024-04-28 20:38:03 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3, v_i4])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3, v_i4], T.float32(6)), T.float32(0))
2024-04-28 20:38:03 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:38:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(9), T.int64(9), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + oco_1 * T.int64(20) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("compute"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 5, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:03 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + oco_1 * T.int64(20) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(20), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + oco_1 * T.int64(20) + ax1)
                        v_i2 = T.axis.spatial(T.int64(7), ax2)
                        v_i3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 5, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:03 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(9), T.int64(3), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + ax1)
                        v_i2 = T.axis.spatial(T.int64(9), ax2)
                        v_i3 = T.axis.spatial(T.int64(9), ow_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_0 in range(T.int64(1)):
                    for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + oco_1 * T.int64(20) + oco_2 * T.int64(4) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(7), T.int64(1), T.int64(4)):
                        with T.block("compute"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(240), oco_0 * T.int64(80) + ax1)
                            v_i2 = T.axis.spatial(T.int64(7), ax2)
                            v_i3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                            T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                            compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 5, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-28 21:23:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:23:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:23:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 21:23:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:23:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 21:24:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 21:24:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 21:24:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 21:24:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9993  0.9975  0.9972  0.9969  0.9963  0.9944  0.9940  0.9939  0.9938  0.9937  0.9932  0.9928  0.9928  0.9921  0.9914
[17 : 32]:	0.9903  0.9897  0.9894  0.9892  0.9890  0.9880  0.9873  0.9869  0.9868  0.9854  0.9846  0.9835  0.9834  0.9831  0.9827  0.9826
[33 : 48]:	0.9826  0.9820  0.9818  0.9818  0.9816  0.9812  0.9806  0.9804  0.9803  0.9802  0.9801  0.9800  0.9800  0.9797  0.9796  0.9791
[49 : 64]:	0.9787  0.9779  0.9774  0.9772  0.9769  0.9765  0.9762  0.9759  0.9759  0.9751  0.9740  0.9732  0.9731  0.9731  0.9719  0.9717
2024-04-28 21:24:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:24:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #1: GFLOPs: 12.4003. Time: 79.6628 us. Best GFLOPs: 12.4003
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #2: GFLOPs: 18.9341. Time: 52.1726 us. Best GFLOPs: 18.9341
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #3: GFLOPs: 4.7095. Time: 209.7538 us. Best GFLOPs: 18.9341
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #4: GFLOPs: 43.9529. Time: 22.4750 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #5: GFLOPs: 32.7024. Time: 30.2069 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #6: GFLOPs: 25.0664. Time: 39.4089 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #7: GFLOPs: 29.9794. Time: 32.9506 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #8: GFLOPs: 6.3856. Time: 154.6974 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #9: GFLOPs: 4.0973. Time: 241.0970 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #10: GFLOPs: 5.6814. Time: 173.8723 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #11: GFLOPs: 4.4487. Time: 222.0493 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #12: GFLOPs: 39.1323. Time: 25.2436 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #13: GFLOPs: 32.8908. Time: 30.0339 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #14: GFLOPs: 31.2855. Time: 31.5750 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #15: GFLOPs: 3.5337. Time: 279.5452 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #16: GFLOPs: 16.2737. Time: 60.7016 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #17: GFLOPs: 31.3530. Time: 31.5070 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #18: GFLOPs: 13.2260. Time: 74.6890 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #19: GFLOPs: 5.0131. Time: 197.0509 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #20: GFLOPs: 9.2731. Time: 106.5275 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #21: GFLOPs: 19.4789. Time: 50.7133 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #22: GFLOPs: 5.9820. Time: 165.1356 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #23: GFLOPs: 3.7850. Time: 260.9860 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #24: GFLOPs: 16.4744. Time: 59.9622 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #25: GFLOPs: 12.0084. Time: 82.2624 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #26: GFLOPs: 3.1246. Time: 316.1446 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #27: GFLOPs: 16.0394. Time: 61.5882 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #28: GFLOPs: 29.4344. Time: 33.5607 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #29: GFLOPs: 7.5174. Time: 131.4065 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #30: GFLOPs: 26.4322. Time: 37.3727 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #31: GFLOPs: 6.2703. Time: 157.5427 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #32: GFLOPs: 6.9222. Time: 142.7058 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #33: GFLOPs: 9.8863. Time: 99.9204 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #34: GFLOPs: 22.9300. Time: 43.0807 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #35: GFLOPs: 25.3322. Time: 38.9954 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #36: GFLOPs: 2.9489. Time: 334.9815 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #37: GFLOPs: 4.1837. Time: 236.1179 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #38: GFLOPs: 15.1809. Time: 65.0712 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #39: GFLOPs: 30.5297. Time: 32.3567 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #40: GFLOPs: 18.8746. Time: 52.3371 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #41: GFLOPs: 39.2819. Time: 25.1475 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #42: GFLOPs: 6.6543. Time: 148.4510 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #43: GFLOPs: 14.6283. Time: 67.5292 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #44: GFLOPs: 19.6161. Time: 50.3586 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #45: GFLOPs: 30.1561. Time: 32.7576 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #46: GFLOPs: 8.1403. Time: 121.3513 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #47: GFLOPs: 20.8538. Time: 47.3697 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #48: GFLOPs: 22.4859. Time: 43.9315 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #49: GFLOPs: 4.3279. Time: 228.2517 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #50: GFLOPs: 4.7170. Time: 209.4225 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #51: GFLOPs: 25.8269. Time: 38.2485 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #52: GFLOPs: 24.8843. Time: 39.6974 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #53: GFLOPs: 1.0215. Time: 967.0362 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(3), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(80) + oco_1 * T.int64(40) + oco_2_init * T.int64(20) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(20), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(80) + oco_1 * T.int64(40) + oco_2 * T.int64(20) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(80), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(80) + ax1)
                        v_i2 = T.axis.spatial(T.int64(7), ax2)
                        v_i3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 2, 2, 20])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
l96 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b97)
b118 = sch.decompose_reduction(block=b97, loop=l104)
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #55: GFLOPs: 3.3035. Time: 299.0258 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #56: GFLOPs: 15.6426. Time: 63.1506 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #57: GFLOPs: 32.0420. Time: 30.8295 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #58: GFLOPs: 2.0965. Time: 471.1812 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #59: GFLOPs: 11.2659. Time: 87.6841 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #60: GFLOPs: 4.0157. Time: 245.9929 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(120), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(9), T.int64(9)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(6) * T.int64(12) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(3) * T.int64(4) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(6) // T.int64(3) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(6) * T.int64(12) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(3) * T.int64(4) + oco_2_init * T.int64(4) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(6) // T.int64(3) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(6) * T.int64(12) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(3) * T.int64(4) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(6) // T.int64(3) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for i0_i1_i2_i3_i4_fused_0 in T.parallel(T.int64(735)):
            for i0_i1_i2_i3_i4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("compute"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(240), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) // T.int64(196))
                    v_i2 = T.axis.spatial(T.int64(7), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(196) // T.int64(28))
                    v_i3 = T.axis.spatial(T.int64(7), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(28) // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), (i0_i1_i2_i3_i4_fused_0 * T.int64(64) + i0_i1_i2_i3_i4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                    T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                    compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[20, 3, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b62)
l77 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78 = sch.fuse(l76, preserve_unit_iters=True)
sch.vectorize(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l98, l99, l100, l101, l102, preserve_unit_iters=True)
l104, l105 = sch.split(loop=l103, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b106)
b125 = sch.decompose_reduction(block=b106, loop=l111)
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #62: GFLOPs: 28.4757. Time: 34.6906 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #63: GFLOPs: 17.9114. Time: 55.1515 us. Best GFLOPs: 43.9529
2024-04-28 21:34:31 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #64: GFLOPs: 5.8855. Time: 167.8439 us. Best GFLOPs: 43.9529
2024-04-28 22:36:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:36:37 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-28 22:36:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 22:36:41 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-28 22:36:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 22:37:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 22:37:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 22:37:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-28 22:37:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1153  1.0993  1.0447  1.0335  1.0282  1.0221  1.0211  1.0143  1.0037  0.9792  0.9783  0.9745  0.9745  0.9677  0.9677  0.9677
[17 : 32]:	0.9677  0.9677  0.9656  0.9653  0.9578  0.9539  0.9539  0.9539  0.9523  0.9192  0.9192  0.9191  0.9191  0.9191  0.9173  0.9170
[33 : 48]:	0.9147  0.9147  0.9147  0.9112  0.9112  0.9096  0.9016  0.8986  0.8977  0.8977  0.8946  0.8928  0.8928  0.8903  0.8894  0.8874
[49 : 64]:	0.8874  0.8744  0.8716  0.8712  0.8707  0.8633  0.8628  0.8607  0.8532  0.8526  0.8505  0.8497  0.8437  0.8407  0.8373  0.8367
2024-04-28 22:37:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:37:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #65: GFLOPs: 48.7295. Time: 20.2719 us. Best GFLOPs: 48.7295
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #66: GFLOPs: 15.4308. Time: 64.0173 us. Best GFLOPs: 48.7295
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #67: GFLOPs: 44.5563. Time: 22.1706 us. Best GFLOPs: 48.7295
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #68: GFLOPs: 49.5674. Time: 19.9292 us. Best GFLOPs: 49.5674
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #69: GFLOPs: 39.3434. Time: 25.1081 us. Best GFLOPs: 49.5674
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #70: GFLOPs: 53.5477. Time: 18.4478 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #71: GFLOPs: 44.3162. Time: 22.2907 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #72: GFLOPs: 25.4451. Time: 38.8225 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #73: GFLOPs: 51.3553. Time: 19.2354 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #74: GFLOPs: 40.7690. Time: 24.2302 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #75: GFLOPs: 42.1004. Time: 23.4639 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #76: GFLOPs: 52.1600. Time: 18.9386 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #77: GFLOPs: 46.1496. Time: 21.4052 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #78: GFLOPs: 53.0568. Time: 18.6185 us. Best GFLOPs: 53.5477
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #79: GFLOPs: 54.0788. Time: 18.2667 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #80: GFLOPs: 49.9838. Time: 19.7632 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #81: GFLOPs: 51.4683. Time: 19.1932 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #82: GFLOPs: 45.2694. Time: 21.8214 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #83: GFLOPs: 29.1215. Time: 33.9213 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #84: GFLOPs: 40.5206. Time: 24.3787 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #85: GFLOPs: 49.0777. Time: 20.1281 us. Best GFLOPs: 54.0788
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #86: GFLOPs: 61.6977. Time: 16.0110 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #87: GFLOPs: 56.2210. Time: 17.5706 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #88: GFLOPs: 56.0672. Time: 17.6188 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #89: GFLOPs: 59.3824. Time: 16.6352 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #90: GFLOPs: 35.6371. Time: 27.7194 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #91: GFLOPs: 36.7247. Time: 26.8985 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #92: GFLOPs: 44.9427. Time: 21.9800 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #93: GFLOPs: 39.5606. Time: 24.9703 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #94: GFLOPs: 32.3672. Time: 30.5198 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #95: GFLOPs: 51.7850. Time: 19.0758 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #96: GFLOPs: 45.9659. Time: 21.4907 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #97: GFLOPs: 18.7192. Time: 52.7714 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #98: GFLOPs: 16.6775. Time: 59.2319 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #99: GFLOPs: 36.6501. Time: 26.9533 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #100: GFLOPs: 45.1540. Time: 21.8771 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #101: GFLOPs: 40.3138. Time: 24.5037 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #102: GFLOPs: 31.2826. Time: 31.5779 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #103: GFLOPs: 31.3822. Time: 31.4778 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #104: GFLOPs: 53.4681. Time: 18.4753 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #105: GFLOPs: 39.9480. Time: 24.7282 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #106: GFLOPs: 38.5945. Time: 25.5953 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #107: GFLOPs: 39.4151. Time: 25.0625 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #108: GFLOPs: 31.3611. Time: 31.4989 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #109: GFLOPs: 42.4873. Time: 23.2502 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #110: GFLOPs: 54.0451. Time: 18.2781 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #111: GFLOPs: 32.8166. Time: 30.1018 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #112: GFLOPs: 25.5238. Time: 38.7027 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #113: GFLOPs: 27.0403. Time: 36.5321 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #114: GFLOPs: 45.3578. Time: 21.7788 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #115: GFLOPs: 53.0197. Time: 18.6316 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #116: GFLOPs: 55.1997. Time: 17.8958 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #117: GFLOPs: 60.1536. Time: 16.4220 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #118: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(40), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(9), T.int64(9)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(12) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(12) + oco_1 * T.int64(12) + oco_2_init * T.int64(3) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(12) + oco_1 * T.int64(12) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(12) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[20, 1, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b63)
l76 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b107)
b128 = sch.decompose_reduction(block=b107, loop=l114)
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #119: GFLOPs: 54.6984. Time: 18.0597 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #120: GFLOPs: 25.2617. Time: 39.1042 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #121: GFLOPs: 53.0263. Time: 18.6292 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #122: GFLOPs: 34.1943. Time: 28.8891 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #123: GFLOPs: 41.0010. Time: 24.0931 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #124: GFLOPs: 33.2582. Time: 29.7022 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #125: GFLOPs: 51.6642. Time: 19.1204 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(15), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(240), oco_1 * T.int64(16) + oco_2_init * T.int64(16) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(240), oco_1 * T.int64(16) + oco_2 * T.int64(16) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(240), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 15, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b98)
b119 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #127: GFLOPs: 3.2154. Time: 307.2202 us. Best GFLOPs: 61.6977
2024-04-28 22:39:05 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(240), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1), T.int64(4)), "float32"), compute: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(84), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(42) * T.int64(120) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(3) * T.int64(40) + oco_2_init * T.int64(40) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(42) // T.int64(6) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(6) // T.int64(3) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(42) * T.int64(120) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(3) * T.int64(40) + oco_2 * T.int64(40) + oco_3)
                    v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(42) // T.int64(6) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(6) // T.int64(3) * T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(40), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("compute"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(240), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(42) * T.int64(120) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(3) * T.int64(40) + ax1)
                        v_i2 = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(42) // T.int64(6) + ax2)
                        v_i3 = T.axis.spatial(T.int64(7), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(6) // T.int64(3) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4], p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4])
                        T.writes(compute[v_i0, v_i1, v_i2, v_i3, v_i4])
                        compute[v_i0, v_i1, v_i2, v_i3, v_i4] = T.max(T.min(DepthwiseConv2d[v_i0, v_i1, v_i2, v_i3, v_i4] + p2[v_i0, v_i1, T.int64(0), T.int64(0), v_i4], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 1, 40])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
l96 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b97)
b113 = sch.decompose_reduction(block=b97, loop=l99)
2024-04-29 00:44:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:44:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:44:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-29 00:44:21 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:44:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-29 00:44:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-29 00:44:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-29 00:45:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5589e28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df7098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ab7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x58fa8d8)]: 0 failure(s)
2024-04-29 00:45:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9464  0.9429  0.9429  0.9429  0.9359  0.9359  0.9359  0.9331  0.9331  0.9331  0.9331  0.9331  0.9331  0.9331  0.9331  0.9312
[17 : 32]:	0.9311  0.9311  0.9311  0.9267  0.9251  0.9224  0.9200  0.9196  0.9185  0.9138  0.9100  0.9100  0.9077  0.9019  0.9019  0.9009
[33 : 48]:	0.9002  0.9002  0.9002  0.8906  0.8903  0.8893  0.8876  0.8865  0.8865  0.8851  0.8845  0.8831  0.8821  0.8800  0.8776  0.8758
[49 : 64]:	0.8727  0.8727  0.8727  0.8700  0.8699  0.8699  0.8699  0.8691  0.8687  0.8687  0.8681  0.8681  0.8662  0.8662  0.8662  0.8630
2024-04-29 00:45:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:45:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #129: GFLOPs: 23.6186. Time: 41.8248 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #130: GFLOPs: 11.4847. Time: 86.0136 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #131: GFLOPs: 11.4005. Time: 86.6488 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #132: GFLOPs: 23.2210. Time: 42.5408 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #133: GFLOPs: 58.0752. Time: 17.0097 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #134: GFLOPs: 53.3759. Time: 18.5072 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #135: GFLOPs: 54.6364. Time: 18.0803 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #136: GFLOPs: 49.3509. Time: 20.0167 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #137: GFLOPs: 48.9913. Time: 20.1636 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #138: GFLOPs: 47.3080. Time: 20.8810 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #139: GFLOPs: 40.7802. Time: 24.2235 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #140: GFLOPs: 41.2034. Time: 23.9747 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #141: GFLOPs: 41.1375. Time: 24.0131 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #142: GFLOPs: 49.2203. Time: 20.0698 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #143: GFLOPs: 52.2156. Time: 18.9185 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #144: GFLOPs: 44.0718. Time: 22.4144 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #145: GFLOPs: 54.5660. Time: 18.1036 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #146: GFLOPs: 55.4067. Time: 17.8289 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #147: GFLOPs: 59.6033. Time: 16.5736 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #148: GFLOPs: 55.0123. Time: 17.9567 us. Best GFLOPs: 61.6977
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #149: GFLOPs: 65.3647. Time: 15.1127 us. Best GFLOPs: 65.3647
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #150: GFLOPs: 58.1584. Time: 16.9853 us. Best GFLOPs: 65.3647
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #151: GFLOPs: 69.2761. Time: 14.2595 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #152: GFLOPs: 42.2969. Time: 23.3549 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #153: GFLOPs: 45.5423. Time: 21.6906 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #154: GFLOPs: 55.1588. Time: 17.9090 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #155: GFLOPs: 53.1820. Time: 18.5747 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #156: GFLOPs: 51.8264. Time: 19.0605 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #157: GFLOPs: 52.7748. Time: 18.7180 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #158: GFLOPs: 27.2051. Time: 36.3109 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #159: GFLOPs: 51.3254. Time: 19.2466 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #160: GFLOPs: 45.1660. Time: 21.8713 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #161: GFLOPs: 50.2489. Time: 19.6589 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #162: GFLOPs: 50.4482. Time: 19.5813 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #163: GFLOPs: 54.9879. Time: 17.9647 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #164: GFLOPs: 51.1512. Time: 19.3122 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #165: GFLOPs: 21.9145. Time: 45.0770 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #166: GFLOPs: 46.8739. Time: 21.0744 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #167: GFLOPs: 54.5864. Time: 18.0968 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #168: GFLOPs: 48.3339. Time: 20.4378 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #169: GFLOPs: 48.8390. Time: 20.2265 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #170: GFLOPs: 48.1833. Time: 20.5017 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #171: GFLOPs: 56.2504. Time: 17.5615 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #172: GFLOPs: 54.8812. Time: 17.9996 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #173: GFLOPs: 34.7369. Time: 28.4378 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #174: GFLOPs: 60.6919. Time: 16.2763 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #175: GFLOPs: 54.4093. Time: 18.1557 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #176: GFLOPs: 46.7473. Time: 21.1315 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #177: GFLOPs: 52.9116. Time: 18.6696 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #178: GFLOPs: 60.6236. Time: 16.2947 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #179: GFLOPs: 34.0166. Time: 29.0399 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #180: GFLOPs: 54.5718. Time: 18.1017 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #181: GFLOPs: 44.5562. Time: 22.1707 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #182: GFLOPs: 44.8530. Time: 22.0240 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #183: GFLOPs: 44.9995. Time: 21.9523 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #184: GFLOPs: 41.5286. Time: 23.7870 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #185: GFLOPs: 48.6234. Time: 20.3161 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #186: GFLOPs: 47.8378. Time: 20.6498 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #187: GFLOPs: 55.4769. Time: 17.8063 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #188: GFLOPs: 56.1800. Time: 17.5835 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #189: GFLOPs: 47.9338. Time: 20.6084 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #190: GFLOPs: 12.2203. Time: 80.8357 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #191: GFLOPs: 12.9183. Time: 76.4683 us. Best GFLOPs: 69.2761
2024-04-29 00:46:41 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_depthwise_conv2d_NCHWc_add_clip_9] Trial #192: GFLOPs: 19.3326. Time: 51.0972 us. Best GFLOPs: 69.2761
