2024-04-29 19:37:45 [INFO] [task_scheduler.cc:160] Initializing Task #17: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu"
2024-04-29 19:37:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:37:45 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:37:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:37:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 19:37:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(56), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 19:56:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:56:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:56:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 19:56:08 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:56:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 19:56:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 19:56:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 19:56:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 19:56:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9995  0.9991  0.9983  0.9981  0.9978  0.9977  0.9976  0.9976  0.9974  0.9962  0.9961  0.9952  0.9951  0.9947  0.9943
[17 : 32]:	0.9920  0.9916  0.9916  0.9914  0.9909  0.9905  0.9903  0.9896  0.9889  0.9888  0.9876  0.9873  0.9872  0.9867  0.9858  0.9841
[33 : 48]:	0.9840  0.9840  0.9840  0.9836  0.9834  0.9828  0.9822  0.9817  0.9812  0.9810  0.9809  0.9799  0.9798  0.9798  0.9794  0.9792
[49 : 64]:	0.9792  0.9788  0.9776  0.9775  0.9772  0.9772  0.9772  0.9768  0.9766  0.9763  0.9761  0.9758  0.9753  0.9743  0.9741  0.9727
2024-04-29 19:56:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:56:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #1: GFLOPs: 22.6607. Time: 4641.0198 us. Best GFLOPs: 22.6607
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #2: GFLOPs: 120.5350. Time: 872.5173 us. Best GFLOPs: 120.5350
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #3: GFLOPs: 15.1371. Time: 6947.7678 us. Best GFLOPs: 120.5350
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #4: GFLOPs: 13.2840. Time: 7916.9761 us. Best GFLOPs: 120.5350
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #5: GFLOPs: 52.2007. Time: 2014.7031 us. Best GFLOPs: 120.5350
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #7: GFLOPs: 64.8105. Time: 1622.7148 us. Best GFLOPs: 120.5350
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100352))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100352) // T.int64(1792))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1792) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 14, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #9: GFLOPs: 164.5382. Time: 639.1762 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #10: GFLOPs: 6.3366. Time: 16597.1067 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #11: GFLOPs: 81.1889. Time: 1295.3604 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #12: GFLOPs: 15.5864. Time: 6747.4847 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #13: GFLOPs: 16.0891. Time: 6536.6712 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #14: GFLOPs: 102.5742. Time: 1025.2960 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #15: GFLOPs: 14.0488. Time: 7485.9586 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #17: GFLOPs: 19.8721. Time: 5292.3014 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #18: GFLOPs: 132.5866. Time: 793.2091 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #19: GFLOPs: 17.9276. Time: 5866.3146 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #20: GFLOPs: 67.2712. Time: 1563.3577 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #21: GFLOPs: 37.5002. Time: 2804.4874 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #22: GFLOPs: 80.3558. Time: 1308.7909 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #23: GFLOPs: 104.7748. Time: 1003.7611 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 8, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #25: GFLOPs: 145.1568. Time: 724.5195 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #26: GFLOPs: 34.5910. Time: 3040.3571 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #27: GFLOPs: 31.4506. Time: 3343.9415 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #28: GFLOPs: 21.6116. Time: 4866.3208 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #29: GFLOPs: 19.6495. Time: 5352.2333 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #30: GFLOPs: 2.4745. Time: 42501.9043 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #31: GFLOPs: 129.7741. Time: 810.3997 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #32: GFLOPs: 157.8877. Time: 666.0996 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #33: GFLOPs: 60.1097. Time: 1749.6162 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #34: GFLOPs: 9.0821. Time: 11579.7586 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #35: GFLOPs: 24.6055. Time: 4274.2007 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #36: GFLOPs: 27.4402. Time: 3832.6574 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #37: GFLOPs: 48.5409. Time: 2166.6058 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #38: GFLOPs: 39.1695. Time: 2684.9709 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #39: GFLOPs: 38.8179. Time: 2709.2909 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #40: GFLOPs: 27.0216. Time: 3892.0312 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #41: GFLOPs: 44.7482. Time: 2350.2353 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #42: GFLOPs: 129.0375. Time: 815.0261 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #43: GFLOPs: 88.0729. Time: 1194.1116 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #44: GFLOPs: 70.2928. Time: 1496.1544 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #46: GFLOPs: 47.7139. Time: 2204.1570 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #47: GFLOPs: 90.7482. Time: 1158.9087 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #48: GFLOPs: 5.5894. Time: 18815.7197 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #49: GFLOPs: 7.0837. Time: 14846.5979 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #50: GFLOPs: 127.2414. Time: 826.5305 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #51: GFLOPs: 31.6578. Time: 3322.0481 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #52: GFLOPs: 5.2334. Time: 20095.6872 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #53: GFLOPs: 64.8532. Time: 1621.6462 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #54: GFLOPs: 59.3494. Time: 1772.0282 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #55: GFLOPs: 92.0541. Time: 1142.4684 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #56: GFLOPs: 60.4568. Time: 1739.5721 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #57: GFLOPs: 15.0672. Time: 6980.0093 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #58: GFLOPs: 51.0656. Time: 2059.4857 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #59: GFLOPs: 33.6504. Time: 3125.3348 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #60: GFLOPs: 74.4798. Time: 1412.0464 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 4, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #62: GFLOPs: 103.7094. Time: 1014.0728 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #63: GFLOPs: 60.7114. Time: 1732.2773 us. Best GFLOPs: 164.5382
2024-04-29 20:32:31 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #64: GFLOPs: 101.9617. Time: 1031.4547 us. Best GFLOPs: 164.5382
2024-04-29 20:49:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:49:01 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 20:49:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 20:49:03 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 20:49:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 20:49:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 20:49:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 20:49:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 20:49:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0172  1.0111  0.9974  0.9974  0.9957  0.9746  0.9741  0.9666  0.9554  0.9388  0.9370  0.9326  0.9320  0.9308  0.9293  0.9292
[17 : 32]:	0.9219  0.9201  0.9177  0.9176  0.9175  0.9143  0.9094  0.9078  0.9071  0.9061  0.9050  0.9046  0.9035  0.9021  0.9021  0.8972
[33 : 48]:	0.8918  0.8905  0.8894  0.8894  0.8892  0.8885  0.8873  0.8852  0.8852  0.8846  0.8845  0.8827  0.8805  0.8765  0.8758  0.8744
[49 : 64]:	0.8742  0.8726  0.8720  0.8716  0.8716  0.8699  0.8693  0.8692  0.8692  0.8684  0.8665  0.8661  0.8659  0.8658  0.8636  0.8631
2024-04-29 20:49:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:49:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #65: GFLOPs: 202.7666. Time: 518.6697 us. Best GFLOPs: 202.7666
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #66: GFLOPs: 205.2163. Time: 512.4783 us. Best GFLOPs: 205.2163
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #67: GFLOPs: 179.2284. Time: 586.7872 us. Best GFLOPs: 205.2163
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #68: GFLOPs: 184.3362. Time: 570.5278 us. Best GFLOPs: 205.2163
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #69: GFLOPs: 163.7751. Time: 642.1542 us. Best GFLOPs: 205.2163
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #70: GFLOPs: 267.5701. Time: 393.0517 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #71: GFLOPs: 135.3338. Time: 777.1074 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #72: GFLOPs: 164.7564. Time: 638.3296 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #74: GFLOPs: 106.4265. Time: 988.1830 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #75: GFLOPs: 119.6028. Time: 879.3182 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #76: GFLOPs: 184.4585. Time: 570.1492 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #77: GFLOPs: 164.5231. Time: 639.2350 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #78: GFLOPs: 164.5105. Time: 639.2837 us. Best GFLOPs: 267.5701
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #79: GFLOPs: 274.0911. Time: 383.7005 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #80: GFLOPs: 90.9510. Time: 1156.3251 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #81: GFLOPs: 227.0879. Time: 463.1198 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #83: GFLOPs: 153.8631. Time: 683.5223 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #84: GFLOPs: 132.0384. Time: 796.5025 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #85: GFLOPs: 186.9838. Time: 562.4491 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #86: GFLOPs: 164.6350. Time: 638.8002 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #87: GFLOPs: 134.2383. Time: 783.4493 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #88: GFLOPs: 147.8426. Time: 711.3570 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #89: GFLOPs: 155.5354. Time: 676.1732 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #90: GFLOPs: 232.0793. Time: 453.1593 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #91: GFLOPs: 194.8181. Time: 539.8311 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #92: GFLOPs: 178.1230. Time: 590.4286 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #93: GFLOPs: 117.7087. Time: 893.4675 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #94: GFLOPs: 135.0046. Time: 779.0021 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #95: GFLOPs: 179.3544. Time: 586.3747 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #96: GFLOPs: 170.7873. Time: 615.7887 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #97: GFLOPs: 145.7932. Time: 721.3568 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #98: GFLOPs: 125.8916. Time: 835.3927 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #99: GFLOPs: 232.7783. Time: 451.7985 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #100: GFLOPs: 192.7400. Time: 545.6515 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #101: GFLOPs: 139.2591. Time: 755.2029 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #102: GFLOPs: 242.4197. Time: 433.8299 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #103: GFLOPs: 179.6489. Time: 585.4136 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #104: GFLOPs: 221.0939. Time: 475.6753 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #105: GFLOPs: 174.2734. Time: 603.4706 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #106: GFLOPs: 140.3933. Time: 749.1019 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #107: GFLOPs: 263.3817. Time: 399.3022 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #108: GFLOPs: 104.5450. Time: 1005.9679 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #109: GFLOPs: 172.5831. Time: 609.3814 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #110: GFLOPs: 91.1109. Time: 1154.2958 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #111: GFLOPs: 185.7942. Time: 566.0505 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #112: GFLOPs: 219.7422. Time: 478.6012 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #113: GFLOPs: 112.0361. Time: 938.7053 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #114: GFLOPs: 179.0339. Time: 587.4245 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #115: GFLOPs: 189.0207. Time: 556.3883 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #116: GFLOPs: 151.3802. Time: 694.7336 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #117: GFLOPs: 152.0815. Time: 691.5297 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #118: GFLOPs: 153.7954. Time: 683.8232 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #119: GFLOPs: 163.2454. Time: 644.2382 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #120: GFLOPs: 200.6334. Time: 524.1843 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #121: GFLOPs: 234.6300. Time: 448.2329 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #122: GFLOPs: 159.4723. Time: 659.4807 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #123: GFLOPs: 158.9713. Time: 661.5589 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #124: GFLOPs: 161.5715. Time: 650.9123 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #125: GFLOPs: 189.9410. Time: 553.6923 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #127: GFLOPs: 65.2239. Time: 1612.4277 us. Best GFLOPs: 274.0911
2024-04-29 20:51:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #128: GFLOPs: 87.4581. Time: 1202.5061 us. Best GFLOPs: 274.0911
2024-04-29 21:48:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:48:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:48:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 21:48:41 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:48:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 21:48:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 21:48:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 21:49:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 21:49:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9098  0.8660  0.8570  0.8498  0.8246  0.8161  0.8144  0.8144  0.8103  0.8098  0.8081  0.8067  0.8046  0.8025  0.8025  0.7950
[17 : 32]:	0.7900  0.7827  0.7818  0.7807  0.7804  0.7786  0.7775  0.7773  0.7750  0.7738  0.7664  0.7652  0.7622  0.7617  0.7610  0.7544
[33 : 48]:	0.7544  0.7520  0.7514  0.7497  0.7496  0.7458  0.7450  0.7447  0.7433  0.7432  0.7416  0.7413  0.7405  0.7390  0.7388  0.7382
[49 : 64]:	0.7378  0.7357  0.7357  0.7333  0.7332  0.7330  0.7329  0.7329  0.7329  0.7320  0.7319  0.7319  0.7319  0.7313  0.7307  0.7302
2024-04-29 21:49:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:49:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #129: GFLOPs: 258.9118. Time: 406.1958 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #130: GFLOPs: 167.8680. Time: 626.4976 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #131: GFLOPs: 217.9430. Time: 482.5524 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #132: GFLOPs: 218.2729. Time: 481.8231 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #133: GFLOPs: 180.3742. Time: 583.0596 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #134: GFLOPs: 197.4382. Time: 532.6675 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #135: GFLOPs: 211.5611. Time: 497.1088 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #136: GFLOPs: 217.1531. Time: 484.3076 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #137: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #138: GFLOPs: 174.7741. Time: 601.7419 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #139: GFLOPs: 182.0103. Time: 577.8183 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #140: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #141: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #142: GFLOPs: 183.8192. Time: 572.1322 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #143: GFLOPs: 216.8470. Time: 484.9912 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #144: GFLOPs: 217.5012. Time: 483.5325 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #145: GFLOPs: 243.8348. Time: 431.3120 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #146: GFLOPs: 182.7858. Time: 575.3668 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #147: GFLOPs: 143.2700. Time: 734.0607 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #148: GFLOPs: 233.7449. Time: 449.9303 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #149: GFLOPs: 157.6207. Time: 667.2278 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #150: GFLOPs: 141.1979. Time: 744.8334 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #151: GFLOPs: 182.4832. Time: 576.3210 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #152: GFLOPs: 167.2719. Time: 628.7302 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #153: GFLOPs: 70.2706. Time: 1496.6271 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #154: GFLOPs: 240.7136. Time: 436.9046 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #155: GFLOPs: 252.5646. Time: 416.4040 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #156: GFLOPs: 189.8711. Time: 553.8963 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #157: GFLOPs: 198.1682. Time: 530.7052 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #158: GFLOPs: 188.1552. Time: 558.9477 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #159: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #160: GFLOPs: 185.7325. Time: 566.2385 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #161: GFLOPs: 180.7265. Time: 581.9229 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #162: GFLOPs: 195.8775. Time: 536.9116 us. Best GFLOPs: 274.0911
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #163: GFLOPs: 277.0116. Time: 379.6552 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #164: GFLOPs: 168.2279. Time: 625.1573 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #165: GFLOPs: 190.6474. Time: 551.6410 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #166: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #167: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #168: GFLOPs: 174.6807. Time: 602.0636 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #169: GFLOPs: 165.1656. Time: 636.7482 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #170: GFLOPs: 167.3072. Time: 628.5975 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #171: GFLOPs: 196.6120. Time: 534.9059 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #172: GFLOPs: 145.0289. Time: 725.1582 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #173: GFLOPs: 169.2505. Time: 621.3800 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #174: GFLOPs: 180.4412. Time: 582.8431 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #175: GFLOPs: 169.3256. Time: 621.1044 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #176: GFLOPs: 203.1927. Time: 517.5821 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #177: GFLOPs: 197.3175. Time: 532.9932 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #178: GFLOPs: 135.4062. Time: 776.6918 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #179: GFLOPs: 141.4010. Time: 743.7633 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #180: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #181: GFLOPs: 233.9530. Time: 449.5301 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #182: GFLOPs: 255.1775. Time: 412.1402 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #183: GFLOPs: 178.7331. Time: 588.4132 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #184: GFLOPs: 178.6650. Time: 588.6373 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #185: GFLOPs: 146.1954. Time: 719.3722 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #186: GFLOPs: 190.8214. Time: 551.1378 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #187: GFLOPs: 186.9075. Time: 562.6789 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #188: GFLOPs: 187.9672. Time: 559.5067 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #189: GFLOPs: 197.5128. Time: 532.4663 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #190: GFLOPs: 3.2651. Time: 32210.1685 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #191: GFLOPs: 81.7893. Time: 1285.8518 us. Best GFLOPs: 277.0116
2024-04-29 21:50:49 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #192: GFLOPs: 171.5853. Time: 612.9249 us. Best GFLOPs: 277.0116
2024-04-29 22:12:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:12:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:12:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:12:40 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:12:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:12:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:12:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:13:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:13:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9088  0.8900  0.8900  0.8694  0.8442  0.8425  0.8400  0.8394  0.8391  0.8381  0.8381  0.8361  0.8342  0.8256  0.8246  0.8237
[17 : 32]:	0.8235  0.8232  0.8206  0.8176  0.8176  0.8156  0.8118  0.8102  0.8055  0.8036  0.8011  0.7994  0.7970  0.7964  0.7961  0.7929
[33 : 48]:	0.7894  0.7894  0.7890  0.7866  0.7776  0.7746  0.7726  0.7716  0.7716  0.7715  0.7710  0.7683  0.7683  0.7677  0.7665  0.7645
[49 : 64]:	0.7645  0.7642  0.7612  0.7610  0.7604  0.7585  0.7576  0.7573  0.7573  0.7558  0.7543  0.7524  0.7523  0.7507  0.7503  0.7502
2024-04-29 22:13:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:13:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:14:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #193: GFLOPs: 220.3299. Time: 477.3247 us. Best GFLOPs: 277.0116
2024-04-29 22:14:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #194: GFLOPs: 230.8450. Time: 455.5824 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #195: GFLOPs: 240.2303. Time: 437.7837 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #196: GFLOPs: 238.4519. Time: 441.0487 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #197: GFLOPs: 250.9944. Time: 419.0089 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #198: GFLOPs: 173.9711. Time: 604.5192 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #199: GFLOPs: 126.7076. Time: 830.0127 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #200: GFLOPs: 138.5846. Time: 758.8786 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #201: GFLOPs: 200.3055. Time: 525.0425 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #202: GFLOPs: 276.7447. Time: 380.0213 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #203: GFLOPs: 272.6466. Time: 385.7333 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #204: GFLOPs: 275.3088. Time: 382.0033 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #205: GFLOPs: 237.6375. Time: 442.5602 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #206: GFLOPs: 237.0292. Time: 443.6959 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #207: GFLOPs: 185.4762. Time: 567.0209 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #208: GFLOPs: 244.5084. Time: 430.1238 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #209: GFLOPs: 184.0693. Time: 571.3550 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #210: GFLOPs: 166.7591. Time: 630.6638 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #211: GFLOPs: 73.1241. Time: 1438.2252 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #212: GFLOPs: 90.4299. Time: 1162.9876 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #213: GFLOPs: 159.9576. Time: 657.4799 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #214: GFLOPs: 174.9218. Time: 601.2338 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #215: GFLOPs: 49.7452. Time: 2114.1533 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #216: GFLOPs: 162.3448. Time: 647.8119 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #217: GFLOPs: 200.4032. Time: 524.7865 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #218: GFLOPs: 199.4768. Time: 527.2236 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #219: GFLOPs: 225.2857. Time: 466.8245 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #220: GFLOPs: 160.6003. Time: 654.8485 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #221: GFLOPs: 167.4660. Time: 628.0016 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #222: GFLOPs: 227.8061. Time: 461.6596 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #223: GFLOPs: 195.5029. Time: 537.9403 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #224: GFLOPs: 181.1175. Time: 580.6666 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #225: GFLOPs: 190.7630. Time: 551.3065 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #226: GFLOPs: 185.5589. Time: 566.7682 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #227: GFLOPs: 187.1595. Time: 561.9212 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #228: GFLOPs: 149.3133. Time: 704.3506 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #229: GFLOPs: 190.1536. Time: 553.0735 us. Best GFLOPs: 277.0116
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #230: GFLOPs: 470.6474. Time: 223.4558 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #231: GFLOPs: 156.1454. Time: 673.5318 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #232: GFLOPs: 271.1137. Time: 387.9143 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #233: GFLOPs: 156.0037. Time: 674.1437 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #234: GFLOPs: 294.3174. Time: 357.3316 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #235: GFLOPs: 197.5223. Time: 532.4406 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #236: GFLOPs: 245.2122. Time: 428.8894 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #237: GFLOPs: 198.3493. Time: 530.2207 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #238: GFLOPs: 157.2217. Time: 668.9210 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #239: GFLOPs: 182.7682. Time: 575.4223 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #240: GFLOPs: 180.6491. Time: 582.1722 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #241: GFLOPs: 182.6422. Time: 575.8191 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #242: GFLOPs: 254.2230. Time: 413.6876 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #243: GFLOPs: 168.3929. Time: 624.5448 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #244: GFLOPs: 183.0119. Time: 574.6561 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #245: GFLOPs: 189.7874. Time: 554.1405 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #246: GFLOPs: 67.7984. Time: 1551.1998 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #247: GFLOPs: 270.9929. Time: 388.0872 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #248: GFLOPs: 211.1041. Time: 498.1850 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #249: GFLOPs: 181.1647. Time: 580.5152 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #250: GFLOPs: 180.3048. Time: 583.2839 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #251: GFLOPs: 189.4219. Time: 555.2099 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #252: GFLOPs: 122.5867. Time: 857.9147 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #253: GFLOPs: 136.2774. Time: 771.7269 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #254: GFLOPs: 33.7182. Time: 3119.0501 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #255: GFLOPs: 50.7358. Time: 2072.8721 us. Best GFLOPs: 470.6474
2024-04-29 22:14:57 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #256: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(28) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(28) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 22:37:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:37:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:37:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:37:57 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:38:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:38:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:38:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:38:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 22:38:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9083  0.9083  0.8551  0.8374  0.7804  0.7804  0.7751  0.7751  0.7289  0.7111  0.7014  0.7014  0.6615  0.5981  0.5693  0.5677
[17 : 32]:	0.5583  0.5574  0.5574  0.5571  0.5557  0.5531  0.5511  0.5510  0.5475  0.5475  0.5419  0.5417  0.5374  0.5350  0.5327  0.5320
[33 : 48]:	0.5311  0.5309  0.5306  0.5286  0.5283  0.5276  0.5239  0.5230  0.5217  0.5216  0.5216  0.5216  0.5216  0.5185  0.5179  0.5179
[49 : 64]:	0.5179  0.5177  0.5143  0.5136  0.5130  0.5111  0.5110  0.5092  0.5089  0.5088  0.5076  0.5064  0.5055  0.5054  0.5046  0.5036
2024-04-29 22:38:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:38:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #257: GFLOPs: 449.6615. Time: 233.8846 us. Best GFLOPs: 470.6474
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #258: GFLOPs: 493.3125. Time: 213.1892 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #259: GFLOPs: 490.3119. Time: 214.4939 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #260: GFLOPs: 480.9648. Time: 218.6623 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #261: GFLOPs: 135.3819. Time: 776.8314 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #262: GFLOPs: 219.6873. Time: 478.7209 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #263: GFLOPs: 199.2135. Time: 527.9205 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #264: GFLOPs: 154.3672. Time: 681.2903 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #265: GFLOPs: 223.6778. Time: 470.1802 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #266: GFLOPs: 207.1134. Time: 507.7841 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #267: GFLOPs: 190.9103. Time: 550.8811 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #268: GFLOPs: 231.9176. Time: 453.4752 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #269: GFLOPs: 247.9248. Time: 424.1968 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #270: GFLOPs: 186.3681. Time: 564.3074 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #271: GFLOPs: 179.7874. Time: 584.9625 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #272: GFLOPs: 291.8111. Time: 360.4007 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #273: GFLOPs: 210.0946. Time: 500.5788 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #274: GFLOPs: 257.0745. Time: 409.0989 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #275: GFLOPs: 260.9089. Time: 403.0866 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #276: GFLOPs: 194.3685. Time: 541.0800 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #277: GFLOPs: 246.9173. Time: 425.9276 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #278: GFLOPs: 232.9878. Time: 451.3922 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #279: GFLOPs: 228.6741. Time: 459.9073 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #280: GFLOPs: 132.2065. Time: 795.4898 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #281: GFLOPs: 235.9853. Time: 445.6586 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #282: GFLOPs: 235.7949. Time: 446.0186 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #283: GFLOPs: 144.6893. Time: 726.8602 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #284: GFLOPs: 132.2075. Time: 795.4834 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #285: GFLOPs: 454.0497. Time: 231.6242 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #286: GFLOPs: 235.5169. Time: 446.5450 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #287: GFLOPs: 170.8083. Time: 615.7131 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #288: GFLOPs: 337.4718. Time: 311.6376 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #289: GFLOPs: 204.1947. Time: 515.0422 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #290: GFLOPs: 178.0906. Time: 590.5359 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #291: GFLOPs: 474.0988. Time: 221.8291 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #292: GFLOPs: 277.5255. Time: 378.9521 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #293: GFLOPs: 191.0462. Time: 550.4892 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #294: GFLOPs: 222.9801. Time: 471.6514 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #295: GFLOPs: 296.3770. Time: 354.8483 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #296: GFLOPs: 482.4232. Time: 218.0013 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #297: GFLOPs: 229.4528. Time: 458.3464 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #298: GFLOPs: 294.2627. Time: 357.3980 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #299: GFLOPs: 280.6903. Time: 374.6795 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #300: GFLOPs: 278.2929. Time: 377.9073 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #301: GFLOPs: 183.8425. Time: 572.0597 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #302: GFLOPs: 212.3135. Time: 495.3472 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #303: GFLOPs: 239.0089. Time: 440.0208 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #304: GFLOPs: 237.1578. Time: 443.4554 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #305: GFLOPs: 230.7664. Time: 455.7376 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #306: GFLOPs: 166.0583. Time: 633.3251 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #307: GFLOPs: 200.6647. Time: 524.1027 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #308: GFLOPs: 258.8691. Time: 406.2629 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #309: GFLOPs: 266.6105. Time: 394.4665 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #310: GFLOPs: 305.5916. Time: 344.1485 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #311: GFLOPs: 243.2568. Time: 432.3370 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #312: GFLOPs: 159.3782. Time: 659.8702 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #313: GFLOPs: 250.7822. Time: 419.3635 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #314: GFLOPs: 267.8601. Time: 392.6262 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #315: GFLOPs: 129.9872. Time: 809.0712 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #316: GFLOPs: 199.2339. Time: 527.8666 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #317: GFLOPs: 293.5568. Time: 358.2574 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #318: GFLOPs: 90.8420. Time: 1157.7127 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #319: GFLOPs: 33.2094. Time: 3166.8438 us. Best GFLOPs: 493.3125
2024-04-29 22:40:14 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #320: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(1024), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(128) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(128) // T.int64(8) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(128) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(128) // T.int64(8) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(56), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(128) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(128) // T.int64(8) * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b105)
b126 = sch.decompose_reduction(block=b105, loop=l110)
2024-04-29 23:36:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:36:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:36:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 23:36:58 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:37:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 23:37:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 23:37:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 23:37:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-29 23:37:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9733  0.9326  0.9290  0.9042  0.9042  0.8997  0.8970  0.8705  0.8679  0.8678  0.8660  0.8631  0.8631  0.8574  0.8486  0.8233
[17 : 32]:	0.8231  0.8190  0.8181  0.8180  0.7867  0.7699  0.7524  0.7474  0.7471  0.7465  0.7399  0.7338  0.7335  0.7217  0.7190  0.7190
[33 : 48]:	0.7190  0.7174  0.7174  0.7174  0.7081  0.7067  0.7053  0.7012  0.7011  0.7011  0.6898  0.6886  0.6878  0.6878  0.6878  0.6876
[49 : 64]:	0.6686  0.6685  0.6653  0.6642  0.6628  0.6577  0.6557  0.6501  0.6477  0.6453  0.6439  0.6431  0.6419  0.6388  0.6388  0.6368
2024-04-29 23:37:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:37:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #321: GFLOPs: 400.3185. Time: 262.7130 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #322: GFLOPs: 488.8235. Time: 215.1470 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #323: GFLOPs: 480.6569. Time: 218.8024 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #324: GFLOPs: 402.4842. Time: 261.2994 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #325: GFLOPs: 367.3979. Time: 286.2534 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #326: GFLOPs: 404.1214. Time: 260.2408 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #327: GFLOPs: 458.3568. Time: 229.4477 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #328: GFLOPs: 476.9589. Time: 220.4989 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #329: GFLOPs: 423.3314. Time: 248.4316 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #330: GFLOPs: 281.1156. Time: 374.1127 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #331: GFLOPs: 445.8252. Time: 235.8971 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #332: GFLOPs: 491.8437. Time: 213.8259 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #333: GFLOPs: 401.8052. Time: 261.7410 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #334: GFLOPs: 123.9496. Time: 848.4809 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #335: GFLOPs: 299.3506. Time: 351.3235 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #336: GFLOPs: 489.7768. Time: 214.7282 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #337: GFLOPs: 408.3775. Time: 257.5286 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #338: GFLOPs: 322.6570. Time: 325.9465 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #339: GFLOPs: 187.9019. Time: 559.7011 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #340: GFLOPs: 482.7346. Time: 217.8607 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #341: GFLOPs: 212.3616. Time: 495.2350 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #342: GFLOPs: 387.5927. Time: 271.3387 us. Best GFLOPs: 493.3125
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #343: GFLOPs: 495.6926. Time: 212.1656 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #344: GFLOPs: 180.9091. Time: 581.3356 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #345: GFLOPs: 302.7744. Time: 347.3507 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #346: GFLOPs: 391.7268. Time: 268.4751 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #347: GFLOPs: 411.1599. Time: 255.7859 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #348: GFLOPs: 159.0511. Time: 661.2273 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #349: GFLOPs: 147.9023. Time: 711.0701 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #350: GFLOPs: 373.8158. Time: 281.3388 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #351: GFLOPs: 238.8175. Time: 440.3734 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #352: GFLOPs: 222.2318. Time: 473.2396 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #353: GFLOPs: 225.5051. Time: 466.3703 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #354: GFLOPs: 419.4887. Time: 250.7073 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #355: GFLOPs: 223.8524. Time: 469.8135 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #356: GFLOPs: 92.1917. Time: 1140.7629 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #357: GFLOPs: 422.6255. Time: 248.8465 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #358: GFLOPs: 319.2896. Time: 329.3840 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #359: GFLOPs: 454.5438. Time: 231.3724 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #360: GFLOPs: 214.3982. Time: 490.5306 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #361: GFLOPs: 334.2563. Time: 314.6355 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #362: GFLOPs: 339.9712. Time: 309.3465 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #363: GFLOPs: 168.7148. Time: 623.3533 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #364: GFLOPs: 240.1953. Time: 437.8475 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #365: GFLOPs: 211.0397. Time: 498.3370 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #366: GFLOPs: 217.1819. Time: 484.2434 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #367: GFLOPs: 92.6950. Time: 1134.5687 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #368: GFLOPs: 121.0441. Time: 868.8479 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #369: GFLOPs: 421.0594. Time: 249.7721 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #370: GFLOPs: 247.5547. Time: 424.8310 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #371: GFLOPs: 180.7480. Time: 581.8536 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #372: GFLOPs: 203.1676. Time: 517.6459 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #373: GFLOPs: 213.3696. Time: 492.8954 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #374: GFLOPs: 209.1456. Time: 502.8501 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #375: GFLOPs: 152.8580. Time: 688.0168 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #376: GFLOPs: 477.4674. Time: 220.2641 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #377: GFLOPs: 146.0308. Time: 720.1830 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #378: GFLOPs: 157.8730. Time: 666.1612 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #379: GFLOPs: 455.7883. Time: 230.7407 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #380: GFLOPs: 188.1885. Time: 558.8488 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #381: GFLOPs: 411.7130. Time: 255.4423 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #382: GFLOPs: 21.4882. Time: 4894.2516 us. Best GFLOPs: 495.6926
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #383: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 23:39:18 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #384: GFLOPs: 122.3869. Time: 859.3152 us. Best GFLOPs: 495.6926
2024-04-30 00:00:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:00:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:00:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 00:00:41 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:00:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 00:00:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 00:00:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 00:01:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 00:01:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9722  0.9569  0.9449  0.9449  0.9355  0.9273  0.9243  0.9149  0.9149  0.9149  0.9149  0.9149  0.9111  0.9111  0.9111  0.9111
[17 : 32]:	0.9070  0.8977  0.8931  0.8782  0.8782  0.8782  0.8683  0.8653  0.8598  0.8598  0.8593  0.8579  0.8567  0.8488  0.8462  0.8458
[33 : 48]:	0.8421  0.8388  0.8388  0.8358  0.8315  0.8298  0.8281  0.8259  0.8228  0.8214  0.8214  0.8194  0.8186  0.8171  0.8163  0.8140
[49 : 64]:	0.8104  0.8104  0.8030  0.8022  0.7999  0.7989  0.7975  0.7940  0.7936  0.7884  0.7882  0.7877  0.7874  0.7869  0.7860  0.7844
2024-04-30 00:01:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:01:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #385: GFLOPs: 353.8976. Time: 297.1732 us. Best GFLOPs: 495.6926
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #386: GFLOPs: 496.6594. Time: 211.7526 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #387: GFLOPs: 374.5445. Time: 280.7914 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #388: GFLOPs: 372.8123. Time: 282.0961 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #389: GFLOPs: 346.2118. Time: 303.7704 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #390: GFLOPs: 413.7091. Time: 254.2098 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #391: GFLOPs: 428.6285. Time: 245.3614 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #392: GFLOPs: 411.7895. Time: 255.3948 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #393: GFLOPs: 335.9444. Time: 313.0545 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #394: GFLOPs: 393.6819. Time: 267.1418 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #395: GFLOPs: 331.4716. Time: 317.2787 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #396: GFLOPs: 354.6306. Time: 296.5590 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #397: GFLOPs: 378.9514. Time: 277.5261 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #398: GFLOPs: 340.9344. Time: 308.4726 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #399: GFLOPs: 258.6742. Time: 406.5689 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #400: GFLOPs: 373.0868. Time: 281.8886 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #401: GFLOPs: 398.2832. Time: 264.0556 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #402: GFLOPs: 387.7485. Time: 271.2297 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #403: GFLOPs: 324.5553. Time: 324.0400 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #404: GFLOPs: 191.6482. Time: 548.7603 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #405: GFLOPs: 375.5083. Time: 280.0708 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #406: GFLOPs: 405.7477. Time: 259.1977 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #407: GFLOPs: 377.1239. Time: 278.8710 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #408: GFLOPs: 89.4176. Time: 1176.1548 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #409: GFLOPs: 295.0067. Time: 356.4967 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #410: GFLOPs: 279.4179. Time: 376.3857 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #411: GFLOPs: 425.1163. Time: 247.3886 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #412: GFLOPs: 414.6308. Time: 253.6447 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #413: GFLOPs: 434.4984. Time: 242.0467 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #414: GFLOPs: 248.9205. Time: 422.5000 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #415: GFLOPs: 348.2400. Time: 302.0012 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #416: GFLOPs: 393.5324. Time: 267.2433 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #417: GFLOPs: 299.4474. Time: 351.2099 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #418: GFLOPs: 200.3494. Time: 524.9274 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #419: GFLOPs: 415.7290. Time: 252.9747 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #420: GFLOPs: 358.4325. Time: 293.4134 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #421: GFLOPs: 407.8497. Time: 257.8619 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #422: GFLOPs: 216.6993. Time: 485.3217 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #423: GFLOPs: 324.1997. Time: 324.3954 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #424: GFLOPs: 198.6518. Time: 529.4131 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #425: GFLOPs: 411.1206. Time: 255.8103 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #426: GFLOPs: 339.8856. Time: 309.4244 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #427: GFLOPs: 365.9156. Time: 287.4130 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #428: GFLOPs: 302.0793. Time: 348.1499 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #429: GFLOPs: 384.9772. Time: 273.1821 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #430: GFLOPs: 463.5515. Time: 226.8764 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #431: GFLOPs: 190.6650. Time: 551.5901 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #432: GFLOPs: 422.0074. Time: 249.2110 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #433: GFLOPs: 377.3107. Time: 278.7329 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #434: GFLOPs: 408.4839. Time: 257.4615 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #435: GFLOPs: 360.1597. Time: 292.0063 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #436: GFLOPs: 397.7009. Time: 264.4422 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #437: GFLOPs: 300.4990. Time: 349.9808 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #438: GFLOPs: 319.7938. Time: 328.8647 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #439: GFLOPs: 260.1332. Time: 404.2887 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #440: GFLOPs: 296.3378. Time: 354.8953 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #441: GFLOPs: 334.0837. Time: 314.7980 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #442: GFLOPs: 333.8265. Time: 315.0406 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #443: GFLOPs: 321.5762. Time: 327.0420 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #444: GFLOPs: 429.8041. Time: 244.6903 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #445: GFLOPs: 206.2959. Time: 509.7965 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #446: GFLOPs: 116.6885. Time: 901.2790 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #447: GFLOPs: 92.4272. Time: 1137.8565 us. Best GFLOPs: 496.6594
2024-04-30 00:03:05 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #448: GFLOPs: 90.5848. Time: 1161.0000 us. Best GFLOPs: 496.6594
2024-04-30 01:31:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:31:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:31:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 01:31:31 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:31:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 01:31:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 01:31:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 01:31:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30ac5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6685b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb785028)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb7688e8)]: 0 failure(s)
2024-04-30 01:31:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9551  0.9354  0.9279  0.9180  0.9180  0.8987  0.8987  0.8915  0.8915  0.8915  0.8778  0.8755  0.8716  0.8699  0.8684  0.8664
[17 : 32]:	0.8596  0.8538  0.8495  0.8495  0.8464  0.8458  0.8451  0.8439  0.8439  0.8426  0.8405  0.8400  0.8398  0.8398  0.8287  0.8278
[33 : 48]:	0.8274  0.8242  0.8238  0.8221  0.8217  0.8217  0.8171  0.8161  0.8137  0.8137  0.8131  0.8131  0.8115  0.8110  0.8110  0.8100
[49 : 64]:	0.8084  0.8059  0.8059  0.8043  0.7971  0.7956  0.7956  0.7946  0.7943  0.7943  0.7928  0.7907  0.7889  0.7872  0.7796  0.7791
2024-04-30 01:31:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:31:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #449: GFLOPs: 398.2674. Time: 264.0660 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #450: GFLOPs: 460.7866. Time: 228.2377 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #451: GFLOPs: 496.0313. Time: 212.0207 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #452: GFLOPs: 385.0408. Time: 273.1370 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #453: GFLOPs: 461.3579. Time: 227.9551 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #454: GFLOPs: 490.6347. Time: 214.3528 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #455: GFLOPs: 488.3793. Time: 215.3426 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #456: GFLOPs: 372.7172. Time: 282.1681 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #457: GFLOPs: 448.0030. Time: 234.7504 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #458: GFLOPs: 487.3205. Time: 215.8105 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #459: GFLOPs: 374.7398. Time: 280.6451 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #460: GFLOPs: 370.8094. Time: 283.6198 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #461: GFLOPs: 483.9886. Time: 217.2962 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #462: GFLOPs: 410.8460. Time: 255.9813 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #463: GFLOPs: 408.1208. Time: 257.6906 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #464: GFLOPs: 465.5170. Time: 225.9185 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #465: GFLOPs: 447.6268. Time: 234.9477 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #466: GFLOPs: 439.4945. Time: 239.2952 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #467: GFLOPs: 477.4918. Time: 220.2528 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #468: GFLOPs: 449.9223. Time: 233.7490 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #469: GFLOPs: 427.6042. Time: 245.9492 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #470: GFLOPs: 460.7769. Time: 228.2425 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #471: GFLOPs: 402.0647. Time: 261.5721 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #472: GFLOPs: 426.4925. Time: 246.5903 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #473: GFLOPs: 465.3721. Time: 225.9888 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #474: GFLOPs: 417.8015. Time: 251.7198 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #475: GFLOPs: 406.8702. Time: 258.4827 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #476: GFLOPs: 464.1657. Time: 226.5762 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #477: GFLOPs: 441.9804. Time: 237.9492 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #478: GFLOPs: 430.0723. Time: 244.5377 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #479: GFLOPs: 465.5188. Time: 225.9176 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #480: GFLOPs: 437.0576. Time: 240.6294 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #481: GFLOPs: 412.2369. Time: 255.1176 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #482: GFLOPs: 413.7513. Time: 254.1839 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #483: GFLOPs: 435.8621. Time: 241.2894 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #484: GFLOPs: 391.2309. Time: 268.8154 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #485: GFLOPs: 467.0036. Time: 225.1993 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #486: GFLOPs: 449.2826. Time: 234.0819 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #487: GFLOPs: 444.2442. Time: 236.7367 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #488: GFLOPs: 411.4137. Time: 255.6281 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #489: GFLOPs: 369.1643. Time: 284.8837 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #490: GFLOPs: 369.9798. Time: 284.2558 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #491: GFLOPs: 479.6571. Time: 219.2585 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #492: GFLOPs: 397.5183. Time: 264.5636 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #493: GFLOPs: 364.8588. Time: 288.2454 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #494: GFLOPs: 475.1457. Time: 221.3403 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #495: GFLOPs: 380.2121. Time: 276.6058 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #496: GFLOPs: 393.8801. Time: 267.0074 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #497: GFLOPs: 433.6353. Time: 242.5285 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #498: GFLOPs: 432.0021. Time: 243.4453 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #499: GFLOPs: 414.6320. Time: 253.6440 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #500: GFLOPs: 484.7422. Time: 216.9584 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #501: GFLOPs: 484.5781. Time: 217.0319 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #502: GFLOPs: 420.9444. Time: 249.8403 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #503: GFLOPs: 361.6177. Time: 290.8289 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #504: GFLOPs: 492.7376. Time: 213.4380 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #505: GFLOPs: 456.9731. Time: 230.1424 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #506: GFLOPs: 462.3929. Time: 227.4449 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #507: GFLOPs: 418.7793. Time: 251.1320 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #508: GFLOPs: 477.8396. Time: 220.0925 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #509: GFLOPs: 226.9115. Time: 463.4798 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #510: GFLOPs: 63.0431. Time: 1668.2073 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #511: GFLOPs: 105.3637. Time: 998.1514 us. Best GFLOPs: 496.6594
2024-04-30 01:33:56 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu] Trial #512: GFLOPs: 11.2344. Time: 9361.3418 us. Best GFLOPs: 496.6594
