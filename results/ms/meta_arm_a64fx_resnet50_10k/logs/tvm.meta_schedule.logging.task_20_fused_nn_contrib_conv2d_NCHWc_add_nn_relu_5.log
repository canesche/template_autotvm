2024-04-29 19:37:55 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5"
2024-04-29 19:37:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:37:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:37:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(28), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:37:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(57), T.int64(5), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ow_0 * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(28), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(2), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:37:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(5), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), ow_0 * T.int64(4) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(28), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:59:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:59:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:59:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 19:59:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:59:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 19:59:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 19:59:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:00:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:00:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9981  0.9978  0.9975  0.9973  0.9952  0.9947  0.9947  0.9938  0.9934  0.9933  0.9931  0.9930  0.9930  0.9929  0.9923
[17 : 32]:	0.9918  0.9916  0.9906  0.9903  0.9902  0.9901  0.9896  0.9893  0.9885  0.9883  0.9881  0.9879  0.9869  0.9867  0.9859  0.9847
[33 : 48]:	0.9839  0.9832  0.9823  0.9820  0.9815  0.9813  0.9802  0.9799  0.9787  0.9782  0.9778  0.9769  0.9766  0.9765  0.9757  0.9753
[49 : 64]:	0.9752  0.9737  0.9735  0.9712  0.9710  0.9710  0.9709  0.9709  0.9704  0.9704  0.9702  0.9697  0.9695  0.9693  0.9691  0.9681
2024-04-29 20:00:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:00:01 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #1: GFLOPs: 23.7296. Time: 9752.0363 us. Best GFLOPs: 23.7296
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #2: GFLOPs: 45.9186. Time: 5039.6025 us. Best GFLOPs: 45.9186
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #3: GFLOPs: 3.6108. Time: 64088.7770 us. Best GFLOPs: 45.9186
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #4: GFLOPs: 25.3203. Time: 9139.3888 us. Best GFLOPs: 45.9186
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #5: GFLOPs: 37.8925. Time: 6107.0592 us. Best GFLOPs: 45.9186
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #6: GFLOPs: 97.9705. Time: 2362.0540 us. Best GFLOPs: 97.9705
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #7: GFLOPs: 101.4423. Time: 2281.2163 us. Best GFLOPs: 101.4423
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #8: GFLOPs: 44.6127. Time: 5187.1249 us. Best GFLOPs: 101.4423
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #9: GFLOPs: 66.3209. Time: 3489.2728 us. Best GFLOPs: 101.4423
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(57)):
                for ax3_ax4_fused in T.vectorized(T.int64(36)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #11: GFLOPs: 145.7236. Time: 1588.0183 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #12: GFLOPs: 32.2390. Time: 7178.0155 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #13: GFLOPs: 10.0265. Time: 23079.9898 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #14: GFLOPs: 96.1627. Time: 2406.4598 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #15: GFLOPs: 39.0890. Time: 5920.1240 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #16: GFLOPs: 8.3127. Time: 27838.3110 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #17: GFLOPs: 70.6633. Time: 3274.8485 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #18: GFLOPs: 4.1171. Time: 56207.9983 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #19: GFLOPs: 80.3304. Time: 2880.7494 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #20: GFLOPs: 101.9751. Time: 2269.2970 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #21: GFLOPs: 71.2118. Time: 3249.6242 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #22: GFLOPs: 66.4919. Time: 3480.2972 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #23: GFLOPs: 56.7642. Time: 4076.7170 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #24: GFLOPs: 3.0361. Time: 76219.4880 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #25: GFLOPs: 138.4096. Time: 1671.9334 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #26: GFLOPs: 65.5504. Time: 3530.2849 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #27: GFLOPs: 104.0082. Time: 2224.9380 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #28: GFLOPs: 83.5148. Time: 2770.9053 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #29: GFLOPs: 26.1509. Time: 8849.0860 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #30: GFLOPs: 113.7748. Time: 2033.9447 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #31: GFLOPs: 36.0270. Time: 6423.2853 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #32: GFLOPs: 7.5160. Time: 30789.2293 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #33: GFLOPs: 19.7949. Time: 11690.4796 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #34: GFLOPs: 19.3813. Time: 11939.9511 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #35: GFLOPs: 8.3319. Time: 27774.0780 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #36: GFLOPs: 4.5810. Time: 50515.1603 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #37: GFLOPs: 42.1238. Time: 5493.6058 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #38: GFLOPs: 33.6722. Time: 6872.4922 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #39: GFLOPs: 24.9854. Time: 9261.8905 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #40: GFLOPs: 6.9076. Time: 33501.2457 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #41: GFLOPs: 2.5108. Time: 92165.8797 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #42: GFLOPs: 18.5792. Time: 12455.4364 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #43: GFLOPs: 30.1291. Time: 7680.6601 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #44: GFLOPs: 26.4704. Time: 8742.2854 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #45: GFLOPs: 15.8826. Time: 14570.1653 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #46: GFLOPs: 143.2703. Time: 1615.2106 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #47: GFLOPs: 26.4986. Time: 8732.9778 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #48: GFLOPs: 104.4492. Time: 2215.5436 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #49: GFLOPs: 4.4276. Time: 52265.9843 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #50: GFLOPs: 11.2211. Time: 20622.9346 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #51: GFLOPs: 45.6598. Time: 5068.1752 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #52: GFLOPs: 10.2738. Time: 22524.3464 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #53: GFLOPs: 11.8664. Time: 19501.4680 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #54: GFLOPs: 48.1590. Time: 4805.1586 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #55: GFLOPs: 10.4058. Time: 22238.7106 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #56: GFLOPs: 23.7330. Time: 9750.6207 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #57: GFLOPs: 40.5759. Time: 5703.1867 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #58: GFLOPs: 44.8861. Time: 5155.5317 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #59: GFLOPs: 39.2539. Time: 5895.2474 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #60: GFLOPs: 8.6429. Time: 26774.7220 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #61: GFLOPs: 18.8384. Time: 12284.0510 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #62: GFLOPs: 10.5903. Time: 21851.2262 us. Best GFLOPs: 145.7236
2024-04-29 20:32:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #63: GFLOPs: 4.2065. Time: 55012.8547 us. Best GFLOPs: 145.7236
2024-04-29 20:56:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:56:56 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 20:57:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:57:01 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 20:57:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:57:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:57:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 20:57:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9945  0.9850  0.9758  0.9758  0.9615  0.9612  0.9543  0.9364  0.8981  0.8621  0.8565  0.8487  0.8470  0.8334  0.8329  0.8329
[17 : 32]:	0.8280  0.8223  0.8189  0.8189  0.8179  0.8142  0.8100  0.7994  0.7968  0.7966  0.7966  0.7921  0.7822  0.7729  0.7729  0.7729
[33 : 48]:	0.7673  0.7673  0.7673  0.7626  0.7614  0.7601  0.7591  0.7591  0.7591  0.7590  0.7547  0.7517  0.7510  0.7510  0.7503  0.7484
[49 : 64]:	0.7480  0.7462  0.7444  0.7431  0.7427  0.7427  0.7427  0.7412  0.7412  0.7412  0.7400  0.7390  0.7382  0.7379  0.7371  0.7345
2024-04-29 20:57:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:57:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:59:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #64: GFLOPs: 58.5292. Time: 3953.7841 us. Best GFLOPs: 145.7236
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #65: GFLOPs: 81.4376. Time: 2841.5817 us. Best GFLOPs: 145.7236
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #66: GFLOPs: 136.5819. Time: 1694.3075 us. Best GFLOPs: 145.7236
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #67: GFLOPs: 144.6972. Time: 1599.2823 us. Best GFLOPs: 145.7236
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #68: GFLOPs: 166.7340. Time: 1387.9096 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #69: GFLOPs: 128.8537. Time: 1795.9261 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #70: GFLOPs: 44.6294. Time: 5185.1845 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #71: GFLOPs: 88.3278. Time: 2619.9182 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #72: GFLOPs: 106.4751. Time: 2173.3877 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #73: GFLOPs: 143.7338. Time: 1610.0023 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #74: GFLOPs: 64.2865. Time: 3599.6919 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #75: GFLOPs: 77.9279. Time: 2969.5636 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #76: GFLOPs: 97.4904. Time: 2373.6865 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #77: GFLOPs: 127.9250. Time: 1808.9646 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #78: GFLOPs: 140.7499. Time: 1644.1339 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #79: GFLOPs: 140.1268. Time: 1651.4448 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #80: GFLOPs: 140.1418. Time: 1651.2688 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #81: GFLOPs: 130.5601. Time: 1772.4536 us. Best GFLOPs: 166.7340
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #82: GFLOPs: 196.7846. Time: 1175.9646 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #83: GFLOPs: 175.5197. Time: 1318.4371 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #84: GFLOPs: 134.3402. Time: 1722.5802 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #85: GFLOPs: 129.2396. Time: 1790.5631 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #86: GFLOPs: 129.7114. Time: 1784.0509 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #87: GFLOPs: 95.2616. Time: 2429.2224 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #88: GFLOPs: 131.1937. Time: 1763.8929 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #89: GFLOPs: 108.0832. Time: 2141.0509 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #90: GFLOPs: 86.4566. Time: 2676.6221 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #91: GFLOPs: 128.0352. Time: 1807.4076 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #92: GFLOPs: 195.0432. Time: 1186.4640 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #93: GFLOPs: 151.9643. Time: 1522.8031 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #94: GFLOPs: 102.9019. Time: 2248.8570 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #95: GFLOPs: 51.2924. Time: 4511.6140 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #96: GFLOPs: 93.3927. Time: 2477.8341 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #97: GFLOPs: 78.6418. Time: 2942.6029 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #98: GFLOPs: 91.5763. Time: 2526.9824 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #99: GFLOPs: 156.2000. Time: 1481.5090 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #100: GFLOPs: 34.4633. Time: 6714.7277 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #101: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(3), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l121)
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #102: GFLOPs: 114.6033. Time: 2019.2407 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #103: GFLOPs: 112.9900. Time: 2048.0723 us. Best GFLOPs: 196.7846
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #104: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1 in range(T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(4) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                        for ax3_ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("T_relu"):
                                v_ax0 = T.axis.spatial(T.int64(1), ax0)
                                v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + ax1)
                                v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + ax2)
                                v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ow_1)
                                v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l114, l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b117)
b137 = sch.decompose_reduction(block=b117, loop=l121)
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #105: GFLOPs: 213.7558. Time: 1082.5983 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #106: GFLOPs: 107.0987. Time: 2160.7323 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #107: GFLOPs: 54.2629. Time: 4264.6402 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #108: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1 in range(T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(56) * T.int64(4) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(56) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(56) * T.int64(2) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                        for ax3_ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("T_relu"):
                                v_ax0 = T.axis.spatial(T.int64(1), ax0)
                                v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(2) + ax1)
                                v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + ax2)
                                v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(56) * T.int64(2) + ow_1)
                                v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l114, l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b117)
b137 = sch.decompose_reduction(block=b117, loop=l121)
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #109: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1 in range(T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(4) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                        for ax3_ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("T_relu"):
                                v_ax0 = T.axis.spatial(T.int64(1), ax0)
                                v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(2) + ax1)
                                v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + ax2)
                                v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ow_1)
                                v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l114, l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b117)
b137 = sch.decompose_reduction(block=b117, loop=l121)
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #110: GFLOPs: 102.0711. Time: 2267.1627 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #111: GFLOPs: 59.3263. Time: 3900.6595 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #112: GFLOPs: 69.4637. Time: 3331.4067 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #113: GFLOPs: 163.0584. Time: 1419.1950 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #114: GFLOPs: 73.1877. Time: 3161.8952 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #115: GFLOPs: 61.2921. Time: 3775.5544 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #116: GFLOPs: 126.3150. Time: 1832.0206 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #117: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(5)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(1568) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #118: GFLOPs: 123.4111. Time: 1875.1283 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #119: GFLOPs: 116.7010. Time: 1982.9450 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #120: GFLOPs: 116.0432. Time: 1994.1862 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #121: GFLOPs: 117.7745. Time: 1964.8716 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #122: GFLOPs: 61.7745. Time: 3746.0702 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #123: GFLOPs: 93.2463. Time: 2481.7256 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #124: GFLOPs: 80.4489. Time: 2876.5064 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #125: GFLOPs: 32.8291. Time: 7048.9815 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #126: GFLOPs: 64.7317. Time: 3574.9342 us. Best GFLOPs: 213.7558
2024-04-29 20:59:16 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #127: GFLOPs: 71.6591. Time: 3229.3435 us. Best GFLOPs: 213.7558
2024-04-29 21:50:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:50:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:50:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 21:50:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:51:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 21:51:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 21:51:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 21:51:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 21:51:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9688  0.9688  0.9688  0.9688  0.9688  0.9438  0.9438  0.9438  0.9267  0.9038  0.8965  0.8956  0.8956  0.8918  0.8834  0.8834
[17 : 32]:	0.8592  0.8583  0.8475  0.8461  0.8441  0.8188  0.7880  0.7818  0.7722  0.7698  0.7507  0.7507  0.7507  0.7394  0.7331  0.7139
[33 : 48]:	0.7089  0.7019  0.6959  0.6936  0.6910  0.6898  0.6894  0.6867  0.6850  0.6814  0.6791  0.6791  0.6791  0.6691  0.6667  0.6637
[49 : 64]:	0.6596  0.6561  0.6543  0.6543  0.6543  0.6534  0.6482  0.6460  0.6460  0.6460  0.6432  0.6398  0.6389  0.6389  0.6389  0.6389
2024-04-29 21:51:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:51:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:53:14 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #128: GFLOPs: 101.5745. Time: 2278.2454 us. Best GFLOPs: 213.7558
2024-04-29 21:53:14 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #129: GFLOPs: 113.0528. Time: 2046.9342 us. Best GFLOPs: 213.7558
2024-04-29 21:53:14 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #130: GFLOPs: 76.6124. Time: 3020.5518 us. Best GFLOPs: 213.7558
2024-04-29 21:53:14 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #131: GFLOPs: 221.8029. Time: 1043.3216 us. Best GFLOPs: 221.8029
2024-04-29 21:53:14 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #132: GFLOPs: 92.8865. Time: 2491.3387 us. Best GFLOPs: 221.8029
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #133: GFLOPs: 101.9995. Time: 2268.7542 us. Best GFLOPs: 221.8029
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #134: GFLOPs: 237.3264. Time: 975.0780 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #135: GFLOPs: 102.8593. Time: 2249.7897 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #136: GFLOPs: 176.5509. Time: 1310.7365 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #137: GFLOPs: 99.9609. Time: 2315.0215 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #138: GFLOPs: 96.5148. Time: 2397.6812 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #139: GFLOPs: 75.6605. Time: 3058.5537 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #140: GFLOPs: 99.8594. Time: 2317.3754 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #141: GFLOPs: 174.7181. Time: 1324.4861 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #142: GFLOPs: 179.1509. Time: 1291.7140 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #143: GFLOPs: 195.2702. Time: 1185.0843 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #144: GFLOPs: 102.3446. Time: 2261.1037 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #145: GFLOPs: 99.6502. Time: 2322.2395 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #146: GFLOPs: 113.1945. Time: 2044.3722 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #147: GFLOPs: 83.9688. Time: 2755.9237 us. Best GFLOPs: 237.3264
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #148: GFLOPs: 264.7051. Time: 874.2246 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #149: GFLOPs: 69.7529. Time: 3317.5906 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #150: GFLOPs: 117.5568. Time: 1968.5098 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #151: GFLOPs: 93.6354. Time: 2471.4120 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #152: GFLOPs: 154.9752. Time: 1493.2181 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #153: GFLOPs: 228.2032. Time: 1014.0600 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #154: GFLOPs: 178.9997. Time: 1292.8049 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #155: GFLOPs: 147.3046. Time: 1570.9737 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #156: GFLOPs: 177.1918. Time: 1305.9956 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #157: GFLOPs: 132.4661. Time: 1746.9506 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #158: GFLOPs: 121.0717. Time: 1911.3606 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #159: GFLOPs: 202.8725. Time: 1140.6759 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #160: GFLOPs: 94.8704. Time: 2439.2401 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #161: GFLOPs: 63.6410. Time: 3636.2056 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #162: GFLOPs: 77.2700. Time: 2994.8450 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #163: GFLOPs: 122.1252. Time: 1894.8720 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #164: GFLOPs: 67.3934. Time: 3433.7446 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #165: GFLOPs: 179.3819. Time: 1290.0508 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #166: GFLOPs: 141.0041. Time: 1641.1701 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #167: GFLOPs: 66.6164. Time: 3473.7948 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #168: GFLOPs: 80.5955. Time: 2871.2728 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #169: GFLOPs: 118.8208. Time: 1947.5697 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #170: GFLOPs: 111.7661. Time: 2070.5009 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #171: GFLOPs: 112.1958. Time: 2062.5700 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #172: GFLOPs: 111.7860. Time: 2070.1315 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #173: GFLOPs: 170.1176. Time: 1360.3044 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #174: GFLOPs: 158.3228. Time: 1461.6446 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #175: GFLOPs: 140.7621. Time: 1643.9911 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #176: GFLOPs: 165.8630. Time: 1395.1983 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #177: GFLOPs: 201.5780. Time: 1148.0007 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #178: GFLOPs: 152.8354. Time: 1514.1238 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #179: GFLOPs: 159.3811. Time: 1451.9397 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #180: GFLOPs: 145.3525. Time: 1592.0728 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #181: GFLOPs: 97.1367. Time: 2382.3293 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #182: GFLOPs: 122.4728. Time: 1889.4944 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #183: GFLOPs: 161.9139. Time: 1429.2267 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #184: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(5), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #185: GFLOPs: 151.7393. Time: 1525.0617 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #186: GFLOPs: 96.8552. Time: 2389.2554 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #187: GFLOPs: 118.5900. Time: 1951.3593 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #188: GFLOPs: 87.9757. Time: 2630.4049 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #189: GFLOPs: 16.4622. Time: 14057.1635 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #190: GFLOPs: 0.9018. Time: 256612.1320 us. Best GFLOPs: 264.7051
2024-04-29 21:53:15 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #191: GFLOPs: 3.2375. Time: 71479.5417 us. Best GFLOPs: 264.7051
2024-04-29 22:35:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:35:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:35:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:35:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:35:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:36:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:36:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:36:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:36:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7721  0.7655  0.7583  0.7293  0.7293  0.7293  0.7293  0.7293  0.7148  0.7050  0.7050  0.7050  0.7050  0.7050  0.7050  0.7050
[17 : 32]:	0.7050  0.7050  0.6926  0.6877  0.6870  0.6839  0.6772  0.6772  0.6716  0.6716  0.6716  0.6716  0.6654  0.6652  0.6652  0.6646
[33 : 48]:	0.6618  0.6603  0.6596  0.6593  0.6593  0.6593  0.6593  0.6593  0.6593  0.6580  0.6580  0.6580  0.6472  0.6470  0.6447  0.6419
[49 : 64]:	0.6390  0.6353  0.6353  0.6315  0.6315  0.6315  0.6309  0.6309  0.6304  0.6304  0.6304  0.6304  0.6270  0.6270  0.6264  0.6215
2024-04-29 22:36:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:36:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #192: GFLOPs: 112.1267. Time: 2063.8413 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #193: GFLOPs: 50.4595. Time: 4586.0899 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #194: GFLOPs: 98.2609. Time: 2355.0746 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #195: GFLOPs: 185.7563. Time: 1245.7813 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #196: GFLOPs: 131.1710. Time: 1764.1989 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #197: GFLOPs: 188.7140. Time: 1226.2559 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #198: GFLOPs: 130.5451. Time: 1772.6575 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #199: GFLOPs: 152.8766. Time: 1513.7161 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #200: GFLOPs: 144.7832. Time: 1598.3330 us. Best GFLOPs: 264.7051
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #201: GFLOPs: 347.8515. Time: 665.2601 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #202: GFLOPs: 204.1907. Time: 1133.3114 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #203: GFLOPs: 156.4552. Time: 1479.0927 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #204: GFLOPs: 209.0769. Time: 1106.8260 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #205: GFLOPs: 161.8348. Time: 1429.9252 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #206: GFLOPs: 210.3864. Time: 1099.9367 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #207: GFLOPs: 158.4999. Time: 1460.0121 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #208: GFLOPs: 178.2060. Time: 1298.5629 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #209: GFLOPs: 176.2599. Time: 1312.9003 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #210: GFLOPs: 147.6368. Time: 1567.4388 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #211: GFLOPs: 228.7739. Time: 1011.5301 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #212: GFLOPs: 102.2309. Time: 2263.6170 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #213: GFLOPs: 121.6782. Time: 1901.8334 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #214: GFLOPs: 216.8933. Time: 1066.9381 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #215: GFLOPs: 185.8034. Time: 1245.4658 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #216: GFLOPs: 279.2655. Time: 828.6442 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #217: GFLOPs: 208.3277. Time: 1110.8065 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #218: GFLOPs: 210.1772. Time: 1101.0313 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #219: GFLOPs: 200.5211. Time: 1154.0514 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #220: GFLOPs: 195.8407. Time: 1181.6322 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #221: GFLOPs: 168.8341. Time: 1370.6459 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #222: GFLOPs: 132.3326. Time: 1748.7133 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #223: GFLOPs: 128.3761. Time: 1802.6071 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #224: GFLOPs: 145.2676. Time: 1593.0031 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #225: GFLOPs: 167.8067. Time: 1379.0374 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #226: GFLOPs: 127.0279. Time: 1821.7386 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #227: GFLOPs: 76.9010. Time: 3009.2167 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #228: GFLOPs: 101.2097. Time: 2286.4587 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #229: GFLOPs: 164.1505. Time: 1409.7534 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #230: GFLOPs: 69.7090. Time: 3319.6803 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #231: GFLOPs: 99.2709. Time: 2331.1122 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #232: GFLOPs: 141.4472. Time: 1636.0286 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #233: GFLOPs: 199.4809. Time: 1160.0697 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #234: GFLOPs: 144.7889. Time: 1598.2692 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #235: GFLOPs: 155.3068. Time: 1490.0293 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #236: GFLOPs: 212.9052. Time: 1086.9240 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #237: GFLOPs: 166.4684. Time: 1390.1239 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #238: GFLOPs: 158.8200. Time: 1457.0694 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #239: GFLOPs: 223.3637. Time: 1036.0310 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #240: GFLOPs: 167.3323. Time: 1382.9471 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #241: GFLOPs: 154.8125. Time: 1494.7874 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #242: GFLOPs: 216.7041. Time: 1067.8697 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #243: GFLOPs: 171.2473. Time: 1351.3309 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #244: GFLOPs: 137.1170. Time: 1687.6951 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #245: GFLOPs: 137.0635. Time: 1688.3540 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #246: GFLOPs: 107.6753. Time: 2149.1619 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #247: GFLOPs: 220.2293. Time: 1050.7760 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #248: GFLOPs: 128.2484. Time: 1804.4019 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #249: GFLOPs: 142.2712. Time: 1626.5537 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #250: GFLOPs: 150.8033. Time: 1534.5270 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #251: GFLOPs: 120.3687. Time: 1922.5238 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #252: GFLOPs: 183.1435. Time: 1263.5540 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #253: GFLOPs: 61.2182. Time: 3780.1113 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #254: GFLOPs: 43.4629. Time: 5324.3515 us. Best GFLOPs: 347.8515
2024-04-29 22:37:54 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #255: GFLOPs: 44.9129. Time: 5152.4605 us. Best GFLOPs: 347.8515
2024-04-29 22:46:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:46:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:46:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:46:48 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:46:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:47:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:47:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:47:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 22:47:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.6439  0.6439  0.6439  0.6439  0.6439  0.6439  0.6439  0.6057  0.5978  0.5978  0.5978  0.5894  0.5894  0.5894  0.5894  0.5894
[17 : 32]:	0.5894  0.5894  0.5639  0.5639  0.5639  0.5626  0.5509  0.5509  0.5509  0.5509  0.5482  0.5482  0.5482  0.5482  0.5482  0.5482
[33 : 48]:	0.5482  0.5482  0.5482  0.5458  0.5458  0.5458  0.5458  0.5457  0.5457  0.5457  0.5449  0.5425  0.5422  0.5422  0.5295  0.5280
[49 : 64]:	0.5275  0.5249  0.5232  0.5232  0.5196  0.5185  0.5185  0.5185  0.5185  0.5105  0.5062  0.5062  0.5031  0.5031  0.5020  0.5020
2024-04-29 22:47:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:47:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #256: GFLOPs: 227.9018. Time: 1015.4009 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #257: GFLOPs: 206.0474. Time: 1123.0997 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #258: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(3), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(28) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(28) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(28) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l118, l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b121)
b146 = sch.decompose_reduction(block=b121, loop=l130)
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #259: GFLOPs: 210.1213. Time: 1101.3243 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #260: GFLOPs: 101.3100. Time: 2284.1937 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #261: GFLOPs: 199.6026. Time: 1159.3622 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #262: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(3), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #263: GFLOPs: 177.8033. Time: 1301.5038 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #264: GFLOPs: 210.0313. Time: 1101.7964 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #265: GFLOPs: 318.7064. Time: 726.0968 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #266: GFLOPs: 230.7892. Time: 1002.6974 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #267: GFLOPs: 207.4023. Time: 1115.7623 us. Best GFLOPs: 347.8515
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #268: GFLOPs: 350.4691. Time: 660.2914 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #269: GFLOPs: 217.3877. Time: 1064.5115 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #270: GFLOPs: 202.5369. Time: 1142.5655 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #271: GFLOPs: 198.5775. Time: 1165.3469 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #272: GFLOPs: 159.7703. Time: 1448.4025 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #273: GFLOPs: 166.8919. Time: 1386.5961 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #274: GFLOPs: 216.2968. Time: 1069.8805 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #275: GFLOPs: 212.0316. Time: 1091.4019 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #276: GFLOPs: 213.9451. Time: 1081.6405 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #277: GFLOPs: 153.4724. Time: 1507.8395 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #278: GFLOPs: 212.0133. Time: 1091.4963 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #279: GFLOPs: 158.0296. Time: 1464.3564 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #280: GFLOPs: 127.1001. Time: 1820.7037 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #281: GFLOPs: 154.6653. Time: 1496.2092 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #282: GFLOPs: 111.5056. Time: 2075.3373 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #283: GFLOPs: 147.7902. Time: 1565.8123 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #284: GFLOPs: 152.4010. Time: 1518.4395 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #285: GFLOPs: 154.4474. Time: 1498.3206 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #286: GFLOPs: 159.0642. Time: 1454.8323 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #287: GFLOPs: 198.2184. Time: 1167.4580 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #288: GFLOPs: 200.8051. Time: 1152.4196 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #289: GFLOPs: 173.5538. Time: 1333.3718 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #290: GFLOPs: 151.7262. Time: 1525.1925 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #291: GFLOPs: 182.3355. Time: 1269.1537 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #292: GFLOPs: 210.9360. Time: 1097.0707 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #293: GFLOPs: 162.8532. Time: 1420.9838 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #294: GFLOPs: 209.8096. Time: 1102.9603 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #295: GFLOPs: 141.3065. Time: 1637.6574 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #296: GFLOPs: 169.5452. Time: 1364.8968 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #297: GFLOPs: 217.2325. Time: 1065.2719 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #298: GFLOPs: 178.6093. Time: 1295.6306 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #299: GFLOPs: 174.5133. Time: 1326.0407 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #300: GFLOPs: 173.2388. Time: 1335.7960 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #301: GFLOPs: 197.0292. Time: 1174.5044 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #302: GFLOPs: 143.0942. Time: 1617.1979 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #303: GFLOPs: 110.6040. Time: 2092.2542 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #304: GFLOPs: 162.4243. Time: 1424.7359 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #305: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(3), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #306: GFLOPs: 212.6470. Time: 1088.2434 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #307: GFLOPs: 211.4264. Time: 1094.5263 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #308: GFLOPs: 238.1543. Time: 971.6880 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #309: GFLOPs: 127.1771. Time: 1819.6027 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #310: GFLOPs: 126.4161. Time: 1830.5555 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #311: GFLOPs: 74.2841. Time: 3115.2247 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #312: GFLOPs: 98.2609. Time: 2355.0750 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #313: GFLOPs: 114.2157. Time: 2026.0943 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #314: GFLOPs: 170.3970. Time: 1358.0742 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #315: GFLOPs: 170.9271. Time: 1353.8621 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #316: GFLOPs: 148.8765. Time: 1554.3873 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #317: GFLOPs: 19.4010. Time: 11927.8007 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #318: GFLOPs: 22.4517. Time: 10307.0799 us. Best GFLOPs: 350.4691
2024-04-29 22:49:07 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #319: GFLOPs: 71.4796. Time: 3237.4513 us. Best GFLOPs: 350.4691
2024-04-29 23:41:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:41:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:41:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 23:41:33 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:41:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 23:41:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 23:42:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 23:42:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-29 23:42:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7049  0.7049  0.7049  0.7027  0.6387  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144  0.6144
[17 : 32]:	0.6144  0.6144  0.5986  0.5986  0.5959  0.5959  0.5959  0.5959  0.5959  0.5956  0.5956  0.5956  0.5956  0.5956  0.5956  0.5956
[33 : 48]:	0.5956  0.5956  0.5956  0.5956  0.5933  0.5903  0.5902  0.5793  0.5793  0.5777  0.5765  0.5725  0.5695  0.5695  0.5669  0.5662
[49 : 64]:	0.5662  0.5662  0.5649  0.5626  0.5608  0.5608  0.5586  0.5498  0.5498  0.5471  0.5471  0.5454  0.5454  0.5448  0.5440  0.5418
2024-04-29 23:42:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:42:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #320: GFLOPs: 314.7823. Time: 735.1485 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #321: GFLOPs: 237.0274. Time: 976.3078 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #322: GFLOPs: 225.4845. Time: 1026.2864 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #323: GFLOPs: 226.0216. Time: 1023.8476 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #324: GFLOPs: 233.1260. Time: 992.6467 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #325: GFLOPs: 200.1458. Time: 1156.2155 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #326: GFLOPs: 184.1723. Time: 1256.4958 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #327: GFLOPs: 203.3365. Time: 1138.0727 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #328: GFLOPs: 201.5016. Time: 1148.4363 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #329: GFLOPs: 212.8969. Time: 1086.9663 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #330: GFLOPs: 154.8136. Time: 1494.7768 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #331: GFLOPs: 199.8132. Time: 1158.1403 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #332: GFLOPs: 157.7459. Time: 1466.9907 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #333: GFLOPs: 174.8563. Time: 1323.4394 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #334: GFLOPs: 213.2590. Time: 1085.1206 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #335: GFLOPs: 172.1997. Time: 1343.8567 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #336: GFLOPs: 177.3053. Time: 1305.1593 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #337: GFLOPs: 166.3140. Time: 1391.4144 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #338: GFLOPs: 207.5204. Time: 1115.1275 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #339: GFLOPs: 203.3431. Time: 1138.0357 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #340: GFLOPs: 163.1331. Time: 1418.5453 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #341: GFLOPs: 187.3282. Time: 1235.3278 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #342: GFLOPs: 166.5080. Time: 1389.7933 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #343: GFLOPs: 211.1841. Time: 1095.7820 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #344: GFLOPs: 196.5078. Time: 1177.6209 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #345: GFLOPs: 202.6396. Time: 1141.9867 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #346: GFLOPs: 199.1698. Time: 1161.8813 us. Best GFLOPs: 350.4691
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #347: GFLOPs: 353.2036. Time: 655.1794 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #348: GFLOPs: 203.2916. Time: 1138.3243 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #349: GFLOPs: 204.6868. Time: 1130.5649 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #350: GFLOPs: 205.1419. Time: 1128.0567 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #351: GFLOPs: 210.2237. Time: 1100.7878 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #352: GFLOPs: 175.2142. Time: 1320.7361 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #353: GFLOPs: 173.3882. Time: 1334.6450 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #354: GFLOPs: 177.7734. Time: 1301.7229 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #355: GFLOPs: 176.3379. Time: 1312.3196 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #356: GFLOPs: 196.4663. Time: 1177.8697 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #357: GFLOPs: 222.5279. Time: 1039.9223 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #358: GFLOPs: 227.1665. Time: 1018.6878 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #359: GFLOPs: 190.0645. Time: 1217.5432 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #360: GFLOPs: 189.3463. Time: 1222.1611 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #361: GFLOPs: 110.2879. Time: 2098.2518 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #362: GFLOPs: 170.0521. Time: 1360.8279 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #363: GFLOPs: 83.9187. Time: 2757.5701 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #364: GFLOPs: 137.0135. Time: 1688.9698 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #365: GFLOPs: 121.3869. Time: 1906.3985 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #366: GFLOPs: 121.9425. Time: 1897.7123 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #367: GFLOPs: 201.7793. Time: 1146.8558 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #368: GFLOPs: 220.2224. Time: 1050.8092 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #369: GFLOPs: 212.4725. Time: 1089.1373 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #370: GFLOPs: 141.4488. Time: 1636.0107 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #371: GFLOPs: 141.9674. Time: 1630.0340 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #372: GFLOPs: 174.7644. Time: 1324.1352 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #373: GFLOPs: 159.5075. Time: 1450.7886 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #374: GFLOPs: 183.4077. Time: 1261.7337 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #375: GFLOPs: 124.8685. Time: 1853.2434 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #376: GFLOPs: 122.9507. Time: 1882.1508 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #377: GFLOPs: 192.3453. Time: 1203.1055 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #378: GFLOPs: 204.8198. Time: 1129.8308 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #379: GFLOPs: 183.5627. Time: 1260.6685 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #380: GFLOPs: 182.8009. Time: 1265.9223 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #381: GFLOPs: 36.7469. Time: 6297.4523 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #382: GFLOPs: 66.4290. Time: 3483.5925 us. Best GFLOPs: 353.2036
2024-04-29 23:43:39 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #383: GFLOPs: 80.6165. Time: 2870.5245 us. Best GFLOPs: 353.2036
2024-04-30 00:28:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:28:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:28:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 00:28:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:29:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 00:29:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 00:29:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 00:29:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 00:29:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7031  0.7031  0.6645  0.6645  0.6387  0.6106  0.6019  0.6007  0.6007  0.6007  0.5983  0.5983  0.5983  0.5983  0.5983  0.5983
[17 : 32]:	0.5983  0.5873  0.5862  0.5862  0.5805  0.5772  0.5760  0.5755  0.5755  0.5755  0.5755  0.5755  0.5755  0.5715  0.5715  0.5715
[33 : 48]:	0.5715  0.5715  0.5715  0.5715  0.5715  0.5677  0.5677  0.5624  0.5571  0.5533  0.5533  0.5533  0.5533  0.5533  0.5499  0.5493
[49 : 64]:	0.5493  0.5493  0.5476  0.5476  0.5476  0.5476  0.5476  0.5473  0.5447  0.5433  0.5433  0.5433  0.5433  0.5433  0.5433  0.5420
2024-04-30 00:29:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:29:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #384: GFLOPs: 225.9009. Time: 1024.3950 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #385: GFLOPs: 313.8582. Time: 737.3130 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #386: GFLOPs: 221.4506. Time: 1044.9810 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #387: GFLOPs: 313.7885. Time: 737.4768 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #388: GFLOPs: 222.2982. Time: 1040.9969 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #389: GFLOPs: 220.1175. Time: 1051.3101 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #390: GFLOPs: 183.7964. Time: 1259.0658 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #391: GFLOPs: 312.7934. Time: 739.8228 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #392: GFLOPs: 234.8951. Time: 985.1704 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #393: GFLOPs: 220.2796. Time: 1050.5361 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #394: GFLOPs: 198.3853. Time: 1166.4759 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #395: GFLOPs: 176.2869. Time: 1312.6994 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #396: GFLOPs: 171.3202. Time: 1350.7559 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #397: GFLOPs: 155.4652. Time: 1488.5118 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #398: GFLOPs: 125.8215. Time: 1839.2061 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #399: GFLOPs: 169.5285. Time: 1365.0315 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #400: GFLOPs: 211.1056. Time: 1096.1894 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #401: GFLOPs: 171.8103. Time: 1346.9028 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #402: GFLOPs: 176.3875. Time: 1311.9511 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #403: GFLOPs: 207.9919. Time: 1112.5998 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #404: GFLOPs: 206.8921. Time: 1118.5138 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #405: GFLOPs: 203.9940. Time: 1134.4043 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #406: GFLOPs: 180.9796. Time: 1278.6622 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #407: GFLOPs: 160.4601. Time: 1442.1758 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #408: GFLOPs: 193.2108. Time: 1197.7163 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #409: GFLOPs: 340.2513. Time: 680.1199 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #410: GFLOPs: 216.4234. Time: 1069.2548 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #411: GFLOPs: 203.5279. Time: 1137.0025 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #412: GFLOPs: 336.5662. Time: 687.5667 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #413: GFLOPs: 175.9714. Time: 1315.0532 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #414: GFLOPs: 146.6768. Time: 1577.6984 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #415: GFLOPs: 178.7738. Time: 1294.4383 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #416: GFLOPs: 145.1694. Time: 1594.0802 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #417: GFLOPs: 177.0763. Time: 1306.8475 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #418: GFLOPs: 179.5806. Time: 1288.6230 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #419: GFLOPs: 191.3973. Time: 1209.0646 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #420: GFLOPs: 219.6969. Time: 1053.3226 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #421: GFLOPs: 234.6931. Time: 986.0186 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #422: GFLOPs: 224.1210. Time: 1032.5303 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #423: GFLOPs: 190.9891. Time: 1211.6486 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #424: GFLOPs: 222.0974. Time: 1041.9381 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #425: GFLOPs: 100.7942. Time: 2295.8831 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #426: GFLOPs: 100.5176. Time: 2302.2007 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #427: GFLOPs: 198.0952. Time: 1168.1843 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #428: GFLOPs: 152.7301. Time: 1515.1681 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #429: GFLOPs: 100.8721. Time: 2294.1109 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #430: GFLOPs: 179.9730. Time: 1285.8133 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #431: GFLOPs: 213.9931. Time: 1081.3980 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #432: GFLOPs: 214.9440. Time: 1076.6141 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #433: GFLOPs: 214.0368. Time: 1081.1774 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #434: GFLOPs: 172.6912. Time: 1340.0318 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #435: GFLOPs: 296.8110. Time: 779.6602 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #436: GFLOPs: 200.7014. Time: 1153.0149 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #437: GFLOPs: 184.3106. Time: 1255.5528 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #438: GFLOPs: 198.4153. Time: 1166.2995 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #439: GFLOPs: 223.2176. Time: 1036.7089 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #440: GFLOPs: 220.3822. Time: 1050.0471 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #441: GFLOPs: 197.5456. Time: 1171.4346 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #442: GFLOPs: 189.3779. Time: 1221.9575 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #443: GFLOPs: 205.9848. Time: 1123.4410 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #444: GFLOPs: 216.1400. Time: 1070.6566 us. Best GFLOPs: 353.2036
2024-04-30 00:31:27 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #445: GFLOPs: 81.6573. Time: 2833.9382 us. Best GFLOPs: 353.2036
2024-04-30 00:31:28 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #446: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(1856)):
            for i3 in range(T.int64(58)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(58))
                        v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_fused % T.int64(58))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-30 00:31:28 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #447: GFLOPs: 19.3643. Time: 11950.4408 us. Best GFLOPs: 353.2036
2024-04-30 01:27:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:27:10 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:27:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 01:27:15 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:27:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 01:27:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 01:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 01:27:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9156d08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7bd5848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x915b4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x64bd698)]: 0 failure(s)
2024-04-30 01:28:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7222  0.7222  0.7222  0.7167  0.7167  0.7167  0.6931  0.6411  0.6411  0.6411  0.6411  0.6411  0.6411  0.6411  0.6411  0.6387
[17 : 32]:	0.6387  0.6387  0.6387  0.6387  0.6387  0.6311  0.6306  0.6306  0.6306  0.6266  0.6266  0.6266  0.6266  0.6261  0.6261  0.6261
[33 : 48]:	0.6261  0.6261  0.6165  0.6133  0.6112  0.6003  0.6003  0.6003  0.5991  0.5991  0.5950  0.5950  0.5950  0.5921  0.5852  0.5838
[49 : 64]:	0.5838  0.5838  0.5838  0.5838  0.5835  0.5798  0.5765  0.5756  0.5731  0.5731  0.5728  0.5728  0.5728  0.5671  0.5671  0.5671
2024-04-30 01:28:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:28:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #448: GFLOPs: 314.1090. Time: 736.7243 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #449: GFLOPs: 217.0400. Time: 1066.2168 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #450: GFLOPs: 218.0098. Time: 1061.4740 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #451: GFLOPs: 315.2059. Time: 734.1605 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #452: GFLOPs: 236.5460. Time: 978.2946 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #453: GFLOPs: 219.6673. Time: 1053.4646 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #454: GFLOPs: 214.0111. Time: 1081.3071 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #455: GFLOPs: 207.1180. Time: 1117.2939 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #456: GFLOPs: 192.8295. Time: 1200.0847 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #457: GFLOPs: 178.4973. Time: 1296.4441 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #458: GFLOPs: 195.7595. Time: 1182.1222 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #459: GFLOPs: 185.1720. Time: 1249.7120 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #460: GFLOPs: 120.2911. Time: 1923.7644 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #461: GFLOPs: 186.6299. Time: 1239.9496 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #462: GFLOPs: 189.8465. Time: 1218.9411 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #463: GFLOPs: 199.3253. Time: 1160.9749 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #464: GFLOPs: 205.1069. Time: 1128.2492 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #465: GFLOPs: 161.8443. Time: 1429.8413 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #466: GFLOPs: 211.6467. Time: 1093.3870 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #467: GFLOPs: 207.0666. Time: 1117.5714 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #468: GFLOPs: 210.5272. Time: 1099.2009 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #469: GFLOPs: 205.2557. Time: 1127.4313 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #470: GFLOPs: 224.2948. Time: 1031.7303 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #471: GFLOPs: 164.4857. Time: 1406.8806 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #472: GFLOPs: 173.1972. Time: 1336.1168 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #473: GFLOPs: 208.2071. Time: 1111.4495 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #474: GFLOPs: 215.6028. Time: 1073.3244 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #475: GFLOPs: 208.0607. Time: 1112.2315 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #476: GFLOPs: 213.0208. Time: 1086.3337 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #477: GFLOPs: 197.0818. Time: 1174.1910 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #478: GFLOPs: 149.5891. Time: 1546.9822 us. Best GFLOPs: 353.2036
2024-04-30 01:29:29 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #479: GFLOPs: 195.7236. Time: 1182.3392 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #480: GFLOPs: 207.5832. Time: 1114.7899 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #481: GFLOPs: 186.2644. Time: 1242.3827 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #482: GFLOPs: 156.8569. Time: 1475.3048 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #483: GFLOPs: 94.6798. Time: 2444.1507 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #484: GFLOPs: 204.8601. Time: 1129.6087 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #485: GFLOPs: 216.5463. Time: 1068.6479 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #486: GFLOPs: 217.6768. Time: 1063.0977 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #487: GFLOPs: 214.8783. Time: 1076.9433 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #488: GFLOPs: 194.9229. Time: 1187.1959 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #489: GFLOPs: 181.2182. Time: 1276.9784 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #490: GFLOPs: 205.2662. Time: 1127.3738 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #491: GFLOPs: 161.7311. Time: 1430.8421 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #492: GFLOPs: 193.8423. Time: 1193.8142 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #493: GFLOPs: 196.4042. Time: 1178.2421 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #494: GFLOPs: 231.1216. Time: 1001.2552 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #495: GFLOPs: 213.4064. Time: 1084.3712 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #496: GFLOPs: 213.1596. Time: 1085.6266 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #497: GFLOPs: 343.0754. Time: 674.5213 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #498: GFLOPs: 211.5683. Time: 1093.7920 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #499: GFLOPs: 173.0347. Time: 1337.3720 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #500: GFLOPs: 216.1557. Time: 1070.5791 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #501: GFLOPs: 169.9611. Time: 1361.5572 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #502: GFLOPs: 169.1116. Time: 1368.3964 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #503: GFLOPs: 199.7034. Time: 1158.7770 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #504: GFLOPs: 162.5037. Time: 1424.0393 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #505: GFLOPs: 176.6021. Time: 1310.3564 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #506: GFLOPs: 186.8944. Time: 1238.1953 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #507: GFLOPs: 187.2646. Time: 1235.7474 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #508: GFLOPs: 192.5381. Time: 1201.9011 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #509: GFLOPs: 37.7615. Time: 6128.2514 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #510: GFLOPs: 3.9392. Time: 58746.5623 us. Best GFLOPs: 353.2036
2024-04-30 01:29:30 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_5] Trial #511: GFLOPs: 2.0856. Time: 110956.6310 us. Best GFLOPs: 353.2036
