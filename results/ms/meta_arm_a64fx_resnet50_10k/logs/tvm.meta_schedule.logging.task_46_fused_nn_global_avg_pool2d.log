2024-04-29 19:39:19 [INFO] [task_scheduler.cc:160] Initializing Task #46: "fused_nn_global_avg_pool2d"
2024-04-29 19:39:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 19:39:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:39:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 19:39:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1 in range(T.int64(7)):
                    for ax0_2, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7)):
                        with T.block("adaptive_pool_sum_rf"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(7), ax0_1 + ax0_2)
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_1)
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                            T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            with T.init():
                                adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                    for ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                        with T.block("adaptive_pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                            T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 19:39:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSRR", [ax2, ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 20:27:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:27:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:27:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7b43348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b91a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6497e68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x66c85f8)]: 0 failure(s)
2024-04-29 20:27:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:27:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7b43348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b91a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6497e68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x66c85f8)]: 0 failure(s)
2024-04-29 20:27:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7b43348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b91a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6497e68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x66c85f8)]: 0 failure(s)
2024-04-29 20:27:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7b43348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b91a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6497e68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x66c85f8)]: 0 failure(s)
2024-04-29 20:28:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7b43348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b91a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6497e68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x66c85f8)]: 0 failure(s)
2024-04-29 20:28:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9948  0.9936  0.9893  0.9782  0.9749  0.9701  0.9689  0.9656  0.9631  0.9606  0.9547  0.9543  0.9526  0.9461  0.9458  0.9398
[17 : 32]:	0.9295  0.9288  0.9236  0.9114  0.9072  0.9005  0.8931  0.8874  0.8873  0.8767  0.8591  0.8526  0.8502  0.8487  0.8432  0.8315
[33 : 48]:	0.8300  0.8227  0.8220  0.8189  0.8159  0.8023  0.8004  0.7957  0.7947  0.7935  0.7918  0.7916  0.7896  0.7886  0.7881  0.7879
[49 : 64]:	0.7868  0.7839  0.7721  0.7660  0.7655  0.7641  0.7609  0.7564  0.7562  0.7546  0.7521  0.7503  0.7473  0.7397  0.7348  0.7346
2024-04-29 20:28:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:28:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 4.7135. Time: 21.7247 us. Best GFLOPs: 4.7135
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 2.3436. Time: 43.6932 us. Best GFLOPs: 4.7135
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 2.7428. Time: 37.3343 us. Best GFLOPs: 4.7135
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 5.0097. Time: 20.4403 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 3.9471. Time: 25.9433 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 3.0932. Time: 33.1044 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 4.8652. Time: 21.0475 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 3.3136. Time: 30.9031 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 3.0289. Time: 33.8078 us. Best GFLOPs: 5.0097
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 7.6699. Time: 13.3508 us. Best GFLOPs: 7.6699
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 4.8009. Time: 21.3292 us. Best GFLOPs: 7.6699
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 2.8505. Time: 35.9235 us. Best GFLOPs: 7.6699
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 4.6633. Time: 21.9586 us. Best GFLOPs: 7.6699
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 3.2279. Time: 31.7230 us. Best GFLOPs: 7.6699
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 9.7287. Time: 10.5255 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 6.1021. Time: 16.7812 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 3.2924. Time: 31.1019 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 8.1848. Time: 12.5110 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 3.9284. Time: 26.0663 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 2.8971. Time: 35.3457 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 4.7027. Time: 21.7749 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 9.6550. Time: 10.6059 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 3.0147. Time: 33.9675 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 7.7079. Time: 13.2850 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 8.7887. Time: 11.6513 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 6.4604. Time: 15.8504 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 3.0801. Time: 33.2455 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 4.6470. Time: 22.0358 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 2.4049. Time: 42.5797 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 8.3584. Time: 12.2512 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 7.4329. Time: 13.7765 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 8.1952. Time: 12.4951 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 8.1831. Time: 12.5137 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 7.5949. Time: 13.4828 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 8.5946. Time: 11.9145 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 3.1766. Time: 32.2356 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 8.3255. Time: 12.2995 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 7.9697. Time: 12.8486 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 9.7018. Time: 10.5548 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 3.0764. Time: 33.2860 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 7.6945. Time: 13.3082 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 7.7008. Time: 13.2973 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 4.3956. Time: 23.2961 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 6.3729. Time: 16.0680 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 4.3059. Time: 23.7814 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 8.8864. Time: 11.5232 us. Best GFLOPs: 9.7287
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 9.8879. Time: 10.3561 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 7.6416. Time: 13.4004 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 7.3367. Time: 13.9573 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 2.8682. Time: 35.7015 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 4.1034. Time: 24.9551 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 4.2835. Time: 23.9055 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 8.9801. Time: 11.4030 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 7.7936. Time: 13.1389 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.4553. Time: 41.7054 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 3.8449. Time: 26.6329 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 8.7354. Time: 11.7224 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 2.6531. Time: 38.5965 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 7.8497. Time: 13.0450 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 5.0110. Time: 20.4351 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 3.9318. Time: 26.0440 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 3.8840. Time: 26.3647 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 3.8572. Time: 26.5476 us. Best GFLOPs: 9.8879
2024-04-29 20:34:26 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 5.8712. Time: 17.4412 us. Best GFLOPs: 9.8879
