2024-04-29 19:39:08 [INFO] [task_scheduler.cc:160] Initializing Task #43: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15"
2024-04-29 19:39:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:39:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:39:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(256)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(2)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_1 + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(2) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:39:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:39:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(9), oh_1 + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 20:22:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:22:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:22:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:22:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:23:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:23:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:23:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:23:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:23:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9997  0.9996  0.9994  0.9989  0.9985  0.9973  0.9968  0.9966  0.9958  0.9950  0.9943  0.9940  0.9932  0.9921
[17 : 32]:	0.9912  0.9907  0.9906  0.9904  0.9903  0.9900  0.9886  0.9881  0.9879  0.9876  0.9875  0.9875  0.9871  0.9870  0.9864  0.9856
[33 : 48]:	0.9855  0.9851  0.9847  0.9837  0.9830  0.9829  0.9828  0.9827  0.9826  0.9823  0.9822  0.9819  0.9812  0.9806  0.9794  0.9790
[49 : 64]:	0.9781  0.9779  0.9776  0.9768  0.9762  0.9760  0.9757  0.9754  0.9752  0.9745  0.9740  0.9739  0.9735  0.9717  0.9713  0.9704
2024-04-29 20:23:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:23:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #1: GFLOPs: 42.1736. Time: 5483.5598 us. Best GFLOPs: 42.1736
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #2: GFLOPs: 25.0646. Time: 9226.5901 us. Best GFLOPs: 42.1736
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #3: GFLOPs: 26.7239. Time: 8653.7104 us. Best GFLOPs: 42.1736
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #4: GFLOPs: 80.9945. Time: 2855.2702 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #5: GFLOPs: 33.7198. Time: 6858.3119 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #6: GFLOPs: 33.9239. Time: 6817.0584 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #7: GFLOPs: 29.6100. Time: 7810.2416 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #8: GFLOPs: 4.0229. Time: 57486.5287 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #9: GFLOPs: 12.2696. Time: 18848.2745 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #10: GFLOPs: 4.8301. Time: 47879.0890 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #11: GFLOPs: 0.5979. Time: 386757.3190 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #12: GFLOPs: 53.3379. Time: 4335.7740 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #13: GFLOPs: 1.8307. Time: 126322.4677 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #16: GFLOPs: 21.2077. Time: 10904.6113 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #17: GFLOPs: 31.2046. Time: 7411.1316 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #18: GFLOPs: 0.8224. Time: 281193.8270 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #19: GFLOPs: 65.0871. Time: 3553.1056 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #20: GFLOPs: 50.8399. Time: 4548.8161 us. Best GFLOPs: 80.9945
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #21: GFLOPs: 150.2052. Time: 1539.6349 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #22: GFLOPs: 0.5867. Time: 394165.6660 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(16)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(9), ow_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
sch.annotate(block_or_loop=l86, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l86, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b70)
l122 = sch.fuse(l121, preserve_unit_iters=True)
sch.vectorize(loop=l122)
b123 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b123)
b150 = sch.decompose_reduction(block=b123, loop=l134)
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #24: GFLOPs: 0.6479. Time: 356951.6700 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #25: GFLOPs: 0.8614. Time: 268477.9453 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #26: GFLOPs: 54.3632. Time: 4253.9988 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #27: GFLOPs: 5.4509. Time: 42426.2700 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #28: GFLOPs: 80.1901. Time: 2883.9121 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #29: GFLOPs: 11.4720. Time: 20158.8326 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #30: GFLOPs: 19.4608. Time: 11883.4344 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(392) // T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(392) * T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(392) // T.int64(56) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(392) * T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(392) // T.int64(56) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(392) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(392) // T.int64(56) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b117)
b140 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #32: GFLOPs: 2.2635. Time: 102169.8220 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #33: GFLOPs: 4.6748. Time: 49469.7513 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #34: GFLOPs: 21.3005. Time: 10857.0561 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #35: GFLOPs: 2.1371. Time: 108214.8210 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #36: GFLOPs: 12.9604. Time: 17843.7033 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #37: GFLOPs: 20.3753. Time: 11350.0947 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #38: GFLOPs: 0.1772. Time: 1305050.2567 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #39: GFLOPs: 46.5881. Time: 4963.9555 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #40: GFLOPs: 1.7797. Time: 129944.3023 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #41: GFLOPs: 4.4174. Time: 52352.2750 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #42: GFLOPs: 21.8487. Time: 10584.6482 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #43: GFLOPs: 0.2083. Time: 1110330.7027 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #44: GFLOPs: 1.0076. Time: 229507.0923 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #45: GFLOPs: 19.2624. Time: 12005.8140 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #46: GFLOPs: 1.4194. Time: 162924.0000 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #47: GFLOPs: 1.7486. Time: 132253.7427 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #48: GFLOPs: 25.8469. Time: 8947.3568 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #49: GFLOPs: 19.9882. Time: 11569.9116 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #50: GFLOPs: 0.1846. Time: 1253012.0267 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #51: GFLOPs: 59.0620. Time: 3915.5650 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #52: GFLOPs: 68.2835. Time: 3386.7776 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #53: GFLOPs: 62.7046. Time: 3688.1064 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #54: GFLOPs: 9.1319. Time: 25324.6467 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #55: GFLOPs: 11.6621. Time: 19830.2268 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #56: GFLOPs: 21.5313. Time: 10740.7113 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #57: GFLOPs: 0.3888. Time: 594838.0417 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #58: GFLOPs: 5.0396. Time: 45888.7303 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #59: GFLOPs: 0.2718. Time: 850747.4430 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #60: GFLOPs: 4.5603. Time: 50712.1723 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #61: GFLOPs: 5.5174. Time: 41914.5637 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #62: GFLOPs: 81.1977. Time: 2848.1257 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #63: GFLOPs: 34.1567. Time: 6770.5919 us. Best GFLOPs: 150.2052
2024-04-29 20:33:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #64: GFLOPs: 18.7513. Time: 12333.0427 us. Best GFLOPs: 150.2052
2024-04-29 20:43:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:43:48 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 20:43:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:43:53 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 20:44:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:44:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:44:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:44:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 20:44:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9329  0.8645  0.8645  0.8645  0.8645  0.8645  0.8645  0.8645  0.8645  0.8291  0.8192  0.8068  0.7971  0.7804  0.7784  0.7766
[17 : 32]:	0.7545  0.7297  0.7295  0.7283  0.7274  0.7250  0.7249  0.7235  0.7207  0.7207  0.7180  0.7165  0.7163  0.7063  0.7057  0.7040
[33 : 48]:	0.6960  0.6960  0.6944  0.6931  0.6926  0.6918  0.6918  0.6918  0.6900  0.6900  0.6897  0.6895  0.6892  0.6868  0.6858  0.6858
[49 : 64]:	0.6858  0.6858  0.6858  0.6858  0.6858  0.6858  0.6858  0.6858  0.6858  0.6844  0.6834  0.6834  0.6825  0.6823  0.6819  0.6815
2024-04-29 20:44:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:44:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #65: GFLOPs: 170.8918. Time: 1353.2608 us. Best GFLOPs: 170.8918
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #66: GFLOPs: 126.0102. Time: 1835.2577 us. Best GFLOPs: 170.8918
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #67: GFLOPs: 181.0964. Time: 1277.0060 us. Best GFLOPs: 181.0964
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #68: GFLOPs: 183.1353. Time: 1262.7885 us. Best GFLOPs: 183.1353
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #69: GFLOPs: 142.4248. Time: 1623.7425 us. Best GFLOPs: 183.1353
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #70: GFLOPs: 143.3647. Time: 1613.0967 us. Best GFLOPs: 183.1353
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #71: GFLOPs: 206.4208. Time: 1120.3388 us. Best GFLOPs: 206.4208
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #72: GFLOPs: 211.0004. Time: 1096.0227 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #73: GFLOPs: 154.8199. Time: 1493.7433 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #74: GFLOPs: 129.5577. Time: 1785.0051 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #75: GFLOPs: 171.2720. Time: 1350.2570 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #76: GFLOPs: 150.7364. Time: 1534.2096 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #77: GFLOPs: 116.9766. Time: 1976.9875 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #78: GFLOPs: 128.0560. Time: 1805.9376 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #79: GFLOPs: 119.6704. Time: 1932.4848 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #80: GFLOPs: 135.7523. Time: 1703.5531 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #81: GFLOPs: 190.7763. Time: 1212.2113 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #82: GFLOPs: 13.1089. Time: 17641.4990 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #83: GFLOPs: 141.4073. Time: 1635.4264 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #84: GFLOPs: 192.5992. Time: 1200.7380 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #85: GFLOPs: 104.0905. Time: 2221.7309 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #86: GFLOPs: 158.7390. Time: 1456.8644 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #87: GFLOPs: 44.1767. Time: 5234.9093 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #88: GFLOPs: 140.4879. Time: 1646.1294 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #89: GFLOPs: 129.0818. Time: 1791.5870 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #90: GFLOPs: 161.6191. Time: 1430.9021 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #91: GFLOPs: 121.1567. Time: 1908.7771 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #92: GFLOPs: 34.7840. Time: 6648.4917 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #93: GFLOPs: 53.6265. Time: 4312.4390 us. Best GFLOPs: 211.0004
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #94: GFLOPs: 213.5827. Time: 1082.7713 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #95: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #96: GFLOPs: 16.0449. Time: 14413.3486 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #97: GFLOPs: 175.3243. Time: 1319.0481 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #98: GFLOPs: 96.4516. Time: 2397.6923 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #99: GFLOPs: 125.4123. Time: 1844.0067 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #100: GFLOPs: 126.9641. Time: 1821.4696 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #101: GFLOPs: 44.4553. Time: 5202.1112 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #102: GFLOPs: 8.8590. Time: 26104.6087 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #103: GFLOPs: 21.8583. Time: 10580.0194 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #104: GFLOPs: 22.4136. Time: 10317.9128 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #105: GFLOPs: 157.3448. Time: 1469.7729 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #106: GFLOPs: 61.1099. Time: 3784.3475 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #107: GFLOPs: 123.3046. Time: 1875.5275 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #108: GFLOPs: 14.5575. Time: 15886.0721 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #109: GFLOPs: 107.2996. Time: 2155.2848 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #110: GFLOPs: 67.9534. Time: 3403.2304 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #111: GFLOPs: 14.7886. Time: 15637.7546 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #112: GFLOPs: 8.9569. Time: 25819.4022 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #113: GFLOPs: 25.4477. Time: 9087.6894 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #114: GFLOPs: 8.9234. Time: 25916.3828 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #115: GFLOPs: 22.9350. Time: 10083.3464 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #116: GFLOPs: 25.0322. Time: 9238.5644 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #117: GFLOPs: 22.6294. Time: 10219.5232 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #118: GFLOPs: 8.9353. Time: 25881.6275 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #119: GFLOPs: 23.1029. Time: 10010.0617 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #120: GFLOPs: 8.8974. Time: 25991.8808 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #121: GFLOPs: 22.2362. Time: 10400.2093 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #122: GFLOPs: 127.4519. Time: 1814.4973 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #123: GFLOPs: 76.2049. Time: 3034.7267 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #124: GFLOPs: 70.6855. Time: 3271.6928 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #125: GFLOPs: 94.5712. Time: 2445.3666 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #126: GFLOPs: 30.7788. Time: 7513.6400 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #127: GFLOPs: 49.6793. Time: 4655.0779 us. Best GFLOPs: 213.5827
2024-04-29 20:46:31 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #128: GFLOPs: 19.1037. Time: 12105.6013 us. Best GFLOPs: 213.5827
2024-04-29 21:12:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:12:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:12:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:12:23 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:12:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:12:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:12:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:13:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:13:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9766  0.9512  0.9148  0.9009  0.9009  0.8678  0.8526  0.8526  0.8526  0.8526  0.8526  0.8482  0.8456  0.8456  0.8192  0.8192
[17 : 32]:	0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192  0.8192
[33 : 48]:	0.8125  0.8125  0.8125  0.8086  0.8086  0.8057  0.8057  0.8057  0.8057  0.8014  0.8014  0.8000  0.8000  0.8000  0.8000  0.8000
[49 : 64]:	0.8000  0.7941  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938
2024-04-29 21:13:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:13:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #129: GFLOPs: 208.4539. Time: 1109.4118 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #130: GFLOPs: 193.6977. Time: 1193.9281 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #131: GFLOPs: 191.2866. Time: 1208.9772 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #132: GFLOPs: 123.9482. Time: 1865.7886 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #133: GFLOPs: 158.4619. Time: 1459.4118 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #134: GFLOPs: 138.4483. Time: 1670.3790 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #135: GFLOPs: 140.7356. Time: 1643.2321 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #136: GFLOPs: 163.4292. Time: 1415.0542 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #137: GFLOPs: 133.3282. Time: 1734.5252 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #138: GFLOPs: 179.3687. Time: 1289.3063 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #139: GFLOPs: 162.5204. Time: 1422.9670 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #140: GFLOPs: 129.2128. Time: 1789.7700 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #141: GFLOPs: 131.9411. Time: 1752.7603 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #142: GFLOPs: 182.3683. Time: 1268.0997 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #143: GFLOPs: 142.8933. Time: 1618.4182 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #144: GFLOPs: 139.9968. Time: 1651.9033 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #145: GFLOPs: 132.9482. Time: 1739.4833 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #146: GFLOPs: 136.4055. Time: 1695.3951 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #147: GFLOPs: 136.1419. Time: 1698.6773 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #148: GFLOPs: 137.3043. Time: 1684.2972 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #149: GFLOPs: 167.8397. Time: 1377.8691 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #150: GFLOPs: 209.5164. Time: 1103.7856 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #151: GFLOPs: 202.7340. Time: 1140.7123 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #152: GFLOPs: 134.2387. Time: 1722.7605 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #153: GFLOPs: 202.9419. Time: 1139.5439 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #154: GFLOPs: 145.9050. Time: 1585.0121 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #155: GFLOPs: 169.9266. Time: 1360.9475 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #156: GFLOPs: 135.4012. Time: 1707.9705 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #157: GFLOPs: 143.9456. Time: 1606.5871 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #158: GFLOPs: 152.5815. Time: 1515.6573 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #159: GFLOPs: 160.7215. Time: 1438.8943 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #160: GFLOPs: 164.5409. Time: 1405.4937 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #161: GFLOPs: 143.9802. Time: 1606.2012 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #162: GFLOPs: 152.6936. Time: 1514.5438 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #163: GFLOPs: 104.7632. Time: 2207.4652 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #164: GFLOPs: 169.6809. Time: 1362.9183 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #165: GFLOPs: 154.8987. Time: 1492.9829 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #166: GFLOPs: 179.7154. Time: 1286.8191 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #167: GFLOPs: 164.8727. Time: 1402.6648 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #168: GFLOPs: 87.2469. Time: 2650.6514 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #169: GFLOPs: 74.4240. Time: 3107.3473 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #170: GFLOPs: 99.3690. Time: 2327.2980 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #171: GFLOPs: 95.0614. Time: 2432.7562 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #172: GFLOPs: 93.5708. Time: 2471.5089 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #173: GFLOPs: 81.4920. Time: 2837.8374 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #174: GFLOPs: 197.8932. Time: 1168.6164 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #175: GFLOPs: 139.3571. Time: 1659.4866 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #176: GFLOPs: 205.8837. Time: 1123.2610 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #177: GFLOPs: 115.5236. Time: 2001.8528 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #178: GFLOPs: 138.4144. Time: 1670.7881 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #179: GFLOPs: 133.4438. Time: 1733.0233 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #180: GFLOPs: 191.4881. Time: 1207.7052 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #181: GFLOPs: 136.2825. Time: 1696.9248 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #182: GFLOPs: 135.7002. Time: 1704.2065 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #183: GFLOPs: 127.8820. Time: 1808.3953 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #184: GFLOPs: 193.0541. Time: 1197.9090 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #185: GFLOPs: 166.9992. Time: 1384.8043 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #186: GFLOPs: 189.2593. Time: 1221.9280 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #187: GFLOPs: 128.2416. Time: 1803.3249 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #188: GFLOPs: 133.4955. Time: 1732.3517 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #189: GFLOPs: 147.0917. Time: 1572.2241 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #190: GFLOPs: 104.8071. Time: 2206.5417 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #191: GFLOPs: 1.2371. Time: 186933.5920 us. Best GFLOPs: 213.5827
2024-04-29 21:14:36 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #192: GFLOPs: 5.3503. Time: 43224.3240 us. Best GFLOPs: 213.5827
2024-04-29 21:33:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:33:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:33:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:33:58 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:34:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:34:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:34:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:34:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:34:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9503  0.9503  0.9503  0.9503  0.9503  0.9375  0.9375  0.9375  0.8881  0.8859  0.8820  0.8777  0.8705  0.8705  0.8352  0.8210
[17 : 32]:	0.8169  0.7966  0.7922  0.7894  0.7894  0.7894  0.7894  0.7765  0.7765  0.7741  0.7741  0.7741  0.7741  0.7741  0.7717  0.7657
[33 : 48]:	0.7656  0.7615  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606
[49 : 64]:	0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7606  0.7601  0.7556  0.7556  0.7525  0.7492  0.7492  0.7492
2024-04-29 21:34:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:34:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #193: GFLOPs: 190.9355. Time: 1211.2004 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #194: GFLOPs: 150.7835. Time: 1533.7296 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #195: GFLOPs: 129.8195. Time: 1781.4061 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #196: GFLOPs: 190.7905. Time: 1212.1210 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #197: GFLOPs: 163.6297. Time: 1413.3203 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #198: GFLOPs: 151.4529. Time: 1526.9511 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #199: GFLOPs: 107.9518. Time: 2142.2635 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #200: GFLOPs: 192.6206. Time: 1200.6045 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #201: GFLOPs: 163.6471. Time: 1413.1699 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #202: GFLOPs: 209.7498. Time: 1102.5572 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #203: GFLOPs: 187.8535. Time: 1231.0720 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #204: GFLOPs: 126.3088. Time: 1830.9190 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #205: GFLOPs: 152.3258. Time: 1518.2008 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #206: GFLOPs: 155.2410. Time: 1489.6910 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #207: GFLOPs: 167.1771. Time: 1383.3305 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #208: GFLOPs: 189.3467. Time: 1221.3634 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #209: GFLOPs: 209.4209. Time: 1104.2889 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #210: GFLOPs: 160.0300. Time: 1445.1117 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #211: GFLOPs: 90.1329. Time: 2565.7806 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #212: GFLOPs: 171.8648. Time: 1345.5995 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #213: GFLOPs: 170.6343. Time: 1355.3028 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #214: GFLOPs: 159.3594. Time: 1451.1929 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #215: GFLOPs: 170.0313. Time: 1360.1094 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #216: GFLOPs: 170.9893. Time: 1352.4891 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #217: GFLOPs: 173.1184. Time: 1335.8556 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #218: GFLOPs: 184.7765. Time: 1251.5725 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #219: GFLOPs: 189.9050. Time: 1217.7733 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #220: GFLOPs: 138.5906. Time: 1668.6639 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #221: GFLOPs: 148.6504. Time: 1555.7382 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #222: GFLOPs: 182.3937. Time: 1267.9232 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #223: GFLOPs: 149.8092. Time: 1543.7043 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #224: GFLOPs: 131.7084. Time: 1755.8569 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #225: GFLOPs: 170.3521. Time: 1357.5481 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #226: GFLOPs: 187.1197. Time: 1235.8999 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #227: GFLOPs: 174.4664. Time: 1325.5340 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #228: GFLOPs: 191.6259. Time: 1206.8370 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #229: GFLOPs: 182.6849. Time: 1265.9020 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #230: GFLOPs: 172.8360. Time: 1338.0384 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #231: GFLOPs: 177.2636. Time: 1304.6172 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #232: GFLOPs: 146.9742. Time: 1573.4810 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #233: GFLOPs: 166.8905. Time: 1385.7061 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #234: GFLOPs: 184.7040. Time: 1252.0634 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #235: GFLOPs: 134.9628. Time: 1713.5181 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #236: GFLOPs: 63.5198. Time: 3640.7717 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #237: GFLOPs: 144.1487. Time: 1604.3236 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #238: GFLOPs: 192.6813. Time: 1200.2264 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #239: GFLOPs: 130.7306. Time: 1768.9907 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #240: GFLOPs: 146.8726. Time: 1574.5704 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #241: GFLOPs: 129.9825. Time: 1779.1721 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #242: GFLOPs: 178.0776. Time: 1298.6539 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #243: GFLOPs: 135.6317. Time: 1705.0674 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #244: GFLOPs: 166.6265. Time: 1387.9016 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #245: GFLOPs: 127.3990. Time: 1815.2509 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #246: GFLOPs: 126.4979. Time: 1828.1820 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #247: GFLOPs: 81.3636. Time: 2842.3178 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #248: GFLOPs: 193.2877. Time: 1196.4607 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #249: GFLOPs: 133.3291. Time: 1734.5139 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #250: GFLOPs: 189.5335. Time: 1220.1601 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #251: GFLOPs: 175.4591. Time: 1318.0348 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #252: GFLOPs: 195.6421. Time: 1182.0627 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #253: GFLOPs: 128.0045. Time: 1806.6642 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #254: GFLOPs: 14.3898. Time: 16071.1904 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #255: GFLOPs: 19.0518. Time: 12138.5792 us. Best GFLOPs: 213.5827
2024-04-29 21:36:33 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #256: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 21:40:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:40:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:40:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:40:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:40:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:40:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:41:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:41:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 21:41:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9730  0.9207  0.9207  0.9207  0.9207  0.9092  0.8973  0.8973  0.8973  0.8757  0.8757  0.8693  0.8693  0.8693  0.8662  0.8662
[17 : 32]:	0.8570  0.8503  0.8501  0.8470  0.8397  0.8397  0.8397  0.8397  0.8346  0.8319  0.8319  0.8319  0.8319  0.8285  0.8285  0.8285
[33 : 48]:	0.8285  0.8020  0.8020  0.7987  0.7970  0.7970  0.7970  0.7952  0.7952  0.7947  0.7947  0.7910  0.7909  0.7909  0.7871  0.7844
[49 : 64]:	0.7823  0.7788  0.7728  0.7728  0.7728  0.7710  0.7707  0.7697  0.7672  0.7672  0.7672  0.7646  0.7643  0.7619  0.7594  0.7582
2024-04-29 21:41:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:41:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #257: GFLOPs: 191.6377. Time: 1206.7624 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #258: GFLOPs: 146.0984. Time: 1582.9134 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #259: GFLOPs: 172.0382. Time: 1344.2429 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #260: GFLOPs: 160.0701. Time: 1444.7494 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #261: GFLOPs: 194.5326. Time: 1188.8044 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #262: GFLOPs: 120.1758. Time: 1924.3575 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #263: GFLOPs: 153.5180. Time: 1506.4104 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #264: GFLOPs: 154.1258. Time: 1500.4704 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #265: GFLOPs: 152.0031. Time: 1521.4245 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #266: GFLOPs: 191.0997. Time: 1210.1597 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #267: GFLOPs: 191.8651. Time: 1205.3321 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #268: GFLOPs: 151.2090. Time: 1529.4140 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #269: GFLOPs: 151.1299. Time: 1530.2145 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #270: GFLOPs: 155.9464. Time: 1482.9526 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #271: GFLOPs: 177.1763. Time: 1305.2603 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #272: GFLOPs: 151.3458. Time: 1528.0313 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #273: GFLOPs: 200.9323. Time: 1150.9407 us. Best GFLOPs: 213.5827
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #274: GFLOPs: 461.0426. Time: 501.6048 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #275: GFLOPs: 199.2124. Time: 1160.8773 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #276: GFLOPs: 152.5794. Time: 1515.6776 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #277: GFLOPs: 192.3733. Time: 1202.1479 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #278: GFLOPs: 184.7068. Time: 1252.0445 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #279: GFLOPs: 210.8278. Time: 1096.9199 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #280: GFLOPs: 192.9845. Time: 1198.3410 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #281: GFLOPs: 174.7606. Time: 1323.3024 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #282: GFLOPs: 126.3648. Time: 1830.1072 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #283: GFLOPs: 131.0088. Time: 1765.2336 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #284: GFLOPs: 190.1468. Time: 1216.2243 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #285: GFLOPs: 111.1187. Time: 2081.2080 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #286: GFLOPs: 140.5412. Time: 1645.5045 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #287: GFLOPs: 150.4315. Time: 1537.3192 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #288: GFLOPs: 160.5072. Time: 1440.8151 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #289: GFLOPs: 103.3017. Time: 2238.6968 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #290: GFLOPs: 131.7776. Time: 1754.9361 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #291: GFLOPs: 152.0745. Time: 1520.7101 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #292: GFLOPs: 123.7061. Time: 1869.4398 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #293: GFLOPs: 163.7543. Time: 1412.2453 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #294: GFLOPs: 142.9847. Time: 1617.3836 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #295: GFLOPs: 149.1958. Time: 1550.0518 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #296: GFLOPs: 75.5115. Time: 3062.5939 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #297: GFLOPs: 93.5028. Time: 2473.3071 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #298: GFLOPs: 127.1858. Time: 1818.2936 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #299: GFLOPs: 142.4495. Time: 1623.4614 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #300: GFLOPs: 209.4816. Time: 1103.9691 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #301: GFLOPs: 150.7523. Time: 1534.0479 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #302: GFLOPs: 151.6871. Time: 1524.5931 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #303: GFLOPs: 171.6569. Time: 1347.2293 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #304: GFLOPs: 111.7420. Time: 2069.5992 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #305: GFLOPs: 110.8836. Time: 2085.6215 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #306: GFLOPs: 154.4259. Time: 1497.5545 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #307: GFLOPs: 143.2669. Time: 1614.1981 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #308: GFLOPs: 205.6239. Time: 1124.6804 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #309: GFLOPs: 142.5694. Time: 1622.0952 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #310: GFLOPs: 114.5905. Time: 2018.1534 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #311: GFLOPs: 386.6277. Time: 598.1496 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #312: GFLOPs: 41.3670. Time: 5590.4715 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #313: GFLOPs: 122.2973. Time: 1890.9759 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #314: GFLOPs: 150.5452. Time: 1536.1579 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #315: GFLOPs: 152.9613. Time: 1511.8930 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #316: GFLOPs: 143.2594. Time: 1614.2826 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #317: GFLOPs: 163.4390. Time: 1414.9692 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #318: GFLOPs: 3.4934. Time: 66199.1150 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #319: GFLOPs: 2.7290. Time: 84740.6167 us. Best GFLOPs: 461.0426
2024-04-29 21:43:10 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #320: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b120)
b146 = sch.decompose_reduction(block=b120, loop=l130)
2024-04-29 22:30:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:30:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:30:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:30:39 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:30:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:31:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:31:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:31:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:31:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0056  0.9995  0.8754  0.8572  0.7783  0.7737  0.7687  0.7686  0.7686  0.7365  0.7343  0.7211  0.7211  0.7127  0.7125  0.6962
[17 : 32]:	0.6628  0.6623  0.6604  0.6551  0.6537  0.6485  0.6464  0.6455  0.6425  0.6127  0.5981  0.5956  0.5754  0.5737  0.5737  0.5580
[33 : 48]:	0.5562  0.5562  0.5519  0.5411  0.5364  0.4986  0.4950  0.4950  0.4942  0.4926  0.4918  0.4906  0.4881  0.4838  0.4838  0.4819
[49 : 64]:	0.4782  0.4739  0.4700  0.4700  0.4700  0.4695  0.4661  0.4609  0.4567  0.4510  0.4510  0.4465  0.4448  0.4445  0.4444  0.4444
2024-04-29 22:31:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:31:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #321: GFLOPs: 586.8694. Time: 394.0590 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #322: GFLOPs: 507.2633. Time: 455.8997 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #323: GFLOPs: 548.3452. Time: 421.7438 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #324: GFLOPs: 536.9326. Time: 430.7081 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #325: GFLOPs: 538.8354. Time: 429.1871 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #326: GFLOPs: 489.9536. Time: 472.0063 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #327: GFLOPs: 125.7151. Time: 1839.5653 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #328: GFLOPs: 510.4884. Time: 453.0194 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #329: GFLOPs: 487.5384. Time: 474.3446 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #330: GFLOPs: 443.5334. Time: 521.4065 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #331: GFLOPs: 530.2646. Time: 436.1241 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #332: GFLOPs: 451.5103. Time: 512.1947 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #333: GFLOPs: 461.9672. Time: 500.6009 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #334: GFLOPs: 368.5012. Time: 627.5725 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #335: GFLOPs: 473.6274. Time: 488.2767 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #336: GFLOPs: 376.4140. Time: 614.3799 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #337: GFLOPs: 566.1082. Time: 408.5106 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #338: GFLOPs: 134.0821. Time: 1724.7735 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #339: GFLOPs: 366.9157. Time: 630.2842 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #340: GFLOPs: 522.8725. Time: 442.2898 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #341: GFLOPs: 69.2931. Time: 3337.4348 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #342: GFLOPs: 561.5116. Time: 411.8547 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #343: GFLOPs: 204.7572. Time: 1129.4412 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #344: GFLOPs: 163.0794. Time: 1418.0895 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #345: GFLOPs: 562.2154. Time: 411.3391 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #346: GFLOPs: 205.2236. Time: 1126.8740 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #347: GFLOPs: 487.2718. Time: 474.6041 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #348: GFLOPs: 580.1001. Time: 398.6574 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #349: GFLOPs: 192.4204. Time: 1201.8539 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #350: GFLOPs: 326.1974. Time: 708.9608 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #351: GFLOPs: 270.3672. Time: 855.3595 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #352: GFLOPs: 133.8280. Time: 1728.0483 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #353: GFLOPs: 125.0936. Time: 1848.7046 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #354: GFLOPs: 140.4963. Time: 1646.0304 us. Best GFLOPs: 586.8694
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #355: GFLOPs: 663.8976. Time: 348.3386 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #356: GFLOPs: 37.5312. Time: 6161.8312 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #357: GFLOPs: 78.9582. Time: 2928.9074 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #358: GFLOPs: 262.2750. Time: 881.7507 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #359: GFLOPs: 202.6165. Time: 1141.3738 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #360: GFLOPs: 82.6069. Time: 2799.5394 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #361: GFLOPs: 28.6527. Time: 8071.1855 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #362: GFLOPs: 98.2046. Time: 2354.8919 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #363: GFLOPs: 96.2478. Time: 2402.7695 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #364: GFLOPs: 151.4206. Time: 1527.2766 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #365: GFLOPs: 84.9693. Time: 2721.7032 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #366: GFLOPs: 239.2756. Time: 966.5056 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #367: GFLOPs: 174.0199. Time: 1328.9351 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #368: GFLOPs: 34.9180. Time: 6622.9805 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #369: GFLOPs: 93.3351. Time: 2477.7513 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #370: GFLOPs: 39.2520. Time: 5891.7119 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #371: GFLOPs: 194.1527. Time: 1191.1301 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #372: GFLOPs: 168.3158. Time: 1373.9717 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #373: GFLOPs: 221.6557. Time: 1043.3354 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #374: GFLOPs: 162.2065. Time: 1425.7212 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #375: GFLOPs: 71.7164. Time: 3224.6623 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #376: GFLOPs: 117.6851. Time: 1965.0842 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #377: GFLOPs: 127.2121. Time: 1817.9179 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #378: GFLOPs: 91.3484. Time: 2531.6380 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #379: GFLOPs: 66.2890. Time: 3488.6824 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #380: GFLOPs: 133.2858. Time: 1735.0775 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #381: GFLOPs: 84.5720. Time: 2734.4889 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #382: GFLOPs: 22.2108. Time: 10412.1087 us. Best GFLOPs: 663.8976
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #383: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l121)
2024-04-29 22:33:21 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #384: GFLOPs: 60.4036. Time: 3828.5997 us. Best GFLOPs: 663.8976
2024-04-29 22:51:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:51:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:51:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:51:31 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:51:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:51:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:52:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:52:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:52:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0447  1.0161  0.9991  0.9991  0.9953  0.9953  0.9904  0.9904  0.9010  0.8963  0.8688  0.8597  0.8587  0.8587  0.8525  0.8523
[17 : 32]:	0.8501  0.8498  0.8498  0.8489  0.8371  0.8307  0.8299  0.8266  0.8258  0.8258  0.8119  0.8108  0.8024  0.8024  0.8021  0.8016
[33 : 48]:	0.7961  0.7930  0.7917  0.7882  0.7800  0.7799  0.7785  0.7785  0.7771  0.7748  0.7746  0.7709  0.7696  0.7668  0.7662  0.7642
[49 : 64]:	0.7642  0.7616  0.7585  0.7553  0.7535  0.7486  0.7470  0.7431  0.7430  0.7416  0.7399  0.7391  0.7378  0.7374  0.7364  0.7349
2024-04-29 22:52:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:52:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #385: GFLOPs: 571.7621. Time: 404.4710 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #386: GFLOPs: 32.8745. Time: 7034.6617 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #387: GFLOPs: 330.4701. Time: 699.7946 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #388: GFLOPs: 655.7335. Time: 352.6755 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #389: GFLOPs: 484.8654. Time: 476.9595 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #390: GFLOPs: 643.7959. Time: 359.2151 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #391: GFLOPs: 529.6340. Time: 436.6434 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #392: GFLOPs: 549.8593. Time: 420.5825 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #393: GFLOPs: 556.8056. Time: 415.3356 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #394: GFLOPs: 538.1568. Time: 429.7283 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #395: GFLOPs: 335.1857. Time: 689.9494 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #396: GFLOPs: 412.1044. Time: 561.1714 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #397: GFLOPs: 650.6584. Time: 355.4264 us. Best GFLOPs: 663.8976
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #398: GFLOPs: 733.9358. Time: 315.0973 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #399: GFLOPs: 51.4395. Time: 4495.7923 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #400: GFLOPs: 711.2867. Time: 325.1308 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #401: GFLOPs: 515.7060. Time: 448.4361 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #402: GFLOPs: 585.3245. Time: 395.0991 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #403: GFLOPs: 581.8879. Time: 397.4325 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #404: GFLOPs: 625.1014. Time: 369.9579 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #405: GFLOPs: 624.1262. Time: 370.5359 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #406: GFLOPs: 29.8839. Time: 7738.6512 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #407: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #408: GFLOPs: 665.3977. Time: 347.5533 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #409: GFLOPs: 29.3089. Time: 7890.4860 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #410: GFLOPs: 22.7067. Time: 10184.7173 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #411: GFLOPs: 521.9687. Time: 443.0556 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #412: GFLOPs: 459.3541. Time: 503.4486 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #413: GFLOPs: 279.9454. Time: 826.0937 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #414: GFLOPs: 279.5717. Time: 827.1980 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #415: GFLOPs: 540.9173. Time: 427.5352 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #416: GFLOPs: 533.6314. Time: 433.3725 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #417: GFLOPs: 287.1222. Time: 805.4450 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #418: GFLOPs: 282.6513. Time: 818.1853 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #419: GFLOPs: 366.2175. Time: 631.4859 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #420: GFLOPs: 272.9661. Time: 847.2156 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #421: GFLOPs: 407.1883. Time: 567.9466 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #422: GFLOPs: 575.7607. Time: 401.6620 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #423: GFLOPs: 316.5694. Time: 730.5229 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #424: GFLOPs: 322.3691. Time: 717.3801 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #425: GFLOPs: 311.0716. Time: 743.4339 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #426: GFLOPs: 500.0514. Time: 462.4748 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #427: GFLOPs: 278.5620. Time: 830.1965 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #428: GFLOPs: 561.5300. Time: 411.8412 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #429: GFLOPs: 560.4873. Time: 412.6074 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #430: GFLOPs: 24.9798. Time: 9257.9139 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #431: GFLOPs: 548.2599. Time: 421.8094 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #432: GFLOPs: 324.0252. Time: 713.7135 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #433: GFLOPs: 285.1781. Time: 810.9361 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #434: GFLOPs: 275.7722. Time: 838.5949 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #435: GFLOPs: 384.5336. Time: 601.4069 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #436: GFLOPs: 539.2279. Time: 428.8747 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #437: GFLOPs: 254.9833. Time: 906.9661 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #438: GFLOPs: 278.9949. Time: 828.9084 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #439: GFLOPs: 19.3308. Time: 11963.3642 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #440: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #441: GFLOPs: 478.0702. Time: 483.7390 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #442: GFLOPs: 18.1635. Time: 12732.2004 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #443: GFLOPs: 553.5853. Time: 417.7517 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #444: GFLOPs: 493.7241. Time: 468.4017 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #445: GFLOPs: 619.8052. Time: 373.1192 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #446: GFLOPs: 42.3145. Time: 5465.2961 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #447: GFLOPs: 28.7765. Time: 8036.4462 us. Best GFLOPs: 733.9358
2024-04-29 22:54:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #448: GFLOPs: 9.1808. Time: 25189.6592 us. Best GFLOPs: 733.9358
2024-04-29 22:58:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:58:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:58:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:58:39 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:58:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:59:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:59:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-29 22:59:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9736  0.8783  0.8531  0.8226  0.8182  0.8165  0.8022  0.7855  0.7731  0.7658  0.7638  0.7638  0.7586  0.7553  0.7475  0.7442
[17 : 32]:	0.7411  0.7410  0.7410  0.7377  0.7365  0.7339  0.7336  0.7314  0.7300  0.7296  0.7296  0.7279  0.7260  0.7216  0.7207  0.7188
[33 : 48]:	0.7188  0.7187  0.7187  0.7175  0.7144  0.7140  0.7129  0.7129  0.7129  0.7128  0.7112  0.7084  0.7077  0.7014  0.7001  0.6981
[49 : 64]:	0.6980  0.6980  0.6957  0.6937  0.6910  0.6910  0.6853  0.6851  0.6851  0.6844  0.6844  0.6844  0.6844  0.6841  0.6837  0.6837
2024-04-29 22:59:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:59:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #449: GFLOPs: 661.8732. Time: 349.4041 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #450: GFLOPs: 24.0609. Time: 9611.4779 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #451: GFLOPs: 24.9740. Time: 9260.0703 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #452: GFLOPs: 651.0083. Time: 355.2354 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #453: GFLOPs: 692.0248. Time: 334.1805 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #454: GFLOPs: 568.6456. Time: 406.6877 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #455: GFLOPs: 523.6862. Time: 441.6026 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #456: GFLOPs: 576.9915. Time: 400.8052 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #457: GFLOPs: 542.1505. Time: 426.5627 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #458: GFLOPs: 318.4778. Time: 726.1453 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #459: GFLOPs: 558.7255. Time: 413.9084 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #460: GFLOPs: 559.0553. Time: 413.6642 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #461: GFLOPs: 606.0724. Time: 381.5735 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #462: GFLOPs: 415.2543. Time: 556.9146 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #463: GFLOPs: 315.1357. Time: 733.8464 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #464: GFLOPs: 437.7179. Time: 528.3339 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #465: GFLOPs: 537.8997. Time: 429.9337 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #466: GFLOPs: 29.9208. Time: 7729.1195 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #467: GFLOPs: 532.0518. Time: 434.6592 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #468: GFLOPs: 304.1591. Time: 760.3296 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #469: GFLOPs: 627.0103. Time: 368.8315 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #470: GFLOPs: 28.3072. Time: 8169.6822 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #471: GFLOPs: 50.8074. Time: 4551.7194 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #472: GFLOPs: 510.4670. Time: 453.0384 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #473: GFLOPs: 27.4258. Time: 8432.2491 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #474: GFLOPs: 165.5022. Time: 1397.3298 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #475: GFLOPs: 165.2638. Time: 1399.3456 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #476: GFLOPs: 540.1426. Time: 428.1484 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #477: GFLOPs: 714.1430. Time: 323.8304 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #478: GFLOPs: 472.4341. Time: 489.5100 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #479: GFLOPs: 540.2794. Time: 428.0400 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #480: GFLOPs: 566.4893. Time: 408.2358 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #481: GFLOPs: 558.5480. Time: 414.0399 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #482: GFLOPs: 579.4204. Time: 399.1251 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #483: GFLOPs: 578.4768. Time: 399.7761 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #484: GFLOPs: 711.6108. Time: 324.9827 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #485: GFLOPs: 720.2906. Time: 321.0665 us. Best GFLOPs: 733.9358
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #486: GFLOPs: 743.9859. Time: 310.8408 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #487: GFLOPs: 28.6949. Time: 8059.3170 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #488: GFLOPs: 29.7207. Time: 7781.1607 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #489: GFLOPs: 26.8612. Time: 8609.4892 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #490: GFLOPs: 613.3017. Time: 377.0757 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #491: GFLOPs: 29.0069. Time: 7972.6141 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #492: GFLOPs: 411.0859. Time: 562.5617 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #493: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #494: GFLOPs: 16.7220. Time: 13829.7558 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #495: GFLOPs: 18.4999. Time: 12500.6452 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #496: GFLOPs: 682.8715. Time: 338.6599 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #497: GFLOPs: 542.8395. Time: 426.0213 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #498: GFLOPs: 545.1584. Time: 424.2091 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #499: GFLOPs: 726.3274. Time: 318.3980 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #500: GFLOPs: 612.8321. Time: 377.3646 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #501: GFLOPs: 632.4221. Time: 365.6753 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #502: GFLOPs: 533.0787. Time: 433.8219 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #503: GFLOPs: 528.3246. Time: 437.7256 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #504: GFLOPs: 406.4448. Time: 568.9854 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #505: GFLOPs: 496.4860. Time: 465.7960 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #506: GFLOPs: 491.7372. Time: 470.2943 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #507: GFLOPs: 475.6674. Time: 486.1826 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #508: GFLOPs: 488.0310. Time: 473.8657 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #509: GFLOPs: 462.3137. Time: 500.2257 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #510: GFLOPs: 27.3536. Time: 8454.5017 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #511: GFLOPs: 11.0369. Time: 20953.4702 us. Best GFLOPs: 743.9859
2024-04-29 23:01:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #512: GFLOPs: 5.8937. Time: 39238.7130 us. Best GFLOPs: 743.9859
2024-04-30 00:59:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:59:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:59:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-30 00:59:27 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:59:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-30 00:59:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-30 01:00:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-30 01:00:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6492838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c0ba68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ef2528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x47f0078)]: 0 failure(s)
2024-04-30 01:00:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9667  0.9667  0.9667  0.9365  0.9288  0.9288  0.9288  0.9126  0.8893  0.8776  0.8578  0.8205  0.8197  0.8197  0.8146  0.8130
[17 : 32]:	0.8130  0.8130  0.8016  0.8006  0.7981  0.7957  0.7957  0.7714  0.7714  0.7688  0.7587  0.7571  0.7562  0.7555  0.7555  0.7505
[33 : 48]:	0.7439  0.7380  0.7369  0.7305  0.7305  0.7293  0.7292  0.7292  0.7279  0.7265  0.7236  0.7222  0.7222  0.7203  0.7203  0.7190
[49 : 64]:	0.7186  0.7186  0.7171  0.7171  0.7171  0.7147  0.7137  0.7106  0.7064  0.7064  0.7056  0.7056  0.7055  0.7000  0.6998  0.6995
2024-04-30 01:00:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:00:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #513: GFLOPs: 795.5560. Time: 290.6913 us. Best GFLOPs: 795.5560
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #514: GFLOPs: 738.1318. Time: 313.3061 us. Best GFLOPs: 795.5560
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #515: GFLOPs: 796.5600. Time: 290.3249 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #516: GFLOPs: 548.3752. Time: 421.7208 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #517: GFLOPs: 702.9290. Time: 328.9965 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #518: GFLOPs: 706.0658. Time: 327.5349 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #519: GFLOPs: 700.0152. Time: 330.3660 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #520: GFLOPs: 681.9648. Time: 339.1102 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #521: GFLOPs: 670.8380. Time: 344.7348 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #522: GFLOPs: 522.0604. Time: 442.9778 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #523: GFLOPs: 706.3600. Time: 327.3985 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #524: GFLOPs: 626.4758. Time: 369.1463 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #525: GFLOPs: 526.1108. Time: 439.5675 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #526: GFLOPs: 529.7886. Time: 436.5159 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #527: GFLOPs: 112.8015. Time: 2050.1612 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #528: GFLOPs: 640.3763. Time: 361.1332 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #529: GFLOPs: 641.5832. Time: 360.4539 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #530: GFLOPs: 643.9736. Time: 359.1159 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #531: GFLOPs: 572.9782. Time: 403.6125 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #532: GFLOPs: 659.4167. Time: 350.7057 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #533: GFLOPs: 28.6587. Time: 8069.5008 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #534: GFLOPs: 634.9578. Time: 364.2150 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #535: GFLOPs: 632.2647. Time: 365.7664 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #536: GFLOPs: 571.7118. Time: 404.5066 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #537: GFLOPs: 581.0005. Time: 398.0396 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #538: GFLOPs: 526.8129. Time: 438.9816 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #539: GFLOPs: 594.7401. Time: 388.8441 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #540: GFLOPs: 590.6379. Time: 391.5448 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #541: GFLOPs: 548.3551. Time: 421.7362 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #542: GFLOPs: 60.9792. Time: 3792.4600 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #543: GFLOPs: 63.2940. Time: 3653.7638 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #544: GFLOPs: 630.3226. Time: 366.8934 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #545: GFLOPs: 570.2724. Time: 405.5276 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #546: GFLOPs: 618.6412. Time: 373.8212 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #547: GFLOPs: 529.5576. Time: 436.7064 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #548: GFLOPs: 551.2779. Time: 419.5002 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #549: GFLOPs: 549.6524. Time: 420.7408 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #550: GFLOPs: 536.6057. Time: 430.9704 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #551: GFLOPs: 50.3909. Time: 4589.3469 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #552: GFLOPs: 50.2430. Time: 4602.8537 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #553: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=56)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b68)
l83 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b115)
b136 = sch.decompose_reduction(block=b115, loop=l120)
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #554: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b68)
l83 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b115)
b136 = sch.decompose_reduction(block=b115, loop=l120)
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #555: GFLOPs: 547.5270. Time: 422.3740 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #556: GFLOPs: 522.8587. Time: 442.3015 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #557: GFLOPs: 531.3036. Time: 435.2712 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #558: GFLOPs: 681.7867. Time: 339.1987 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #559: GFLOPs: 686.3078. Time: 336.9642 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #560: GFLOPs: 549.7774. Time: 420.6451 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #561: GFLOPs: 534.2279. Time: 432.8886 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #562: GFLOPs: 390.4072. Time: 592.3590 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #563: GFLOPs: 624.1685. Time: 370.5108 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #564: GFLOPs: 330.1180. Time: 700.5410 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #565: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #566: GFLOPs: 529.2352. Time: 436.9724 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #567: GFLOPs: 49.2448. Time: 4696.1512 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #568: GFLOPs: 544.4766. Time: 424.7403 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #569: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #570: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=112)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b105)
b124 = sch.decompose_reduction(block=b105, loop=l108)
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #571: GFLOPs: 572.5473. Time: 403.9163 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #572: GFLOPs: 572.6203. Time: 403.8648 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #573: GFLOPs: 33.5223. Time: 6898.7210 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #574: GFLOPs: 73.8609. Time: 3131.0353 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #575: GFLOPs: 0.4435. Time: 521459.8983 us. Best GFLOPs: 796.5600
2024-04-30 01:02:22 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #576: GFLOPs: 26.1441. Time: 8845.6220 us. Best GFLOPs: 796.5600
