2024-04-29 19:37:32 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2"
2024-04-29 19:37:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:37:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:37:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 19:37:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:37:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:52:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:52:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:52:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 19:52:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:52:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 19:52:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 19:52:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 19:52:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 19:52:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9991  0.9988  0.9974  0.9971  0.9970  0.9970  0.9961  0.9961  0.9958  0.9958  0.9949  0.9947  0.9945  0.9939  0.9938
[17 : 32]:	0.9938  0.9935  0.9929  0.9923  0.9923  0.9920  0.9911  0.9908  0.9906  0.9904  0.9900  0.9898  0.9889  0.9884  0.9872  0.9862
[33 : 48]:	0.9860  0.9859  0.9859  0.9847  0.9843  0.9842  0.9841  0.9839  0.9834  0.9833  0.9833  0.9828  0.9825  0.9822  0.9815  0.9806
[49 : 64]:	0.9797  0.9792  0.9790  0.9782  0.9781  0.9780  0.9775  0.9772  0.9770  0.9770  0.9764  0.9752  0.9751  0.9744  0.9739  0.9734
2024-04-29 19:52:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:52:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #1: GFLOPs: 15.0310. Time: 6863.2724 us. Best GFLOPs: 15.0310
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #2: GFLOPs: 117.3074. Time: 879.4145 us. Best GFLOPs: 117.3074
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #3: GFLOPs: 1.9660. Time: 52473.0603 us. Best GFLOPs: 117.3074
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #4: GFLOPs: 130.8590. Time: 788.3435 us. Best GFLOPs: 130.8590
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #5: GFLOPs: 141.3228. Time: 729.9733 us. Best GFLOPs: 141.3228
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #6: GFLOPs: 99.6784. Time: 1034.9468 us. Best GFLOPs: 141.3228
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #7: GFLOPs: 120.0572. Time: 859.2724 us. Best GFLOPs: 141.3228
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #8: GFLOPs: 494.0172. Time: 208.8224 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #9: GFLOPs: 68.5959. Time: 1503.9066 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #10: GFLOPs: 11.4496. Time: 9010.0621 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #11: GFLOPs: 7.4717. Time: 13807.1024 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #12: GFLOPs: 404.0151. Time: 255.3416 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #13: GFLOPs: 125.5424. Time: 821.7294 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #14: GFLOPs: 31.3889. Time: 3286.5765 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #15: GFLOPs: 98.1912. Time: 1050.6223 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #16: GFLOPs: 97.9690. Time: 1053.0046 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #17: GFLOPs: 18.9573. Time: 5441.7904 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #18: GFLOPs: 23.9457. Time: 4308.1599 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #19: GFLOPs: 21.5566. Time: 4785.6354 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #20: GFLOPs: 72.5825. Time: 1421.3042 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #21: GFLOPs: 8.3143. Time: 12407.7401 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #22: GFLOPs: 30.2126. Time: 3414.5287 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #23: GFLOPs: 60.8811. Time: 1694.4795 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #24: GFLOPs: 15.9653. Time: 6461.6449 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #25: GFLOPs: 18.7683. Time: 5496.6018 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #26: GFLOPs: 105.0995. Time: 981.5634 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #27: GFLOPs: 46.0875. Time: 2238.3918 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #28: GFLOPs: 68.9920. Time: 1495.2730 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #29: GFLOPs: 62.0250. Time: 1663.2309 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #30: GFLOPs: 13.7309. Time: 7513.1420 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #31: GFLOPs: 127.0131. Time: 812.2143 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #32: GFLOPs: 49.5745. Time: 2080.9478 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #33: GFLOPs: 2.4750. Time: 41681.1980 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #34: GFLOPs: 57.5545. Time: 1792.4218 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #35: GFLOPs: 29.7338. Time: 3469.5090 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #36: GFLOPs: 54.2893. Time: 1900.2229 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(8)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ax3_ax4_fused // T.int64(32))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused % T.int64(32))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #38: GFLOPs: 134.5064. Time: 766.9663 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #39: GFLOPs: 15.4183. Time: 6690.8668 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #40: GFLOPs: 56.9433. Time: 1811.6592 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #41: GFLOPs: 6.0935. Time: 16929.7502 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #42: GFLOPs: 207.7911. Time: 496.4692 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #43: GFLOPs: 16.8132. Time: 6135.7634 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #44: GFLOPs: 49.1719. Time: 2097.9855 us. Best GFLOPs: 494.0172
2024-04-29 20:32:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #45: GFLOPs: 109.7748. Time: 939.7587 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(49), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(32)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_2_init * T.int64(32) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(32)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_2 * T.int64(32) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(8)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 8])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #47: GFLOPs: 50.5144. Time: 2042.2279 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #48: GFLOPs: 81.0556. Time: 1272.7292 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(28)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 8])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #50: GFLOPs: 151.0484. Time: 682.9721 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #51: GFLOPs: 3.6477. Time: 28281.5903 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #52: GFLOPs: 120.9631. Time: 852.8373 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(28) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #54: GFLOPs: 31.8336. Time: 3240.6614 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #55: GFLOPs: 104.7103. Time: 985.2121 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #56: GFLOPs: 8.8331. Time: 11678.9524 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #58: GFLOPs: 27.0204. Time: 3817.9222 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #59: GFLOPs: 88.4268. Time: 1166.6358 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #60: GFLOPs: 41.1514. Time: 2506.8870 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #61: GFLOPs: 36.8901. Time: 2796.4666 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #62: GFLOPs: 8.3167. Time: 12404.1080 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #63: GFLOPs: 170.5394. Time: 604.9150 us. Best GFLOPs: 494.0172
2024-04-29 20:32:22 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #64: GFLOPs: 136.5538. Time: 755.4668 us. Best GFLOPs: 494.0172
2024-04-29 22:05:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:05:39 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 22:05:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 22:05:42 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 22:05:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 22:05:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 22:05:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 22:06:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-29 22:06:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0318  0.9671  0.8963  0.8889  0.8864  0.8859  0.8859  0.8696  0.8637  0.8603  0.8505  0.8309  0.8283  0.8252  0.8234  0.8234
[17 : 32]:	0.8196  0.8164  0.7935  0.7916  0.7787  0.7685  0.7632  0.7585  0.7493  0.7277  0.7268  0.7268  0.7217  0.7194  0.7194  0.7194
[33 : 48]:	0.7121  0.7072  0.7072  0.7055  0.7038  0.7003  0.6937  0.6894  0.6849  0.6729  0.6708  0.6677  0.6673  0.6659  0.6606  0.6569
[49 : 64]:	0.6556  0.6553  0.6533  0.6533  0.6505  0.6499  0.6487  0.6436  0.6436  0.6338  0.6331  0.6307  0.6290  0.6290  0.6228  0.6228
2024-04-29 22:06:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:06:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #65: GFLOPs: 241.0791. Time: 427.9171 us. Best GFLOPs: 494.0172
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #66: GFLOPs: 812.1781. Time: 127.0188 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #67: GFLOPs: 538.0394. Time: 191.7366 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #68: GFLOPs: 739.5159. Time: 139.4992 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #69: GFLOPs: 462.3156. Time: 223.1416 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #70: GFLOPs: 567.2487. Time: 181.8635 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #71: GFLOPs: 570.8963. Time: 180.7016 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #72: GFLOPs: 534.6717. Time: 192.9443 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #73: GFLOPs: 466.2496. Time: 221.2589 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #74: GFLOPs: 487.9139. Time: 211.4345 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #75: GFLOPs: 789.6611. Time: 130.6407 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #76: GFLOPs: 426.5651. Time: 241.8432 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #77: GFLOPs: 163.0024. Time: 632.8855 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #78: GFLOPs: 668.9408. Time: 154.2167 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #79: GFLOPs: 541.2122. Time: 190.6126 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #80: GFLOPs: 425.3602. Time: 242.5282 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #81: GFLOPs: 469.8037. Time: 219.5850 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #82: GFLOPs: 626.3723. Time: 164.6973 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #83: GFLOPs: 629.7861. Time: 163.8046 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #84: GFLOPs: 752.2791. Time: 137.1324 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #85: GFLOPs: 712.3464. Time: 144.8198 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #86: GFLOPs: 450.2486. Time: 229.1220 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #87: GFLOPs: 490.6330. Time: 210.2628 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #88: GFLOPs: 460.5958. Time: 223.9748 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #89: GFLOPs: 367.4946. Time: 280.7166 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #90: GFLOPs: 315.7925. Time: 326.6761 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #91: GFLOPs: 582.3973. Time: 177.1331 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #92: GFLOPs: 404.8668. Time: 254.8044 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #93: GFLOPs: 529.7348. Time: 194.7425 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #94: GFLOPs: 199.4461. Time: 517.2418 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #95: GFLOPs: 179.0974. Time: 576.0097 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #96: GFLOPs: 116.3865. Time: 886.3734 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #97: GFLOPs: 487.6680. Time: 211.5412 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #98: GFLOPs: 427.4628. Time: 241.3353 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #99: GFLOPs: 394.7622. Time: 261.3266 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #100: GFLOPs: 675.4181. Time: 152.7378 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #101: GFLOPs: 596.7961. Time: 172.8595 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #102: GFLOPs: 611.5574. Time: 168.6871 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #103: GFLOPs: 624.3302. Time: 165.2360 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #104: GFLOPs: 304.7613. Time: 338.5005 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #105: GFLOPs: 684.7227. Time: 150.6622 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #106: GFLOPs: 48.3119. Time: 2135.3313 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #107: GFLOPs: 168.5372. Time: 612.1015 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #108: GFLOPs: 712.1543. Time: 144.8589 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #109: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #110: GFLOPs: 197.2454. Time: 523.0129 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #111: GFLOPs: 262.6626. Time: 392.7543 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #112: GFLOPs: 76.4192. Time: 1349.9476 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #113: GFLOPs: 192.3871. Time: 536.2203 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #114: GFLOPs: 532.0283. Time: 193.9029 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #115: GFLOPs: 205.3277. Time: 502.4255 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #116: GFLOPs: 333.6849. Time: 309.1595 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #117: GFLOPs: 128.1843. Time: 804.7931 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #118: GFLOPs: 208.8111. Time: 494.0440 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #119: GFLOPs: 500.0130. Time: 206.3183 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #120: GFLOPs: 343.8776. Time: 299.9959 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #121: GFLOPs: 357.3525. Time: 288.6838 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #122: GFLOPs: 513.5544. Time: 200.8781 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #123: GFLOPs: 366.0662. Time: 281.8120 us. Best GFLOPs: 812.1781
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #124: GFLOPs: 852.7950. Time: 120.9691 us. Best GFLOPs: 852.7950
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #125: GFLOPs: 289.2240. Time: 356.6850 us. Best GFLOPs: 852.7950
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #126: GFLOPs: 14.4266. Time: 7150.8006 us. Best GFLOPs: 852.7950
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #127: GFLOPs: 63.1464. Time: 1633.6932 us. Best GFLOPs: 852.7950
2024-04-29 22:07:47 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #128: GFLOPs: 127.5852. Time: 808.5723 us. Best GFLOPs: 852.7950
2024-04-30 00:39:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:39:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:39:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-30 00:39:11 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:39:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-30 00:39:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-30 00:39:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-30 00:39:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x483e198)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a921c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x483ff28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4810788)]: 0 failure(s)
2024-04-30 00:39:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9825  0.9738  0.9641  0.9584  0.9422  0.9422  0.9422  0.9312  0.9238  0.8848  0.8809  0.8794  0.8783  0.8771  0.8758  0.8681
[17 : 32]:	0.8681  0.8594  0.8587  0.8548  0.8509  0.8485  0.8451  0.8377  0.8289  0.8267  0.8194  0.8129  0.8096  0.8037  0.8023  0.8009
[33 : 48]:	0.7955  0.7934  0.7913  0.7913  0.7752  0.7739  0.7651  0.7647  0.7636  0.7618  0.7618  0.7610  0.7610  0.7468  0.7445  0.7440
[49 : 64]:	0.7440  0.7433  0.7414  0.7409  0.7390  0.7384  0.7347  0.7338  0.7325  0.7301  0.7301  0.7282  0.7282  0.7260  0.7244  0.7231
2024-04-30 00:39:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:39:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #129: GFLOPs: 408.8734. Time: 252.3076 us. Best GFLOPs: 852.7950
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #130: GFLOPs: 409.7099. Time: 251.7924 us. Best GFLOPs: 852.7950
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #131: GFLOPs: 862.5160. Time: 119.6057 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #132: GFLOPs: 377.7568. Time: 273.0906 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #133: GFLOPs: 518.8179. Time: 198.8402 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #134: GFLOPs: 811.7905. Time: 127.0794 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #135: GFLOPs: 832.5419. Time: 123.9119 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #136: GFLOPs: 836.9978. Time: 123.2522 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #137: GFLOPs: 819.1167. Time: 125.9428 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #138: GFLOPs: 742.5777. Time: 138.9240 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #139: GFLOPs: 758.6027. Time: 135.9893 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #140: GFLOPs: 768.2422. Time: 134.2830 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #141: GFLOPs: 756.0966. Time: 136.4400 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #142: GFLOPs: 763.9460. Time: 135.0382 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #143: GFLOPs: 673.7460. Time: 153.1168 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #144: GFLOPs: 769.4493. Time: 134.0723 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #145: GFLOPs: 834.6534. Time: 123.5984 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #146: GFLOPs: 833.8611. Time: 123.7159 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #147: GFLOPs: 795.8393. Time: 129.6265 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #148: GFLOPs: 754.2676. Time: 136.7709 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #149: GFLOPs: 714.4919. Time: 144.3849 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #150: GFLOPs: 632.2462. Time: 163.1672 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #151: GFLOPs: 761.5639. Time: 135.4605 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #152: GFLOPs: 751.5978. Time: 137.2567 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #153: GFLOPs: 660.6593. Time: 156.1499 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #154: GFLOPs: 738.8007. Time: 139.6342 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #155: GFLOPs: 648.3254. Time: 159.1205 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #156: GFLOPs: 779.0645. Time: 132.4176 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #157: GFLOPs: 771.8648. Time: 133.6527 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #158: GFLOPs: 653.7691. Time: 157.7956 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #159: GFLOPs: 641.3144. Time: 160.8600 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #160: GFLOPs: 846.4764. Time: 121.8721 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #161: GFLOPs: 679.9129. Time: 151.7280 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #162: GFLOPs: 710.0960. Time: 145.2787 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #163: GFLOPs: 640.8488. Time: 160.9769 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #164: GFLOPs: 623.5385. Time: 165.4459 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #165: GFLOPs: 730.1673. Time: 141.2852 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #166: GFLOPs: 700.1654. Time: 147.3393 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #167: GFLOPs: 813.9065. Time: 126.7490 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #168: GFLOPs: 730.2546. Time: 141.2683 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #169: GFLOPs: 609.4587. Time: 169.2680 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #170: GFLOPs: 715.7090. Time: 144.1394 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #171: GFLOPs: 672.9364. Time: 153.3010 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #172: GFLOPs: 678.6126. Time: 152.0188 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #173: GFLOPs: 676.7123. Time: 152.4457 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #174: GFLOPs: 724.2017. Time: 142.4491 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #175: GFLOPs: 730.0056. Time: 141.3165 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #176: GFLOPs: 655.0941. Time: 157.4764 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #177: GFLOPs: 650.3670. Time: 158.6210 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #178: GFLOPs: 606.9873. Time: 169.9572 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #179: GFLOPs: 725.8530. Time: 142.1250 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #180: GFLOPs: 671.3850. Time: 153.6553 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #181: GFLOPs: 567.1084. Time: 181.9085 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #182: GFLOPs: 616.4520. Time: 167.3478 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #183: GFLOPs: 643.9269. Time: 160.2074 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #184: GFLOPs: 671.2427. Time: 153.6879 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #185: GFLOPs: 599.7204. Time: 172.0166 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #186: GFLOPs: 625.8975. Time: 164.8223 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #187: GFLOPs: 625.2920. Time: 164.9819 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #188: GFLOPs: 676.4208. Time: 152.5114 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #189: GFLOPs: 733.4026. Time: 140.6620 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #190: GFLOPs: 59.3071. Time: 1739.4534 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #191: GFLOPs: 24.2149. Time: 4260.2636 us. Best GFLOPs: 862.5160
2024-04-30 00:41:14 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #192: GFLOPs: 43.0327. Time: 2397.2878 us. Best GFLOPs: 862.5160
