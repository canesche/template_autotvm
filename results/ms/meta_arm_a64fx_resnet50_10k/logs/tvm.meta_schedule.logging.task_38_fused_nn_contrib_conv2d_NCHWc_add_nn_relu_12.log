2024-04-29 19:38:52 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12"
2024-04-29 19:38:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:38:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:38:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 19:38:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:38:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 20:16:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:16:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:16:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:16:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:16:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:16:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:16:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:16:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:16:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9972  0.9969  0.9967  0.9964  0.9954  0.9953  0.9943  0.9938  0.9936  0.9935  0.9930  0.9929  0.9925  0.9904  0.9895
[17 : 32]:	0.9892  0.9888  0.9881  0.9873  0.9873  0.9860  0.9853  0.9850  0.9848  0.9847  0.9844  0.9833  0.9828  0.9820  0.9819  0.9818
[33 : 48]:	0.9816  0.9816  0.9813  0.9807  0.9791  0.9790  0.9786  0.9784  0.9784  0.9782  0.9772  0.9770  0.9752  0.9749  0.9747  0.9745
[49 : 64]:	0.9731  0.9715  0.9715  0.9708  0.9706  0.9704  0.9700  0.9700  0.9699  0.9695  0.9691  0.9686  0.9679  0.9667  0.9662  0.9660
2024-04-29 20:16:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:16:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #1: GFLOPs: 1.0693. Time: 192382.5753 us. Best GFLOPs: 1.0693
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #2: GFLOPs: 13.8493. Time: 14854.2950 us. Best GFLOPs: 13.8493
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #3: GFLOPs: 68.1456. Time: 3018.8531 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #4: GFLOPs: 10.2520. Time: 20066.4268 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #5: GFLOPs: 57.2546. Time: 3593.0995 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #6: GFLOPs: 29.3051. Time: 7020.0009 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #7: GFLOPs: 41.5524. Time: 4950.8903 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(64) + oc_chunk_1 * T.int64(64) + oc_chunk_2_init * T.int64(64) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(64) + oc_chunk_1 * T.int64(64) + oc_chunk_2 * T.int64(64) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(64), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(64) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 64])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #9: GFLOPs: 56.1404. Time: 3664.4131 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #11: GFLOPs: 11.3016. Time: 18202.9543 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #12: GFLOPs: 5.2292. Time: 39340.7930 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #13: GFLOPs: 5.7406. Time: 35836.1890 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #14: GFLOPs: 5.0011. Time: 41135.6637 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #15: GFLOPs: 19.3844. Time: 10612.7449 us. Best GFLOPs: 68.1456
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #16: GFLOPs: 70.0256. Time: 2937.8076 us. Best GFLOPs: 70.0256
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #17: GFLOPs: 12.6038. Time: 16322.1981 us. Best GFLOPs: 70.0256
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #18: GFLOPs: 85.5918. Time: 2403.5210 us. Best GFLOPs: 85.5918
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #19: GFLOPs: 98.4226. Time: 2090.1857 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #20: GFLOPs: 14.9488. Time: 13761.7501 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #21: GFLOPs: 1.9576. Time: 105087.5753 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #22: GFLOPs: 15.9542. Time: 12894.5451 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #23: GFLOPs: 57.3538. Time: 3586.8841 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #24: GFLOPs: 70.2798. Time: 2927.1788 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #26: GFLOPs: 5.7033. Time: 36070.9200 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #27: GFLOPs: 8.3051. Time: 24770.4486 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #28: GFLOPs: 44.8256. Time: 4589.3826 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #29: GFLOPs: 10.6338. Time: 19346.0245 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #30: GFLOPs: 64.2170. Time: 3203.5362 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #31: GFLOPs: 89.4589. Time: 2299.6222 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(98), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_2_init * T.int64(64) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_2 * T.int64(64) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 64])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #33: GFLOPs: 3.7736. Time: 54515.6493 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #34: GFLOPs: 87.8386. Time: 2342.0406 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #35: GFLOPs: 24.4991. Time: 8397.1163 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #36: GFLOPs: 5.5852. Time: 36833.3680 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #37: GFLOPs: 2.0208. Time: 101804.0987 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #38: GFLOPs: 19.1562. Time: 10739.1375 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #39: GFLOPs: 3.3324. Time: 61733.1553 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #40: GFLOPs: 50.9920. Time: 4034.3923 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #41: GFLOPs: 46.6270. Time: 4412.0674 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #42: GFLOPs: 73.3240. Time: 2805.6516 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #44: GFLOPs: 80.2629. Time: 2563.0957 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #45: GFLOPs: 3.2456. Time: 63385.3713 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #46: GFLOPs: 59.7886. Time: 3440.8136 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #47: GFLOPs: 4.8620. Time: 42312.0303 us. Best GFLOPs: 98.4226
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #48: GFLOPs: 127.7336. Time: 1610.5519 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #49: GFLOPs: 32.9390. Time: 6245.5337 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[32, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #51: GFLOPs: 119.7324. Time: 1718.1780 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #52: GFLOPs: 58.9075. Time: 3492.2793 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #53: GFLOPs: 1.6102. Time: 127765.0390 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #54: GFLOPs: 12.4942. Time: 16465.4089 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #55: GFLOPs: 36.4310. Time: 5646.8812 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #56: GFLOPs: 83.5380. Time: 2462.6114 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #57: GFLOPs: 41.3244. Time: 4978.2066 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #58: GFLOPs: 68.8582. Time: 2987.6112 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #59: GFLOPs: 30.4722. Time: 6751.1313 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #60: GFLOPs: 55.8466. Time: 3683.6921 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #61: GFLOPs: 3.6271. Time: 56717.9120 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #62: GFLOPs: 74.3135. Time: 2768.2934 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #63: GFLOPs: 111.6750. Time: 1842.1463 us. Best GFLOPs: 127.7336
2024-04-29 20:33:35 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #64: GFLOPs: 4.7716. Time: 43113.7083 us. Best GFLOPs: 127.7336
2024-04-29 20:55:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:55:07 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 20:55:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:55:09 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 20:55:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:55:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:55:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:55:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 20:55:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0010  0.9859  0.9805  0.9169  0.9155  0.9003  0.8841  0.8780  0.8438  0.8417  0.8402  0.8395  0.8364  0.8364  0.8348  0.8304
[17 : 32]:	0.8286  0.8264  0.8256  0.8253  0.8242  0.8224  0.8222  0.8163  0.8159  0.8147  0.8137  0.8129  0.8100  0.8078  0.8039  0.8021
[33 : 48]:	0.8021  0.8012  0.8008  0.7997  0.7961  0.7918  0.7862  0.7835  0.7824  0.7808  0.7803  0.7787  0.7783  0.7758  0.7755  0.7750
[49 : 64]:	0.7737  0.7727  0.7718  0.7694  0.7681  0.7645  0.7645  0.7629  0.7622  0.7618  0.7610  0.7599  0.7597  0.7557  0.7549  0.7548
2024-04-29 20:55:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:55:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[64, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #66: GFLOPs: 47.0908. Time: 4368.6114 us. Best GFLOPs: 127.7336
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #67: GFLOPs: 185.0586. Time: 1111.6568 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #68: GFLOPs: 9.4995. Time: 21656.0189 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #69: GFLOPs: 120.2141. Time: 1711.2938 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #70: GFLOPs: 126.1059. Time: 1631.3395 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #71: GFLOPs: 115.1744. Time: 1786.1742 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #72: GFLOPs: 180.8477. Time: 1137.5408 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #73: GFLOPs: 117.6785. Time: 1748.1669 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #74: GFLOPs: 108.8952. Time: 1889.1702 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #75: GFLOPs: 179.9354. Time: 1143.3081 us. Best GFLOPs: 185.0586
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #76: GFLOPs: 397.8887. Time: 517.0331 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #77: GFLOPs: 40.9560. Time: 5022.9946 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #78: GFLOPs: 121.2898. Time: 1696.1161 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #79: GFLOPs: 150.2227. Time: 1369.4440 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #80: GFLOPs: 127.4822. Time: 1613.7277 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #81: GFLOPs: 185.9637. Time: 1106.2459 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #82: GFLOPs: 99.2080. Time: 2073.6402 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #83: GFLOPs: 107.9036. Time: 1906.5308 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #84: GFLOPs: 90.0324. Time: 2284.9730 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #85: GFLOPs: 21.0430. Time: 9776.2322 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #86: GFLOPs: 196.3738. Time: 1047.6021 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #87: GFLOPs: 156.0462. Time: 1318.3376 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #88: GFLOPs: 54.0088. Time: 3809.0372 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #89: GFLOPs: 70.8840. Time: 2902.2299 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #90: GFLOPs: 79.6166. Time: 2583.9022 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #91: GFLOPs: 63.2481. Time: 3252.6117 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #92: GFLOPs: 80.9744. Time: 2540.5756 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #93: GFLOPs: 165.3926. Time: 1243.8383 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #94: GFLOPs: 141.5558. Time: 1453.2903 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #95: GFLOPs: 154.8723. Time: 1328.3304 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #96: GFLOPs: 69.2857. Time: 2969.1781 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #97: GFLOPs: 96.5674. Time: 2130.3424 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #98: GFLOPs: 158.2110. Time: 1300.2987 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #99: GFLOPs: 133.2141. Time: 1544.2925 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #100: GFLOPs: 99.3629. Time: 2070.4073 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #101: GFLOPs: 172.1640. Time: 1194.9163 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #102: GFLOPs: 108.7770. Time: 1891.2228 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #103: GFLOPs: 138.9230. Time: 1480.8322 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #104: GFLOPs: 233.3203. Time: 881.7132 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #105: GFLOPs: 251.7466. Time: 817.1774 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #106: GFLOPs: 156.0928. Time: 1317.9441 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #107: GFLOPs: 99.8325. Time: 2060.6674 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #108: GFLOPs: 168.9120. Time: 1217.9217 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #109: GFLOPs: 192.1874. Time: 1070.4217 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #110: GFLOPs: 68.0502. Time: 3023.0840 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #111: GFLOPs: 44.0918. Time: 4665.7543 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #112: GFLOPs: 156.1773. Time: 1317.2311 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #113: GFLOPs: 156.3733. Time: 1315.5797 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #114: GFLOPs: 132.6091. Time: 1551.3379 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #115: GFLOPs: 166.4522. Time: 1235.9203 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #116: GFLOPs: 163.5599. Time: 1257.7752 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #117: GFLOPs: 113.0640. Time: 1819.5149 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #118: GFLOPs: 91.1922. Time: 2255.9117 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #119: GFLOPs: 38.0556. Time: 5405.8142 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #120: GFLOPs: 50.9512. Time: 4037.6206 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #121: GFLOPs: 187.2460. Time: 1098.6700 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #122: GFLOPs: 141.9456. Time: 1449.2988 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #123: GFLOPs: 48.7252. Time: 4222.0765 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #124: GFLOPs: 37.3270. Time: 5511.3419 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #125: GFLOPs: 101.5296. Time: 2026.2233 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #126: GFLOPs: 102.7848. Time: 2001.4790 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #127: GFLOPs: 2.0993. Time: 97996.0803 us. Best GFLOPs: 397.8887
2024-04-29 20:56:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #128: GFLOPs: 93.6972. Time: 2195.6010 us. Best GFLOPs: 397.8887
2024-04-29 22:42:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:42:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:42:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 22:42:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:42:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 22:42:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 22:42:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 22:43:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 22:43:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9485  0.9005  0.8526  0.8044  0.8044  0.7387  0.7307  0.7267  0.7183  0.6865  0.6786  0.6706  0.6690  0.6472  0.6463  0.6419
[17 : 32]:	0.6292  0.6277  0.6065  0.6037  0.5911  0.5876  0.5775  0.5601  0.5557  0.5552  0.5546  0.5473  0.5307  0.5294  0.5283  0.5281
[33 : 48]:	0.5214  0.5210  0.5165  0.5091  0.5090  0.5066  0.5026  0.4990  0.4980  0.4969  0.4941  0.4875  0.4822  0.4805  0.4803  0.4800
[49 : 64]:	0.4793  0.4782  0.4772  0.4771  0.4764  0.4762  0.4757  0.4755  0.4754  0.4754  0.4726  0.4725  0.4720  0.4714  0.4671  0.4659
2024-04-29 22:43:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:43:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #129: GFLOPs: 396.7324. Time: 518.5400 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #130: GFLOPs: 88.2609. Time: 2330.8345 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #131: GFLOPs: 359.5843. Time: 572.1096 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #132: GFLOPs: 112.3920. Time: 1830.3934 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #133: GFLOPs: 397.6386. Time: 517.3582 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #134: GFLOPs: 121.4774. Time: 1693.4975 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #135: GFLOPs: 112.5105. Time: 1828.4658 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #136: GFLOPs: 153.0990. Time: 1343.7165 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #137: GFLOPs: 90.5005. Time: 2273.1533 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #138: GFLOPs: 155.6271. Time: 1321.8882 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #139: GFLOPs: 245.6420. Time: 837.4855 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #140: GFLOPs: 99.8986. Time: 2059.3032 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #141: GFLOPs: 268.2971. Time: 766.7677 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #142: GFLOPs: 379.4858. Time: 542.1061 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #143: GFLOPs: 75.6519. Time: 2719.3175 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #144: GFLOPs: 148.2824. Time: 1387.3638 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #145: GFLOPs: 174.5985. Time: 1178.2550 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #146: GFLOPs: 174.8809. Time: 1176.3523 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #147: GFLOPs: 59.2458. Time: 3472.3432 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #148: GFLOPs: 207.5284. Time: 991.2938 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #149: GFLOPs: 162.6248. Time: 1265.0073 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #150: GFLOPs: 100.6010. Time: 2044.9258 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #151: GFLOPs: 148.9637. Time: 1381.0183 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #152: GFLOPs: 119.5268. Time: 1721.1341 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #153: GFLOPs: 269.9368. Time: 762.1103 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #154: GFLOPs: 83.2963. Time: 2469.7576 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #155: GFLOPs: 85.5075. Time: 2405.8905 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #156: GFLOPs: 84.5919. Time: 2431.9299 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #157: GFLOPs: 327.0483. Time: 629.0251 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #158: GFLOPs: 232.2534. Time: 885.7634 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #159: GFLOPs: 111.1704. Time: 1850.5077 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #160: GFLOPs: 85.5734. Time: 2404.0357 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #161: GFLOPs: 78.0920. Time: 2634.3487 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #162: GFLOPs: 208.4230. Time: 987.0387 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #163: GFLOPs: 135.8272. Time: 1514.5836 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #164: GFLOPs: 225.5919. Time: 911.9194 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #165: GFLOPs: 193.4883. Time: 1063.2250 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #166: GFLOPs: 114.1856. Time: 1801.6416 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #167: GFLOPs: 214.1131. Time: 960.8083 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #168: GFLOPs: 66.8322. Time: 3078.1831 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #169: GFLOPs: 176.2983. Time: 1166.8948 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #170: GFLOPs: 283.0194. Time: 726.8817 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #171: GFLOPs: 161.5303. Time: 1273.5787 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #172: GFLOPs: 285.5662. Time: 720.3990 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #173: GFLOPs: 177.1756. Time: 1161.1168 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #174: GFLOPs: 129.9774. Time: 1582.7496 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #175: GFLOPs: 70.4383. Time: 2920.5927 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #176: GFLOPs: 100.8190. Time: 2040.5037 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #177: GFLOPs: 62.7676. Time: 3277.5136 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #178: GFLOPs: 188.9190. Time: 1088.9408 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #179: GFLOPs: 128.0522. Time: 1606.5454 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #180: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14))
                        v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l99, l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #181: GFLOPs: 180.0972. Time: 1142.2812 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #182: GFLOPs: 142.4786. Time: 1443.8774 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #183: GFLOPs: 90.0677. Time: 2284.0781 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #184: GFLOPs: 314.3007. Time: 654.5376 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #185: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14))
                        v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 16, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l99, l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #186: GFLOPs: 112.0672. Time: 1835.6983 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #187: GFLOPs: 160.2817. Time: 1283.5004 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #188: GFLOPs: 101.0569. Time: 2035.7013 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #189: GFLOPs: 162.1915. Time: 1268.3869 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(128) + oc_chunk_2_init * T.int64(64) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(64) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 64])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #191: GFLOPs: 52.7700. Time: 3898.4596 us. Best GFLOPs: 397.8887
2024-04-29 22:44:38 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #192: GFLOPs: 61.9503. Time: 3320.7545 us. Best GFLOPs: 397.8887
2024-04-29 23:32:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:32:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:32:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:32:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:32:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:32:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:33:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:33:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:33:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9147  0.8925  0.8834  0.8554  0.8529  0.8229  0.8229  0.7447  0.7410  0.7232  0.7232  0.7232  0.7018  0.7018  0.6982  0.6978
[17 : 32]:	0.6871  0.6868  0.6868  0.6859  0.6859  0.6847  0.6830  0.6799  0.6677  0.6588  0.6539  0.6474  0.6300  0.6298  0.6292  0.6232
[33 : 48]:	0.6188  0.6143  0.6134  0.6125  0.6072  0.6045  0.5989  0.5913  0.5901  0.5896  0.5894  0.5863  0.5854  0.5847  0.5831  0.5787
[49 : 64]:	0.5776  0.5771  0.5738  0.5738  0.5737  0.5732  0.5702  0.5700  0.5672  0.5669  0.5669  0.5654  0.5631  0.5631  0.5621  0.5604
2024-04-29 23:33:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:33:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #193: GFLOPs: 380.8540. Time: 540.1586 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #194: GFLOPs: 364.2615. Time: 564.7635 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #195: GFLOPs: 361.5156. Time: 569.0532 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #196: GFLOPs: 362.7868. Time: 567.0592 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #197: GFLOPs: 363.5639. Time: 565.8471 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #198: GFLOPs: 361.7575. Time: 568.6726 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #199: GFLOPs: 364.3826. Time: 564.5759 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #200: GFLOPs: 315.3004. Time: 652.4623 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #201: GFLOPs: 215.5317. Time: 954.4840 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #202: GFLOPs: 334.0607. Time: 615.8210 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #203: GFLOPs: 335.1288. Time: 613.8584 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #204: GFLOPs: 331.3719. Time: 620.8180 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #205: GFLOPs: 218.9055. Time: 939.7734 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #206: GFLOPs: 218.5910. Time: 941.1257 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #207: GFLOPs: 215.7427. Time: 953.5508 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #208: GFLOPs: 195.3325. Time: 1053.1867 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #209: GFLOPs: 80.3899. Time: 2559.0490 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #210: GFLOPs: 181.7219. Time: 1132.0685 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #211: GFLOPs: 275.3537. Time: 747.1175 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #212: GFLOPs: 84.6159. Time: 2431.2419 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #213: GFLOPs: 90.9089. Time: 2262.9426 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #214: GFLOPs: 215.1434. Time: 956.2067 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #215: GFLOPs: 79.8604. Time: 2576.0146 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #216: GFLOPs: 222.7803. Time: 923.4282 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #217: GFLOPs: 130.4499. Time: 1577.0157 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #218: GFLOPs: 215.9205. Time: 952.7654 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #219: GFLOPs: 368.2105. Time: 558.7066 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #220: GFLOPs: 276.1826. Time: 744.8752 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #221: GFLOPs: 381.1859. Time: 539.6884 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #222: GFLOPs: 166.7517. Time: 1233.7003 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #223: GFLOPs: 144.9324. Time: 1419.4310 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #224: GFLOPs: 279.4198. Time: 736.2456 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #225: GFLOPs: 163.0619. Time: 1261.6164 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #226: GFLOPs: 210.4153. Time: 977.6930 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #227: GFLOPs: 160.0545. Time: 1285.3220 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #228: GFLOPs: 141.1371. Time: 1457.6008 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #229: GFLOPs: 246.7092. Time: 833.8627 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #230: GFLOPs: 234.3957. Time: 877.6679 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #231: GFLOPs: 233.8324. Time: 879.7823 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #232: GFLOPs: 252.9728. Time: 813.2164 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #233: GFLOPs: 255.3386. Time: 805.6815 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #234: GFLOPs: 224.1151. Time: 917.9285 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #235: GFLOPs: 106.9000. Time: 1924.4306 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #236: GFLOPs: 65.6735. Time: 3132.4908 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #237: GFLOPs: 396.0277. Time: 519.4626 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #238: GFLOPs: 231.5322. Time: 888.5227 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #239: GFLOPs: 266.8717. Time: 770.8634 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #240: GFLOPs: 266.1195. Time: 773.0421 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #241: GFLOPs: 92.5266. Time: 2223.3771 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #242: GFLOPs: 231.4689. Time: 888.7656 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #243: GFLOPs: 97.0627. Time: 2119.4709 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #244: GFLOPs: 77.7904. Time: 2644.5636 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #245: GFLOPs: 110.6244. Time: 1859.6407 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #246: GFLOPs: 116.8473. Time: 1760.6026 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #247: GFLOPs: 253.7215. Time: 810.8167 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #248: GFLOPs: 318.7137. Time: 645.4746 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #249: GFLOPs: 272.5450. Time: 754.8169 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #250: GFLOPs: 236.7909. Time: 868.7903 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #251: GFLOPs: 222.3779. Time: 925.0992 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #252: GFLOPs: 246.0969. Time: 835.9375 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #253: GFLOPs: 291.7605. Time: 705.1044 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #254: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(64) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(64) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #255: GFLOPs: 50.2982. Time: 4090.0399 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #256: GFLOPs: 46.6750. Time: 4407.5353 us. Best GFLOPs: 397.8887
2024-04-29 23:34:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:34:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:34:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:34:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:34:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:35:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:35:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:35:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-29 23:35:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9771  0.9543  0.9372  0.9151  0.9056  0.9004  0.8977  0.8934  0.8934  0.8892  0.8883  0.8853  0.8793  0.8245  0.7923  0.7916
[17 : 32]:	0.7843  0.7801  0.7564  0.7564  0.7401  0.7270  0.7197  0.7096  0.7096  0.7026  0.6961  0.6947  0.6938  0.6919  0.6843  0.6803
[33 : 48]:	0.6791  0.6697  0.6690  0.6636  0.6471  0.6463  0.6463  0.6457  0.6381  0.6375  0.6332  0.6284  0.6254  0.6226  0.6226  0.6195
[49 : 64]:	0.6162  0.6141  0.6103  0.6101  0.6093  0.6035  0.6017  0.6012  0.6009  0.6006  0.5908  0.5892  0.5890  0.5888  0.5873  0.5845
2024-04-29 23:35:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:35:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #257: GFLOPs: 332.3824. Time: 618.9305 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #258: GFLOPs: 382.8049. Time: 537.4059 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #259: GFLOPs: 395.3008. Time: 520.4179 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #260: GFLOPs: 382.8575. Time: 537.3320 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #261: GFLOPs: 369.1772. Time: 557.2435 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #262: GFLOPs: 364.7760. Time: 563.9669 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #263: GFLOPs: 342.2176. Time: 601.1427 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #264: GFLOPs: 377.0383. Time: 545.6251 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #265: GFLOPs: 377.3001. Time: 545.2466 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #266: GFLOPs: 359.2310. Time: 572.6721 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #267: GFLOPs: 251.9037. Time: 816.6675 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #268: GFLOPs: 331.3714. Time: 620.8188 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #269: GFLOPs: 114.3731. Time: 1798.6893 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #270: GFLOPs: 331.6220. Time: 620.3497 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #271: GFLOPs: 322.9814. Time: 636.9457 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #272: GFLOPs: 363.3708. Time: 566.1478 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #273: GFLOPs: 107.1493. Time: 1919.9521 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #274: GFLOPs: 363.8338. Time: 565.4274 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #275: GFLOPs: 267.8076. Time: 768.1693 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #276: GFLOPs: 276.8508. Time: 743.0776 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #277: GFLOPs: 232.1104. Time: 886.3093 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #278: GFLOPs: 92.2936. Time: 2228.9915 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #279: GFLOPs: 265.9911. Time: 773.4154 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #280: GFLOPs: 274.8707. Time: 748.4305 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #281: GFLOPs: 266.0974. Time: 773.1064 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #282: GFLOPs: 227.0213. Time: 906.1774 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #283: GFLOPs: 58.2348. Time: 3532.6220 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #284: GFLOPs: 275.1452. Time: 747.6836 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #285: GFLOPs: 363.2045. Time: 566.4070 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #286: GFLOPs: 146.1561. Time: 1407.5467 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #287: GFLOPs: 360.9715. Time: 569.9109 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #288: GFLOPs: 178.2798. Time: 1153.9254 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #289: GFLOPs: 163.4356. Time: 1258.7318 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #290: GFLOPs: 314.6522. Time: 653.8064 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #291: GFLOPs: 359.9994. Time: 571.4498 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #292: GFLOPs: 333.0110. Time: 617.7623 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #293: GFLOPs: 138.0725. Time: 1489.9531 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #294: GFLOPs: 255.1008. Time: 806.4326 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #295: GFLOPs: 253.5808. Time: 811.2664 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #296: GFLOPs: 256.0996. Time: 803.2875 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #297: GFLOPs: 371.3559. Time: 553.9743 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #298: GFLOPs: 146.1314. Time: 1407.7848 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #299: GFLOPs: 208.8768. Time: 984.8943 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #300: GFLOPs: 110.5185. Time: 1861.4215 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #301: GFLOPs: 154.4036. Time: 1332.3624 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #302: GFLOPs: 273.7862. Time: 751.3950 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #303: GFLOPs: 271.4615. Time: 757.8299 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #304: GFLOPs: 211.8882. Time: 970.8969 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #305: GFLOPs: 213.6077. Time: 963.0813 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #306: GFLOPs: 320.1834. Time: 642.5117 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #307: GFLOPs: 251.7832. Time: 817.0586 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #308: GFLOPs: 234.6322. Time: 876.7832 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #309: GFLOPs: 243.8109. Time: 843.7752 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #310: GFLOPs: 279.1643. Time: 736.9193 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #311: GFLOPs: 151.2334. Time: 1360.2920 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #312: GFLOPs: 245.7058. Time: 837.2680 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #313: GFLOPs: 162.5719. Time: 1265.4193 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #314: GFLOPs: 245.8523. Time: 836.7690 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #315: GFLOPs: 75.8244. Time: 2713.1335 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #316: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(32) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l99, l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #317: GFLOPs: 353.1803. Time: 582.4832 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #318: GFLOPs: 74.2036. Time: 2772.3941 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #319: GFLOPs: 192.6394. Time: 1067.9102 us. Best GFLOPs: 397.8887
2024-04-29 23:36:55 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #320: GFLOPs: 49.4834. Time: 4157.3863 us. Best GFLOPs: 397.8887
2024-04-30 01:07:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:07:37 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:07:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-30 01:07:39 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:07:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-30 01:07:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-30 01:07:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-30 01:08:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x447da88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x115f1188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x37daf88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x316b2f8)]: 0 failure(s)
2024-04-30 01:08:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9582  0.9456  0.9371  0.9362  0.9293  0.9289  0.9138  0.9138  0.9018  0.8921  0.8912  0.8668  0.8662  0.8662  0.8662  0.8639
[17 : 32]:	0.8639  0.8494  0.8416  0.8416  0.8415  0.8315  0.8291  0.8291  0.8291  0.8277  0.8277  0.8274  0.8071  0.8013  0.7970  0.7939
[33 : 48]:	0.7811  0.7725  0.7694  0.7684  0.7643  0.7634  0.7600  0.7585  0.7548  0.7524  0.7481  0.7446  0.7443  0.7440  0.7440  0.7382
[49 : 64]:	0.7348  0.7331  0.7327  0.7322  0.7320  0.7291  0.7291  0.7291  0.7291  0.7281  0.7272  0.7230  0.7206  0.7192  0.7192  0.7192
2024-04-30 01:08:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:08:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:09:45 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #321: GFLOPs: 329.8528. Time: 623.6770 us. Best GFLOPs: 397.8887
2024-04-30 01:09:45 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #322: GFLOPs: 395.1952. Time: 520.5569 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #323: GFLOPs: 330.7594. Time: 621.9676 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #324: GFLOPs: 384.3817. Time: 535.2014 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #325: GFLOPs: 382.5516. Time: 537.7617 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #326: GFLOPs: 370.6543. Time: 555.0228 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #327: GFLOPs: 362.5551. Time: 567.4216 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #328: GFLOPs: 363.5193. Time: 565.9166 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #329: GFLOPs: 365.4700. Time: 562.8960 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #330: GFLOPs: 370.1024. Time: 555.8505 us. Best GFLOPs: 397.8887
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #331: GFLOPs: 400.4086. Time: 513.7791 us. Best GFLOPs: 400.4086
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #332: GFLOPs: 263.4923. Time: 780.7499 us. Best GFLOPs: 400.4086
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #333: GFLOPs: 400.2714. Time: 513.9553 us. Best GFLOPs: 400.4086
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #334: GFLOPs: 401.0121. Time: 513.0059 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #335: GFLOPs: 400.8703. Time: 513.1874 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #336: GFLOPs: 368.0477. Time: 558.9536 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #337: GFLOPs: 369.5062. Time: 556.7474 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #338: GFLOPs: 328.1657. Time: 626.8834 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #339: GFLOPs: 112.6979. Time: 1825.4254 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #340: GFLOPs: 396.1297. Time: 519.3289 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #341: GFLOPs: 332.3760. Time: 618.9423 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #342: GFLOPs: 297.0281. Time: 692.5999 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #343: GFLOPs: 372.3024. Time: 552.5658 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #344: GFLOPs: 371.6014. Time: 553.6082 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #345: GFLOPs: 371.4993. Time: 553.7604 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #346: GFLOPs: 329.5135. Time: 624.3191 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #347: GFLOPs: 372.0712. Time: 552.9092 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #348: GFLOPs: 330.2184. Time: 622.9865 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #349: GFLOPs: 330.2985. Time: 622.8354 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #350: GFLOPs: 278.9590. Time: 737.4618 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #351: GFLOPs: 365.5659. Time: 562.7483 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #352: GFLOPs: 278.7491. Time: 738.0170 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #353: GFLOPs: 296.5296. Time: 693.7641 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #354: GFLOPs: 305.3552. Time: 673.7125 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #355: GFLOPs: 306.5335. Time: 671.1227 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #356: GFLOPs: 321.4075. Time: 640.0647 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #357: GFLOPs: 205.5537. Time: 1000.8167 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #358: GFLOPs: 281.1922. Time: 731.6050 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #359: GFLOPs: 310.4034. Time: 662.7557 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #360: GFLOPs: 333.8870. Time: 616.1413 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #361: GFLOPs: 297.3234. Time: 691.9120 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #362: GFLOPs: 331.6297. Time: 620.3352 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #363: GFLOPs: 320.5185. Time: 641.8399 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #364: GFLOPs: 306.7656. Time: 670.6150 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #365: GFLOPs: 331.8670. Time: 619.8918 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #366: GFLOPs: 271.6230. Time: 757.3792 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #367: GFLOPs: 283.8357. Time: 724.7910 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #368: GFLOPs: 278.6507. Time: 738.2778 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #369: GFLOPs: 297.6638. Time: 691.1207 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #370: GFLOPs: 281.1189. Time: 731.7956 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #371: GFLOPs: 253.5404. Time: 811.3958 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #372: GFLOPs: 363.8413. Time: 565.4157 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #373: GFLOPs: 279.2315. Time: 736.7420 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #374: GFLOPs: 305.0389. Time: 674.4109 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #375: GFLOPs: 308.9684. Time: 665.8338 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #376: GFLOPs: 304.6250. Time: 675.3273 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #377: GFLOPs: 308.5937. Time: 666.6422 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #378: GFLOPs: 349.6707. Time: 588.3296 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #379: GFLOPs: 303.8919. Time: 676.9564 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #380: GFLOPs: 309.2816. Time: 665.1595 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #381: GFLOPs: 318.4874. Time: 645.9331 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #382: GFLOPs: 88.4759. Time: 2325.1702 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #383: GFLOPs: 50.9678. Time: 4036.3021 us. Best GFLOPs: 401.0121
2024-04-30 01:09:46 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #384: GFLOPs: 206.2219. Time: 997.5740 us. Best GFLOPs: 401.0121
