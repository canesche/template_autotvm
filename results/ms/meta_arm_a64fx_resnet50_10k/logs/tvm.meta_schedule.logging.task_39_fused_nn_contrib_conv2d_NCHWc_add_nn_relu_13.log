2024-04-29 19:38:55 [INFO] [task_scheduler.cc:160] Initializing Task #39: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13"
2024-04-29 19:38:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:38:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:38:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(3), T.int64(15), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:38:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(3), T.int64(15), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:38:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(3), T.int64(13), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(128), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 20:17:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:17:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:17:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:17:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:18:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:18:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:18:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:18:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:18:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9991  0.9988  0.9987  0.9981  0.9977  0.9975  0.9966  0.9959  0.9957  0.9955  0.9951  0.9943  0.9943  0.9929  0.9927
[17 : 32]:	0.9922  0.9922  0.9920  0.9904  0.9904  0.9901  0.9901  0.9900  0.9884  0.9883  0.9871  0.9871  0.9863  0.9855  0.9840  0.9837
[33 : 48]:	0.9835  0.9831  0.9826  0.9810  0.9808  0.9805  0.9802  0.9802  0.9801  0.9801  0.9800  0.9796  0.9792  0.9792  0.9789  0.9786
[49 : 64]:	0.9785  0.9784  0.9783  0.9780  0.9777  0.9775  0.9769  0.9766  0.9755  0.9754  0.9751  0.9750  0.9748  0.9747  0.9741  0.9738
2024-04-29 20:18:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:18:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #1: GFLOPs: 4.1467. Time: 55769.8167 us. Best GFLOPs: 4.1467
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #2: GFLOPs: 74.7453. Time: 3093.9910 us. Best GFLOPs: 74.7453
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #3: GFLOPs: 29.4572. Time: 7850.7495 us. Best GFLOPs: 74.7453
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #4: GFLOPs: 1.6244. Time: 142363.1853 us. Best GFLOPs: 74.7453
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #5: GFLOPs: 1.8289. Time: 126447.7243 us. Best GFLOPs: 74.7453
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #6: GFLOPs: 95.4139. Time: 2423.7681 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #7: GFLOPs: 32.0419. Time: 7217.4649 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #8: GFLOPs: 9.8269. Time: 23533.4992 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #9: GFLOPs: 37.6563. Time: 6141.3734 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #10: GFLOPs: 56.0737. Time: 4124.2332 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(15)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l117, l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b120)
b144 = sch.decompose_reduction(block=b120, loop=l128)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #12: GFLOPs: 14.3164. Time: 16153.6399 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #13: GFLOPs: 28.3500. Time: 8157.3498 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #14: GFLOPs: 9.5694. Time: 24166.8270 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #15: GFLOPs: 78.6316. Time: 2941.0708 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #16: GFLOPs: 70.1729. Time: 3295.5921 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #17: GFLOPs: 15.8360. Time: 14603.5397 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #18: GFLOPs: 47.5031. Time: 4868.3364 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #19: GFLOPs: 45.4316. Time: 5090.3101 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #20: GFLOPs: 36.3304. Time: 6365.4982 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #21: GFLOPs: 5.1242. Time: 45131.3837 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #22: GFLOPs: 8.1108. Time: 28512.6188 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #23: GFLOPs: 88.5698. Time: 2611.0601 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #24: GFLOPs: 2.3922. Time: 96673.2417 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #25: GFLOPs: 80.4420. Time: 2874.8796 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #26: GFLOPs: 87.6419. Time: 2638.7059 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #27: GFLOPs: 14.1744. Time: 16315.4350 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #28: GFLOPs: 73.9468. Time: 3127.4000 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #29: GFLOPs: 3.8336. Time: 60324.2437 us. Best GFLOPs: 95.4139
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #30: GFLOPs: 131.5615. Time: 1757.8183 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(64) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(64) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(64) + ax1)
                    v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 64, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #32: GFLOPs: 21.4994. Time: 10756.6286 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #33: GFLOPs: 45.3811. Time: 5095.9857 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #34: GFLOPs: 1.7606. Time: 131351.7067 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #35: GFLOPs: 24.9442. Time: 9271.1348 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #36: GFLOPs: 13.8500. Time: 16697.5220 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #37: GFLOPs: 71.0784. Time: 3253.6072 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2048)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(128), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(784) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(784) // T.int64(112) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(784) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(784) // T.int64(112) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(16) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(784) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(784) // T.int64(112) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(16) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 16, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #39: GFLOPs: 0.0880. Time: 2629422.3590 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #40: GFLOPs: 29.2435. Time: 7908.1351 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #41: GFLOPs: 19.8964. Time: 11623.2463 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #42: GFLOPs: 23.0014. Time: 10054.2008 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #43: GFLOPs: 103.6713. Time: 2230.7149 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #44: GFLOPs: 45.9389. Time: 5034.1067 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #45: GFLOPs: 15.1712. Time: 15243.3899 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #46: GFLOPs: 14.9692. Time: 15449.1711 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #47: GFLOPs: 42.9002. Time: 5390.6823 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #48: GFLOPs: 7.3554. Time: 31440.9930 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #49: GFLOPs: 38.6276. Time: 5986.9420 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(128) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(128)):
                    for ax2_ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, n_0_oc_chunk_0_oh_0_fused_fused])
                            v_ax3 = T.axis.spatial(T.int64(7), ax2_ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 32])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l111, l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b115)
b140 = sch.decompose_reduction(block=b115, loop=l124)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #51: GFLOPs: 83.8351. Time: 2758.5233 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(64) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(64), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(64) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(64) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(7), ax2)
                    v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 64, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #53: GFLOPs: 9.5272. Time: 24273.7572 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #54: GFLOPs: 31.3581. Time: 7374.8440 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #55: GFLOPs: 1.2545. Time: 184349.7037 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #56: GFLOPs: 92.8515. Time: 2490.6574 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #57: GFLOPs: 0.0935. Time: 2473972.6190 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #58: GFLOPs: 21.9997. Time: 10512.0270 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #59: GFLOPs: 0.2820. Time: 820104.4330 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #60: GFLOPs: 94.7008. Time: 2442.0183 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #61: GFLOPs: 33.7820. Time: 6845.6964 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #62: GFLOPs: 25.3201. Time: 9133.4865 us. Best GFLOPs: 131.5615
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(15)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(64) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(64) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(64), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(64) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 32, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
l110 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l115, l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 20:33:39 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #64: GFLOPs: 13.4559. Time: 17186.6580 us. Best GFLOPs: 131.5615
2024-04-29 20:52:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:52:55 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 20:53:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:53:00 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 20:53:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:53:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:53:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:53:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 20:53:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9916  0.9916  0.9648  0.9648  0.9648  0.9507  0.9507  0.9507  0.9487  0.8602  0.8602  0.8602  0.8602  0.8602  0.8320  0.8304
[17 : 32]:	0.7888  0.7813  0.7813  0.7775  0.7732  0.7718  0.7691  0.7691  0.7691  0.7691  0.7691  0.7674  0.7663  0.7652  0.7652  0.7652
[33 : 48]:	0.7599  0.7575  0.7516  0.7487  0.7463  0.7458  0.7437  0.7383  0.7383  0.7370  0.7361  0.7361  0.7352  0.7333  0.7315  0.7306
[49 : 64]:	0.7304  0.7300  0.7300  0.7300  0.7300  0.7299  0.7268  0.7203  0.7203  0.7195  0.7172  0.7158  0.7147  0.7142  0.7141  0.7126
2024-04-29 20:53:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:53:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #65: GFLOPs: 156.9623. Time: 1473.3551 us. Best GFLOPs: 156.9623
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #66: GFLOPs: 88.9288. Time: 2600.5202 us. Best GFLOPs: 156.9623
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #67: GFLOPs: 157.7440. Time: 1466.0540 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #68: GFLOPs: 157.4224. Time: 1469.0489 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #69: GFLOPs: 123.2832. Time: 1875.8530 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #70: GFLOPs: 136.5464. Time: 1693.6460 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #71: GFLOPs: 137.8909. Time: 1677.1310 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #72: GFLOPs: 63.5764. Time: 3637.5296 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #73: GFLOPs: 148.7009. Time: 1555.2102 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #74: GFLOPs: 98.6866. Time: 2343.3901 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #75: GFLOPs: 98.4847. Time: 2348.1945 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #76: GFLOPs: 98.6703. Time: 2343.7761 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #77: GFLOPs: 105.0714. Time: 2200.9906 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #78: GFLOPs: 98.7144. Time: 2342.7294 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #79: GFLOPs: 57.3453. Time: 4032.7840 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #80: GFLOPs: 96.6180. Time: 2393.5617 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #81: GFLOPs: 59.6955. Time: 3874.0139 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #82: GFLOPs: 35.5676. Time: 6502.0096 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #83: GFLOPs: 57.1972. Time: 4043.2254 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #84: GFLOPs: 87.8297. Time: 2633.0642 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #85: GFLOPs: 112.1695. Time: 2061.7123 us. Best GFLOPs: 157.7440
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #86: GFLOPs: 183.4707. Time: 1260.4803 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #87: GFLOPs: 150.9680. Time: 1531.8552 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #88: GFLOPs: 153.6449. Time: 1505.1668 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #89: GFLOPs: 151.0516. Time: 1531.0083 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #90: GFLOPs: 150.9327. Time: 1532.2136 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #91: GFLOPs: 135.3962. Time: 1708.0324 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #92: GFLOPs: 111.6237. Time: 2071.7931 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #93: GFLOPs: 171.3163. Time: 1349.9078 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #94: GFLOPs: 154.2324. Time: 1499.4329 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #95: GFLOPs: 152.3148. Time: 1518.3110 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #96: GFLOPs: 152.7543. Time: 1513.9420 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #97: GFLOPs: 58.3868. Time: 3960.8474 us. Best GFLOPs: 183.4707
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #98: GFLOPs: 189.1630. Time: 1222.5495 us. Best GFLOPs: 189.1630
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #99: GFLOPs: 189.4082. Time: 1220.9673 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #100: GFLOPs: 64.7749. Time: 3570.2260 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #101: GFLOPs: 110.8923. Time: 2085.4583 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #102: GFLOPs: 130.0052. Time: 1778.8614 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #103: GFLOPs: 109.7386. Time: 2107.3820 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #104: GFLOPs: 162.7479. Time: 1420.9777 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #105: GFLOPs: 180.0949. Time: 1284.1074 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #106: GFLOPs: 129.9676. Time: 1779.3756 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #107: GFLOPs: 125.6103. Time: 1841.1001 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #108: GFLOPs: 125.4781. Time: 1843.0401 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #109: GFLOPs: 139.2483. Time: 1660.7824 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #110: GFLOPs: 92.2478. Time: 2506.9558 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #111: GFLOPs: 82.2876. Time: 2810.4024 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #112: GFLOPs: 155.9085. Time: 1483.3138 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #113: GFLOPs: 114.9022. Time: 2012.6783 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #114: GFLOPs: 155.5302. Time: 1486.9212 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #115: GFLOPs: 166.2274. Time: 1391.2336 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #116: GFLOPs: 166.0926. Time: 1392.3633 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #117: GFLOPs: 181.8601. Time: 1271.6432 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #118: GFLOPs: 103.9037. Time: 2225.7271 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #119: GFLOPs: 79.5216. Time: 2908.1563 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #120: GFLOPs: 155.1816. Time: 1490.2614 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #121: GFLOPs: 182.5352. Time: 1266.9400 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #122: GFLOPs: 92.4046. Time: 2502.7027 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #123: GFLOPs: 168.2599. Time: 1374.4285 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #124: GFLOPs: 100.6538. Time: 2297.5908 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #125: GFLOPs: 171.1037. Time: 1351.5849 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #126: GFLOPs: 8.4716. Time: 27298.4708 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #127: GFLOPs: 22.6013. Time: 10232.2153 us. Best GFLOPs: 189.4082
2024-04-29 20:55:06 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #128: GFLOPs: 19.5174. Time: 11848.9453 us. Best GFLOPs: 189.4082
2024-04-29 21:45:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:45:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:46:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 21:46:03 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:46:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 21:46:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 21:46:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 21:46:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 21:46:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9712  0.9610  0.9609  0.9459  0.9344  0.9184  0.9000  0.9000  0.9000  0.9000  0.9000  0.9000  0.9000  0.8941  0.8873  0.8705
[17 : 32]:	0.8675  0.8646  0.8642  0.8642  0.8642  0.8617  0.8617  0.8617  0.8617  0.8617  0.8590  0.8450  0.8449  0.8449  0.8446  0.8446
[33 : 48]:	0.8446  0.8436  0.8436  0.8436  0.8436  0.8424  0.8401  0.8400  0.8400  0.8395  0.8378  0.8375  0.8359  0.8304  0.8304  0.8304
[49 : 64]:	0.8304  0.8304  0.8304  0.8293  0.8293  0.8280  0.8151  0.8138  0.8117  0.8116  0.8083  0.8083  0.8083  0.8083  0.8054  0.8046
2024-04-29 21:46:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:46:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #129: GFLOPs: 186.7280. Time: 1238.4924 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #130: GFLOPs: 109.8792. Time: 2104.6862 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #131: GFLOPs: 181.7117. Time: 1272.6816 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #132: GFLOPs: 178.2075. Time: 1297.7073 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #133: GFLOPs: 185.5445. Time: 1246.3921 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #134: GFLOPs: 157.9661. Time: 1463.9923 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #135: GFLOPs: 163.0287. Time: 1418.5309 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #136: GFLOPs: 172.5739. Time: 1340.0707 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #137: GFLOPs: 182.4050. Time: 1267.8445 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #138: GFLOPs: 79.8835. Time: 2894.9812 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #139: GFLOPs: 163.8250. Time: 1411.6352 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #140: GFLOPs: 137.0145. Time: 1687.8596 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #141: GFLOPs: 181.6517. Time: 1273.1020 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #142: GFLOPs: 170.2748. Time: 1358.1647 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #143: GFLOPs: 170.8196. Time: 1353.8327 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #144: GFLOPs: 176.3318. Time: 1311.5113 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #145: GFLOPs: 87.3691. Time: 2646.9438 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #146: GFLOPs: 188.9767. Time: 1223.7552 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #147: GFLOPs: 181.1306. Time: 1276.7652 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #148: GFLOPs: 166.8993. Time: 1385.6333 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #149: GFLOPs: 167.1272. Time: 1383.7437 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #150: GFLOPs: 168.9911. Time: 1368.4816 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #151: GFLOPs: 129.8032. Time: 1781.6294 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #152: GFLOPs: 168.4526. Time: 1372.8565 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #153: GFLOPs: 168.5956. Time: 1371.6920 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #154: GFLOPs: 168.4891. Time: 1372.5584 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #155: GFLOPs: 115.7776. Time: 1997.4599 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #156: GFLOPs: 96.6968. Time: 2391.6118 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #157: GFLOPs: 117.6573. Time: 1965.5487 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #158: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2048)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(128), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(28) // T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b114)
b135 = sch.decompose_reduction(block=b114, loop=l119)
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #159: GFLOPs: 178.7920. Time: 1293.4651 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #160: GFLOPs: 162.0838. Time: 1426.8000 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #161: GFLOPs: 161.7806. Time: 1429.4743 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #162: GFLOPs: 139.7523. Time: 1654.7939 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #163: GFLOPs: 136.1966. Time: 1697.9958 us. Best GFLOPs: 189.4082
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #164: GFLOPs: 198.8393. Time: 1163.0558 us. Best GFLOPs: 198.8393
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #165: GFLOPs: 204.6238. Time: 1130.1774 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #166: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2048)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(128), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
b131 = sch.decompose_reduction(block=b112, loop=l115)
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #167: GFLOPs: 79.5801. Time: 2906.0166 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #168: GFLOPs: 150.0344. Time: 1541.3877 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #169: GFLOPs: 79.9300. Time: 2893.2950 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #170: GFLOPs: 140.7342. Time: 1643.2476 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #171: GFLOPs: 114.2201. Time: 2024.6976 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #172: GFLOPs: 164.5524. Time: 1405.3953 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #173: GFLOPs: 55.4861. Time: 4167.9115 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #174: GFLOPs: 94.2471. Time: 2453.7755 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #175: GFLOPs: 133.1027. Time: 1737.4644 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #176: GFLOPs: 179.7835. Time: 1286.3312 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #177: GFLOPs: 181.2495. Time: 1275.9270 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #178: GFLOPs: 161.6348. Time: 1430.7640 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #179: GFLOPs: 173.4376. Time: 1333.3971 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #180: GFLOPs: 168.9510. Time: 1368.8065 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #181: GFLOPs: 88.3670. Time: 2617.0533 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #182: GFLOPs: 84.4058. Time: 2739.8717 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #183: GFLOPs: 126.2794. Time: 1831.3448 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #184: GFLOPs: 131.9701. Time: 1752.3761 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #185: GFLOPs: 100.6019. Time: 2298.7755 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #186: GFLOPs: 158.7765. Time: 1456.5203 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #187: GFLOPs: 136.2548. Time: 1697.2699 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #188: GFLOPs: 142.6448. Time: 1621.2380 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #189: GFLOPs: 125.1725. Time: 1847.5405 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #190: GFLOPs: 4.0339. Time: 57329.8623 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #191: GFLOPs: 29.8099. Time: 7757.8639 us. Best GFLOPs: 204.6238
2024-04-29 21:48:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #192: GFLOPs: 1.3008. Time: 177781.2573 us. Best GFLOPs: 204.6238
2024-04-29 22:14:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:14:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:15:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:15:02 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:15:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:15:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:15:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:15:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:15:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9074  0.8821  0.8551  0.8513  0.8492  0.8492  0.8492  0.8492  0.8492  0.8478  0.8426  0.8390  0.8380  0.8380  0.8361  0.8324
[17 : 32]:	0.8209  0.8209  0.8200  0.8200  0.8200  0.8200  0.8200  0.8193  0.8193  0.8170  0.8146  0.8146  0.8144  0.8138  0.8138  0.8138
[33 : 48]:	0.8138  0.8100  0.8100  0.8034  0.8034  0.8034  0.8034  0.8034  0.8034  0.8034  0.8034  0.8034  0.8034  0.8022  0.8022  0.8022
[49 : 64]:	0.8022  0.7965  0.7865  0.7863  0.7845  0.7839  0.7835  0.7809  0.7809  0.7765  0.7763  0.7763  0.7744  0.7744  0.7744  0.7744
2024-04-29 22:15:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:15:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #193: GFLOPs: 96.6254. Time: 2393.3777 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #194: GFLOPs: 97.9675. Time: 2360.5915 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #195: GFLOPs: 184.6002. Time: 1252.7676 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #196: GFLOPs: 187.9537. Time: 1230.4159 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #197: GFLOPs: 161.9588. Time: 1427.9012 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #198: GFLOPs: 146.3649. Time: 1580.0317 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #199: GFLOPs: 148.5313. Time: 1556.9860 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #200: GFLOPs: 150.6302. Time: 1535.2911 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #201: GFLOPs: 202.8843. Time: 1139.8675 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #202: GFLOPs: 185.7315. Time: 1245.1368 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #203: GFLOPs: 190.8703. Time: 1211.6143 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #204: GFLOPs: 176.4545. Time: 1310.5996 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #205: GFLOPs: 181.7955. Time: 1272.0949 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #206: GFLOPs: 182.1292. Time: 1269.7646 us. Best GFLOPs: 204.6238
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #207: GFLOPs: 232.3744. Time: 995.2094 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #208: GFLOPs: 142.6121. Time: 1621.6096 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #209: GFLOPs: 177.1541. Time: 1305.4235 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #210: GFLOPs: 177.0703. Time: 1306.0414 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #211: GFLOPs: 167.7616. Time: 1378.5107 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #212: GFLOPs: 168.3625. Time: 1373.5906 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #213: GFLOPs: 164.4850. Time: 1405.9715 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #214: GFLOPs: 168.4297. Time: 1373.0428 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #215: GFLOPs: 168.4591. Time: 1372.8031 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #216: GFLOPs: 173.1367. Time: 1335.7146 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #217: GFLOPs: 180.7770. Time: 1279.2624 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #218: GFLOPs: 180.1070. Time: 1284.0214 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #219: GFLOPs: 164.9539. Time: 1401.9746 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #220: GFLOPs: 164.8557. Time: 1402.8100 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #221: GFLOPs: 182.4845. Time: 1267.2923 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #222: GFLOPs: 167.0512. Time: 1384.3734 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #223: GFLOPs: 167.0169. Time: 1384.6573 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #224: GFLOPs: 167.1546. Time: 1383.5166 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #225: GFLOPs: 170.4701. Time: 1356.6089 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #226: GFLOPs: 177.9439. Time: 1299.6301 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #227: GFLOPs: 174.0643. Time: 1328.5962 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #228: GFLOPs: 166.4317. Time: 1389.5263 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #229: GFLOPs: 180.6647. Time: 1280.0572 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #230: GFLOPs: 156.4322. Time: 1478.3473 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #231: GFLOPs: 179.8638. Time: 1285.7574 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #232: GFLOPs: 176.0472. Time: 1313.6317 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #233: GFLOPs: 174.7601. Time: 1323.3068 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #234: GFLOPs: 161.9498. Time: 1427.9807 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #235: GFLOPs: 112.7301. Time: 2051.4595 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #236: GFLOPs: 90.6868. Time: 2550.1079 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #237: GFLOPs: 115.3671. Time: 2004.5680 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #238: GFLOPs: 176.5683. Time: 1309.7548 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #239: GFLOPs: 165.8893. Time: 1394.0691 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #240: GFLOPs: 116.0375. Time: 1992.9858 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #241: GFLOPs: 178.2503. Time: 1297.3961 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #242: GFLOPs: 117.1801. Time: 1973.5537 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #243: GFLOPs: 68.2303. Time: 3389.4185 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #244: GFLOPs: 167.7449. Time: 1378.6483 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #245: GFLOPs: 168.3005. Time: 1374.0968 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #246: GFLOPs: 156.0562. Time: 1481.9095 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #247: GFLOPs: 119.1770. Time: 1940.4854 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #248: GFLOPs: 187.8054. Time: 1231.3873 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #249: GFLOPs: 176.2533. Time: 1312.0955 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #250: GFLOPs: 165.3339. Time: 1398.7522 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #251: GFLOPs: 157.6491. Time: 1466.9366 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #252: GFLOPs: 164.6799. Time: 1404.3077 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #253: GFLOPs: 120.2570. Time: 1923.0573 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #254: GFLOPs: 0.8535. Time: 270940.4207 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #255: GFLOPs: 3.7516. Time: 61643.3867 us. Best GFLOPs: 232.3744
2024-04-29 22:17:28 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #256: GFLOPs: 1.2199. Time: 189573.1703 us. Best GFLOPs: 232.3744
2024-04-29 22:26:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:26:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:26:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:26:17 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:26:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:26:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:26:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:26:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 22:27:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9000  0.8849  0.8849  0.8171  0.8133  0.8027  0.7853  0.7829  0.7829  0.7827  0.7827  0.7757  0.7699  0.7699  0.7699  0.7699
[17 : 32]:	0.7673  0.7673  0.7665  0.7473  0.7473  0.7448  0.7400  0.7378  0.7344  0.7344  0.7344  0.7344  0.7319  0.7319  0.7319  0.7319
[33 : 48]:	0.7273  0.7273  0.7269  0.7269  0.7244  0.7223  0.7223  0.7198  0.7198  0.7198  0.7198  0.7198  0.7198  0.7198  0.7184  0.7168
[49 : 64]:	0.7150  0.7141  0.7108  0.7108  0.7108  0.7108  0.7108  0.7108  0.7043  0.7041  0.7027  0.7027  0.7027  0.7027  0.7027  0.7012
2024-04-29 22:27:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:27:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #257: GFLOPs: 142.6130. Time: 1621.5990 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #258: GFLOPs: 121.1932. Time: 1908.2028 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #259: GFLOPs: 232.1062. Time: 996.3595 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #260: GFLOPs: 140.8393. Time: 1642.0213 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #261: GFLOPs: 177.6328. Time: 1301.9057 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #262: GFLOPs: 190.6654. Time: 1212.9163 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #263: GFLOPs: 154.0756. Time: 1500.9591 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #264: GFLOPs: 187.7633. Time: 1231.6636 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #265: GFLOPs: 187.1321. Time: 1235.8176 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #266: GFLOPs: 175.7131. Time: 1316.1295 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #267: GFLOPs: 175.7496. Time: 1315.8561 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #268: GFLOPs: 189.3063. Time: 1221.6243 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #269: GFLOPs: 186.8954. Time: 1237.3828 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #270: GFLOPs: 187.6676. Time: 1232.2913 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #271: GFLOPs: 187.3190. Time: 1234.5845 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #272: GFLOPs: 187.7181. Time: 1231.9600 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #273: GFLOPs: 180.5977. Time: 1280.5322 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #274: GFLOPs: 182.0378. Time: 1270.4022 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #275: GFLOPs: 177.4158. Time: 1303.4982 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #276: GFLOPs: 177.4823. Time: 1303.0097 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #277: GFLOPs: 177.7024. Time: 1301.3962 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #278: GFLOPs: 180.0230. Time: 1284.6204 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #279: GFLOPs: 179.7565. Time: 1286.5249 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #280: GFLOPs: 165.7613. Time: 1395.1461 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #281: GFLOPs: 186.6875. Time: 1238.7609 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #282: GFLOPs: 166.5914. Time: 1388.1943 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #283: GFLOPs: 166.7122. Time: 1387.1880 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #284: GFLOPs: 166.7178. Time: 1387.1418 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #285: GFLOPs: 176.9338. Time: 1307.0490 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #286: GFLOPs: 177.9108. Time: 1299.8713 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #287: GFLOPs: 178.0997. Time: 1298.4932 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #288: GFLOPs: 177.1621. Time: 1305.3652 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #289: GFLOPs: 180.2134. Time: 1283.2632 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #290: GFLOPs: 177.6761. Time: 1301.5888 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #291: GFLOPs: 224.8455. Time: 1028.5336 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #292: GFLOPs: 149.8639. Time: 1543.1409 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #293: GFLOPs: 177.0930. Time: 1305.8744 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #294: GFLOPs: 168.5325. Time: 1372.2051 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #295: GFLOPs: 87.1775. Time: 2652.7638 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #296: GFLOPs: 164.4849. Time: 1405.9717 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #297: GFLOPs: 162.9262. Time: 1419.4230 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #298: GFLOPs: 164.7091. Time: 1404.0587 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #299: GFLOPs: 165.5586. Time: 1396.8543 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #300: GFLOPs: 165.5402. Time: 1397.0095 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #301: GFLOPs: 166.2837. Time: 1390.7625 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #302: GFLOPs: 170.8170. Time: 1353.8534 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #303: GFLOPs: 77.5821. Time: 2980.8570 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #304: GFLOPs: 183.6339. Time: 1259.3602 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #305: GFLOPs: 158.3575. Time: 1460.3737 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #306: GFLOPs: 180.0222. Time: 1284.6258 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #307: GFLOPs: 162.2022. Time: 1425.7587 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #308: GFLOPs: 142.5907. Time: 1621.8537 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #309: GFLOPs: 141.4281. Time: 1635.1860 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #310: GFLOPs: 179.0949. Time: 1291.2773 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #311: GFLOPs: 162.7766. Time: 1420.7275 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #312: GFLOPs: 171.7368. Time: 1346.6026 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #313: GFLOPs: 141.3772. Time: 1635.7746 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #314: GFLOPs: 183.8452. Time: 1257.9125 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #315: GFLOPs: 71.8275. Time: 3219.6740 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #316: GFLOPs: 142.9000. Time: 1618.3423 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #317: GFLOPs: 172.5407. Time: 1340.3280 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #318: GFLOPs: 50.0388. Time: 4621.6368 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #319: GFLOPs: 0.5299. Time: 436407.4547 us. Best GFLOPs: 232.3744
2024-04-29 22:28:38 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #320: GFLOPs: 0.5147. Time: 449269.3883 us. Best GFLOPs: 232.3744
2024-04-29 23:03:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:03:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:03:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:03:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:03:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:04:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:04:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:04:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:04:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8182  0.7959  0.7943  0.7916  0.7906  0.7906  0.7906  0.7878  0.7878  0.7878  0.7871  0.7871  0.7871  0.7871  0.7851  0.7851
[17 : 32]:	0.7851  0.7851  0.7851  0.7851  0.7816  0.7788  0.7673  0.7651  0.7631  0.7613  0.7601  0.7599  0.7534  0.7529  0.7529  0.7529
[33 : 48]:	0.7529  0.7494  0.7493  0.7490  0.7490  0.7490  0.7484  0.7453  0.7453  0.7447  0.7437  0.7437  0.7437  0.7417  0.7414  0.7351
[49 : 64]:	0.7328  0.7310  0.7310  0.7310  0.7305  0.7262  0.7228  0.7228  0.7219  0.7201  0.7190  0.7170  0.7166  0.7142  0.7141  0.7141
2024-04-29 23:04:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:04:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #321: GFLOPs: 199.4277. Time: 1159.6244 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #322: GFLOPs: 182.8046. Time: 1265.0728 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #323: GFLOPs: 191.9694. Time: 1204.6774 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #324: GFLOPs: 189.8458. Time: 1218.1526 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #325: GFLOPs: 186.7788. Time: 1238.1557 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #326: GFLOPs: 185.6719. Time: 1245.5370 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #327: GFLOPs: 185.3801. Time: 1247.4973 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #328: GFLOPs: 179.1479. Time: 1290.8953 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #329: GFLOPs: 179.0720. Time: 1291.4426 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #330: GFLOPs: 179.0395. Time: 1291.6770 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #331: GFLOPs: 93.8597. Time: 2463.9016 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #332: GFLOPs: 187.4435. Time: 1233.7647 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #333: GFLOPs: 187.4045. Time: 1234.0216 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #334: GFLOPs: 184.8568. Time: 1251.0288 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #335: GFLOPs: 187.1408. Time: 1235.7603 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #336: GFLOPs: 187.8621. Time: 1231.0157 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #337: GFLOPs: 188.0152. Time: 1230.0135 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #338: GFLOPs: 188.7722. Time: 1225.0805 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #339: GFLOPs: 188.7202. Time: 1225.4184 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #340: GFLOPs: 188.3955. Time: 1227.5301 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #341: GFLOPs: 186.9272. Time: 1237.1725 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #342: GFLOPs: 182.8727. Time: 1264.6018 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #343: GFLOPs: 186.9381. Time: 1237.1006 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #344: GFLOPs: 184.5523. Time: 1253.0932 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #345: GFLOPs: 171.3489. Time: 1349.6505 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #346: GFLOPs: 185.3707. Time: 1247.5603 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #347: GFLOPs: 177.7331. Time: 1301.1714 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #348: GFLOPs: 176.6107. Time: 1309.4404 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #349: GFLOPs: 177.7999. Time: 1300.6820 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #350: GFLOPs: 154.1735. Time: 1500.0057 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #351: GFLOPs: 151.5949. Time: 1525.5205 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #352: GFLOPs: 154.2945. Time: 1498.8300 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #353: GFLOPs: 184.4558. Time: 1253.7484 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #354: GFLOPs: 201.9508. Time: 1145.1365 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #355: GFLOPs: 185.8718. Time: 1244.1973 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #356: GFLOPs: 130.4739. Time: 1772.4712 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #357: GFLOPs: 123.6910. Time: 1869.6681 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #358: GFLOPs: 172.5954. Time: 1339.9035 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #359: GFLOPs: 180.7097. Time: 1279.7384 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #360: GFLOPs: 157.0911. Time: 1472.1472 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #361: GFLOPs: 157.2984. Time: 1470.2065 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #362: GFLOPs: 178.5144. Time: 1295.4762 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #363: GFLOPs: 166.9326. Time: 1385.3567 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #364: GFLOPs: 178.0079. Time: 1299.1628 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #365: GFLOPs: 167.4328. Time: 1381.2176 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #366: GFLOPs: 130.2094. Time: 1776.0719 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #367: GFLOPs: 137.0157. Time: 1687.8439 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #368: GFLOPs: 167.5535. Time: 1380.2229 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #369: GFLOPs: 205.3829. Time: 1126.0003 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #370: GFLOPs: 193.9549. Time: 1192.3451 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #371: GFLOPs: 149.3286. Time: 1548.6732 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #372: GFLOPs: 184.4947. Time: 1253.4839 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #373: GFLOPs: 143.8077. Time: 1608.1278 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #374: GFLOPs: 186.0213. Time: 1243.1975 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #375: GFLOPs: 177.9390. Time: 1299.6656 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #376: GFLOPs: 180.6845. Time: 1279.9173 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #377: GFLOPs: 187.6917. Time: 1232.1333 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #378: GFLOPs: 138.6341. Time: 1668.1403 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #379: GFLOPs: 193.5269. Time: 1194.9819 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #380: GFLOPs: 171.8200. Time: 1345.9502 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #381: GFLOPs: 188.6182. Time: 1226.0807 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #382: GFLOPs: 98.1357. Time: 2356.5454 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #383: GFLOPs: 13.4284. Time: 17221.7508 us. Best GFLOPs: 232.3744
2024-04-29 23:06:10 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #384: GFLOPs: 0.7931. Time: 291594.0733 us. Best GFLOPs: 232.3744
2024-04-29 23:27:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:27:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:27:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:27:13 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:27:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:27:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:27:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:27:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-29 23:27:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8604  0.8604  0.8604  0.8604  0.8604  0.8510  0.8510  0.8120  0.8120  0.8089  0.8031  0.8021  0.8021  0.8021  0.8021  0.8021
[17 : 32]:	0.8017  0.8017  0.8017  0.8017  0.8005  0.8005  0.7975  0.7951  0.7937  0.7927  0.7918  0.7879  0.7867  0.7867  0.7867  0.7867
[33 : 48]:	0.7863  0.7855  0.7855  0.7855  0.7855  0.7849  0.7845  0.7840  0.7827  0.7815  0.7791  0.7784  0.7784  0.7784  0.7784  0.7784
[49 : 64]:	0.7780  0.7780  0.7780  0.7775  0.7775  0.7741  0.7723  0.7712  0.7707  0.7707  0.7704  0.7701  0.7678  0.7670  0.7670  0.7666
2024-04-29 23:27:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:27:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #385: GFLOPs: 260.8720. Time: 886.4928 us. Best GFLOPs: 260.8720
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #386: GFLOPs: 301.4609. Time: 767.1349 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #387: GFLOPs: 115.2187. Time: 2007.1497 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #388: GFLOPs: 126.8639. Time: 1822.9079 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #389: GFLOPs: 231.3062. Time: 999.8055 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #390: GFLOPs: 141.5677. Time: 1633.5729 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #391: GFLOPs: 158.1832. Time: 1461.9832 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #392: GFLOPs: 188.2897. Time: 1228.2202 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #393: GFLOPs: 187.2949. Time: 1234.7438 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #394: GFLOPs: 188.3422. Time: 1227.8776 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #395: GFLOPs: 188.3679. Time: 1227.7098 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #396: GFLOPs: 183.4982. Time: 1260.2911 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #397: GFLOPs: 186.7442. Time: 1238.3846 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #398: GFLOPs: 185.0137. Time: 1249.9677 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #399: GFLOPs: 186.6481. Time: 1239.0223 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #400: GFLOPs: 187.1288. Time: 1235.8395 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #401: GFLOPs: 188.7500. Time: 1225.2246 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #402: GFLOPs: 188.4102. Time: 1227.4347 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #403: GFLOPs: 188.5142. Time: 1226.7573 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #404: GFLOPs: 188.7329. Time: 1225.3356 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #405: GFLOPs: 188.5997. Time: 1226.2009 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #406: GFLOPs: 187.2548. Time: 1235.0078 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #407: GFLOPs: 181.7744. Time: 1272.2427 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #408: GFLOPs: 192.6298. Time: 1200.5473 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #409: GFLOPs: 183.5123. Time: 1260.1943 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #410: GFLOPs: 181.6789. Time: 1272.9117 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #411: GFLOPs: 189.1151. Time: 1222.8595 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #412: GFLOPs: 191.7341. Time: 1206.1558 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #413: GFLOPs: 189.3427. Time: 1221.3892 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #414: GFLOPs: 190.2484. Time: 1215.5750 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #415: GFLOPs: 191.5041. Time: 1207.6044 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #416: GFLOPs: 117.4954. Time: 1968.2566 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #417: GFLOPs: 182.0297. Time: 1270.4584 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #418: GFLOPs: 189.5256. Time: 1220.2108 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #419: GFLOPs: 184.2570. Time: 1255.1015 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #420: GFLOPs: 185.9161. Time: 1243.9007 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #421: GFLOPs: 191.6774. Time: 1206.5126 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #422: GFLOPs: 193.2308. Time: 1196.8132 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #423: GFLOPs: 194.9771. Time: 1186.0939 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #424: GFLOPs: 180.7428. Time: 1279.5044 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #425: GFLOPs: 185.5845. Time: 1246.1231 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #426: GFLOPs: 179.9300. Time: 1285.2842 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #427: GFLOPs: 193.3538. Time: 1196.0520 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #428: GFLOPs: 183.3485. Time: 1261.3205 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #429: GFLOPs: 182.9970. Time: 1263.7432 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #430: GFLOPs: 186.0120. Time: 1243.2595 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #431: GFLOPs: 185.7934. Time: 1244.7226 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #432: GFLOPs: 181.7135. Time: 1272.6691 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #433: GFLOPs: 139.9387. Time: 1652.5897 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #434: GFLOPs: 186.6953. Time: 1238.7091 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #435: GFLOPs: 188.0142. Time: 1230.0197 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #436: GFLOPs: 185.3715. Time: 1247.5552 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #437: GFLOPs: 183.7469. Time: 1258.5854 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #438: GFLOPs: 181.2109. Time: 1276.1993 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #439: GFLOPs: 191.0117. Time: 1210.7173 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #440: GFLOPs: 171.7300. Time: 1346.6559 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #441: GFLOPs: 176.8228. Time: 1307.8701 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #442: GFLOPs: 183.3306. Time: 1261.4433 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #443: GFLOPs: 139.5714. Time: 1656.9381 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #444: GFLOPs: 180.3273. Time: 1282.4525 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #445: GFLOPs: 182.6543. Time: 1266.1139 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #446: GFLOPs: 176.4167. Time: 1310.8804 us. Best GFLOPs: 301.4609
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #447: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(32) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0 in T.grid(T.int64(512), T.int64(3), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(13), T.int64(13), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(128), ic_0 // T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), kh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), kw_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(4) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 32])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b67)
l88 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l107, l108, l109, l110, l111, preserve_unit_iters=True)
l113, l114 = sch.split(loop=l112, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l113)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-29 23:29:51 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #448: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(512)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(15), T.int64(15), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(128), ic_0 // T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(4) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-30 00:26:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:26:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:26:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:26:19 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:26:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:26:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:26:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:27:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:27:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.6611  0.6381  0.6378  0.6281  0.6272  0.6247  0.6238  0.6232  0.6232  0.6232  0.6232  0.6232  0.6220  0.6219  0.6219  0.6219
[17 : 32]:	0.6188  0.6188  0.6188  0.6182  0.6170  0.6168  0.6168  0.6160  0.6160  0.6160  0.6139  0.6134  0.6129  0.6124  0.6121  0.6118
[33 : 48]:	0.6116  0.6116  0.6116  0.6116  0.6114  0.6106  0.6106  0.6106  0.6106  0.6104  0.6100  0.6100  0.6100  0.6100  0.6100  0.6089
[49 : 64]:	0.6088  0.6088  0.6084  0.6084  0.6084  0.6084  0.6084  0.6084  0.6084  0.6082  0.6065  0.6065  0.6065  0.6065  0.6065  0.6065
2024-04-30 00:27:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:27:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #449: GFLOPs: 163.4217. Time: 1415.1192 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #450: GFLOPs: 198.7623. Time: 1163.5061 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #451: GFLOPs: 178.9297. Time: 1292.4692 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #452: GFLOPs: 189.3278. Time: 1221.4854 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #453: GFLOPs: 164.4159. Time: 1406.5623 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #454: GFLOPs: 237.0234. Time: 975.6892 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #455: GFLOPs: 190.7791. Time: 1212.1933 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #456: GFLOPs: 192.5782. Time: 1200.8690 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #457: GFLOPs: 192.5771. Time: 1200.8758 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #458: GFLOPs: 192.4688. Time: 1201.5515 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #459: GFLOPs: 189.8924. Time: 1217.8540 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #460: GFLOPs: 192.4364. Time: 1201.7540 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #461: GFLOPs: 268.3006. Time: 861.9480 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #462: GFLOPs: 193.5557. Time: 1194.8043 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #463: GFLOPs: 193.7518. Time: 1193.5949 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #464: GFLOPs: 186.8251. Time: 1237.8488 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #465: GFLOPs: 187.0914. Time: 1236.0867 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #466: GFLOPs: 187.1813. Time: 1235.4928 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #467: GFLOPs: 187.1451. Time: 1235.7322 us. Best GFLOPs: 301.4609
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #468: GFLOPs: 345.8006. Time: 668.7704 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #469: GFLOPs: 196.0932. Time: 1179.3432 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #470: GFLOPs: 187.8499. Time: 1231.0959 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #471: GFLOPs: 187.7458. Time: 1231.7782 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #472: GFLOPs: 186.9576. Time: 1236.9712 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #473: GFLOPs: 188.7270. Time: 1225.3740 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #474: GFLOPs: 187.4132. Time: 1233.9642 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #475: GFLOPs: 180.7945. Time: 1279.1384 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #476: GFLOPs: 95.8793. Time: 2412.0020 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #477: GFLOPs: 182.1061. Time: 1269.9256 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #478: GFLOPs: 192.1732. Time: 1203.3997 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #479: GFLOPs: 142.9852. Time: 1617.3787 us. Best GFLOPs: 345.8006
2024-04-30 00:28:53 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #480: GFLOPs: 100.1424. Time: 2309.3225 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #481: GFLOPs: 87.5395. Time: 2641.7935 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #482: GFLOPs: 63.2231. Time: 3657.8576 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #483: GFLOPs: 145.8462. Time: 1585.6509 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #484: GFLOPs: 231.7090. Time: 998.0675 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #485: GFLOPs: 188.7067. Time: 1225.5062 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #486: GFLOPs: 187.4673. Time: 1233.6079 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #487: GFLOPs: 187.4849. Time: 1233.4924 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #488: GFLOPs: 186.4646. Time: 1240.2420 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #489: GFLOPs: 186.5918. Time: 1239.3964 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #490: GFLOPs: 181.3154. Time: 1275.4638 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #491: GFLOPs: 178.0401. Time: 1298.9278 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #492: GFLOPs: 187.2684. Time: 1234.9186 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #493: GFLOPs: 188.0409. Time: 1229.8452 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #494: GFLOPs: 184.8636. Time: 1250.9825 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #495: GFLOPs: 187.8009. Time: 1231.4168 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #496: GFLOPs: 134.3408. Time: 1721.4517 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #497: GFLOPs: 142.1888. Time: 1626.4373 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #498: GFLOPs: 204.7576. Time: 1129.4386 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #499: GFLOPs: 182.1147. Time: 1269.8657 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #500: GFLOPs: 195.2669. Time: 1184.3339 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #501: GFLOPs: 181.8960. Time: 1271.3922 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #502: GFLOPs: 181.7319. Time: 1272.5407 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #503: GFLOPs: 184.1890. Time: 1255.5647 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #504: GFLOPs: 185.3791. Time: 1247.5044 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #505: GFLOPs: 188.7536. Time: 1225.2017 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #506: GFLOPs: 180.5740. Time: 1280.7006 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #507: GFLOPs: 186.2690. Time: 1241.5440 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #508: GFLOPs: 191.5412. Time: 1207.3704 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #509: GFLOPs: 191.7547. Time: 1206.0264 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #510: GFLOPs: 10.0737. Time: 22956.9134 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #511: GFLOPs: 9.0895. Time: 25442.6675 us. Best GFLOPs: 345.8006
2024-04-30 00:28:54 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #512: GFLOPs: 71.1318. Time: 3251.1643 us. Best GFLOPs: 345.8006
2024-04-30 00:54:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:54:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:54:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:54:15 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:54:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:54:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:54:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:54:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 00:55:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9339  0.9339  0.9339  0.9339  0.9339  0.9339  0.9339  0.9339  0.9168  0.8458  0.7822  0.7814  0.7814  0.7673  0.7673  0.6702
[17 : 32]:	0.6702  0.6599  0.6599  0.6599  0.6599  0.6599  0.6575  0.6505  0.6429  0.6288  0.6276  0.6276  0.6276  0.6165  0.6091  0.6091
[33 : 48]:	0.6091  0.5796  0.5763  0.5763  0.5763  0.5565  0.5511  0.5511  0.5511  0.5486  0.5486  0.5470  0.5470  0.5462  0.5439  0.5439
[49 : 64]:	0.5439  0.5430  0.5426  0.5426  0.5426  0.5405  0.5405  0.5405  0.5400  0.5400  0.5400  0.5391  0.5391  0.5391  0.5391  0.5383
2024-04-30 00:55:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:55:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #513: GFLOPs: 303.9085. Time: 760.9566 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #514: GFLOPs: 254.6808. Time: 908.0433 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #515: GFLOPs: 249.4828. Time: 926.9623 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #516: GFLOPs: 110.0545. Time: 2101.3332 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #517: GFLOPs: 101.4509. Time: 2279.5375 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #518: GFLOPs: 116.5744. Time: 1983.8083 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #519: GFLOPs: 177.5919. Time: 1302.2059 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #520: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                for ow_3_oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b105)
b122 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #521: GFLOPs: 183.8394. Time: 1257.9521 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #522: GFLOPs: 207.0589. Time: 1116.8862 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #523: GFLOPs: 171.2499. Time: 1350.4313 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #524: GFLOPs: 280.6350. Time: 824.0639 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #525: GFLOPs: 146.3458. Time: 1580.2379 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #526: GFLOPs: 96.3200. Time: 2400.9679 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #527: GFLOPs: 93.8407. Time: 2464.4023 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #528: GFLOPs: 154.2824. Time: 1498.9470 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #529: GFLOPs: 257.0919. Time: 899.5274 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #530: GFLOPs: 169.1271. Time: 1367.3806 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #531: GFLOPs: 198.9969. Time: 1162.1345 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #532: GFLOPs: 99.8644. Time: 2315.7531 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #533: GFLOPs: 111.9609. Time: 2065.5531 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #534: GFLOPs: 104.2051. Time: 2219.2893 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #535: GFLOPs: 105.4911. Time: 2192.2340 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #536: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                for ow_3_oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b105)
b122 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #537: GFLOPs: 186.3485. Time: 1241.0146 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #538: GFLOPs: 98.6551. Time: 2344.1386 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #539: GFLOPs: 114.2104. Time: 2024.8703 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #540: GFLOPs: 241.2119. Time: 958.7469 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #541: GFLOPs: 241.3781. Time: 958.0867 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #542: GFLOPs: 163.4421. Time: 1414.9423 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #543: GFLOPs: 175.4173. Time: 1318.3488 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #544: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2048)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(128), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #545: GFLOPs: 206.7470. Time: 1118.5707 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #546: GFLOPs: 136.2480. Time: 1697.3548 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #547: GFLOPs: 115.7952. Time: 1997.1574 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #548: GFLOPs: 115.6001. Time: 2000.5278 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #549: GFLOPs: 115.8562. Time: 1996.1060 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #550: GFLOPs: 42.0270. Time: 5502.6872 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #551: GFLOPs: 174.1864. Time: 1327.6653 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #552: GFLOPs: 152.6937. Time: 1514.5432 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #553: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b108)
b128 = sch.decompose_reduction(block=b108, loop=l113)
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #554: GFLOPs: 179.7171. Time: 1286.8068 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #555: GFLOPs: 179.5367. Time: 1288.0999 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #556: GFLOPs: 157.3286. Time: 1469.9242 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #557: GFLOPs: 190.3098. Time: 1215.1828 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #558: GFLOPs: 191.5504. Time: 1207.3127 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #559: GFLOPs: 188.7681. Time: 1225.1071 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #560: GFLOPs: 187.3897. Time: 1234.1192 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #561: GFLOPs: 187.7593. Time: 1231.6894 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #562: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b106)
b124 = sch.decompose_reduction(block=b106, loop=l109)
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #563: GFLOPs: 192.5496. Time: 1201.0471 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #564: GFLOPs: 184.6545. Time: 1252.3997 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #565: GFLOPs: 192.6017. Time: 1200.7227 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #566: GFLOPs: 189.1493. Time: 1222.6384 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #567: GFLOPs: 188.6685. Time: 1225.7540 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #568: GFLOPs: 188.8824. Time: 1224.3661 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #569: GFLOPs: 179.5342. Time: 1288.1176 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #570: GFLOPs: 178.3786. Time: 1296.4625 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #571: GFLOPs: 179.5741. Time: 1287.8313 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #572: GFLOPs: 188.1038. Time: 1229.4338 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #573: GFLOPs: 185.9784. Time: 1243.4840 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #574: GFLOPs: 14.7582. Time: 15670.0406 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #575: GFLOPs: 18.8808. Time: 12248.4652 us. Best GFLOPs: 345.8006
2024-04-30 00:56:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #576: GFLOPs: 87.1970. Time: 2652.1692 us. Best GFLOPs: 345.8006
2024-04-30 01:14:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:14:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:14:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 01:14:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:15:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 01:15:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 01:15:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 01:15:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb784748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x64796e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xff6e1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff81888)]: 0 failure(s)
2024-04-30 01:15:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.6896  0.6896  0.6896  0.6896  0.6896  0.6397  0.6397  0.5936  0.5936  0.5860  0.5860  0.5860  0.5860  0.5774  0.5533  0.5533
[17 : 32]:	0.5475  0.5475  0.5461  0.5458  0.5458  0.5458  0.5445  0.5443  0.5443  0.5441  0.5440  0.5438  0.5438  0.5401  0.5397  0.5397
[33 : 48]:	0.5397  0.5397  0.5386  0.5384  0.5384  0.5378  0.5368  0.5368  0.5368  0.5362  0.5360  0.5360  0.5354  0.5354  0.5354  0.5352
[49 : 64]:	0.5349  0.5349  0.5347  0.5347  0.5341  0.5341  0.5338  0.5338  0.5317  0.5317  0.5317  0.5317  0.5317  0.5316  0.5316  0.5316
2024-04-30 01:15:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:15:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #577: GFLOPs: 138.3669. Time: 1671.3614 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #578: GFLOPs: 130.0850. Time: 1777.7701 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #579: GFLOPs: 208.5673. Time: 1108.8086 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #580: GFLOPs: 204.5859. Time: 1130.3868 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #581: GFLOPs: 200.4732. Time: 1153.5768 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #582: GFLOPs: 227.4807. Time: 1016.6190 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #583: GFLOPs: 227.4904. Time: 1016.5756 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #584: GFLOPs: 257.6918. Time: 897.4332 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #585: GFLOPs: 230.5003. Time: 1003.3011 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #586: GFLOPs: 124.4632. Time: 1858.0682 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #587: GFLOPs: 117.3463. Time: 1970.7582 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #588: GFLOPs: 338.5464. Time: 683.1004 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #589: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2) + ow_1 + ow_2_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                    for ow_3_oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2) + ow_1 + ow_2)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=112)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b108)
b128 = sch.decompose_reduction(block=b108, loop=l113)
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #590: GFLOPs: 233.9927. Time: 988.3264 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #591: GFLOPs: 195.6369. Time: 1182.0940 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #592: GFLOPs: 157.0971. Time: 1472.0906 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #593: GFLOPs: 184.7040. Time: 1252.0638 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #594: GFLOPs: 192.5133. Time: 1201.2741 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #595: GFLOPs: 175.2850. Time: 1319.3440 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #596: GFLOPs: 187.8532. Time: 1231.0739 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #597: GFLOPs: 186.4250. Time: 1240.5053 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #598: GFLOPs: 187.2926. Time: 1234.7587 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #599: GFLOPs: 191.7994. Time: 1205.7450 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #600: GFLOPs: 191.0337. Time: 1210.5780 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #601: GFLOPs: 177.4872. Time: 1302.9737 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #602: GFLOPs: 139.4307. Time: 1658.6097 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #603: GFLOPs: 225.5633. Time: 1025.2608 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #604: GFLOPs: 221.6437. Time: 1043.3918 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #605: GFLOPs: 209.8978. Time: 1101.7802 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #606: GFLOPs: 190.0945. Time: 1216.5591 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #607: GFLOPs: 186.7883. Time: 1238.0921 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #608: GFLOPs: 184.6695. Time: 1252.2978 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #609: GFLOPs: 186.0103. Time: 1243.2706 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #610: GFLOPs: 94.1458. Time: 2456.4160 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #611: GFLOPs: 205.3295. Time: 1126.2933 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #612: GFLOPs: 194.7729. Time: 1187.3374 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #613: GFLOPs: 210.2725. Time: 1099.8165 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #614: GFLOPs: 187.9689. Time: 1230.3165 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #615: GFLOPs: 188.4612. Time: 1227.1023 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #616: GFLOPs: 187.2632. Time: 1234.9527 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #617: GFLOPs: 189.0852. Time: 1223.0530 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #618: GFLOPs: 189.4836. Time: 1220.4815 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #619: GFLOPs: 188.0488. Time: 1229.7938 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #620: GFLOPs: 187.2539. Time: 1235.0139 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #621: GFLOPs: 192.3066. Time: 1202.5653 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #622: GFLOPs: 192.3419. Time: 1202.3443 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #623: GFLOPs: 191.0829. Time: 1210.2662 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #624: GFLOPs: 195.3058. Time: 1184.0981 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #625: GFLOPs: 187.8082. Time: 1231.3687 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #626: GFLOPs: 186.8578. Time: 1237.6320 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #627: GFLOPs: 188.0656. Time: 1229.6838 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #628: GFLOPs: 188.0503. Time: 1229.7836 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #629: GFLOPs: 181.9180. Time: 1271.2386 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #630: GFLOPs: 182.2726. Time: 1268.7653 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #631: GFLOPs: 191.3672. Time: 1208.4685 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #632: GFLOPs: 191.8272. Time: 1205.5702 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #633: GFLOPs: 190.7248. Time: 1212.5388 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #634: GFLOPs: 181.9229. Time: 1271.2042 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #635: GFLOPs: 185.1367. Time: 1249.1376 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #636: GFLOPs: 175.0354. Time: 1321.2251 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #637: GFLOPs: 163.8192. Time: 1411.6855 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #638: GFLOPs: 15.9506. Time: 14498.5591 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #639: GFLOPs: 1.5522. Time: 148986.9613 us. Best GFLOPs: 345.8006
2024-04-30 01:17:36 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #640: GFLOPs: 5.2278. Time: 44236.4410 us. Best GFLOPs: 345.8006
