2024-04-29 19:38:45 [INFO] [task_scheduler.cc:160] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2"
2024-04-29 19:38:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:38:45 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:38:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:38:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 19:38:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 20:14:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:14:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:14:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:14:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:14:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:14:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:14:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:14:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:14:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9990  0.9983  0.9976  0.9957  0.9956  0.9951  0.9949  0.9933  0.9930  0.9926  0.9925  0.9922  0.9920  0.9918
[17 : 32]:	0.9911  0.9902  0.9897  0.9888  0.9887  0.9884  0.9884  0.9884  0.9880  0.9872  0.9871  0.9866  0.9859  0.9858  0.9855  0.9852
[33 : 48]:	0.9845  0.9841  0.9835  0.9833  0.9830  0.9828  0.9799  0.9796  0.9793  0.9782  0.9777  0.9750  0.9749  0.9735  0.9735  0.9733
[49 : 64]:	0.9731  0.9722  0.9697  0.9691  0.9685  0.9671  0.9669  0.9668  0.9656  0.9656  0.9656  0.9653  0.9652  0.9638  0.9636  0.9635
2024-04-29 20:14:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:14:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #1: GFLOPs: 161.3254. Time: 640.7086 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(49), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #3: GFLOPs: 80.3778. Time: 1285.9594 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #4: GFLOPs: 9.0394. Time: 11434.6132 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #5: GFLOPs: 4.4634. Time: 23158.0452 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #6: GFLOPs: 68.6395. Time: 1505.8761 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #7: GFLOPs: 4.6815. Time: 22079.0686 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #8: GFLOPs: 11.4072. Time: 9061.1795 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #9: GFLOPs: 8.8133. Time: 11727.9661 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #10: GFLOPs: 30.8522. Time: 3350.2465 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b104)
b128 = sch.decompose_reduction(block=b104, loop=l112)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #12: GFLOPs: 99.9461. Time: 1034.1833 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #13: GFLOPs: 55.5192. Time: 1861.7445 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #15: GFLOPs: 10.7532. Time: 9612.2169 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #16: GFLOPs: 82.5121. Time: 1252.6954 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #17: GFLOPs: 51.7583. Time: 1997.0242 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #18: GFLOPs: 142.4055. Time: 725.8327 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #20: GFLOPs: 59.6079. Time: 1734.0420 us. Best GFLOPs: 161.3254
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #21: GFLOPs: 172.3705. Time: 599.6535 us. Best GFLOPs: 172.3705
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #22: GFLOPs: 12.1100. Time: 8535.2713 us. Best GFLOPs: 172.3705
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #23: GFLOPs: 178.1639. Time: 580.1544 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #24: GFLOPs: 33.7731. Time: 3060.4971 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #25: GFLOPs: 176.0312. Time: 587.1832 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #26: GFLOPs: 5.2447. Time: 19707.9517 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #27: GFLOPs: 9.7039. Time: 10651.6260 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #28: GFLOPs: 14.2308. Time: 7263.3135 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #29: GFLOPs: 79.2941. Time: 1303.5341 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #30: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #31: GFLOPs: 25.8399. Time: 4000.1125 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #32: GFLOPs: 0.8364. Time: 123573.4580 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #33: GFLOPs: 127.2661. Time: 812.1768 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #35: GFLOPs: 40.8843. Time: 2528.1705 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #36: GFLOPs: 42.8744. Time: 2410.8219 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #37: GFLOPs: 139.0518. Time: 743.3385 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #38: GFLOPs: 138.1220. Time: 748.3425 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #39: GFLOPs: 7.3354. Time: 14090.8610 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #40: GFLOPs: 124.5058. Time: 830.1827 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #41: GFLOPs: 17.4538. Time: 5922.0792 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #42: GFLOPs: 8.8568. Time: 11670.4099 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #43: GFLOPs: 38.2825. Time: 2699.9960 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #45: GFLOPs: 123.1248. Time: 839.4944 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #46: GFLOPs: 4.4035. Time: 23472.7490 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #47: GFLOPs: 8.9669. Time: 11527.1616 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #48: GFLOPs: 33.6553. Time: 3071.2121 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #49: GFLOPs: 173.2941. Time: 596.4576 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #50: GFLOPs: 22.3706. Time: 4620.4664 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #51: GFLOPs: 29.9990. Time: 3445.5350 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #52: GFLOPs: 56.3163. Time: 1835.3936 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #53: GFLOPs: 4.5285. Time: 22824.7332 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #54: GFLOPs: 88.1954. Time: 1171.9718 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #55: GFLOPs: 24.5674. Time: 4207.3124 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(112) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(112) // T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(112) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(112) // T.int64(8) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #58: GFLOPs: 51.7869. Time: 1995.9191 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #59: GFLOPs: 13.9715. Time: 7398.0824 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #60: GFLOPs: 25.4078. Time: 4068.1457 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #61: GFLOPs: 1.6128. Time: 64089.5660 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #62: GFLOPs: 88.1031. Time: 1173.1997 us. Best GFLOPs: 178.1639
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:33:28 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #64: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(64), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b104)
b128 = sch.decompose_reduction(block=b104, loop=l112)
2024-04-29 20:41:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:41:54 [INFO] [evolutionary_search.cc:715] Picked top 53 candidate(s) from database
2024-04-29 20:41:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:41:56 [INFO] [evolutionary_search.cc:723] Sampled 459 candidate(s)
2024-04-29 20:42:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:42:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:42:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:42:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 20:42:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9651  0.9426  0.9272  0.9267  0.9209  0.9151  0.9151  0.9126  0.9108  0.9106  0.9087  0.9079  0.9052  0.9025  0.9001  0.9001
[17 : 32]:	0.8941  0.8931  0.8920  0.8908  0.8884  0.8876  0.8813  0.8777  0.8753  0.8752  0.8752  0.8738  0.8731  0.8726  0.8726  0.8723
[33 : 48]:	0.8702  0.8685  0.8681  0.8673  0.8649  0.8641  0.8640  0.8608  0.8608  0.8602  0.8596  0.8596  0.8592  0.8588  0.8586  0.8555
[49 : 64]:	0.8537  0.8531  0.8516  0.8507  0.8501  0.8491  0.8484  0.8475  0.8473  0.8454  0.8446  0.8445  0.8438  0.8429  0.8420  0.8403
2024-04-29 20:42:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:42:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #65: GFLOPs: 161.6332. Time: 639.4885 us. Best GFLOPs: 178.1639
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #66: GFLOPs: 158.1349. Time: 653.6354 us. Best GFLOPs: 178.1639
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #67: GFLOPs: 183.4344. Time: 563.4851 us. Best GFLOPs: 183.4344
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #68: GFLOPs: 79.1971. Time: 1305.1309 us. Best GFLOPs: 183.4344
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #69: GFLOPs: 242.3338. Time: 426.5296 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #70: GFLOPs: 128.0979. Time: 806.9030 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #71: GFLOPs: 126.3177. Time: 818.2746 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #72: GFLOPs: 204.0378. Time: 506.5853 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #73: GFLOPs: 95.9829. Time: 1076.8852 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #74: GFLOPs: 137.3270. Time: 752.6746 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #75: GFLOPs: 59.4246. Time: 1739.3912 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #76: GFLOPs: 125.0581. Time: 826.5163 us. Best GFLOPs: 242.3338
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #77: GFLOPs: 380.3087. Time: 271.7860 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #78: GFLOPs: 230.3526. Time: 448.7145 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #79: GFLOPs: 94.0394. Time: 1099.1413 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #80: GFLOPs: 208.1237. Time: 496.6399 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #81: GFLOPs: 149.0055. Time: 693.6830 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #82: GFLOPs: 208.2080. Time: 496.4390 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #83: GFLOPs: 200.2934. Time: 516.0558 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #84: GFLOPs: 171.2704. Time: 603.5052 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #85: GFLOPs: 182.3445. Time: 566.8531 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #86: GFLOPs: 168.4674. Time: 613.5464 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #87: GFLOPs: 162.0735. Time: 637.7512 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #88: GFLOPs: 150.9024. Time: 684.9631 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #89: GFLOPs: 168.3780. Time: 613.8721 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #90: GFLOPs: 166.9575. Time: 619.0950 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #91: GFLOPs: 168.9984. Time: 611.6184 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #92: GFLOPs: 221.2079. Time: 467.2644 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #93: GFLOPs: 182.2070. Time: 567.2810 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #94: GFLOPs: 214.9208. Time: 480.9333 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #95: GFLOPs: 214.0886. Time: 482.8027 us. Best GFLOPs: 380.3087
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #96: GFLOPs: 500.9528. Time: 206.3319 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #97: GFLOPs: 164.5928. Time: 627.9896 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #98: GFLOPs: 98.3126. Time: 1051.3668 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #99: GFLOPs: 211.1053. Time: 489.6257 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #100: GFLOPs: 194.4665. Time: 531.5185 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #101: GFLOPs: 97.4291. Time: 1060.9003 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #102: GFLOPs: 187.0327. Time: 552.6444 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #103: GFLOPs: 157.5347. Time: 656.1258 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #104: GFLOPs: 181.8162. Time: 568.5003 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #105: GFLOPs: 182.3668. Time: 566.7839 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #106: GFLOPs: 190.6072. Time: 542.2804 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #107: GFLOPs: 186.7748. Time: 553.4075 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #108: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(8) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(8) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(8) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #109: GFLOPs: 189.6548. Time: 545.0038 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #110: GFLOPs: 157.8029. Time: 655.0105 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #111: GFLOPs: 156.3350. Time: 661.1608 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #112: GFLOPs: 102.5126. Time: 1008.2909 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #113: GFLOPs: 168.6527. Time: 612.8723 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #114: GFLOPs: 211.1583. Time: 489.5026 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #115: GFLOPs: 190.0352. Time: 543.9127 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #116: GFLOPs: 183.5770. Time: 563.0475 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #117: GFLOPs: 195.7132. Time: 528.1329 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #118: GFLOPs: 187.3468. Time: 551.7179 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #119: GFLOPs: 172.7083. Time: 598.4805 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #120: GFLOPs: 96.4564. Time: 1071.5993 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #121: GFLOPs: 180.6089. Time: 572.3003 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #122: GFLOPs: 215.7813. Time: 479.0153 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #123: GFLOPs: 322.0669. Time: 320.9351 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #124: GFLOPs: 255.0717. Time: 405.2294 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #125: GFLOPs: 188.4237. Time: 548.5646 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #126: GFLOPs: 11.1859. Time: 9240.4299 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #127: GFLOPs: 8.6364. Time: 11968.1983 us. Best GFLOPs: 500.9528
2024-04-29 20:43:48 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #128: GFLOPs: 221.6778. Time: 466.2739 us. Best GFLOPs: 500.9528
2024-04-29 21:38:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:38:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:38:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 21:38:30 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 21:38:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 21:38:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 21:38:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 21:38:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 21:38:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8824  0.8512  0.8227  0.7433  0.7403  0.7268  0.7201  0.6999  0.6709  0.6692  0.6680  0.6505  0.6426  0.6378  0.6335  0.6290
[17 : 32]:	0.6204  0.6198  0.6087  0.6087  0.6076  0.6054  0.6053  0.5955  0.5926  0.5890  0.5692  0.5687  0.5666  0.5623  0.5623  0.5607
[33 : 48]:	0.5591  0.5562  0.5555  0.5555  0.5542  0.5501  0.5499  0.5499  0.5318  0.5281  0.5230  0.5221  0.5171  0.5161  0.5161  0.5101
[49 : 64]:	0.5101  0.5101  0.5100  0.5040  0.5022  0.5015  0.5013  0.5012  0.4991  0.4974  0.4967  0.4964  0.4938  0.4937  0.4929  0.4920
2024-04-29 21:38:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:38:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #129: GFLOPs: 256.3785. Time: 403.1638 us. Best GFLOPs: 500.9528
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #130: GFLOPs: 86.1272. Time: 1200.1145 us. Best GFLOPs: 500.9528
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #131: GFLOPs: 529.1843. Time: 195.3243 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #132: GFLOPs: 376.4965. Time: 274.5379 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #133: GFLOPs: 167.8398. Time: 615.8405 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #134: GFLOPs: 169.4808. Time: 609.8778 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #135: GFLOPs: 360.1659. Time: 286.9860 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #136: GFLOPs: 188.3994. Time: 548.6354 us. Best GFLOPs: 529.1843
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #137: GFLOPs: 540.1081. Time: 191.3738 us. Best GFLOPs: 540.1081
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #138: GFLOPs: 577.1288. Time: 179.0979 us. Best GFLOPs: 577.1288
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #139: GFLOPs: 167.6258. Time: 616.6270 us. Best GFLOPs: 577.1288
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #140: GFLOPs: 440.3256. Time: 234.7412 us. Best GFLOPs: 577.1288
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #141: GFLOPs: 998.4386. Time: 103.5242 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #142: GFLOPs: 287.4899. Time: 359.5346 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #143: GFLOPs: 695.8531. Time: 148.5408 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #144: GFLOPs: 321.2316. Time: 321.7696 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #145: GFLOPs: 121.0582. Time: 853.8253 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #146: GFLOPs: 365.9720. Time: 282.4330 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #147: GFLOPs: 323.3505. Time: 319.6610 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #148: GFLOPs: 320.7957. Time: 322.2069 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #149: GFLOPs: 149.3764. Time: 691.9606 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #150: GFLOPs: 152.8492. Time: 676.2389 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #151: GFLOPs: 180.4172. Time: 572.9086 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #152: GFLOPs: 68.7995. Time: 1502.3737 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #153: GFLOPs: 115.5799. Time: 894.2956 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #154: GFLOPs: 230.0028. Time: 449.3969 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #155: GFLOPs: 247.0670. Time: 418.3584 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #156: GFLOPs: 73.0294. Time: 1415.3549 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #157: GFLOPs: 248.0302. Time: 416.7337 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #158: GFLOPs: 201.6351. Time: 512.6219 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #159: GFLOPs: 201.9964. Time: 511.7049 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #160: GFLOPs: 335.1510. Time: 308.4059 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #161: GFLOPs: 201.9103. Time: 511.9233 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #162: GFLOPs: 478.8216. Time: 215.8686 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #163: GFLOPs: 402.4533. Time: 256.8312 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #164: GFLOPs: 289.7602. Time: 356.7176 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #165: GFLOPs: 191.2194. Time: 540.5443 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #166: GFLOPs: 166.6559. Time: 620.2156 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #167: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(392) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(392) // T.int64(28) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(392) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(392) // T.int64(28) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(392) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(392) // T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #168: GFLOPs: 26.9498. Time: 3835.3791 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #169: GFLOPs: 94.8317. Time: 1089.9579 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #170: GFLOPs: 118.1783. Time: 874.6322 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #171: GFLOPs: 118.2757. Time: 873.9119 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #172: GFLOPs: 201.0270. Time: 514.1725 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #173: GFLOPs: 196.3402. Time: 526.4464 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #174: GFLOPs: 122.2136. Time: 845.7537 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #175: GFLOPs: 203.0601. Time: 509.0244 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #176: GFLOPs: 176.2434. Time: 586.4763 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #177: GFLOPs: 187.9423. Time: 549.9697 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #178: GFLOPs: 216.7124. Time: 476.9573 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #179: GFLOPs: 96.0733. Time: 1075.8723 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #180: GFLOPs: 97.9873. Time: 1054.8569 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #181: GFLOPs: 420.3293. Time: 245.9086 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #182: GFLOPs: 173.8751. Time: 594.4643 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #183: GFLOPs: 168.7297. Time: 612.5925 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #184: GFLOPs: 27.8146. Time: 3716.1298 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #185: GFLOPs: 314.4559. Time: 328.7029 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #186: GFLOPs: 201.5013. Time: 512.9622 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #187: GFLOPs: 178.6711. Time: 578.5075 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #188: GFLOPs: 179.8771. Time: 574.6288 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #189: GFLOPs: 445.3993. Time: 232.0672 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #190: GFLOPs: 104.0614. Time: 993.2843 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #191: GFLOPs: 23.3483. Time: 4426.9818 us. Best GFLOPs: 998.4386
2024-04-29 21:40:31 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #192: GFLOPs: 21.2326. Time: 4868.1045 us. Best GFLOPs: 998.4386
2024-04-29 23:13:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:13:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:13:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:13:41 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:13:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:13:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:13:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:14:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:14:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9817  0.9349  0.8955  0.8585  0.8585  0.8509  0.8509  0.8509  0.8476  0.8476  0.8159  0.8015  0.7937  0.7779  0.7742  0.7742
[17 : 32]:	0.7715  0.7605  0.7464  0.7394  0.7080  0.7037  0.6978  0.6976  0.6976  0.6899  0.6876  0.6841  0.6806  0.6766  0.6704  0.6598
[33 : 48]:	0.6492  0.6426  0.6398  0.6396  0.6348  0.6348  0.6308  0.6306  0.6288  0.6282  0.6259  0.6145  0.6140  0.6071  0.6048  0.6019
[49 : 64]:	0.6019  0.6018  0.6013  0.5935  0.5932  0.5881  0.5866  0.5855  0.5840  0.5757  0.5737  0.5737  0.5729  0.5691  0.5679  0.5667
2024-04-29 23:14:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:14:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #193: GFLOPs: 987.0397. Time: 104.7198 us. Best GFLOPs: 998.4386
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #194: GFLOPs: 1027.0278. Time: 100.6424 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #195: GFLOPs: 980.7059. Time: 105.3961 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #196: GFLOPs: 986.7029. Time: 104.7555 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #197: GFLOPs: 984.0111. Time: 105.0421 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #198: GFLOPs: 896.0422. Time: 115.3546 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #199: GFLOPs: 880.1844. Time: 117.4328 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #200: GFLOPs: 906.4106. Time: 114.0350 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #201: GFLOPs: 1026.3954. Time: 100.7044 us. Best GFLOPs: 1027.0278
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #202: GFLOPs: 1034.9413. Time: 99.8729 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #203: GFLOPs: 965.8740. Time: 107.0145 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #204: GFLOPs: 892.2454. Time: 115.8454 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #205: GFLOPs: 778.8848. Time: 132.7058 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #206: GFLOPs: 898.7562. Time: 115.0062 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #207: GFLOPs: 899.9545. Time: 114.8531 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #208: GFLOPs: 885.5133. Time: 116.7262 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #209: GFLOPs: 1012.2836. Time: 102.1083 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #210: GFLOPs: 949.7156. Time: 108.8353 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #211: GFLOPs: 591.4050. Time: 174.7746 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #212: GFLOPs: 1008.1934. Time: 102.5226 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #213: GFLOPs: 965.6875. Time: 107.0352 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #214: GFLOPs: 846.9037. Time: 122.0476 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #215: GFLOPs: 586.9077. Time: 176.1138 us. Best GFLOPs: 1034.9413
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #216: GFLOPs: 1037.4246. Time: 99.6338 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #217: GFLOPs: 1032.4709. Time: 100.1118 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #218: GFLOPs: 875.4565. Time: 118.0670 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #219: GFLOPs: 567.4459. Time: 182.1541 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #220: GFLOPs: 572.3093. Time: 180.6061 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #221: GFLOPs: 666.8998. Time: 154.9896 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #222: GFLOPs: 734.8230. Time: 140.6632 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #223: GFLOPs: 658.4941. Time: 156.9681 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #224: GFLOPs: 781.6950. Time: 132.2288 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #225: GFLOPs: 989.7524. Time: 104.4327 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #226: GFLOPs: 865.6156. Time: 119.4093 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #227: GFLOPs: 592.1144. Time: 174.5652 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #228: GFLOPs: 603.5615. Time: 171.2544 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #229: GFLOPs: 640.8350. Time: 161.2936 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #230: GFLOPs: 738.5755. Time: 139.9485 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #231: GFLOPs: 576.9161. Time: 179.1639 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #232: GFLOPs: 522.7730. Time: 197.7198 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #233: GFLOPs: 478.6249. Time: 215.9573 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #234: GFLOPs: 580.8229. Time: 177.9588 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #235: GFLOPs: 26.9217. Time: 3839.3780 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #236: GFLOPs: 461.6388. Time: 223.9035 us. Best GFLOPs: 1037.4246
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #237: GFLOPs: 1053.2456. Time: 98.1372 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #238: GFLOPs: 570.5592. Time: 181.1601 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #239: GFLOPs: 378.9295. Time: 272.7752 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #240: GFLOPs: 482.4329. Time: 214.2527 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #241: GFLOPs: 416.6699. Time: 248.0682 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #242: GFLOPs: 856.3919. Time: 120.6954 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #243: GFLOPs: 494.1254. Time: 209.1828 us. Best GFLOPs: 1053.2456
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #244: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(64), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #245: GFLOPs: 1115.2510. Time: 92.6810 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #246: GFLOPs: 693.1342. Time: 149.1234 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #247: GFLOPs: 522.5639. Time: 197.7989 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #248: GFLOPs: 758.8124. Time: 136.2162 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #249: GFLOPs: 951.7540. Time: 108.6022 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #250: GFLOPs: 568.9872. Time: 181.6606 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #251: GFLOPs: 476.6724. Time: 216.8419 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #252: GFLOPs: 958.3268. Time: 107.8573 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #253: GFLOPs: 805.1403. Time: 128.3783 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #254: GFLOPs: 86.8758. Time: 1189.7744 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #255: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(32), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(32), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 23:15:55 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #256: GFLOPs: 36.2966. Time: 2847.7169 us. Best GFLOPs: 1115.2510
2024-04-29 23:15:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:15:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:15:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:15:58 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:16:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:16:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:16:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:16:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:16:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9385  0.9385  0.9311  0.9227  0.9221  0.9221  0.9221  0.9196  0.9103  0.9096  0.9096  0.9068  0.9068  0.9068  0.9061  0.9055
[17 : 32]:	0.9054  0.9054  0.9047  0.8987  0.8985  0.8985  0.8947  0.8925  0.8901  0.8901  0.8834  0.8834  0.8810  0.8808  0.8793  0.8793
[33 : 48]:	0.8777  0.8741  0.8741  0.8586  0.8541  0.8488  0.8479  0.8476  0.8431  0.8421  0.8358  0.8341  0.8341  0.8320  0.8277  0.8175
[49 : 64]:	0.8175  0.8164  0.8161  0.8160  0.8150  0.8146  0.8146  0.8110  0.8107  0.8093  0.8085  0.8082  0.8082  0.8070  0.8043  0.8041
2024-04-29 23:16:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:16:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #257: GFLOPs: 459.5222. Time: 224.9349 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #258: GFLOPs: 1033.9781. Time: 99.9659 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #259: GFLOPs: 1031.4974. Time: 100.2063 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #260: GFLOPs: 1025.3655. Time: 100.8056 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #261: GFLOPs: 1015.9918. Time: 101.7356 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #262: GFLOPs: 1038.0757. Time: 99.5713 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #263: GFLOPs: 1038.6087. Time: 99.5202 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #264: GFLOPs: 1068.7555. Time: 96.7130 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #265: GFLOPs: 1012.4846. Time: 102.0880 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #266: GFLOPs: 1089.5771. Time: 94.8648 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #267: GFLOPs: 1090.3689. Time: 94.7960 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #268: GFLOPs: 570.1382. Time: 181.2939 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #269: GFLOPs: 551.5320. Time: 187.4099 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #270: GFLOPs: 567.4956. Time: 182.1381 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #271: GFLOPs: 812.0505. Time: 127.2859 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #272: GFLOPs: 1003.0063. Time: 103.0528 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #273: GFLOPs: 1042.8263. Time: 99.1177 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #274: GFLOPs: 1016.4241. Time: 101.6924 us. Best GFLOPs: 1115.2510
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #275: GFLOPs: 1115.4307. Time: 92.6661 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #276: GFLOPs: 982.9251. Time: 105.1581 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #277: GFLOPs: 1049.0592. Time: 98.5288 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #278: GFLOPs: 1046.9277. Time: 98.7294 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #279: GFLOPs: 983.6277. Time: 105.0830 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #280: GFLOPs: 1047.7885. Time: 98.6483 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #281: GFLOPs: 1009.6530. Time: 102.3743 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #282: GFLOPs: 994.6244. Time: 103.9212 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #283: GFLOPs: 1003.5602. Time: 102.9959 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #284: GFLOPs: 1047.7664. Time: 98.6504 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #285: GFLOPs: 988.6296. Time: 104.5513 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #286: GFLOPs: 1015.9312. Time: 101.7417 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #287: GFLOPs: 987.0633. Time: 104.7173 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #288: GFLOPs: 990.9732. Time: 104.3041 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #289: GFLOPs: 504.8379. Time: 204.7441 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #290: GFLOPs: 988.0850. Time: 104.6090 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #291: GFLOPs: 1013.8930. Time: 101.9462 us. Best GFLOPs: 1115.4307
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #292: GFLOPs: 1124.1475. Time: 91.9475 us. Best GFLOPs: 1124.1475
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #293: GFLOPs: 928.7077. Time: 111.2972 us. Best GFLOPs: 1124.1475
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #294: GFLOPs: 962.7624. Time: 107.3604 us. Best GFLOPs: 1124.1475
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #295: GFLOPs: 926.6051. Time: 111.5497 us. Best GFLOPs: 1124.1475
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #296: GFLOPs: 962.1408. Time: 107.4298 us. Best GFLOPs: 1124.1475
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #297: GFLOPs: 1159.9833. Time: 89.1069 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #298: GFLOPs: 988.2783. Time: 104.5885 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #299: GFLOPs: 1044.7971. Time: 98.9307 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #300: GFLOPs: 1133.3065. Time: 91.2044 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #301: GFLOPs: 1086.6440. Time: 95.1209 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #302: GFLOPs: 1080.4426. Time: 95.6669 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #303: GFLOPs: 1051.3004. Time: 98.3188 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #304: GFLOPs: 931.6776. Time: 110.9424 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #305: GFLOPs: 975.9333. Time: 105.9115 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #306: GFLOPs: 921.0193. Time: 112.2263 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #307: GFLOPs: 1156.2355. Time: 89.3958 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #308: GFLOPs: 929.0444. Time: 111.2569 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #309: GFLOPs: 766.5935. Time: 134.8336 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #310: GFLOPs: 869.3211. Time: 118.9003 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #311: GFLOPs: 863.8497. Time: 119.6534 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #312: GFLOPs: 899.3981. Time: 114.9241 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #313: GFLOPs: 879.6861. Time: 117.4994 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #314: GFLOPs: 889.0217. Time: 116.2655 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #315: GFLOPs: 1007.6029. Time: 102.5826 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #316: GFLOPs: 899.0001. Time: 114.9750 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #317: GFLOPs: 905.2919. Time: 114.1759 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #318: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(64)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init * T.int64(64) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(64)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 * T.int64(64) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 64])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #319: GFLOPs: 20.6294. Time: 5010.4438 us. Best GFLOPs: 1159.9833
2024-04-29 23:18:10 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #320: GFLOPs: 9.3388. Time: 11068.1279 us. Best GFLOPs: 1159.9833
2024-04-29 23:43:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:43:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:43:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:43:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:43:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:43:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:43:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:44:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-29 23:44:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9891  0.9712  0.9452  0.9452  0.9414  0.9412  0.9392  0.9366  0.9278  0.9252  0.9240  0.9140  0.9125  0.9087  0.9087  0.9087
[17 : 32]:	0.9087  0.9084  0.9064  0.9029  0.9018  0.9018  0.9006  0.8994  0.8961  0.8916  0.8913  0.8890  0.8821  0.8815  0.8813  0.8788
[33 : 48]:	0.8776  0.8717  0.8713  0.8711  0.8710  0.8708  0.8688  0.8662  0.8654  0.8654  0.8574  0.8563  0.8542  0.8536  0.8516  0.8508
[49 : 64]:	0.8502  0.8502  0.8483  0.8483  0.8483  0.8483  0.8483  0.8483  0.8479  0.8468  0.8465  0.8435  0.8434  0.8388  0.8388  0.8369
2024-04-29 23:44:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:44:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #321: GFLOPs: 504.8841. Time: 204.7253 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #322: GFLOPs: 1084.4713. Time: 95.3115 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #323: GFLOPs: 1033.6212. Time: 100.0004 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #324: GFLOPs: 1044.0684. Time: 98.9998 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #325: GFLOPs: 1077.4730. Time: 95.9305 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #326: GFLOPs: 1140.3698. Time: 90.6395 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #327: GFLOPs: 961.8736. Time: 107.4596 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #328: GFLOPs: 1062.2960. Time: 97.3011 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #329: GFLOPs: 1141.0957. Time: 90.5818 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #330: GFLOPs: 600.5522. Time: 172.1125 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #331: GFLOPs: 1050.3388. Time: 98.4088 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #332: GFLOPs: 719.2235. Time: 143.7141 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #333: GFLOPs: 1011.2322. Time: 102.2145 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #334: GFLOPs: 1062.4275. Time: 97.2890 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #335: GFLOPs: 1049.4256. Time: 98.4944 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #336: GFLOPs: 1053.4257. Time: 98.1204 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #337: GFLOPs: 1064.6598. Time: 97.0851 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #338: GFLOPs: 1086.7333. Time: 95.1131 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #339: GFLOPs: 1090.0631. Time: 94.8225 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #340: GFLOPs: 1053.9717. Time: 98.0696 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #341: GFLOPs: 963.0838. Time: 107.3246 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #342: GFLOPs: 1047.8540. Time: 98.6421 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #343: GFLOPs: 1080.1798. Time: 95.6901 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #344: GFLOPs: 1049.0956. Time: 98.5254 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #345: GFLOPs: 1106.7331. Time: 93.3943 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #346: GFLOPs: 999.7983. Time: 103.3834 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #347: GFLOPs: 1079.4406. Time: 95.7557 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #348: GFLOPs: 1049.6406. Time: 98.4742 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #349: GFLOPs: 987.0791. Time: 104.7156 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #350: GFLOPs: 1030.9762. Time: 100.2570 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #351: GFLOPs: 1009.9201. Time: 102.3473 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #352: GFLOPs: 1014.6188. Time: 101.8733 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #353: GFLOPs: 1026.3895. Time: 100.7050 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #354: GFLOPs: 1082.1120. Time: 95.5193 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #355: GFLOPs: 1026.1699. Time: 100.7266 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #356: GFLOPs: 1056.4708. Time: 97.8376 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #357: GFLOPs: 1035.5392. Time: 99.8152 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #358: GFLOPs: 891.0543. Time: 116.0003 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #359: GFLOPs: 1035.1668. Time: 99.8511 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #360: GFLOPs: 1007.4346. Time: 102.5998 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #361: GFLOPs: 1027.3722. Time: 100.6087 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #362: GFLOPs: 1021.5807. Time: 101.1790 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #363: GFLOPs: 983.9816. Time: 105.0452 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #364: GFLOPs: 966.6010. Time: 106.9340 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #365: GFLOPs: 1012.7725. Time: 102.0590 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #366: GFLOPs: 1130.5128. Time: 91.4298 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #367: GFLOPs: 1033.9173. Time: 99.9718 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #368: GFLOPs: 1060.7579. Time: 97.4422 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #369: GFLOPs: 1123.6700. Time: 91.9866 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #370: GFLOPs: 980.9559. Time: 105.3692 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #371: GFLOPs: 1004.5436. Time: 102.8950 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #372: GFLOPs: 987.0136. Time: 104.7225 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #373: GFLOPs: 926.9563. Time: 111.5075 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #374: GFLOPs: 999.4590. Time: 103.4185 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #375: GFLOPs: 991.6116. Time: 104.2369 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #376: GFLOPs: 1001.0247. Time: 103.2568 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #377: GFLOPs: 916.5960. Time: 112.7679 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #378: GFLOPs: 1078.4453. Time: 95.8440 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #379: GFLOPs: 1135.7075. Time: 91.0116 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #380: GFLOPs: 995.3951. Time: 103.8407 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #381: GFLOPs: 1048.7390. Time: 98.5589 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #382: GFLOPs: 151.6756. Time: 681.4713 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #383: GFLOPs: 50.9162. Time: 2030.0531 us. Best GFLOPs: 1159.9833
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #384: GFLOPs: 60.9042. Time: 1697.1339 us. Best GFLOPs: 1159.9833
2024-04-30 01:19:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:19:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:19:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-30 01:19:40 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:19:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-30 01:19:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-30 01:19:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-30 01:20:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x647db68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2faab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6bde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x11615a18)]: 0 failure(s)
2024-04-30 01:20:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9573  0.9559  0.9524  0.9524  0.9392  0.9303  0.9303  0.9259  0.9249  0.9206  0.9206  0.9201  0.9191  0.9143  0.9140  0.9129
[17 : 32]:	0.9129  0.9119  0.9119  0.9112  0.9089  0.9089  0.9077  0.9053  0.9044  0.9044  0.9023  0.9023  0.9019  0.9019  0.8990  0.8986
[33 : 48]:	0.8955  0.8947  0.8947  0.8946  0.8944  0.8944  0.8944  0.8911  0.8880  0.8871  0.8861  0.8848  0.8845  0.8839  0.8803  0.8756
[49 : 64]:	0.8756  0.8746  0.8738  0.8719  0.8701  0.8701  0.8701  0.8689  0.8688  0.8688  0.8678  0.8656  0.8652  0.8637  0.8635  0.8635
2024-04-30 01:20:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:20:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #385: GFLOPs: 1122.7887. Time: 92.0588 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #386: GFLOPs: 1140.5949. Time: 90.6216 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #387: GFLOPs: 915.7921. Time: 112.8668 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #388: GFLOPs: 949.0763. Time: 108.9086 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #389: GFLOPs: 1131.3549. Time: 91.3617 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #390: GFLOPs: 1094.4769. Time: 94.4401 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #391: GFLOPs: 1102.5269. Time: 93.7506 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #392: GFLOPs: 1144.6365. Time: 90.3016 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #393: GFLOPs: 1123.2581. Time: 92.0203 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #394: GFLOPs: 1088.8695. Time: 94.9265 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #395: GFLOPs: 1056.0374. Time: 97.8777 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #396: GFLOPs: 1157.1610. Time: 89.3243 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #397: GFLOPs: 1033.3565. Time: 100.0260 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #398: GFLOPs: 1033.6744. Time: 99.9953 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #399: GFLOPs: 1057.9384. Time: 97.7019 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #400: GFLOPs: 1066.5435. Time: 96.9136 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #401: GFLOPs: 1061.7079. Time: 97.3550 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #402: GFLOPs: 1035.1642. Time: 99.8514 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #403: GFLOPs: 1045.9096. Time: 98.8255 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #404: GFLOPs: 1024.0701. Time: 100.9331 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #405: GFLOPs: 1117.6934. Time: 92.4785 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #406: GFLOPs: 1074.4555. Time: 96.1999 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #407: GFLOPs: 1132.7088. Time: 91.2525 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #408: GFLOPs: 1084.5927. Time: 95.3008 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #409: GFLOPs: 1049.4759. Time: 98.4897 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #410: GFLOPs: 1041.1200. Time: 99.2802 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #411: GFLOPs: 1035.4235. Time: 99.8264 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #412: GFLOPs: 1042.0962. Time: 99.1872 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #413: GFLOPs: 489.4390. Time: 211.1858 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #414: GFLOPs: 545.7627. Time: 189.3910 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #415: GFLOPs: 543.2852. Time: 190.2547 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #416: GFLOPs: 539.2250. Time: 191.6873 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #417: GFLOPs: 503.6959. Time: 205.2083 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #418: GFLOPs: 518.8993. Time: 199.1958 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #419: GFLOPs: 495.3973. Time: 208.6458 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #420: GFLOPs: 547.8599. Time: 188.6660 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #421: GFLOPs: 517.6125. Time: 199.6910 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #422: GFLOPs: 528.6416. Time: 195.5248 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #423: GFLOPs: 535.6045. Time: 192.9830 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #424: GFLOPs: 519.3343. Time: 199.0289 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #425: GFLOPs: 513.8951. Time: 201.1355 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #426: GFLOPs: 525.7765. Time: 196.5903 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #427: GFLOPs: 498.5998. Time: 207.3057 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #428: GFLOPs: 480.0941. Time: 215.2965 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #429: GFLOPs: 453.1977. Time: 228.0739 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #430: GFLOPs: 518.6617. Time: 199.2871 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #431: GFLOPs: 498.7613. Time: 207.2385 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #432: GFLOPs: 449.0829. Time: 230.1636 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #433: GFLOPs: 458.1450. Time: 225.6110 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #434: GFLOPs: 989.8537. Time: 104.4221 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #435: GFLOPs: 1041.9841. Time: 99.1978 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #436: GFLOPs: 1020.8943. Time: 101.2471 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #437: GFLOPs: 1091.1638. Time: 94.7269 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #438: GFLOPs: 1018.5141. Time: 101.4837 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #439: GFLOPs: 1003.2685. Time: 103.0258 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #440: GFLOPs: 1029.6185. Time: 100.3892 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #441: GFLOPs: 991.7700. Time: 104.2203 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #442: GFLOPs: 1018.9101. Time: 101.4442 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #443: GFLOPs: 1055.5419. Time: 97.9237 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #444: GFLOPs: 1040.1997. Time: 99.3680 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #445: GFLOPs: 996.9348. Time: 103.6804 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #446: GFLOPs: 6.0973. Time: 16952.2607 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #447: GFLOPs: 8.9721. Time: 11520.4246 us. Best GFLOPs: 1159.9833
2024-04-30 01:22:01 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2] Trial #448: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
