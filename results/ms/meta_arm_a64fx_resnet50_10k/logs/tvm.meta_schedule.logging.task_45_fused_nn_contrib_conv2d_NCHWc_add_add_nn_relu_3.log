2024-04-29 19:39:14 [INFO] [task_scheduler.cc:160] Initializing Task #45: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3"
2024-04-29 19:39:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:39:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:39:15 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 19:39:15 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 19:39:15 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
2024-04-29 20:26:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:26:12 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:26:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 20:26:15 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:26:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 20:26:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 20:26:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 20:26:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 20:26:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9993  0.9987  0.9986  0.9981  0.9969  0.9963  0.9962  0.9961  0.9961  0.9951  0.9934  0.9931  0.9931  0.9930  0.9925
[17 : 32]:	0.9920  0.9919  0.9917  0.9917  0.9905  0.9897  0.9890  0.9888  0.9878  0.9878  0.9867  0.9857  0.9854  0.9851  0.9851  0.9841
[33 : 48]:	0.9840  0.9837  0.9830  0.9829  0.9827  0.9824  0.9815  0.9807  0.9805  0.9804  0.9800  0.9795  0.9793  0.9793  0.9792  0.9782
[49 : 64]:	0.9782  0.9781  0.9777  0.9773  0.9744  0.9740  0.9737  0.9734  0.9733  0.9732  0.9703  0.9696  0.9693  0.9685  0.9681  0.9678
2024-04-29 20:26:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:26:28 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #1: GFLOPs: 4.9291. Time: 20908.6292 us. Best GFLOPs: 4.9291
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #2: GFLOPs: 2.5103. Time: 41055.0717 us. Best GFLOPs: 4.9291
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #3: GFLOPs: 30.0589. Time: 3428.6532 us. Best GFLOPs: 30.0589
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #4: GFLOPs: 1.6522. Time: 62377.3707 us. Best GFLOPs: 30.0589
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #5: GFLOPs: 185.4891. Time: 555.6204 us. Best GFLOPs: 185.4891
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #6: GFLOPs: 17.8093. Time: 5786.9426 us. Best GFLOPs: 185.4891
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #7: GFLOPs: 576.7986. Time: 178.6785 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #9: GFLOPs: 122.3852. Time: 842.1073 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #10: GFLOPs: 7.1834. Time: 14347.1931 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #11: GFLOPs: 63.9357. Time: 1611.9557 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #12: GFLOPs: 9.0746. Time: 11357.0858 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #13: GFLOPs: 1.2485. Time: 82547.2497 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #14: GFLOPs: 8.2446. Time: 12500.4269 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #15: GFLOPs: 134.8550. Time: 764.2394 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #16: GFLOPs: 15.0575. Time: 6844.5310 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #17: GFLOPs: 91.0099. Time: 1132.4207 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #19: GFLOPs: 1.7169. Time: 60028.2470 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #20: GFLOPs: 16.6998. Time: 6171.4175 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #21: GFLOPs: 4.3513. Time: 23685.2334 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #22: GFLOPs: 16.5670. Time: 6220.9010 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #23: GFLOPs: 74.2816. Time: 1387.4433 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #24: GFLOPs: 11.3428. Time: 9086.1068 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #26: GFLOPs: 39.6202. Time: 2601.2371 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #27: GFLOPs: 191.7262. Time: 537.5453 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #28: GFLOPs: 26.5912. Time: 3875.7790 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 32, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #30: GFLOPs: 76.0773. Time: 1354.6942 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #31: GFLOPs: 1.0599. Time: 97236.9927 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #32: GFLOPs: 61.6506. Time: 1671.7022 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #33: GFLOPs: 130.4654. Time: 789.9530 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #34: GFLOPs: 3.4383. Time: 29974.5668 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #35: GFLOPs: 108.3647. Time: 951.0616 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #36: GFLOPs: 84.3670. Time: 1221.5861 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #37: GFLOPs: 5.6378. Time: 18280.3177 us. Best GFLOPs: 576.7986
2024-04-29 20:34:22 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #38: GFLOPs: 3.1869. Time: 32339.2230 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + ax1)
                    v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #40: GFLOPs: 7.2560. Time: 14203.5661 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #41: GFLOPs: 3.7308. Time: 27624.1528 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #42: GFLOPs: 1.6427. Time: 62737.5397 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #43: GFLOPs: 59.6327. Time: 1728.2722 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #44: GFLOPs: 3.6608. Time: 28152.4708 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #45: GFLOPs: 77.1793. Time: 1335.3521 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #46: GFLOPs: 95.2774. Time: 1081.6988 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #47: GFLOPs: 109.7104. Time: 939.3963 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #48: GFLOPs: 31.4195. Time: 3280.1725 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #49: GFLOPs: 18.9526. Time: 5437.8431 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #50: GFLOPs: 14.9087. Time: 6912.8301 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #51: GFLOPs: 75.8497. Time: 1358.7604 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #52: GFLOPs: 8.7543. Time: 11772.6454 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #53: GFLOPs: 64.3626. Time: 1601.2629 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #54: GFLOPs: 32.5877. Time: 3162.5896 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #55: GFLOPs: 160.8979. Time: 640.5398 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #57: GFLOPs: 39.2479. Time: 2625.9102 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #58: GFLOPs: 34.3831. Time: 2997.4459 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #59: GFLOPs: 1.1085. Time: 92973.5877 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #60: GFLOPs: 42.6134. Time: 2418.5207 us. Best GFLOPs: 576.7986
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #61: GFLOPs: 634.6314. Time: 162.3958 us. Best GFLOPs: 634.6314
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #62: GFLOPs: 80.4850. Time: 1280.5053 us. Best GFLOPs: 634.6314
2024-04-29 20:34:23 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_add_1", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b0)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 22:03:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:03:45 [INFO] [evolutionary_search.cc:715] Picked top 56 candidate(s) from database
2024-04-29 22:03:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 22:03:48 [INFO] [evolutionary_search.cc:723] Sampled 456 candidate(s)
2024-04-29 22:03:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 22:03:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 22:04:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 22:04:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 22:04:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9895  0.9516  0.9303  0.9244  0.9244  0.9244  0.9123  0.9123  0.8999  0.8999  0.8880  0.8880  0.8729  0.8729  0.8532  0.8477
[17 : 32]:	0.8477  0.8362  0.8362  0.8340  0.8320  0.7971  0.7971  0.7880  0.7880  0.7820  0.7751  0.7749  0.7749  0.7749  0.7749  0.7720
[33 : 48]:	0.7637  0.7602  0.7582  0.7356  0.7317  0.7294  0.7119  0.7100  0.6994  0.6983  0.6937  0.6937  0.6482  0.6430  0.6380  0.6380
[49 : 64]:	0.6362  0.6362  0.6321  0.6302  0.6270  0.6084  0.6039  0.5867  0.5691  0.5622  0.5622  0.5537  0.5402  0.5351  0.5333  0.5316
2024-04-29 22:04:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:04:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #64: GFLOPs: 543.4260. Time: 189.6514 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #65: GFLOPs: 619.5456. Time: 166.3501 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #66: GFLOPs: 622.7931. Time: 165.4827 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #67: GFLOPs: 448.6766. Time: 229.7011 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #68: GFLOPs: 461.7099. Time: 223.2170 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #69: GFLOPs: 469.6127. Time: 219.4606 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #70: GFLOPs: 567.8345. Time: 181.4992 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #71: GFLOPs: 540.9296. Time: 190.5267 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #72: GFLOPs: 451.3308. Time: 228.3503 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #73: GFLOPs: 531.8126. Time: 193.7929 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #74: GFLOPs: 419.8638. Time: 245.4641 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #75: GFLOPs: 464.9343. Time: 221.6690 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #76: GFLOPs: 572.1531. Time: 180.1292 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #77: GFLOPs: 480.2716. Time: 214.5900 us. Best GFLOPs: 634.6314
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #78: GFLOPs: 672.3254. Time: 153.2911 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #79: GFLOPs: 367.1950. Time: 280.6724 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #80: GFLOPs: 349.1593. Time: 295.1704 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #81: GFLOPs: 411.5424. Time: 250.4275 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #82: GFLOPs: 416.9947. Time: 247.1530 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #83: GFLOPs: 421.7598. Time: 244.3607 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #84: GFLOPs: 343.6102. Time: 299.9372 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #85: GFLOPs: 327.7659. Time: 314.4363 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #86: GFLOPs: 378.1106. Time: 272.5697 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #87: GFLOPs: 377.8166. Time: 272.7818 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #88: GFLOPs: 372.8283. Time: 276.4316 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #89: GFLOPs: 456.3545. Time: 225.8365 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #90: GFLOPs: 381.2295. Time: 270.3398 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #91: GFLOPs: 79.9084. Time: 1289.7458 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #92: GFLOPs: 79.5425. Time: 1295.6787 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #93: GFLOPs: 592.5575. Time: 173.9266 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #94: GFLOPs: 390.9866. Time: 263.5934 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #95: GFLOPs: 382.8308. Time: 269.2090 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #96: GFLOPs: 507.5086. Time: 203.0734 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #97: GFLOPs: 593.6560. Time: 173.6048 us. Best GFLOPs: 672.3254
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #98: GFLOPs: 720.8766. Time: 142.9669 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #99: GFLOPs: 393.4251. Time: 261.9597 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #100: GFLOPs: 573.7693. Time: 179.6218 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #101: GFLOPs: 366.5788. Time: 281.1442 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #102: GFLOPs: 359.4469. Time: 286.7224 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #103: GFLOPs: 80.8550. Time: 1274.6464 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #104: GFLOPs: 81.4777. Time: 1264.9038 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #105: GFLOPs: 164.0091. Time: 628.3890 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #106: GFLOPs: 312.7248. Time: 329.5598 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #107: GFLOPs: 313.0896. Time: 329.1757 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #108: GFLOPs: 316.2928. Time: 325.8421 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #109: GFLOPs: 627.4662. Time: 164.2503 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #110: GFLOPs: 122.8962. Time: 838.6063 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #111: GFLOPs: 114.6876. Time: 898.6284 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #112: GFLOPs: 96.1928. Time: 1071.4052 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #113: GFLOPs: 96.6816. Time: 1065.9888 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #114: GFLOPs: 629.1664. Time: 163.8064 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #115: GFLOPs: 231.9078. Time: 444.4072 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #116: GFLOPs: 376.6715. Time: 273.6111 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #117: GFLOPs: 378.4823. Time: 272.3021 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #118: GFLOPs: 582.1290. Time: 177.0424 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #119: GFLOPs: 81.7403. Time: 1260.8414 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #120: GFLOPs: 378.3623. Time: 272.3884 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #121: GFLOPs: 573.6857. Time: 179.6480 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #122: GFLOPs: 562.6801. Time: 183.1618 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #123: GFLOPs: 286.2469. Time: 360.0440 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #124: GFLOPs: 300.7756. Time: 342.6524 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #125: GFLOPs: 9.8357. Time: 10478.3556 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #126: GFLOPs: 9.0185. Time: 11427.7417 us. Best GFLOPs: 720.8766
2024-04-29 22:05:39 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #127: GFLOPs: 160.5266. Time: 642.0212 us. Best GFLOPs: 720.8766
2024-04-29 23:08:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:08:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:08:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 23:08:56 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:09:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 23:09:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 23:09:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 23:09:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-29 23:09:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9971  0.9971  0.9415  0.9386  0.9269  0.9259  0.8932  0.8906  0.8862  0.8757  0.8750  0.8738  0.8651  0.8632  0.8632  0.8632
[17 : 32]:	0.8509  0.8448  0.8425  0.8353  0.8351  0.8309  0.8246  0.8246  0.8229  0.8229  0.8219  0.8202  0.8192  0.8111  0.8071  0.8071
[33 : 48]:	0.8071  0.8071  0.8046  0.8036  0.8036  0.8012  0.8008  0.8004  0.7929  0.7929  0.7916  0.7859  0.7841  0.7774  0.7774  0.7772
[49 : 64]:	0.7675  0.7675  0.7675  0.7670  0.7670  0.7659  0.7587  0.7525  0.7516  0.7477  0.7477  0.7473  0.7443  0.7439  0.7439  0.7397
2024-04-29 23:09:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:09:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #128: GFLOPs: 409.7060. Time: 251.5499 us. Best GFLOPs: 720.8766
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #129: GFLOPs: 396.7417. Time: 259.7698 us. Best GFLOPs: 720.8766
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #130: GFLOPs: 868.7281. Time: 118.6349 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #131: GFLOPs: 750.5363. Time: 137.3172 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #132: GFLOPs: 580.3020. Time: 177.5998 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #133: GFLOPs: 729.4210. Time: 141.2922 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #134: GFLOPs: 675.8933. Time: 152.4819 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #135: GFLOPs: 640.2383. Time: 160.9737 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #136: GFLOPs: 644.3437. Time: 159.9480 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #137: GFLOPs: 733.8568. Time: 140.4382 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #138: GFLOPs: 768.4974. Time: 134.1078 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #139: GFLOPs: 843.2965. Time: 122.2127 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #140: GFLOPs: 552.4538. Time: 186.5523 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #141: GFLOPs: 632.6705. Time: 162.8992 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #142: GFLOPs: 628.0921. Time: 164.0866 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #143: GFLOPs: 628.5873. Time: 163.9573 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #144: GFLOPs: 648.0831. Time: 159.0251 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #145: GFLOPs: 539.2854. Time: 191.1075 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #146: GFLOPs: 703.7332. Time: 146.4497 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #147: GFLOPs: 537.1203. Time: 191.8779 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #148: GFLOPs: 769.6194. Time: 133.9123 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #149: GFLOPs: 555.8084. Time: 185.4263 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #150: GFLOPs: 194.6498. Time: 529.4714 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #151: GFLOPs: 194.9787. Time: 528.5783 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #152: GFLOPs: 257.5648. Time: 400.1381 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #153: GFLOPs: 556.3606. Time: 185.2423 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #154: GFLOPs: 637.5145. Time: 161.6614 us. Best GFLOPs: 868.7281
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #155: GFLOPs: 879.5815. Time: 117.1711 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #156: GFLOPs: 324.9001. Time: 317.2098 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #157: GFLOPs: 562.0639. Time: 183.3626 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #158: GFLOPs: 470.3464. Time: 219.1183 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #159: GFLOPs: 565.7409. Time: 182.1709 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #160: GFLOPs: 471.9332. Time: 218.3816 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #161: GFLOPs: 563.9732. Time: 182.7419 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #162: GFLOPs: 543.3540. Time: 189.6765 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #163: GFLOPs: 570.7839. Time: 180.5613 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #164: GFLOPs: 571.3624. Time: 180.3785 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #165: GFLOPs: 555.8874. Time: 185.4000 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #166: GFLOPs: 391.0344. Time: 263.5612 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #167: GFLOPs: 661.9478. Time: 155.6943 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #168: GFLOPs: 611.1897. Time: 168.6244 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #169: GFLOPs: 606.3908. Time: 169.9589 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #170: GFLOPs: 638.5337. Time: 161.4034 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #171: GFLOPs: 503.7127. Time: 204.6038 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #172: GFLOPs: 536.7951. Time: 191.9941 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #173: GFLOPs: 529.6278. Time: 194.5923 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #174: GFLOPs: 491.0460. Time: 209.8816 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #175: GFLOPs: 530.6517. Time: 194.2169 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #176: GFLOPs: 742.5652. Time: 138.7912 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #177: GFLOPs: 721.1721. Time: 142.9083 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #178: GFLOPs: 740.6862. Time: 139.1433 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #179: GFLOPs: 408.0974. Time: 252.5415 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #180: GFLOPs: 406.8247. Time: 253.3315 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #181: GFLOPs: 503.5346. Time: 204.6761 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #182: GFLOPs: 407.5077. Time: 252.9069 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #183: GFLOPs: 777.1037. Time: 132.6226 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #184: GFLOPs: 627.4822. Time: 164.2461 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #185: GFLOPs: 750.6969. Time: 137.2878 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #186: GFLOPs: 738.4301. Time: 139.5684 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #187: GFLOPs: 616.6225. Time: 167.1387 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #188: GFLOPs: 604.7287. Time: 170.4260 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #189: GFLOPs: 181.9755. Time: 566.3481 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #190: GFLOPs: 4.7002. Time: 21927.0456 us. Best GFLOPs: 879.5815
2024-04-29 23:10:52 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #191: GFLOPs: 6.5834. Time: 15654.8381 us. Best GFLOPs: 879.5815
2024-04-30 00:46:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:46:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:46:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-30 00:46:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:46:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-30 00:46:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-30 00:46:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-30 00:46:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9a7158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c3f758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xda43598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5f04218)]: 0 failure(s)
2024-04-30 00:46:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9841  0.9670  0.9670  0.9608  0.9565  0.9010  0.8993  0.8975  0.8902  0.8902  0.8681  0.8681  0.8655  0.8646  0.8369  0.8320
[17 : 32]:	0.8224  0.8224  0.8224  0.8216  0.8015  0.7991  0.7991  0.7988  0.7947  0.7880  0.7837  0.7837  0.7754  0.7680  0.7585  0.7429
[33 : 48]:	0.7356  0.7279  0.7254  0.7254  0.7216  0.7213  0.7198  0.7193  0.7096  0.7096  0.7096  0.7085  0.7070  0.7026  0.7010  0.6994
[49 : 64]:	0.6989  0.6989  0.6989  0.6944  0.6922  0.6922  0.6919  0.6841  0.6841  0.6841  0.6818  0.6815  0.6785  0.6732  0.6730  0.6730
2024-04-30 00:46:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:46:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #192: GFLOPs: 743.8580. Time: 138.5500 us. Best GFLOPs: 879.5815
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #193: GFLOPs: 918.3580. Time: 112.2237 us. Best GFLOPs: 918.3580
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #194: GFLOPs: 920.5804. Time: 111.9527 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #195: GFLOPs: 439.6414. Time: 234.4217 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #196: GFLOPs: 842.2444. Time: 122.3653 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #197: GFLOPs: 754.4599. Time: 136.6030 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #198: GFLOPs: 920.2745. Time: 111.9900 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #199: GFLOPs: 823.8346. Time: 125.0997 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #200: GFLOPs: 772.2546. Time: 133.4553 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #201: GFLOPs: 763.3510. Time: 135.0119 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #202: GFLOPs: 875.0965. Time: 117.7716 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #203: GFLOPs: 849.3494. Time: 121.3417 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #204: GFLOPs: 758.8127. Time: 135.8194 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #205: GFLOPs: 745.3159. Time: 138.2790 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #206: GFLOPs: 738.5429. Time: 139.5471 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #207: GFLOPs: 903.7661. Time: 114.0356 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #208: GFLOPs: 730.9997. Time: 140.9871 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #209: GFLOPs: 768.9155. Time: 134.0349 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #210: GFLOPs: 677.9667. Time: 152.0156 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #211: GFLOPs: 748.2037. Time: 137.7452 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #212: GFLOPs: 733.6495. Time: 140.4778 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #213: GFLOPs: 615.9885. Time: 167.3108 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #214: GFLOPs: 610.6732. Time: 168.7670 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #215: GFLOPs: 430.5452. Time: 239.3744 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #216: GFLOPs: 661.2444. Time: 155.8599 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #217: GFLOPs: 725.6445. Time: 142.0275 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #218: GFLOPs: 699.3356. Time: 147.3706 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #219: GFLOPs: 713.2831. Time: 144.4889 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #220: GFLOPs: 425.3500. Time: 242.2981 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #221: GFLOPs: 752.9872. Time: 136.8702 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #222: GFLOPs: 674.9625. Time: 152.6922 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #223: GFLOPs: 635.0688. Time: 162.2840 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #224: GFLOPs: 646.2422. Time: 159.4781 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #225: GFLOPs: 697.4250. Time: 147.7743 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #226: GFLOPs: 381.4654. Time: 270.1726 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #227: GFLOPs: 635.8421. Time: 162.0866 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #228: GFLOPs: 728.2787. Time: 141.5138 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #229: GFLOPs: 611.2972. Time: 168.5948 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #230: GFLOPs: 612.5393. Time: 168.2529 us. Best GFLOPs: 920.5804
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #231: GFLOPs: 987.4322. Time: 104.3732 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #232: GFLOPs: 546.3003. Time: 188.6536 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #233: GFLOPs: 534.2120. Time: 192.9225 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #234: GFLOPs: 540.1198. Time: 190.8123 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #235: GFLOPs: 614.4179. Time: 167.7384 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #236: GFLOPs: 614.0510. Time: 167.8387 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #237: GFLOPs: 973.7010. Time: 105.8451 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #238: GFLOPs: 598.2319. Time: 172.2768 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #239: GFLOPs: 124.7475. Time: 826.1610 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #240: GFLOPs: 954.9864. Time: 107.9193 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #241: GFLOPs: 602.3316. Time: 171.1043 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #242: GFLOPs: 605.1846. Time: 170.2976 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #243: GFLOPs: 76.5136. Time: 1346.9701 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #244: GFLOPs: 630.7177. Time: 163.4035 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #245: GFLOPs: 292.6291. Time: 352.1916 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #246: GFLOPs: 740.1991. Time: 139.2348 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #247: GFLOPs: 546.6337. Time: 188.5385 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #248: GFLOPs: 681.5272. Time: 151.2214 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #249: GFLOPs: 630.3172. Time: 163.5074 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #250: GFLOPs: 456.0322. Time: 225.9961 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #251: GFLOPs: 593.7757. Time: 173.5698 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #252: GFLOPs: 642.9091. Time: 160.3049 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #253: GFLOPs: 25.3112. Time: 4071.7681 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #254: GFLOPs: 4.0514. Time: 25438.2555 us. Best GFLOPs: 987.4322
2024-04-30 00:48:28 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #255: GFLOPs: 2.1050. Time: 48959.6033 us. Best GFLOPs: 987.4322
