2024-04-29 13:34:05 [INFO] [task_scheduler.cc:160] Initializing Task #46: "fused_nn_global_avg_pool2d"
2024-04-29 13:34:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 13:34:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:34:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    for ax0_2, ax1_2, ax2_1, ax3_1, ax4_1, ax5_1, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49)):
                        with T.block("adaptive_pool_sum_rf"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_2, ax1_2])
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(32), ax5 + ax5_1)
                            vrv0_rv1_fused_1 = T.axis.reduce(T.int64(49), ax6)
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                            T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=7)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 13:34:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(49)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax5)
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(1), ax6)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax5)
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=4)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 13:34:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:21:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:21:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:21:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c0208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9bba288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x733e888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1300b6f8)]: 0 failure(s)
2024-04-29 14:21:05 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:21:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c0208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9bba288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x733e888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1300b6f8)]: 0 failure(s)
2024-04-29 14:21:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c0208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9bba288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x733e888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1300b6f8)]: 0 failure(s)
2024-04-29 14:21:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c0208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9bba288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x733e888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1300b6f8)]: 0 failure(s)
2024-04-29 14:21:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c0208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9bba288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x733e888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1300b6f8)]: 0 failure(s)
2024-04-29 14:21:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9950  0.9892  0.9887  0.9796  0.9786  0.9768  0.9749  0.9632  0.9583  0.9580  0.9443  0.9419  0.9301  0.9243  0.9237
[17 : 32]:	0.9136  0.9135  0.9077  0.8979  0.8976  0.8915  0.8846  0.8832  0.8824  0.8815  0.8794  0.8779  0.8772  0.8764  0.8699  0.8661
[33 : 48]:	0.8599  0.8580  0.8472  0.8419  0.8384  0.8375  0.8353  0.8346  0.8280  0.8276  0.8263  0.8212  0.8149  0.8098  0.8044  0.8028
[49 : 64]:	0.8003  0.7966  0.7909  0.7892  0.7849  0.7837  0.7813  0.7808  0.7805  0.7761  0.7734  0.7688  0.7673  0.7670  0.7639  0.7637
2024-04-29 14:21:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:21:17 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 2.1770. Time: 47.0366 us. Best GFLOPs: 2.1770
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 4.1350. Time: 24.7642 us. Best GFLOPs: 4.1350
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 4.0806. Time: 25.0943 us. Best GFLOPs: 4.1350
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 4.0530. Time: 25.2653 us. Best GFLOPs: 4.1350
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 3.4457. Time: 29.7184 us. Best GFLOPs: 4.1350
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 4.0138. Time: 25.5123 us. Best GFLOPs: 4.1350
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 10.0872. Time: 10.1515 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 4.4862. Time: 22.8255 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 3.9820. Time: 25.7156 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 3.8941. Time: 26.2963 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 8.4818. Time: 12.0730 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 4.4312. Time: 23.1090 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 7.1873. Time: 14.2474 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 4.2582. Time: 24.0476 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 4.6090. Time: 22.2174 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 9.6728. Time: 10.5864 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 3.8477. Time: 26.6131 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 4.0083. Time: 25.5472 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.7170. Time: 37.6881 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.3136. Time: 23.7389 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 3.0304. Time: 33.7909 us. Best GFLOPs: 10.0872
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 10.1778. Time: 10.0611 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 8.7172. Time: 11.7469 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 4.4890. Time: 22.8115 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 4.6246. Time: 22.1426 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 8.8985. Time: 11.5075 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 1.5230. Time: 67.2366 us. Best GFLOPs: 10.1778
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 10.1932. Time: 10.0459 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 5.5613. Time: 18.4130 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 3.8571. Time: 26.5484 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 3.9541. Time: 25.8975 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 2.5029. Time: 40.9132 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 5.0754. Time: 20.1759 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 2.9651. Time: 34.5354 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 10.1083. Time: 10.1303 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 2.9577. Time: 34.6219 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 9.6761. Time: 10.5827 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 7.9782. Time: 12.8349 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 4.7706. Time: 21.4647 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 10.1650. Time: 10.0738 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.2979. Time: 44.5625 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 3.5871. Time: 28.5467 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 2.8117. Time: 36.4193 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 1.6612. Time: 61.6423 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 1.4101. Time: 72.6170 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 3.1882. Time: 32.1186 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 5.1491. Time: 19.8870 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 3.1990. Time: 32.0098 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 3.4686. Time: 29.5218 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 8.6965. Time: 11.7748 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 9.9756. Time: 10.2650 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 3.3293. Time: 30.7571 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 2.9855. Time: 34.2994 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 6.3643. Time: 16.0896 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 4.0103. Time: 25.5341 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 9.9239. Time: 10.3185 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 6.4119. Time: 15.9702 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 3.1527. Time: 32.4802 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 3.4947. Time: 29.3013 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 4.0917. Time: 25.0264 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 3.4493. Time: 29.6874 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 10.1313. Time: 10.1073 us. Best GFLOPs: 10.1932
2024-04-29 14:28:15 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 3.2301. Time: 31.7018 us. Best GFLOPs: 10.1932
