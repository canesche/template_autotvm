2024-04-29 13:33:42 [INFO] [task_scheduler.cc:160] Initializing Task #39: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13"
2024-04-29 13:33:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:33:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:33:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(16)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(15), T.int64(3), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:33:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:33:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(16)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(15), T.int64(3), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 14:12:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:12:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:12:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 14:12:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:13:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 14:13:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 14:13:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 14:13:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 14:13:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9981  0.9976  0.9959  0.9955  0.9955  0.9953  0.9944  0.9942  0.9941  0.9940  0.9940  0.9939  0.9933  0.9930
[17 : 32]:	0.9920  0.9919  0.9919  0.9909  0.9903  0.9902  0.9901  0.9900  0.9894  0.9892  0.9886  0.9881  0.9873  0.9869  0.9869  0.9867
[33 : 48]:	0.9861  0.9856  0.9849  0.9847  0.9846  0.9843  0.9828  0.9825  0.9821  0.9817  0.9815  0.9798  0.9797  0.9797  0.9792  0.9779
[49 : 64]:	0.9770  0.9769  0.9763  0.9761  0.9758  0.9753  0.9747  0.9732  0.9716  0.9714  0.9711  0.9702  0.9701  0.9698  0.9686  0.9683
2024-04-29 14:13:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:13:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:27:48 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #1: GFLOPs: 15.2392. Time: 15175.4393 us. Best GFLOPs: 15.2392
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #2: GFLOPs: 2.3721. Time: 97491.9927 us. Best GFLOPs: 15.2392
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #3: GFLOPs: 5.9979. Time: 38556.9740 us. Best GFLOPs: 15.2392
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #4: GFLOPs: 44.6936. Time: 5174.3670 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #5: GFLOPs: 12.5944. Time: 18362.2347 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) * T.int64(64) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 2, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b114)
b139 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #7: GFLOPs: 2.2097. Time: 104659.1420 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #8: GFLOPs: 1.0406. Time: 222228.4213 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #9: GFLOPs: 7.9787. Time: 28984.8108 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #10: GFLOPs: 2.3569. Time: 98121.9530 us. Best GFLOPs: 44.6936
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #11: GFLOPs: 66.5877. Time: 3473.0321 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #12: GFLOPs: 10.4646. Time: 22099.3460 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #13: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(7) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0 in T.grid(T.int64(16), T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(1)):
                        for ax3_ax4_fused in T.vectorized(T.int64(52)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(128), ic_0 * T.int64(8) + ax1)
                                v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + kh_0 + ax2)
                                v_i3 = T.axis.spatial(T.int64(16), kw_0 + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(7) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 32, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b67)
l88 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l86, l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b68)
l109 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l110, l111, l112, l113, l114, preserve_unit_iters=True)
l116, l117 = sch.split(loop=l115, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l116)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b118)
b138 = sch.decompose_reduction(block=b118, loop=l122)
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #14: GFLOPs: 52.2797. Time: 4423.5383 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b114)
b139 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #16: GFLOPs: 23.7269. Time: 9746.7738 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #17: GFLOPs: 51.5623. Time: 4485.0818 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #18: GFLOPs: 10.7586. Time: 21495.4644 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #19: GFLOPs: 10.0434. Time: 23026.1956 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #20: GFLOPs: 32.6854. Time: 7075.3769 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #21: GFLOPs: 25.4115. Time: 9100.6336 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #22: GFLOPs: 12.2548. Time: 18871.0728 us. Best GFLOPs: 66.5877
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #23: GFLOPs: 82.8756. Time: 2790.4619 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #24: GFLOPs: 11.0258. Time: 20974.5254 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #25: GFLOPs: 22.3600. Time: 10342.6279 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #26: GFLOPs: 15.4428. Time: 14975.3539 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #27: GFLOPs: 14.5109. Time: 15937.0794 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #28: GFLOPs: 39.1672. Time: 5904.4671 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #29: GFLOPs: 1.8257. Time: 126671.8470 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #30: GFLOPs: 2.7163. Time: 85139.1923 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #31: GFLOPs: 39.7030. Time: 5824.7732 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #32: GFLOPs: 42.1379. Time: 5488.1954 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #33: GFLOPs: 58.8432. Time: 3930.1290 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #34: GFLOPs: 69.1876. Time: 3342.5233 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #35: GFLOPs: 54.4940. Time: 4243.7908 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #36: GFLOPs: 11.5900. Time: 19953.4843 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #37: GFLOPs: 0.7357. Time: 314341.4853 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #38: GFLOPs: 1.7599. Time: 131403.2157 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #39: GFLOPs: 34.7773. Time: 6649.7754 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #40: GFLOPs: 42.5900. Time: 5429.9377 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #41: GFLOPs: 3.1680. Time: 72998.9430 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #42: GFLOPs: 3.0295. Time: 76336.4263 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #43: GFLOPs: 73.9095. Time: 3128.9793 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #44: GFLOPs: 0.7284. Time: 317490.9540 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #45: GFLOPs: 29.0157. Time: 7970.1984 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #46: GFLOPs: 50.5911. Time: 4571.1824 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #47: GFLOPs: 18.1277. Time: 12757.3563 us. Best GFLOPs: 82.8756
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #48: GFLOPs: 91.2743. Time: 2533.6954 us. Best GFLOPs: 91.2743
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #49: GFLOPs: 40.5034. Time: 5709.6762 us. Best GFLOPs: 91.2743
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #50: GFLOPs: 2.8275. Time: 81791.2620 us. Best GFLOPs: 91.2743
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #51: GFLOPs: 13.1391. Time: 17600.9268 us. Best GFLOPs: 91.2743
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #52: GFLOPs: 166.2111. Time: 1391.3704 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #53: GFLOPs: 1.5530. Time: 148908.2867 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #54: GFLOPs: 40.5504. Time: 5703.0497 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #55: GFLOPs: 27.7275. Time: 8340.4840 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #56: GFLOPs: 150.4280. Time: 1537.3547 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #57: GFLOPs: 65.3878. Time: 3536.7608 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #58: GFLOPs: 14.3925. Time: 16068.1703 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #59: GFLOPs: 2.9053. Time: 79599.9390 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #60: GFLOPs: 13.0088. Time: 17777.2547 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #61: GFLOPs: 1.3240. Time: 174672.1973 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #62: GFLOPs: 0.7375. Time: 313553.8207 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #63: GFLOPs: 83.2817. Time: 2776.8538 us. Best GFLOPs: 166.2111
2024-04-29 14:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #64: GFLOPs: 5.9188. Time: 39072.0433 us. Best GFLOPs: 166.2111
2024-04-29 15:08:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:08:50 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 15:08:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 15:08:55 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 15:09:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 15:09:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 15:09:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 15:09:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 15:09:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9863  0.9863  0.9863  0.9863  0.9863  0.9777  0.9777  0.9777  0.9208  0.9208  0.9208  0.8947  0.8592  0.8011  0.8011  0.7902
[17 : 32]:	0.7841  0.7814  0.7783  0.7783  0.7783  0.7762  0.7747  0.7718  0.7682  0.7679  0.7505  0.7505  0.7505  0.7505  0.7505  0.7252
[33 : 48]:	0.7114  0.7084  0.7073  0.7055  0.7006  0.6987  0.6949  0.6864  0.6844  0.6824  0.6821  0.6783  0.6750  0.6713  0.6661  0.6613
[49 : 64]:	0.6478  0.6474  0.6449  0.6370  0.6315  0.6315  0.6315  0.6257  0.6204  0.6184  0.6181  0.6152  0.6152  0.6111  0.6111  0.6107
2024-04-29 15:09:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:09:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #65: GFLOPs: 17.9564. Time: 12879.0634 us. Best GFLOPs: 166.2111
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #66: GFLOPs: 168.2838. Time: 1374.2333 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #67: GFLOPs: 19.5734. Time: 11815.0763 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #68: GFLOPs: 126.9753. Time: 1821.3084 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #69: GFLOPs: 138.7291. Time: 1666.9979 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #70: GFLOPs: 10.3635. Time: 22315.0176 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #71: GFLOPs: 6.3958. Time: 36158.4567 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #72: GFLOPs: 15.3371. Time: 15078.5889 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #73: GFLOPs: 2.3992. Time: 96392.1340 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #74: GFLOPs: 7.1920. Time: 32155.3527 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #75: GFLOPs: 2.7755. Time: 83323.8093 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #76: GFLOPs: 4.4273. Time: 52234.8693 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #77: GFLOPs: 16.7240. Time: 13828.0816 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #78: GFLOPs: 2.7890. Time: 82919.0533 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #79: GFLOPs: 4.0837. Time: 56629.6493 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #80: GFLOPs: 3.1144. Time: 74255.4447 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #81: GFLOPs: 3.3459. Time: 69117.3107 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #82: GFLOPs: 8.6356. Time: 26779.8905 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #83: GFLOPs: 138.6127. Time: 1668.3987 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #84: GFLOPs: 133.9656. Time: 1726.2724 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #85: GFLOPs: 145.3227. Time: 1591.3629 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #86: GFLOPs: 99.2731. Time: 2329.5451 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #87: GFLOPs: 63.8280. Time: 3623.1910 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #88: GFLOPs: 80.3988. Time: 2876.4275 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #89: GFLOPs: 161.8669. Time: 1428.7121 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #90: GFLOPs: 8.1546. Time: 28359.6623 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #91: GFLOPs: 111.8019. Time: 2068.4899 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #92: GFLOPs: 102.2245. Time: 2262.2869 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #93: GFLOPs: 101.5277. Time: 2277.8141 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #94: GFLOPs: 97.4102. Time: 2374.0968 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #95: GFLOPs: 94.5005. Time: 2447.1961 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #96: GFLOPs: 72.0346. Time: 3210.4196 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #97: GFLOPs: 3.4874. Time: 66314.1240 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #98: GFLOPs: 87.0299. Time: 2657.2625 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #99: GFLOPs: 115.9754. Time: 1994.0531 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #100: GFLOPs: 108.8747. Time: 2124.1046 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #101: GFLOPs: 96.4732. Time: 2397.1546 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #102: GFLOPs: 30.2893. Time: 7635.0721 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #103: GFLOPs: 104.3955. Time: 2215.2420 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #104: GFLOPs: 106.0252. Time: 2181.1913 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #105: GFLOPs: 40.4822. Time: 5712.6564 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #106: GFLOPs: 125.4079. Time: 1844.0720 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #107: GFLOPs: 55.2129. Time: 4188.5322 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #108: GFLOPs: 39.6762. Time: 5828.7143 us. Best GFLOPs: 168.2838
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #109: GFLOPs: 193.4873. Time: 1195.2269 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #110: GFLOPs: 69.7289. Time: 3316.5766 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #111: GFLOPs: 102.4600. Time: 2257.0884 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #112: GFLOPs: 39.1412. Time: 5908.3801 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #113: GFLOPs: 99.1103. Time: 2333.3728 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #114: GFLOPs: 134.9237. Time: 1714.0143 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #115: GFLOPs: 120.4884. Time: 1919.3643 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #116: GFLOPs: 31.4973. Time: 7342.2618 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #117: GFLOPs: 162.5773. Time: 1422.4692 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #118: GFLOPs: 111.6368. Time: 2071.5500 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #119: GFLOPs: 95.9753. Time: 2409.5913 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #120: GFLOPs: 75.4885. Time: 3063.5280 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #121: GFLOPs: 11.3760. Time: 20328.9138 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #122: GFLOPs: 192.5456. Time: 1201.0721 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #123: GFLOPs: 87.7289. Time: 2636.0897 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #124: GFLOPs: 108.4467. Time: 2132.4877 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #125: GFLOPs: 102.8657. Time: 2248.1850 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #126: GFLOPs: 3.8524. Time: 60030.9797 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #127: GFLOPs: 3.5982. Time: 64271.1050 us. Best GFLOPs: 193.4873
2024-04-29 15:11:17 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #128: GFLOPs: 4.6600. Time: 49626.8037 us. Best GFLOPs: 193.4873
2024-04-29 16:15:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:15:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:15:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 16:15:13 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:15:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 16:15:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 16:15:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 16:15:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14217288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc986458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15d81c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x92a3ab8)]: 0 failure(s)
2024-04-29 16:15:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9339  0.8610  0.8544  0.8078  0.8078  0.7869  0.7869  0.7746  0.7689  0.7689  0.7671  0.7671  0.7671  0.7671  0.7671  0.7671
[17 : 32]:	0.7574  0.7551  0.7551  0.7551  0.7551  0.7551  0.7445  0.7445  0.7426  0.7418  0.7401  0.7365  0.7339  0.7318  0.7293  0.7272
[33 : 48]:	0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7271  0.7252  0.7240
[49 : 64]:	0.7146  0.7062  0.7058  0.6999  0.6999  0.6988  0.6988  0.6967  0.6965  0.6965  0.6852  0.6845  0.6845  0.6834  0.6834  0.6834
2024-04-29 16:15:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:15:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #129: GFLOPs: 381.4392. Time: 606.2858 us. Best GFLOPs: 381.4392
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #130: GFLOPs: 174.0019. Time: 1329.0726 us. Best GFLOPs: 381.4392
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #131: GFLOPs: 503.0768. Time: 459.6936 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #132: GFLOPs: 159.8893. Time: 1446.3832 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #133: GFLOPs: 162.9496. Time: 1419.2190 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #134: GFLOPs: 158.7663. Time: 1456.6140 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #135: GFLOPs: 61.7369. Time: 3745.9133 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #136: GFLOPs: 318.7827. Time: 725.4508 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #137: GFLOPs: 72.7884. Time: 3177.1698 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #138: GFLOPs: 90.1678. Time: 2564.7858 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #139: GFLOPs: 169.2745. Time: 1366.1903 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #140: GFLOPs: 112.2603. Time: 2060.0434 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #141: GFLOPs: 90.9118. Time: 2543.7976 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #142: GFLOPs: 131.7503. Time: 1755.2993 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #143: GFLOPs: 118.6664. Time: 1948.8342 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #144: GFLOPs: 176.5523. Time: 1309.8739 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #145: GFLOPs: 167.5770. Time: 1380.0297 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #146: GFLOPs: 111.5664. Time: 2072.8566 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #147: GFLOPs: 135.2545. Time: 1709.8220 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #148: GFLOPs: 121.0332. Time: 1910.7245 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #149: GFLOPs: 63.0681. Time: 3666.8470 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #150: GFLOPs: 115.5167. Time: 2001.9725 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #151: GFLOPs: 181.5915. Time: 1273.5244 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #152: GFLOPs: 183.1640. Time: 1262.5907 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #153: GFLOPs: 112.0775. Time: 2063.4045 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #154: GFLOPs: 162.1624. Time: 1426.1088 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #155: GFLOPs: 155.3078. Time: 1489.0503 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #156: GFLOPs: 281.7883. Time: 820.6912 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #157: GFLOPs: 320.0912. Time: 722.4852 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #158: GFLOPs: 155.9816. Time: 1482.6179 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #159: GFLOPs: 194.3914. Time: 1189.6676 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #160: GFLOPs: 101.1831. Time: 2285.5722 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #161: GFLOPs: 135.2853. Time: 1709.4332 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #162: GFLOPs: 138.2693. Time: 1672.5421 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #163: GFLOPs: 83.2271. Time: 2778.6756 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #164: GFLOPs: 128.2023. Time: 1803.8769 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #165: GFLOPs: 116.1765. Time: 1990.6026 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #166: GFLOPs: 141.9440. Time: 1629.2419 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #167: GFLOPs: 140.9059. Time: 1641.2461 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #168: GFLOPs: 82.6870. Time: 2796.8269 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #169: GFLOPs: 127.6236. Time: 1812.0572 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #170: GFLOPs: 135.4778. Time: 1707.0040 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #171: GFLOPs: 135.9463. Time: 1701.1221 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #172: GFLOPs: 86.1590. Time: 2684.1222 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #173: GFLOPs: 143.1291. Time: 1615.7520 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #174: GFLOPs: 126.5969. Time: 1826.7526 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #175: GFLOPs: 148.0771. Time: 1561.7623 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #176: GFLOPs: 170.0816. Time: 1359.7074 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #177: GFLOPs: 143.2073. Time: 1614.8703 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #178: GFLOPs: 138.1489. Time: 1673.9998 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #179: GFLOPs: 112.7864. Time: 2050.4350 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #180: GFLOPs: 160.9521. Time: 1436.8321 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #181: GFLOPs: 122.6590. Time: 1885.3991 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #182: GFLOPs: 160.9450. Time: 1436.8954 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #183: GFLOPs: 161.8178. Time: 1429.1459 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #184: GFLOPs: 131.5898. Time: 1757.4402 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #185: GFLOPs: 193.5934. Time: 1194.5718 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #186: GFLOPs: 193.8834. Time: 1192.7849 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #187: GFLOPs: 191.4058. Time: 1208.2244 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #188: GFLOPs: 174.0138. Time: 1328.9822 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #189: GFLOPs: 173.9727. Time: 1329.2956 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #190: GFLOPs: 5.5348. Time: 41783.4230 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #191: GFLOPs: 40.5390. Time: 5704.6583 us. Best GFLOPs: 503.0768
2024-04-29 16:17:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #192: GFLOPs: 6.1634. Time: 37521.4450 us. Best GFLOPs: 503.0768
