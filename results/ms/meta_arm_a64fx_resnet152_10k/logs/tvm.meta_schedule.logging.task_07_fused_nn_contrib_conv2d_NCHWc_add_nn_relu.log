2024-04-29 13:32:02 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu"
2024-04-29 13:32:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(3), T.int64(7), T.int64(7)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:32:03 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:32:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(112) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                    T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:03 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(61), T.int64(229), T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(112) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(112), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:03 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(61), T.int64(229), T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(112) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(112), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:41:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:41:46 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 13:41:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:41:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 13:42:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 13:42:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 13:42:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 13:42:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9975  0.9968  0.9965  0.9956  0.9955  0.9951  0.9944  0.9928  0.9914  0.9913  0.9910  0.9902  0.9896  0.9893  0.9864
[17 : 32]:	0.9863  0.9860  0.9860  0.9857  0.9843  0.9840  0.9838  0.9833  0.9829  0.9829  0.9819  0.9817  0.9815  0.9812  0.9799  0.9789
[33 : 48]:	0.9785  0.9780  0.9779  0.9779  0.9772  0.9770  0.9760  0.9754  0.9753  0.9749  0.9736  0.9724  0.9709  0.9708  0.9689  0.9681
[49 : 64]:	0.9677  0.9664  0.9659  0.9659  0.9646  0.9646  0.9643  0.9636  0.9633  0.9625  0.9623  0.9616  0.9613  0.9612  0.9609  0.9607
2024-04-29 13:42:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:42:19 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #1: GFLOPs: 8.0554. Time: 29499.7982 us. Best GFLOPs: 8.0554
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #2: GFLOPs: 151.8930. Time: 1564.4802 us. Best GFLOPs: 151.8930
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #3: GFLOPs: 7.1351. Time: 33304.7608 us. Best GFLOPs: 151.8930
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #4: GFLOPs: 6.2788. Time: 37847.0657 us. Best GFLOPs: 151.8930
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(98), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(37), T.int64(37)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(32) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(32) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(16) + oh_1 * T.int64(16) + oh_2_init * T.int64(8) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(16) + oh_1 * T.int64(16) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(16) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 16, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l121)
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #6: GFLOPs: 144.2378. Time: 1647.5123 us. Best GFLOPs: 151.8930
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #7: GFLOPs: 28.2756. Time: 8404.2043 us. Best GFLOPs: 151.8930
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #8: GFLOPs: 158.8929. Time: 1495.5580 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #9: GFLOPs: 62.7783. Time: 3785.2841 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #10: GFLOPs: 56.3353. Time: 4218.1994 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #11: GFLOPs: 89.7130. Time: 2648.8206 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #12: GFLOPs: 89.1285. Time: 2666.1909 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #13: GFLOPs: 70.5714. Time: 3367.2794 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #14: GFLOPs: 145.5224. Time: 1632.9688 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #15: GFLOPs: 5.4464. Time: 43631.3697 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #16: GFLOPs: 87.3763. Time: 2719.6576 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #17: GFLOPs: 37.3626. Time: 6360.1899 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #18: GFLOPs: 66.7561. Time: 3559.7263 us. Best GFLOPs: 158.8929
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #19: GFLOPs: 163.5067. Time: 1453.3565 us. Best GFLOPs: 163.5067
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #20: GFLOPs: 134.3249. Time: 1769.0952 us. Best GFLOPs: 163.5067
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #21: GFLOPs: 12.0494. Time: 19721.6643 us. Best GFLOPs: 163.5067
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #22: GFLOPs: 39.6282. Time: 5996.5768 us. Best GFLOPs: 163.5067
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #23: GFLOPs: 344.1410. Time: 690.5122 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #24: GFLOPs: 131.2064. Time: 1811.1435 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #25: GFLOPs: 75.4432. Time: 3149.8334 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #26: GFLOPs: 54.2655. Time: 4379.0920 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #27: GFLOPs: 114.4440. Time: 2076.4168 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #28: GFLOPs: 24.9506. Time: 9524.1511 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #29: GFLOPs: 3.0177. Time: 78746.6837 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #30: GFLOPs: 69.6991. Time: 3409.4209 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #31: GFLOPs: 9.1165. Time: 26066.2147 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #32: GFLOPs: 148.0315. Time: 1605.2903 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #33: GFLOPs: 149.9662. Time: 1584.5811 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #34: GFLOPs: 90.3646. Time: 2629.7192 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #35: GFLOPs: 3.5096. Time: 67710.0883 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #36: GFLOPs: 4.8859. Time: 48636.2360 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #37: GFLOPs: 69.3546. Time: 3426.3550 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #38: GFLOPs: 68.1616. Time: 3486.3234 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #39: GFLOPs: 73.8437. Time: 3218.0616 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #40: GFLOPs: 83.8387. Time: 2834.4118 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #41: GFLOPs: 81.2535. Time: 2924.5942 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #42: GFLOPs: 30.4872. Time: 7794.5262 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #43: GFLOPs: 21.0466. Time: 11290.8370 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #44: GFLOPs: 7.7820. Time: 30536.2225 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #45: GFLOPs: 40.6381. Time: 5847.5614 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #46: GFLOPs: 103.8100. Time: 2289.1206 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #47: GFLOPs: 82.9108. Time: 2866.1359 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #48: GFLOPs: 53.7135. Time: 4424.0906 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #49: GFLOPs: 163.1634. Time: 1456.4144 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #50: GFLOPs: 45.5088. Time: 5221.7075 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #51: GFLOPs: 55.9371. Time: 4248.2306 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #52: GFLOPs: 5.2177. Time: 45544.0567 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #53: GFLOPs: 2.7224. Time: 87287.6330 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #54: GFLOPs: 78.0225. Time: 3045.7068 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #55: GFLOPs: 130.3941. Time: 1822.4251 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #56: GFLOPs: 2.4271. Time: 97908.9393 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #57: GFLOPs: 61.8888. Time: 3839.6883 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #58: GFLOPs: 53.8597. Time: 4412.0871 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #59: GFLOPs: 57.2699. Time: 4149.3622 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #60: GFLOPs: 8.0302. Time: 29592.5967 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #61: GFLOPs: 24.2019. Time: 9818.7911 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #62: GFLOPs: 38.8028. Time: 6124.1358 us. Best GFLOPs: 344.1410
2024-04-29 14:25:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #63: GFLOPs: 69.7621. Time: 3406.3395 us. Best GFLOPs: 344.1410
2024-04-29 16:05:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:05:36 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 16:05:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 16:05:42 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 16:05:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 16:06:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 16:06:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 16:06:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 16:06:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9865  0.8921  0.8921  0.8921  0.8881  0.8881  0.8875  0.8875  0.8875  0.8129  0.7625  0.7625  0.7485  0.7485  0.7395  0.7376
[17 : 32]:	0.7219  0.7180  0.7153  0.7123  0.7054  0.7054  0.7054  0.7054  0.7051  0.7028  0.7028  0.7028  0.7028  0.7028  0.7028  0.6984
[33 : 48]:	0.6984  0.6981  0.6943  0.6943  0.6901  0.6765  0.6745  0.6729  0.6671  0.6573  0.6514  0.6514  0.6514  0.6481  0.6476  0.6469
[49 : 64]:	0.6469  0.6450  0.6445  0.6277  0.6277  0.6271  0.6268  0.6170  0.6144  0.6144  0.6115  0.6090  0.6084  0.6079  0.6075  0.6069
2024-04-29 16:06:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:06:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #64: GFLOPs: 137.6282. Time: 1726.6338 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #65: GFLOPs: 124.3085. Time: 1911.6439 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #66: GFLOPs: 133.8286. Time: 1775.6564 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #67: GFLOPs: 164.5917. Time: 1443.7756 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #68: GFLOPs: 267.1539. Time: 889.5004 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #69: GFLOPs: 271.6833. Time: 874.6712 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #70: GFLOPs: 272.5821. Time: 871.7869 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #71: GFLOPs: 271.0328. Time: 876.7705 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #72: GFLOPs: 146.8643. Time: 1618.0489 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #73: GFLOPs: 156.2644. Time: 1520.7144 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #74: GFLOPs: 76.6983. Time: 3098.2906 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #75: GFLOPs: 83.4398. Time: 2847.9651 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #76: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(229)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #77: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(229)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #78: GFLOPs: 104.9274. Time: 2264.7426 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #79: GFLOPs: 126.3629. Time: 1880.5646 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #80: GFLOPs: 72.4675. Time: 3279.1717 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #81: GFLOPs: 94.3538. Time: 2518.5371 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #82: GFLOPs: 202.4331. Time: 1173.8870 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #83: GFLOPs: 125.0666. Time: 1900.0559 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #84: GFLOPs: 87.6012. Time: 2712.6754 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #85: GFLOPs: 97.8486. Time: 2428.5837 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #86: GFLOPs: 114.0456. Time: 2083.6708 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #87: GFLOPs: 93.0395. Time: 2554.1153 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #88: GFLOPs: 66.7919. Time: 3557.8185 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #89: GFLOPs: 95.4972. Time: 2488.3822 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #90: GFLOPs: 118.2811. Time: 2009.0570 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #91: GFLOPs: 86.3913. Time: 2750.6664 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #92: GFLOPs: 134.3167. Time: 1769.2028 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #93: GFLOPs: 106.1635. Time: 2238.3723 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #94: GFLOPs: 124.2182. Time: 1913.0327 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #95: GFLOPs: 105.6345. Time: 2249.5830 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #96: GFLOPs: 105.6579. Time: 2249.0854 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #97: GFLOPs: 103.4333. Time: 2297.4558 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #98: GFLOPs: 77.1266. Time: 3081.0821 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #99: GFLOPs: 96.4967. Time: 2462.6081 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #100: GFLOPs: 106.5818. Time: 2229.5873 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #101: GFLOPs: 95.6339. Time: 2484.8253 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #102: GFLOPs: 103.2994. Time: 2300.4351 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #103: GFLOPs: 198.7355. Time: 1195.7275 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #104: GFLOPs: 137.9994. Time: 1721.9894 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #105: GFLOPs: 131.6844. Time: 1804.5688 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #106: GFLOPs: 116.3202. Time: 2042.9259 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #107: GFLOPs: 107.1825. Time: 2217.0917 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #108: GFLOPs: 146.9247. Time: 1617.3830 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #109: GFLOPs: 55.5363. Time: 4278.8868 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #110: GFLOPs: 131.3685. Time: 1808.9081 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #111: GFLOPs: 121.5086. Time: 1955.6939 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #112: GFLOPs: 121.4821. Time: 1956.1194 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #113: GFLOPs: 63.0140. Time: 3771.1222 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #114: GFLOPs: 98.3154. Time: 2417.0521 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #115: GFLOPs: 65.2584. Time: 3641.4250 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #116: GFLOPs: 56.7895. Time: 4184.4646 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #117: GFLOPs: 91.3884. Time: 2600.2596 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #118: GFLOPs: 132.9031. Time: 1788.0207 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #119: GFLOPs: 133.5596. Time: 1779.2315 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #120: GFLOPs: 65.4288. Time: 3631.9424 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #121: GFLOPs: 57.0966. Time: 4161.9568 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #122: GFLOPs: 62.4134. Time: 3807.4113 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #123: GFLOPs: 217.0922. Time: 1094.6204 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #124: GFLOPs: 90.2334. Time: 2633.5431 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #125: GFLOPs: 22.6390. Time: 10496.6327 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #126: GFLOPs: 70.1977. Time: 3385.2059 us. Best GFLOPs: 344.1410
2024-04-29 16:08:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #127: GFLOPs: 3.6489. Time: 65125.0890 us. Best GFLOPs: 344.1410
2024-04-29 17:00:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:00:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:00:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 17:00:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:00:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 17:00:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 17:00:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 17:01:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 17:01:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8294  0.8294  0.8258  0.8200  0.8200  0.8151  0.8151  0.8151  0.8151  0.7851  0.7851  0.7851  0.7851  0.7851  0.7842  0.7828
[17 : 32]:	0.7802  0.7776  0.7776  0.7682  0.7642  0.7642  0.7642  0.7642  0.7610  0.7547  0.7531  0.7531  0.7531  0.7531  0.7531  0.7095
[33 : 48]:	0.6967  0.6967  0.6967  0.6967  0.6967  0.6967  0.6961  0.6961  0.6942  0.6932  0.6925  0.6867  0.6867  0.6867  0.6867  0.6867
[49 : 64]:	0.6795  0.6778  0.6753  0.6753  0.6753  0.6753  0.6648  0.6597  0.6596  0.6579  0.6486  0.6468  0.6468  0.6468  0.6408  0.6365
2024-04-29 17:01:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:01:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #128: GFLOPs: 111.1212. Time: 2138.5076 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #129: GFLOPs: 219.5572. Time: 1082.3306 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #130: GFLOPs: 84.9408. Time: 2797.6381 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #131: GFLOPs: 343.4094. Time: 691.9831 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #132: GFLOPs: 137.4494. Time: 1728.8804 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #133: GFLOPs: 135.8648. Time: 1749.0444 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #134: GFLOPs: 187.9366. Time: 1264.4349 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #135: GFLOPs: 139.4120. Time: 1704.5412 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #136: GFLOPs: 69.0854. Time: 3439.7088 us. Best GFLOPs: 344.1410
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #137: GFLOPs: 360.8764. Time: 658.4901 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #138: GFLOPs: 72.0425. Time: 3298.5205 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #139: GFLOPs: 103.1828. Time: 2303.0338 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #140: GFLOPs: 58.9152. Time: 4033.4814 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #141: GFLOPs: 355.4944. Time: 668.4594 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #142: GFLOPs: 64.0190. Time: 3711.9247 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #143: GFLOPs: 119.1100. Time: 1995.0765 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #144: GFLOPs: 117.8970. Time: 2015.6023 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #145: GFLOPs: 185.9013. Time: 1278.2779 us. Best GFLOPs: 360.8764
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #146: GFLOPs: 399.0317. Time: 595.5255 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #147: GFLOPs: 115.7668. Time: 2052.6917 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #148: GFLOPs: 321.7121. Time: 738.6527 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #149: GFLOPs: 187.6827. Time: 1266.1452 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #150: GFLOPs: 131.6213. Time: 1805.4342 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #151: GFLOPs: 188.5374. Time: 1260.4053 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #152: GFLOPs: 218.6717. Time: 1086.7138 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #153: GFLOPs: 121.2732. Time: 1959.4888 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #154: GFLOPs: 185.1594. Time: 1283.3997 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #155: GFLOPs: 183.6621. Time: 1293.8628 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #156: GFLOPs: 256.0156. Time: 928.1993 us. Best GFLOPs: 399.0317
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #157: GFLOPs: 453.4933. Time: 524.0067 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #158: GFLOPs: 185.7826. Time: 1279.0949 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #159: GFLOPs: 323.2743. Time: 735.0832 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #160: GFLOPs: 127.5469. Time: 1863.1069 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #161: GFLOPs: 67.6860. Time: 3510.8224 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #162: GFLOPs: 97.2432. Time: 2443.7034 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #163: GFLOPs: 372.1358. Time: 638.5667 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #164: GFLOPs: 376.9956. Time: 630.3351 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #165: GFLOPs: 145.5293. Time: 1632.8914 us. Best GFLOPs: 453.4933
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #166: GFLOPs: 464.5359. Time: 511.5504 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #167: GFLOPs: 344.9082. Time: 688.9761 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #168: GFLOPs: 387.0821. Time: 613.9100 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #169: GFLOPs: 198.2267. Time: 1198.7970 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #170: GFLOPs: 94.5445. Time: 2513.4563 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #171: GFLOPs: 164.7638. Time: 1442.2681 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #172: GFLOPs: 123.9246. Time: 1917.5662 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #173: GFLOPs: 123.7058. Time: 1920.9566 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #174: GFLOPs: 164.8830. Time: 1441.2255 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #175: GFLOPs: 104.8647. Time: 2266.0971 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #176: GFLOPs: 137.5831. Time: 1727.2006 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #177: GFLOPs: 89.1269. Time: 2666.2385 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #178: GFLOPs: 119.2735. Time: 1992.3414 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #179: GFLOPs: 137.5049. Time: 1728.1823 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #180: GFLOPs: 143.0907. Time: 1660.7200 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #181: GFLOPs: 141.5489. Time: 1678.8091 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #182: GFLOPs: 105.5309. Time: 2251.7920 us. Best GFLOPs: 464.5359
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #183: GFLOPs: 492.8357. Time: 482.1759 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #184: GFLOPs: 426.0620. Time: 557.7441 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #185: GFLOPs: 144.0175. Time: 1650.0319 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #186: GFLOPs: 81.5967. Time: 2912.2949 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #187: GFLOPs: 74.0803. Time: 3207.7849 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #188: GFLOPs: 269.3116. Time: 882.3739 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #189: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(56), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(56) + oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #190: GFLOPs: 1.5266. Time: 155663.1997 us. Best GFLOPs: 492.8357
2024-04-29 17:03:01 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #191: GFLOPs: 42.8680. Time: 5543.3734 us. Best GFLOPs: 492.8357
2024-04-29 19:23:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:23:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:23:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 19:23:17 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 19:23:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 19:23:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 19:23:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 19:24:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf007c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x141dd1b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4606ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x163d7978)]: 0 failure(s)
2024-04-29 19:24:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9619  0.9619  0.9619  0.9619  0.9619  0.9619  0.9392  0.9392  0.9135  0.9135  0.8998  0.8998  0.8998  0.8984  0.8427  0.8427
[17 : 32]:	0.8427  0.8427  0.8417  0.8417  0.8417  0.8417  0.8417  0.8228  0.8228  0.8155  0.8131  0.8131  0.8082  0.8082  0.8028  0.7981
[33 : 48]:	0.7950  0.7950  0.7950  0.7950  0.7950  0.7910  0.7910  0.7831  0.7831  0.7831  0.7802  0.7802  0.7688  0.7688  0.7655  0.7649
[49 : 64]:	0.7649  0.7649  0.7637  0.7582  0.7582  0.7582  0.7582  0.7582  0.7582  0.7543  0.7487  0.7487  0.7473  0.7473  0.7466  0.7466
2024-04-29 19:24:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:24:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #192: GFLOPs: 200.7090. Time: 1183.9703 us. Best GFLOPs: 492.8357
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #193: GFLOPs: 509.1380. Time: 466.7370 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #194: GFLOPs: 180.2599. Time: 1318.2828 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #195: GFLOPs: 210.0064. Time: 1131.5540 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #196: GFLOPs: 160.8853. Time: 1477.0371 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #197: GFLOPs: 161.5261. Time: 1471.1777 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #198: GFLOPs: 479.2249. Time: 495.8706 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #199: GFLOPs: 202.4460. Time: 1173.8118 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #200: GFLOPs: 179.7767. Time: 1321.8261 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #201: GFLOPs: 169.0051. Time: 1406.0732 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #202: GFLOPs: 178.8857. Time: 1328.4102 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #203: GFLOPs: 493.4098. Time: 481.6149 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #204: GFLOPs: 207.3320. Time: 1146.1498 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #205: GFLOPs: 312.2524. Time: 761.0304 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #206: GFLOPs: 349.6685. Time: 679.5967 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #207: GFLOPs: 129.3232. Time: 1837.5162 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #208: GFLOPs: 467.8958. Time: 507.8771 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #209: GFLOPs: 188.8403. Time: 1258.3833 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #210: GFLOPs: 139.8250. Time: 1699.5070 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #211: GFLOPs: 143.4925. Time: 1656.0692 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #212: GFLOPs: 271.9530. Time: 873.8038 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #213: GFLOPs: 166.9298. Time: 1423.5535 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #214: GFLOPs: 173.5044. Time: 1369.6110 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #215: GFLOPs: 188.7920. Time: 1258.7052 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #216: GFLOPs: 148.6211. Time: 1598.9216 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #217: GFLOPs: 128.6594. Time: 1846.9968 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #218: GFLOPs: 113.6608. Time: 2090.7264 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #219: GFLOPs: 113.4282. Time: 2095.0133 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #220: GFLOPs: 451.8449. Time: 525.9184 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #221: GFLOPs: 150.8993. Time: 1574.7823 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #222: GFLOPs: 313.4888. Time: 758.0288 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #223: GFLOPs: 202.9874. Time: 1170.6810 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #224: GFLOPs: 274.2407. Time: 866.5144 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #225: GFLOPs: 169.6315. Time: 1400.8806 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #226: GFLOPs: 290.3641. Time: 818.3984 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #227: GFLOPs: 171.9857. Time: 1381.7055 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #228: GFLOPs: 258.3447. Time: 919.8313 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #229: GFLOPs: 220.0767. Time: 1079.7762 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #230: GFLOPs: 153.5534. Time: 1547.5630 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #231: GFLOPs: 152.0707. Time: 1562.6521 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #232: GFLOPs: 140.6971. Time: 1688.9730 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #233: GFLOPs: 114.6739. Time: 2072.2555 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #234: GFLOPs: 171.6252. Time: 1384.6073 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #235: GFLOPs: 62.8564. Time: 3780.5783 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #236: GFLOPs: 126.7066. Time: 1875.4632 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #237: GFLOPs: 115.2966. Time: 2061.0624 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #238: GFLOPs: 176.1764. Time: 1348.8387 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #239: GFLOPs: 143.9503. Time: 1650.8024 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #240: GFLOPs: 476.0512. Time: 499.1764 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #241: GFLOPs: 350.8828. Time: 677.2448 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #242: GFLOPs: 177.2256. Time: 1340.8532 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #243: GFLOPs: 136.4935. Time: 1740.9879 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #244: GFLOPs: 251.0887. Time: 946.4128 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #245: GFLOPs: 428.8878. Time: 554.0692 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #246: GFLOPs: 301.2253. Time: 788.8896 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #247: GFLOPs: 441.5718. Time: 538.1537 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #248: GFLOPs: 433.2602. Time: 548.4777 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #249: GFLOPs: 219.8347. Time: 1080.9647 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #250: GFLOPs: 89.4220. Time: 2657.4395 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #251: GFLOPs: 366.6392. Time: 648.1400 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #252: GFLOPs: 158.8574. Time: 1495.8920 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #253: GFLOPs: 39.1379. Time: 6071.7020 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #254: GFLOPs: 68.5752. Time: 3465.2982 us. Best GFLOPs: 509.1380
2024-04-29 19:25:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #255: GFLOPs: 117.3551. Time: 2024.9100 us. Best GFLOPs: 509.1380
