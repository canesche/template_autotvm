2024-04-29 13:33:11 [INFO] [task_scheduler.cc:160] Initializing Task #29: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9"
2024-04-29 13:33:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(256), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:33:11 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:33:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(29) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(29), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:33:11 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:33:11 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(4)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(5), T.int64(5), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(4) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 14:03:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:03:46 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:03:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 14:03:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:03:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 14:04:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 14:04:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 14:04:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 14:04:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9981  0.9981  0.9980  0.9978  0.9969  0.9966  0.9965  0.9962  0.9942  0.9934  0.9928  0.9924  0.9918  0.9916  0.9903
[17 : 32]:	0.9903  0.9899  0.9898  0.9883  0.9880  0.9873  0.9865  0.9865  0.9862  0.9862  0.9860  0.9854  0.9852  0.9849  0.9845  0.9840
[33 : 48]:	0.9836  0.9831  0.9829  0.9824  0.9822  0.9820  0.9819  0.9818  0.9814  0.9808  0.9806  0.9796  0.9794  0.9787  0.9785  0.9782
[49 : 64]:	0.9781  0.9777  0.9776  0.9766  0.9764  0.9764  0.9757  0.9754  0.9752  0.9749  0.9747  0.9747  0.9745  0.9744  0.9742  0.9740
2024-04-29 14:04:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:04:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #1: GFLOPs: 15.2968. Time: 15121.6003 us. Best GFLOPs: 15.2968
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #2: GFLOPs: 71.5808. Time: 3231.4713 us. Best GFLOPs: 71.5808
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #3: GFLOPs: 31.2923. Time: 7391.9463 us. Best GFLOPs: 71.5808
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #4: GFLOPs: 117.9022. Time: 1961.8925 us. Best GFLOPs: 117.9022
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #5: GFLOPs: 45.9498. Time: 5034.0066 us. Best GFLOPs: 117.9022
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #6: GFLOPs: 69.0571. Time: 3349.5663 us. Best GFLOPs: 117.9022
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #7: GFLOPs: 174.7383. Time: 1323.7586 us. Best GFLOPs: 174.7383
2024-04-29 14:27:15 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #8: GFLOPs: 35.8857. Time: 6445.7860 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(29), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_fused_fused * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b70)
l121 = sch.fuse(l119, l120, preserve_unit_iters=True)
sch.vectorize(loop=l121)
b122 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b122)
b148 = sch.decompose_reduction(block=b122, loop=l132)
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #10: GFLOPs: 6.8467. Time: 33784.3953 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #11: GFLOPs: 55.1821. Time: 4191.7850 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #12: GFLOPs: 41.7256. Time: 5543.6303 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #13: GFLOPs: 44.8779. Time: 5154.2352 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #14: GFLOPs: 42.8069. Time: 5403.6039 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #15: GFLOPs: 116.4420. Time: 1986.4944 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #16: GFLOPs: 9.5601. Time: 24195.4542 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #17: GFLOPs: 20.3016. Time: 11393.7680 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #18: GFLOPs: 65.4882. Time: 3532.1097 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #19: GFLOPs: 71.4943. Time: 3235.3813 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #20: GFLOPs: 57.6728. Time: 4010.7512 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #21: GFLOPs: 42.8409. Time: 5399.3107 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #22: GFLOPs: 54.1228. Time: 4273.8242 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #23: GFLOPs: 11.8666. Time: 19492.6495 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #24: GFLOPs: 94.9884. Time: 2435.1548 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #25: GFLOPs: 4.6032. Time: 50250.0587 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #26: GFLOPs: 6.5824. Time: 35141.1500 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #27: GFLOPs: 82.8988. Time: 2790.2853 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #28: GFLOPs: 66.9121. Time: 3456.9451 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #29: GFLOPs: 27.3838. Time: 8447.0096 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #30: GFLOPs: 14.0332. Time: 16483.1783 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #31: GFLOPs: 3.4730. Time: 66603.3847 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #32: GFLOPs: 62.7036. Time: 3688.9645 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #33: GFLOPs: 97.3686. Time: 2375.6250 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #34: GFLOPs: 7.2602. Time: 31860.1747 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #35: GFLOPs: 78.8562. Time: 2933.3316 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #36: GFLOPs: 17.8144. Time: 12984.4814 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #37: GFLOPs: 144.5891. Time: 1599.7844 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #38: GFLOPs: 37.1976. Time: 6218.4536 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #39: GFLOPs: 14.5100. Time: 15941.5537 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #40: GFLOPs: 60.7983. Time: 3804.5705 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #41: GFLOPs: 168.1071. Time: 1375.9763 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #42: GFLOPs: 17.0171. Time: 13592.8886 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #43: GFLOPs: 54.0682. Time: 4278.1414 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(98) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(4)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(5)):
                        for ax3_ax4_fused in T.vectorized(T.int64(20)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(64), ic_0 * T.int64(16) + ax1)
                                v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(98) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l107, l108, l109, l110, l111, preserve_unit_iters=True)
l113, l114 = sch.split(loop=l112, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l113)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(98) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(4)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(5)):
                        for ax3_ax4_fused in T.vectorized(T.int64(20)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(64), ic_0 * T.int64(16) + ax1)
                                v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(98) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l107, l108, l109, l110, l111, preserve_unit_iters=True)
l113, l114 = sch.split(loop=l112, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l113)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #46: GFLOPs: 118.2768. Time: 1955.6778 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(15), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(2) * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(4), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(2) * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(2) * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #48: GFLOPs: 56.6123. Time: 4085.8874 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #49: GFLOPs: 2.3163. Time: 99860.2867 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #50: GFLOPs: 55.9414. Time: 4134.8887 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #51: GFLOPs: 73.5763. Time: 3143.8303 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #52: GFLOPs: 31.0745. Time: 7443.7659 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #53: GFLOPs: 158.5884. Time: 1458.5641 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #54: GFLOPs: 55.8435. Time: 4142.1388 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #55: GFLOPs: 77.7617. Time: 2974.6184 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #56: GFLOPs: 26.6754. Time: 8671.3393 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #57: GFLOPs: 29.2570. Time: 7906.2018 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #58: GFLOPs: 0.5936. Time: 389665.9663 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #59: GFLOPs: 13.3678. Time: 17303.6133 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #60: GFLOPs: 59.7941. Time: 3868.4650 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #61: GFLOPs: 62.4018. Time: 3706.8071 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #62: GFLOPs: 80.0818. Time: 2888.4390 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #63: GFLOPs: 10.5021. Time: 22025.1474 us. Best GFLOPs: 174.7383
2024-04-29 14:27:16 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #64: GFLOPs: 5.9901. Time: 38615.3537 us. Best GFLOPs: 174.7383
2024-04-29 15:13:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:13:19 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 15:13:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 15:13:23 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 15:13:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 15:13:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 15:13:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 15:14:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 15:14:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0017  1.0017  0.9718  0.9663  0.9030  0.9030  0.9030  0.8995  0.8995  0.8876  0.8872  0.8739  0.8739  0.8731  0.8613  0.8613
[17 : 32]:	0.8613  0.8613  0.8613  0.8613  0.8613  0.8613  0.8568  0.8568  0.8568  0.8521  0.8438  0.8438  0.8407  0.8315  0.8209  0.8187
[33 : 48]:	0.8184  0.8143  0.8135  0.8032  0.8028  0.8022  0.7802  0.7724  0.7704  0.7704  0.7610  0.7564  0.7563  0.7544  0.7517  0.7478
[49 : 64]:	0.7340  0.7328  0.7328  0.7328  0.7269  0.7247  0.7191  0.7128  0.7107  0.7107  0.7072  0.7072  0.7072  0.7072  0.7052  0.7045
2024-04-29 15:14:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:14:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(64), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(32)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(29)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(64), ic_0 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #66: GFLOPs: 230.1782. Time: 1004.9231 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #67: GFLOPs: 176.0303. Time: 1314.0428 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #68: GFLOPs: 168.7603. Time: 1370.6503 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #69: GFLOPs: 150.0284. Time: 1541.7838 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #70: GFLOPs: 132.7294. Time: 1742.7284 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #71: GFLOPs: 131.6817. Time: 1756.5951 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #72: GFLOPs: 149.6336. Time: 1545.8514 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #73: GFLOPs: 155.1403. Time: 1490.9817 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #74: GFLOPs: 206.5735. Time: 1119.7533 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #75: GFLOPs: 104.2030. Time: 2219.8148 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #76: GFLOPs: 110.2277. Time: 2098.4874 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #77: GFLOPs: 149.0347. Time: 1552.0638 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #78: GFLOPs: 174.6767. Time: 1324.2253 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #79: GFLOPs: 153.4616. Time: 1507.2914 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #80: GFLOPs: 164.5588. Time: 1405.6457 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #81: GFLOPs: 92.2829. Time: 2506.5450 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #82: GFLOPs: 151.5572. Time: 1526.2319 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #83: GFLOPs: 148.6402. Time: 1556.1827 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #84: GFLOPs: 135.4141. Time: 1708.1782 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #85: GFLOPs: 151.1433. Time: 1530.4107 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #86: GFLOPs: 156.6031. Time: 1477.0546 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #87: GFLOPs: 98.2802. Time: 2353.5899 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #88: GFLOPs: 88.9831. Time: 2599.4974 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #89: GFLOPs: 146.7619. Time: 1576.0991 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #90: GFLOPs: 93.2124. Time: 2481.5522 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #91: GFLOPs: 85.6764. Time: 2699.8263 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #92: GFLOPs: 130.2738. Time: 1775.5782 us. Best GFLOPs: 230.1782
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #93: GFLOPs: 327.0235. Time: 707.3233 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #94: GFLOPs: 84.9667. Time: 2722.3755 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #95: GFLOPs: 81.6776. Time: 2832.0036 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #96: GFLOPs: 147.0367. Time: 1573.1534 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #97: GFLOPs: 109.6688. Time: 2109.1818 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #98: GFLOPs: 158.3247. Time: 1460.9932 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #99: GFLOPs: 144.2549. Time: 1603.4902 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #100: GFLOPs: 123.5362. Time: 1872.4173 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #101: GFLOPs: 98.6535. Time: 2344.6852 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #102: GFLOPs: 100.7928. Time: 2294.9185 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #103: GFLOPs: 136.1497. Time: 1698.9492 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #104: GFLOPs: 163.5396. Time: 1414.4057 us. Best GFLOPs: 327.0235
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #105: GFLOPs: 337.2361. Time: 685.9033 us. Best GFLOPs: 337.2361
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #106: GFLOPs: 380.7602. Time: 607.4987 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #107: GFLOPs: 34.4025. Time: 6723.6803 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #108: GFLOPs: 161.1417. Time: 1435.4533 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #109: GFLOPs: 166.2282. Time: 1391.5290 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #110: GFLOPs: 167.3011. Time: 1382.6054 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #111: GFLOPs: 70.1827. Time: 3295.8446 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #112: GFLOPs: 196.4766. Time: 1177.2974 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #113: GFLOPs: 172.6033. Time: 1340.1332 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #114: GFLOPs: 158.3956. Time: 1460.3399 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #115: GFLOPs: 102.0880. Time: 2265.8033 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #116: GFLOPs: 67.7456. Time: 3414.4121 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #117: GFLOPs: 286.0229. Time: 808.7162 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #118: GFLOPs: 165.1573. Time: 1400.5517 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #119: GFLOPs: 119.5684. Time: 1934.5527 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #120: GFLOPs: 120.9364. Time: 1912.6698 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #121: GFLOPs: 159.0240. Time: 1454.5684 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #122: GFLOPs: 162.6955. Time: 1421.7444 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #123: GFLOPs: 61.5370. Time: 3758.8981 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #124: GFLOPs: 128.9079. Time: 1794.3925 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #125: GFLOPs: 108.2285. Time: 2137.2492 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #126: GFLOPs: 37.1819. Time: 6221.0782 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #127: GFLOPs: 4.3403. Time: 53294.1593 us. Best GFLOPs: 380.7602
2024-04-29 15:15:37 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #128: GFLOPs: 5.4721. Time: 42270.7397 us. Best GFLOPs: 380.7602
2024-04-29 17:17:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:17:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:17:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 17:17:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:17:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 17:18:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 17:18:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 17:18:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 17:18:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9228  0.9228  0.9228  0.8017  0.8014  0.7344  0.7178  0.7178  0.7178  0.7178  0.7178  0.7162  0.7162  0.7162  0.7136  0.6904
[17 : 32]:	0.6841  0.6841  0.6841  0.6841  0.6649  0.6624  0.6624  0.6439  0.6439  0.6439  0.6438  0.6408  0.6380  0.6324  0.6313  0.6221
[33 : 48]:	0.6167  0.6083  0.6072  0.5998  0.5917  0.5905  0.5895  0.5865  0.5832  0.5832  0.5813  0.5813  0.5751  0.5704  0.5696  0.5615
[49 : 64]:	0.5615  0.5615  0.5598  0.5572  0.5572  0.5563  0.5556  0.5553  0.5516  0.5516  0.5516  0.5507  0.5506  0.5506  0.5501  0.5467
2024-04-29 17:18:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:18:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #129: GFLOPs: 343.0762. Time: 674.2273 us. Best GFLOPs: 380.7602
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #130: GFLOPs: 199.0694. Time: 1161.9633 us. Best GFLOPs: 380.7602
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #131: GFLOPs: 163.6960. Time: 1413.0548 us. Best GFLOPs: 380.7602
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #132: GFLOPs: 387.9915. Time: 596.1764 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #133: GFLOPs: 334.6696. Time: 691.1634 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #134: GFLOPs: 236.3741. Time: 978.5818 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #135: GFLOPs: 318.5430. Time: 726.1543 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #136: GFLOPs: 321.8646. Time: 718.6604 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #137: GFLOPs: 200.8922. Time: 1151.4206 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #138: GFLOPs: 340.4316. Time: 679.4650 us. Best GFLOPs: 387.9915
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #139: GFLOPs: 389.0339. Time: 594.5789 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #140: GFLOPs: 191.2207. Time: 1209.6568 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #141: GFLOPs: 188.4656. Time: 1227.3399 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #142: GFLOPs: 158.7595. Time: 1456.9924 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #143: GFLOPs: 189.0013. Time: 1223.8609 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #144: GFLOPs: 166.6051. Time: 1388.3806 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #145: GFLOPs: 189.6509. Time: 1219.6694 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #146: GFLOPs: 188.1500. Time: 1229.3984 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #147: GFLOPs: 173.5305. Time: 1332.9727 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #148: GFLOPs: 188.9980. Time: 1223.8827 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #149: GFLOPs: 173.0310. Time: 1336.8200 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #150: GFLOPs: 199.1606. Time: 1161.4315 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #151: GFLOPs: 387.1319. Time: 597.5001 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #152: GFLOPs: 186.5687. Time: 1239.8188 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #153: GFLOPs: 165.5958. Time: 1396.8435 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #154: GFLOPs: 164.7012. Time: 1404.4304 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #155: GFLOPs: 168.0184. Time: 1376.7027 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #156: GFLOPs: 375.3928. Time: 616.1849 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #157: GFLOPs: 164.7450. Time: 1404.0572 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #158: GFLOPs: 170.4939. Time: 1356.7134 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #159: GFLOPs: 286.2352. Time: 808.1164 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #160: GFLOPs: 156.7627. Time: 1475.5511 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #161: GFLOPs: 155.2394. Time: 1490.0300 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #162: GFLOPs: 130.8951. Time: 1767.1504 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #163: GFLOPs: 287.8013. Time: 803.7189 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #164: GFLOPs: 190.6383. Time: 1213.3517 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #165: GFLOPs: 155.3213. Time: 1489.2439 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #166: GFLOPs: 384.4632. Time: 601.6476 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #167: GFLOPs: 82.5446. Time: 2802.2599 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #168: GFLOPs: 296.0171. Time: 781.4121 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #169: GFLOPs: 178.8751. Time: 1293.1448 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #170: GFLOPs: 378.1265. Time: 611.7300 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #171: GFLOPs: 105.0245. Time: 2202.4513 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #172: GFLOPs: 106.7008. Time: 2167.8496 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #173: GFLOPs: 341.2994. Time: 677.7374 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #174: GFLOPs: 331.0294. Time: 698.7637 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #175: GFLOPs: 337.2261. Time: 685.9237 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #176: GFLOPs: 333.0558. Time: 694.5122 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #177: GFLOPs: 321.3963. Time: 719.7076 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #178: GFLOPs: 299.4141. Time: 772.5466 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #179: GFLOPs: 76.7986. Time: 3011.9233 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #180: GFLOPs: 162.4508. Time: 1423.8860 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #181: GFLOPs: 192.1018. Time: 1204.1081 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #182: GFLOPs: 131.3398. Time: 1761.1675 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #183: GFLOPs: 323.7523. Time: 714.4702 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #184: GFLOPs: 124.2505. Time: 1861.6536 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #185: GFLOPs: 148.6942. Time: 1555.6177 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #186: GFLOPs: 196.2498. Time: 1178.6577 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #187: GFLOPs: 143.4229. Time: 1612.7922 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #188: GFLOPs: 179.1483. Time: 1291.1725 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #189: GFLOPs: 126.3822. Time: 1830.2532 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #190: GFLOPs: 23.2979. Time: 9928.4096 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #191: GFLOPs: 5.6330. Time: 41063.4733 us. Best GFLOPs: 389.0339
2024-04-29 17:19:55 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #192: GFLOPs: 4.7429. Time: 48770.2797 us. Best GFLOPs: 389.0339
2024-04-29 18:27:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:27:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:27:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:27:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:27:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:27:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:28:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:28:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:28:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9601  0.9391  0.9333  0.9333  0.9333  0.9315  0.9315  0.9272  0.9213  0.9213  0.9213  0.9143  0.9134  0.9112  0.9066  0.8944
[17 : 32]:	0.8920  0.8860  0.8789  0.8681  0.8676  0.8357  0.8323  0.8274  0.8274  0.8209  0.8209  0.8158  0.8158  0.8113  0.8068  0.8068
[33 : 48]:	0.7999  0.7939  0.7939  0.7939  0.7939  0.7934  0.7934  0.7934  0.7888  0.7871  0.7859  0.7859  0.7836  0.7836  0.7836  0.7834
[49 : 64]:	0.7830  0.7822  0.7820  0.7703  0.7702  0.7702  0.7702  0.7668  0.7615  0.7574  0.7562  0.7536  0.7535  0.7535  0.7524  0.7524
2024-04-29 18:28:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:28:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #193: GFLOPs: 190.4201. Time: 1214.7424 us. Best GFLOPs: 389.0339
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #194: GFLOPs: 341.8203. Time: 676.7046 us. Best GFLOPs: 389.0339
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #195: GFLOPs: 397.2587. Time: 582.2688 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #196: GFLOPs: 367.2574. Time: 629.8345 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #197: GFLOPs: 211.9714. Time: 1091.2387 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #198: GFLOPs: 387.9515. Time: 596.2379 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #199: GFLOPs: 389.3287. Time: 594.1287 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #200: GFLOPs: 366.1919. Time: 631.6670 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #201: GFLOPs: 362.8231. Time: 637.5321 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #202: GFLOPs: 396.9359. Time: 582.7424 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #203: GFLOPs: 211.9892. Time: 1091.1468 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #204: GFLOPs: 166.8790. Time: 1386.1025 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #205: GFLOPs: 321.0238. Time: 720.5427 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #206: GFLOPs: 276.2454. Time: 837.3401 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #207: GFLOPs: 340.5601. Time: 679.2085 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #208: GFLOPs: 391.6455. Time: 590.6142 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #209: GFLOPs: 371.1976. Time: 623.1489 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #210: GFLOPs: 369.0706. Time: 626.7401 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #211: GFLOPs: 348.8554. Time: 663.0580 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #212: GFLOPs: 391.0674. Time: 591.4872 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #213: GFLOPs: 360.7871. Time: 641.1299 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #214: GFLOPs: 192.7481. Time: 1200.0705 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #215: GFLOPs: 296.7865. Time: 779.3863 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #216: GFLOPs: 379.2032. Time: 609.9931 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #217: GFLOPs: 197.0628. Time: 1173.7954 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #218: GFLOPs: 339.3555. Time: 681.6195 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #219: GFLOPs: 377.5300. Time: 612.6966 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #220: GFLOPs: 200.9811. Time: 1150.9109 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #221: GFLOPs: 396.3066. Time: 583.6678 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #222: GFLOPs: 174.5930. Time: 1324.8608 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #223: GFLOPs: 380.2014. Time: 608.3917 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #224: GFLOPs: 197.2486. Time: 1172.6896 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #225: GFLOPs: 309.2212. Time: 748.0451 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #226: GFLOPs: 204.8296. Time: 1129.2866 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #227: GFLOPs: 125.6834. Time: 1840.4291 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #228: GFLOPs: 299.0701. Time: 773.4354 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #229: GFLOPs: 299.7219. Time: 771.7533 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #230: GFLOPs: 211.6057. Time: 1093.1244 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #231: GFLOPs: 203.0901. Time: 1138.9594 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #232: GFLOPs: 203.0654. Time: 1139.0979 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #233: GFLOPs: 158.0053. Time: 1463.9467 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #234: GFLOPs: 312.2085. Time: 740.8874 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #235: GFLOPs: 280.4221. Time: 824.8685 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #236: GFLOPs: 170.1588. Time: 1359.3851 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #237: GFLOPs: 198.9803. Time: 1162.4836 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #238: GFLOPs: 129.3509. Time: 1788.2477 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #239: GFLOPs: 112.7191. Time: 2052.1049 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #240: GFLOPs: 78.1825. Time: 2958.6091 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #241: GFLOPs: 287.8005. Time: 803.7211 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #242: GFLOPs: 196.7527. Time: 1175.6449 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #243: GFLOPs: 302.0871. Time: 765.7107 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #244: GFLOPs: 158.3569. Time: 1460.6968 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #245: GFLOPs: 198.3689. Time: 1166.0667 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #246: GFLOPs: 125.8780. Time: 1837.5837 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #247: GFLOPs: 168.5976. Time: 1371.9727 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #248: GFLOPs: 100.7573. Time: 2295.7291 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #249: GFLOPs: 89.9776. Time: 2570.7671 us. Best GFLOPs: 397.2587
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #250: GFLOPs: 418.5446. Time: 552.6564 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #251: GFLOPs: 179.6655. Time: 1287.4556 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #252: GFLOPs: 169.4461. Time: 1365.1031 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #253: GFLOPs: 334.2295. Time: 692.0734 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #254: GFLOPs: 111.3104. Time: 2078.0742 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #255: GFLOPs: 31.6736. Time: 7302.9685 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #256: GFLOPs: 26.9987. Time: 8567.4943 us. Best GFLOPs: 418.5446
2024-04-29 18:29:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:29:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:29:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:29:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:30:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:30:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:30:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:30:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb331e88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bb257f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc866af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5c91528)]: 0 failure(s)
2024-04-29 18:30:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9916  0.9916  0.9274  0.9146  0.9121  0.9121  0.8731  0.8731  0.8731  0.8731  0.8703  0.8511  0.8386  0.8318  0.8318  0.8318
[17 : 32]:	0.8318  0.8293  0.8272  0.8254  0.8254  0.8253  0.8253  0.8247  0.8247  0.8238  0.8222  0.8185  0.8185  0.8185  0.8144  0.8144
[33 : 48]:	0.8128  0.8105  0.8094  0.8042  0.8042  0.7999  0.7999  0.7999  0.7974  0.7974  0.7855  0.7855  0.7855  0.7847  0.7779  0.7743
[49 : 64]:	0.7743  0.7649  0.7544  0.7507  0.7507  0.7496  0.7439  0.7381  0.7381  0.7376  0.7348  0.7348  0.7337  0.7336  0.7300  0.7278
2024-04-29 18:30:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:30:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #257: GFLOPs: 192.8457. Time: 1199.4632 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #258: GFLOPs: 106.4111. Time: 2173.7519 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #259: GFLOPs: 178.1584. Time: 1298.3467 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #260: GFLOPs: 376.7135. Time: 614.0245 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #261: GFLOPs: 214.6815. Time: 1077.4630 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #262: GFLOPs: 200.9502. Time: 1151.0878 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #263: GFLOPs: 120.9640. Time: 1912.2326 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #264: GFLOPs: 376.7928. Time: 613.8955 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #265: GFLOPs: 168.4750. Time: 1372.9718 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #266: GFLOPs: 352.9456. Time: 655.3740 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #267: GFLOPs: 150.5750. Time: 1536.1868 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #268: GFLOPs: 369.4994. Time: 626.0129 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #269: GFLOPs: 343.5710. Time: 673.2563 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #270: GFLOPs: 177.3204. Time: 1304.4826 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #271: GFLOPs: 365.3553. Time: 633.1134 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #272: GFLOPs: 212.1396. Time: 1090.3734 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #273: GFLOPs: 396.2881. Time: 583.6950 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #274: GFLOPs: 217.8814. Time: 1061.6391 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #275: GFLOPs: 340.3507. Time: 679.6266 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #276: GFLOPs: 273.2634. Time: 846.4775 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #277: GFLOPs: 367.5501. Time: 629.3328 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #278: GFLOPs: 205.7573. Time: 1124.1950 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #279: GFLOPs: 403.2741. Time: 573.5835 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #280: GFLOPs: 397.7290. Time: 581.5803 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #281: GFLOPs: 210.7798. Time: 1097.4074 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #282: GFLOPs: 383.4116. Time: 603.2978 us. Best GFLOPs: 418.5446
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #283: GFLOPs: 422.1528. Time: 547.9328 us. Best GFLOPs: 422.1528
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #284: GFLOPs: 362.3142. Time: 638.4276 us. Best GFLOPs: 422.1528
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #285: GFLOPs: 396.7273. Time: 583.0487 us. Best GFLOPs: 422.1528
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #286: GFLOPs: 212.8219. Time: 1086.8776 us. Best GFLOPs: 422.1528
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #287: GFLOPs: 422.9808. Time: 546.8602 us. Best GFLOPs: 422.9808
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #288: GFLOPs: 382.1322. Time: 605.3177 us. Best GFLOPs: 422.9808
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #289: GFLOPs: 360.0086. Time: 642.5163 us. Best GFLOPs: 422.9808
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #290: GFLOPs: 276.0557. Time: 837.9156 us. Best GFLOPs: 422.9808
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #291: GFLOPs: 450.1895. Time: 513.8089 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #292: GFLOPs: 131.0426. Time: 1765.1616 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #293: GFLOPs: 401.7315. Time: 575.7859 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #294: GFLOPs: 367.9581. Time: 628.6350 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #295: GFLOPs: 383.7835. Time: 602.7132 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #296: GFLOPs: 198.3347. Time: 1166.2677 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #297: GFLOPs: 366.1930. Time: 631.6651 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #298: GFLOPs: 395.8316. Time: 584.3681 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #299: GFLOPs: 99.6067. Time: 2322.2462 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #300: GFLOPs: 388.8451. Time: 594.8677 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #301: GFLOPs: 356.1880. Time: 649.4081 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #302: GFLOPs: 182.6347. Time: 1266.5247 us. Best GFLOPs: 450.1895
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #303: GFLOPs: 516.2038. Time: 448.1008 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #304: GFLOPs: 364.3848. Time: 634.7996 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #305: GFLOPs: 474.8085. Time: 487.1677 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #306: GFLOPs: 348.7634. Time: 663.2330 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #307: GFLOPs: 386.9065. Time: 597.8482 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #308: GFLOPs: 320.0701. Time: 722.6898 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #309: GFLOPs: 321.6948. Time: 719.0397 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #310: GFLOPs: 308.6900. Time: 749.3321 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #311: GFLOPs: 167.2077. Time: 1383.3775 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #312: GFLOPs: 336.5828. Time: 687.2347 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #313: GFLOPs: 393.3702. Time: 588.0246 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #314: GFLOPs: 339.0957. Time: 682.1418 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #315: GFLOPs: 174.6502. Time: 1324.4263 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #316: GFLOPs: 404.6277. Time: 571.6647 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #317: GFLOPs: 146.9531. Time: 1574.0485 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #318: GFLOPs: 5.4688. Time: 42296.6413 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #319: GFLOPs: 8.6382. Time: 26777.7373 us. Best GFLOPs: 516.2038
2024-04-29 18:32:03 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_9] Trial #320: GFLOPs: 1.7476. Time: 132361.4490 us. Best GFLOPs: 516.2038
