2024-04-29 13:32:24 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3"
2024-04-29 13:32:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:32:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:32:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(6), T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), oh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(8)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0 in T.grid(T.int64(56), T.int64(1), T.int64(1)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), oh_0 + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:49:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:49:06 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:49:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 13:49:11 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:49:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 13:49:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 13:49:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 13:49:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 13:49:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9992  0.9992  0.9990  0.9987  0.9981  0.9974  0.9971  0.9968  0.9967  0.9964  0.9959  0.9959  0.9959  0.9959  0.9957
[17 : 32]:	0.9955  0.9953  0.9950  0.9947  0.9946  0.9937  0.9936  0.9933  0.9932  0.9929  0.9928  0.9926  0.9925  0.9923  0.9916  0.9915
[33 : 48]:	0.9913  0.9912  0.9910  0.9906  0.9897  0.9883  0.9883  0.9880  0.9868  0.9861  0.9852  0.9850  0.9850  0.9847  0.9844  0.9843
[49 : 64]:	0.9835  0.9827  0.9816  0.9813  0.9805  0.9803  0.9797  0.9782  0.9779  0.9769  0.9753  0.9752  0.9747  0.9741  0.9732  0.9716
2024-04-29 13:49:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:49:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #1: GFLOPs: 7.5567. Time: 30649.9212 us. Best GFLOPs: 7.5567
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(8) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(8), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100352))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100352) // T.int64(1792))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1792) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b113)
b138 = sch.decompose_reduction(block=b113, loop=l122)
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #3: GFLOPs: 6.0010. Time: 38595.6310 us. Best GFLOPs: 7.5567
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #4: GFLOPs: 134.2294. Time: 1725.4965 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #5: GFLOPs: 62.6404. Time: 3697.4899 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #6: GFLOPs: 6.4575. Time: 35867.0040 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(3364)):
            for i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused // T.int64(58))
                    v_i3 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused % T.int64(58))
                    v_i4 = T.axis.spatial(T.int64(64), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 4, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #8: GFLOPs: 34.7796. Time: 6659.4316 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #9: GFLOPs: 3.0926. Time: 74893.5577 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(3364)):
            for i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused // T.int64(58))
                    v_i3 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused % T.int64(58))
                    v_i4 = T.axis.spatial(T.int64(64), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(28) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(8)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #11: GFLOPs: 61.2879. Time: 3779.0918 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #12: GFLOPs: 0.2483. Time: 932695.4543 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #13: GFLOPs: 18.0982. Time: 12797.5500 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #14: GFLOPs: 36.0131. Time: 6431.3346 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #15: GFLOPs: 119.7598. Time: 1933.9748 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #16: GFLOPs: 11.7697. Time: 19678.7612 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #17: GFLOPs: 126.0161. Time: 1837.9586 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(58), T.int64(10)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(8) + ow_1 * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(8) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(8)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(8) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #19: GFLOPs: 2.5432. Time: 91071.8003 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #20: GFLOPs: 23.3030. Time: 9939.1530 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #21: GFLOPs: 92.7547. Time: 2497.0437 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #22: GFLOPs: 15.5950. Time: 14851.7257 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #23: GFLOPs: 17.1007. Time: 13544.0344 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #24: GFLOPs: 72.8336. Time: 3180.0236 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #25: GFLOPs: 72.4569. Time: 3196.5525 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #26: GFLOPs: 105.0899. Time: 2203.9457 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #27: GFLOPs: 51.0486. Time: 4537.0927 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #28: GFLOPs: 69.3220. Time: 3341.1106 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #29: GFLOPs: 60.8940. Time: 3803.5360 us. Best GFLOPs: 134.2294
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #30: GFLOPs: 179.2373. Time: 1292.2112 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #31: GFLOPs: 147.0395. Time: 1575.1714 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #32: GFLOPs: 5.8475. Time: 39608.8027 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #33: GFLOPs: 2.3046. Time: 100500.8160 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #34: GFLOPs: 3.1140. Time: 74378.9757 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #35: GFLOPs: 116.8337. Time: 1982.4108 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #36: GFLOPs: 14.4871. Time: 15987.4444 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #37: GFLOPs: 8.8624. Time: 26134.3330 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #38: GFLOPs: 5.8806. Time: 39385.8680 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #39: GFLOPs: 34.3041. Time: 6751.7388 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #40: GFLOPs: 26.7530. Time: 8657.4357 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #41: GFLOPs: 113.4716. Time: 2041.1490 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #42: GFLOPs: 83.0655. Time: 2788.3114 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #43: GFLOPs: 93.0316. Time: 2489.6107 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #44: GFLOPs: 4.3534. Time: 53202.1320 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #45: GFLOPs: 85.0844. Time: 2722.1476 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #46: GFLOPs: 127.0665. Time: 1822.7649 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #47: GFLOPs: 59.1374. Time: 3916.5103 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #48: GFLOPs: 4.9039. Time: 47230.3237 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #49: GFLOPs: 36.9228. Time: 6272.8881 us. Best GFLOPs: 179.2373
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(3364)):
            for i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused // T.int64(58))
                    v_i3 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused % T.int64(58))
                    v_i4 = T.axis.spatial(T.int64(64), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100352))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100352) // T.int64(1792))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1792) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #51: GFLOPs: 210.6370. Time: 1099.5811 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #52: GFLOPs: 30.2307. Time: 7661.4989 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #53: GFLOPs: 17.3246. Time: 13369.0005 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #54: GFLOPs: 26.3938. Time: 8775.2512 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #55: GFLOPs: 0.2364. Time: 979620.3183 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #56: GFLOPs: 5.0352. Time: 45999.0570 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #57: GFLOPs: 4.2784. Time: 54135.5640 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #58: GFLOPs: 94.5281. Time: 2450.1963 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #59: GFLOPs: 51.1665. Time: 4526.6450 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #60: GFLOPs: 113.7920. Time: 2035.4021 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #61: GFLOPs: 9.0606. Time: 25562.6647 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #62: GFLOPs: 20.8949. Time: 11084.6215 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #63: GFLOPs: 156.5512. Time: 1479.4672 us. Best GFLOPs: 210.6370
2024-04-29 14:25:56 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #64: GFLOPs: 3.2287. Time: 71735.5350 us. Best GFLOPs: 210.6370
2024-04-29 14:46:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:46:50 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 14:46:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 14:46:55 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 14:47:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 14:47:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 14:47:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 14:47:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 14:47:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9964  0.9964  0.9964  0.9890  0.9890  0.9890  0.9763  0.9051  0.8929  0.8435  0.8435  0.8367  0.8353  0.8339  0.8276
[17 : 32]:	0.8269  0.7903  0.7863  0.7735  0.7735  0.7707  0.7696  0.7665  0.7665  0.7665  0.7665  0.7665  0.7664  0.7645  0.7645  0.7645
[33 : 48]:	0.7645  0.7645  0.7644  0.7542  0.7473  0.7422  0.7400  0.7387  0.7384  0.7361  0.7317  0.7282  0.7272  0.7260  0.7260  0.7242
[49 : 64]:	0.7206  0.7206  0.7192  0.7163  0.7079  0.7079  0.7079  0.7078  0.7064  0.7064  0.7015  0.6988  0.6900  0.6896  0.6896  0.6896
2024-04-29 14:47:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:47:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #65: GFLOPs: 145.4731. Time: 1592.1318 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #66: GFLOPs: 146.2168. Time: 1584.0346 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #67: GFLOPs: 99.7599. Time: 2321.6987 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #68: GFLOPs: 173.5575. Time: 1334.4993 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #69: GFLOPs: 193.7555. Time: 1195.3853 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #70: GFLOPs: 167.8152. Time: 1380.1633 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #71: GFLOPs: 113.4484. Time: 2041.5667 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #72: GFLOPs: 99.8814. Time: 2318.8753 us. Best GFLOPs: 210.6370
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #73: GFLOPs: 221.8633. Time: 1043.9418 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #74: GFLOPs: 114.8967. Time: 2015.8309 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #75: GFLOPs: 148.6021. Time: 1558.6081 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #76: GFLOPs: 177.8260. Time: 1302.4664 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #77: GFLOPs: 137.1846. Time: 1688.3261 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #78: GFLOPs: 147.1010. Time: 1574.5127 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #79: GFLOPs: 161.8270. Time: 1431.2346 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #80: GFLOPs: 102.7976. Time: 2253.0911 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #81: GFLOPs: 125.2391. Time: 1849.3613 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #82: GFLOPs: 127.6403. Time: 1814.5712 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #83: GFLOPs: 189.6741. Time: 1221.1070 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #84: GFLOPs: 137.8066. Time: 1680.7058 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #85: GFLOPs: 154.3229. Time: 1500.8300 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #86: GFLOPs: 155.2283. Time: 1492.0761 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #87: GFLOPs: 132.7123. Time: 1745.2220 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #88: GFLOPs: 177.4431. Time: 1305.2768 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #89: GFLOPs: 160.6196. Time: 1441.9934 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #90: GFLOPs: 193.5952. Time: 1196.3746 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #91: GFLOPs: 121.4088. Time: 1907.7065 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #92: GFLOPs: 162.5854. Time: 1424.5588 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #93: GFLOPs: 119.0339. Time: 1945.7684 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #94: GFLOPs: 105.5341. Time: 2194.6680 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #95: GFLOPs: 129.7542. Time: 1785.0090 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #96: GFLOPs: 202.5825. Time: 1143.2992 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #97: GFLOPs: 89.6061. Time: 2584.7845 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #98: GFLOPs: 131.8960. Time: 1756.0226 us. Best GFLOPs: 221.8633
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #99: GFLOPs: 246.9924. Time: 937.7308 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #100: GFLOPs: 189.7159. Time: 1220.8383 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #101: GFLOPs: 134.0313. Time: 1728.0476 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #102: GFLOPs: 139.3699. Time: 1661.8540 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #103: GFLOPs: 145.4046. Time: 1592.8824 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #104: GFLOPs: 153.4023. Time: 1509.8370 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #105: GFLOPs: 154.8834. Time: 1495.3984 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #106: GFLOPs: 128.3735. Time: 1804.2080 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #107: GFLOPs: 123.1910. Time: 1880.1077 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #108: GFLOPs: 60.1925. Time: 3847.8594 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #109: GFLOPs: 180.4415. Time: 1283.5871 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #110: GFLOPs: 194.9318. Time: 1188.1713 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #111: GFLOPs: 111.0720. Time: 2085.2458 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #112: GFLOPs: 202.6641. Time: 1142.8390 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #113: GFLOPs: 74.8404. Time: 3094.7531 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #114: GFLOPs: 168.7992. Time: 1372.1178 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #115: GFLOPs: 123.3452. Time: 1877.7582 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #116: GFLOPs: 178.7409. Time: 1295.8001 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #117: GFLOPs: 113.7071. Time: 2036.9218 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #118: GFLOPs: 86.4927. Time: 2677.8249 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #119: GFLOPs: 205.4620. Time: 1127.2762 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #120: GFLOPs: 96.8988. Time: 2390.2515 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #121: GFLOPs: 135.4570. Time: 1709.8597 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #122: GFLOPs: 136.0646. Time: 1702.2238 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #123: GFLOPs: 167.7882. Time: 1380.3859 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #124: GFLOPs: 143.2179. Time: 1617.2032 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #125: GFLOPs: 83.7875. Time: 2764.2847 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #126: GFLOPs: 20.1521. Time: 11493.2389 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #127: GFLOPs: 41.3746. Time: 5597.9391 us. Best GFLOPs: 246.9924
2024-04-29 14:49:01 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #128: GFLOPs: 7.9621. Time: 29089.4993 us. Best GFLOPs: 246.9924
2024-04-29 15:06:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:06:24 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 15:06:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:06:29 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 15:06:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:06:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:07:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:07:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:07:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9563  0.9563  0.9563  0.9356  0.9356  0.9356  0.9173  0.8651  0.8605  0.8519  0.7868  0.7868  0.7868  0.7849  0.7735  0.7701
[17 : 32]:	0.7701  0.7671  0.7671  0.7671  0.7647  0.7647  0.7575  0.7544  0.7544  0.7535  0.7507  0.7468  0.7424  0.7417  0.7417  0.7417
[33 : 48]:	0.7417  0.7394  0.7393  0.7389  0.7389  0.7389  0.7382  0.7369  0.7369  0.7318  0.7297  0.7297  0.7296  0.7296  0.7296  0.7292
[49 : 64]:	0.7292  0.7292  0.7292  0.7288  0.7178  0.7178  0.7178  0.7149  0.7129  0.7106  0.7106  0.7100  0.7100  0.7095  0.7095  0.7089
2024-04-29 15:07:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:07:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #129: GFLOPs: 135.7559. Time: 1706.0948 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #130: GFLOPs: 52.3643. Time: 4423.0949 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #131: GFLOPs: 64.2587. Time: 3604.3726 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #132: GFLOPs: 137.6884. Time: 1682.1491 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #133: GFLOPs: 204.8450. Time: 1130.6716 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #134: GFLOPs: 133.3431. Time: 1736.9658 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #135: GFLOPs: 119.2690. Time: 1941.9330 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #136: GFLOPs: 219.2734. Time: 1056.2722 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #137: GFLOPs: 149.2712. Time: 1551.6211 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #138: GFLOPs: 180.8189. Time: 1280.9079 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #139: GFLOPs: 94.1039. Time: 2461.2423 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #140: GFLOPs: 50.5857. Time: 4578.6174 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #141: GFLOPs: 102.6201. Time: 2256.9895 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #142: GFLOPs: 118.0948. Time: 1961.2420 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #143: GFLOPs: 123.1615. Time: 1880.5593 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #144: GFLOPs: 201.5449. Time: 1149.1852 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #145: GFLOPs: 176.4443. Time: 1312.6659 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #146: GFLOPs: 179.9233. Time: 1287.2844 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #147: GFLOPs: 129.3951. Time: 1789.9632 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #148: GFLOPs: 186.3234. Time: 1243.0670 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #149: GFLOPs: 107.6444. Time: 2151.6442 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #150: GFLOPs: 186.5222. Time: 1241.7419 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #151: GFLOPs: 172.9904. Time: 1338.8743 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #152: GFLOPs: 138.2547. Time: 1675.2592 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #153: GFLOPs: 184.7201. Time: 1253.8560 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #154: GFLOPs: 119.7510. Time: 1934.1174 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #155: GFLOPs: 122.9075. Time: 1884.4449 us. Best GFLOPs: 246.9924
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #156: GFLOPs: 272.9873. Time: 848.4367 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #157: GFLOPs: 206.9273. Time: 1119.2936 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #158: GFLOPs: 197.4569. Time: 1172.9770 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #159: GFLOPs: 172.1663. Time: 1345.2831 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #160: GFLOPs: 189.5283. Time: 1222.0463 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #161: GFLOPs: 182.0999. Time: 1271.8979 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #162: GFLOPs: 173.5774. Time: 1334.3463 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #163: GFLOPs: 179.0953. Time: 1293.2356 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #164: GFLOPs: 85.4732. Time: 2709.7654 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #165: GFLOPs: 87.4824. Time: 2647.5324 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #166: GFLOPs: 55.1510. Time: 4199.6043 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #167: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(3364)):
            for i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused // T.int64(58))
                    v_i3 = T.axis.spatial(T.int64(58), i0_i1_i2_i3_fused % T.int64(58))
                    v_i4 = T.axis.spatial(T.int64(64), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100352))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100352) // T.int64(1792))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1792) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #168: GFLOPs: 176.4668. Time: 1312.4986 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #169: GFLOPs: 128.7791. Time: 1798.5251 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #170: GFLOPs: 94.8450. Time: 2442.0085 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #171: GFLOPs: 158.1797. Time: 1464.2356 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #172: GFLOPs: 186.6369. Time: 1240.9787 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #173: GFLOPs: 100.9531. Time: 2294.2583 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #174: GFLOPs: 217.4244. Time: 1065.2548 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #175: GFLOPs: 182.4846. Time: 1269.2160 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #176: GFLOPs: 169.8635. Time: 1363.5212 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #177: GFLOPs: 168.7971. Time: 1372.1347 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #178: GFLOPs: 174.8879. Time: 1324.3480 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #179: GFLOPs: 171.9875. Time: 1346.6817 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #180: GFLOPs: 195.0311. Time: 1187.5664 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #181: GFLOPs: 178.0261. Time: 1301.0023 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #182: GFLOPs: 134.1090. Time: 1727.0462 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #183: GFLOPs: 186.5657. Time: 1241.4520 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #184: GFLOPs: 153.6762. Time: 1507.1461 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #185: GFLOPs: 165.9789. Time: 1395.4329 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #186: GFLOPs: 111.1386. Time: 2083.9966 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #187: GFLOPs: 98.1605. Time: 2359.5272 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #188: GFLOPs: 52.4384. Time: 4416.8508 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #189: GFLOPs: 144.4056. Time: 1603.9018 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #190: GFLOPs: 5.9110. Time: 39183.0280 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #191: GFLOPs: 73.5592. Time: 3148.6517 us. Best GFLOPs: 272.9873
2024-04-29 15:08:49 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #192: GFLOPs: 20.6497. Time: 11216.2828 us. Best GFLOPs: 272.9873
2024-04-29 15:47:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:47:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 15:47:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:47:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 15:48:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:48:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:48:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 15:48:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9673  0.9300  0.9300  0.9065  0.9046  0.8940  0.8940  0.8476  0.8140  0.8095  0.8094  0.8037  0.7940  0.7928  0.7928  0.7916
[17 : 32]:	0.7907  0.7813  0.7420  0.7420  0.7420  0.7264  0.7247  0.7247  0.7247  0.7221  0.7221  0.7212  0.7187  0.7134  0.7069  0.7069
[33 : 48]:	0.7069  0.7049  0.7047  0.7035  0.6974  0.6974  0.6963  0.6956  0.6921  0.6874  0.6836  0.6813  0.6813  0.6804  0.6804  0.6804
[49 : 64]:	0.6804  0.6804  0.6804  0.6735  0.6731  0.6728  0.6718  0.6718  0.6713  0.6713  0.6713  0.6679  0.6679  0.6679  0.6674  0.6674
2024-04-29 15:48:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:48:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #193: GFLOPs: 136.3453. Time: 1698.7195 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #194: GFLOPs: 193.2755. Time: 1198.3536 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #195: GFLOPs: 178.0135. Time: 1301.0945 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #196: GFLOPs: 193.6085. Time: 1196.2926 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #197: GFLOPs: 271.3258. Time: 853.6321 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #198: GFLOPs: 213.0504. Time: 1087.1249 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #199: GFLOPs: 150.5962. Time: 1537.9693 us. Best GFLOPs: 272.9873
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #200: GFLOPs: 297.2450. Time: 779.1971 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #201: GFLOPs: 219.3940. Time: 1055.6917 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #202: GFLOPs: 144.7552. Time: 1600.0285 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #203: GFLOPs: 184.9601. Time: 1252.2291 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #204: GFLOPs: 96.8852. Time: 2390.5872 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #205: GFLOPs: 169.4666. Time: 1366.7139 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #206: GFLOPs: 194.2761. Time: 1192.1819 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #207: GFLOPs: 161.8476. Time: 1431.0525 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #208: GFLOPs: 228.9002. Time: 1011.8487 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #209: GFLOPs: 163.0862. Time: 1420.1844 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #210: GFLOPs: 183.1800. Time: 1264.3983 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #211: GFLOPs: 145.7031. Time: 1589.6189 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #212: GFLOPs: 156.9123. Time: 1476.0625 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #213: GFLOPs: 183.8724. Time: 1259.6367 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #214: GFLOPs: 182.5573. Time: 1268.7108 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #215: GFLOPs: 180.0108. Time: 1286.6586 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #216: GFLOPs: 138.1041. Time: 1677.0855 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #217: GFLOPs: 157.1222. Time: 1474.0913 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #218: GFLOPs: 188.1354. Time: 1231.0944 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #219: GFLOPs: 121.9955. Time: 1898.5317 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #220: GFLOPs: 149.5665. Time: 1548.5583 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #221: GFLOPs: 212.5229. Time: 1089.8232 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #222: GFLOPs: 165.3293. Time: 1400.9155 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #223: GFLOPs: 157.0529. Time: 1474.7413 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #224: GFLOPs: 103.6242. Time: 2235.1198 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #225: GFLOPs: 110.3455. Time: 2098.9755 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #226: GFLOPs: 182.3175. Time: 1270.3795 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #227: GFLOPs: 140.3675. Time: 1650.0431 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #228: GFLOPs: 189.5102. Time: 1222.1633 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #229: GFLOPs: 200.3866. Time: 1155.8280 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #230: GFLOPs: 221.6230. Time: 1045.0738 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #231: GFLOPs: 135.2626. Time: 1712.3167 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #232: GFLOPs: 157.9465. Time: 1466.3975 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #233: GFLOPs: 203.1068. Time: 1140.3477 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #234: GFLOPs: 151.2125. Time: 1531.7014 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #235: GFLOPs: 199.9367. Time: 1158.4285 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #236: GFLOPs: 157.1331. Time: 1473.9884 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #237: GFLOPs: 95.3413. Time: 2429.2977 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #238: GFLOPs: 168.3397. Time: 1375.8634 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #239: GFLOPs: 109.8186. Time: 2109.0453 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #240: GFLOPs: 143.2824. Time: 1616.4745 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #241: GFLOPs: 148.3685. Time: 1561.0620 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #242: GFLOPs: 167.0574. Time: 1386.4239 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #243: GFLOPs: 135.9641. Time: 1703.4817 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #244: GFLOPs: 227.4789. Time: 1018.1709 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #245: GFLOPs: 118.0234. Time: 1962.4282 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #246: GFLOPs: 185.9181. Time: 1245.7768 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #247: GFLOPs: 146.8974. Time: 1576.6954 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #248: GFLOPs: 162.3634. Time: 1426.5060 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #249: GFLOPs: 203.4765. Time: 1138.2761 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #250: GFLOPs: 137.7895. Time: 1680.9144 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #251: GFLOPs: 170.7145. Time: 1356.7241 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #252: GFLOPs: 92.8484. Time: 2494.5213 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #253: GFLOPs: 175.4870. Time: 1319.8266 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #254: GFLOPs: 4.4803. Time: 51695.4227 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #255: GFLOPs: 6.1365. Time: 37743.2123 us. Best GFLOPs: 297.2450
2024-04-29 15:50:08 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #256: GFLOPs: 19.4373. Time: 11915.9024 us. Best GFLOPs: 297.2450
2024-04-29 16:08:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:08:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:08:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:08:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:08:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:08:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:09:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:09:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:09:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8903  0.8852  0.8852  0.8815  0.8555  0.8541  0.8541  0.8541  0.8541  0.8541  0.8489  0.8489  0.8184  0.8184  0.8184  0.8173
[17 : 32]:	0.8172  0.7834  0.7829  0.7754  0.7754  0.7754  0.7754  0.7754  0.7323  0.7255  0.7166  0.7145  0.6884  0.6865  0.6860  0.6844
[33 : 48]:	0.6844  0.6816  0.6793  0.6776  0.6771  0.6765  0.6753  0.6752  0.6752  0.6707  0.6703  0.6689  0.6689  0.6612  0.6585  0.6585
[49 : 64]:	0.6585  0.6585  0.6537  0.6535  0.6480  0.6425  0.6425  0.6412  0.6412  0.6403  0.6379  0.6377  0.6371  0.6366  0.6366  0.6366
2024-04-29 16:09:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:09:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #257: GFLOPs: 119.8186. Time: 1933.0252 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #258: GFLOPs: 132.1421. Time: 1752.7527 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #259: GFLOPs: 248.5475. Time: 931.8638 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #260: GFLOPs: 297.0932. Time: 779.5951 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #261: GFLOPs: 205.9873. Time: 1124.4014 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #262: GFLOPs: 142.0232. Time: 1630.8070 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #263: GFLOPs: 255.7295. Time: 905.6931 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #264: GFLOPs: 191.3755. Time: 1210.2514 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #265: GFLOPs: 248.4906. Time: 932.0771 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #266: GFLOPs: 153.7590. Time: 1506.3342 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #267: GFLOPs: 187.5248. Time: 1235.1028 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #268: GFLOPs: 184.9124. Time: 1252.5523 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #269: GFLOPs: 134.7705. Time: 1718.5691 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #270: GFLOPs: 154.8360. Time: 1495.8563 us. Best GFLOPs: 297.2450
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #271: GFLOPs: 320.1402. Time: 723.4718 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #272: GFLOPs: 174.0205. Time: 1330.9494 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #273: GFLOPs: 156.9495. Time: 1475.7134 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #274: GFLOPs: 241.8540. Time: 957.6538 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #275: GFLOPs: 237.3725. Time: 975.7342 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #276: GFLOPs: 179.1143. Time: 1293.0985 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #277: GFLOPs: 134.3535. Time: 1723.9028 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #278: GFLOPs: 154.7018. Time: 1497.1536 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #279: GFLOPs: 150.7447. Time: 1536.4551 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #280: GFLOPs: 155.9843. Time: 1484.8443 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #281: GFLOPs: 157.2857. Time: 1472.5589 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #282: GFLOPs: 114.2131. Time: 2027.8969 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #283: GFLOPs: 112.9626. Time: 2050.3459 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #284: GFLOPs: 109.1301. Time: 2122.3510 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #285: GFLOPs: 237.0216. Time: 977.1787 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #286: GFLOPs: 144.2481. Time: 1605.6536 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #287: GFLOPs: 129.5745. Time: 1787.4851 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #288: GFLOPs: 210.6653. Time: 1099.4334 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #289: GFLOPs: 270.2243. Time: 857.1117 us. Best GFLOPs: 320.1402
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #290: GFLOPs: 365.4253. Time: 633.8161 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #291: GFLOPs: 316.5516. Time: 731.6734 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #292: GFLOPs: 141.9724. Time: 1631.3901 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #293: GFLOPs: 148.8255. Time: 1556.2680 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #294: GFLOPs: 147.8066. Time: 1566.9966 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #295: GFLOPs: 165.7395. Time: 1397.4483 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #296: GFLOPs: 188.0306. Time: 1231.7803 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #297: GFLOPs: 196.0512. Time: 1181.3873 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #298: GFLOPs: 109.8216. Time: 2108.9872 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #299: GFLOPs: 76.7292. Time: 3018.5682 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #300: GFLOPs: 137.7617. Time: 1681.2538 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #301: GFLOPs: 206.0593. Time: 1124.0088 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #302: GFLOPs: 165.1530. Time: 1402.4110 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #303: GFLOPs: 119.3331. Time: 1940.8899 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #304: GFLOPs: 174.9844. Time: 1323.6172 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #305: GFLOPs: 217.9074. Time: 1062.8936 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #306: GFLOPs: 131.6991. Time: 1758.6489 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #307: GFLOPs: 252.3369. Time: 917.8697 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #308: GFLOPs: 286.4988. Time: 808.4237 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #309: GFLOPs: 200.3711. Time: 1155.9174 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #310: GFLOPs: 152.7052. Time: 1516.7289 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #311: GFLOPs: 153.1502. Time: 1512.3219 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #312: GFLOPs: 103.0838. Time: 2246.8352 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #313: GFLOPs: 141.7206. Time: 1634.2886 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #314: GFLOPs: 200.2640. Time: 1156.5353 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #315: GFLOPs: 206.5344. Time: 1121.4229 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #316: GFLOPs: 148.8492. Time: 1556.0208 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #317: GFLOPs: 45.3706. Time: 5104.8973 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #318: GFLOPs: 56.9887. Time: 4064.1839 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #319: GFLOPs: 44.5563. Time: 5198.2020 us. Best GFLOPs: 365.4253
2024-04-29 16:10:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #320: GFLOPs: 100.5715. Time: 2302.9622 us. Best GFLOPs: 365.4253
2024-04-29 16:28:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:28:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:28:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:28:16 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:28:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:28:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:28:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:29:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 16:29:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9586  0.9268  0.9133  0.9010  0.8632  0.8632  0.8551  0.8551  0.8420  0.8386  0.8307  0.8258  0.8258  0.8232  0.8125  0.8078
[17 : 32]:	0.7888  0.7221  0.7221  0.6947  0.6743  0.6592  0.6592  0.6592  0.6592  0.6592  0.6592  0.6592  0.6592  0.6592  0.6592  0.6569
[33 : 48]:	0.6560  0.6550  0.6508  0.6456  0.6450  0.6450  0.6417  0.6405  0.6350  0.6350  0.6350  0.6344  0.6202  0.6202  0.6163  0.6155
[49 : 64]:	0.6155  0.6155  0.6155  0.6098  0.6097  0.6097  0.5927  0.5876  0.5876  0.5876  0.5876  0.5875  0.5859  0.5859  0.5836  0.5818
2024-04-29 16:29:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:29:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #321: GFLOPs: 102.5106. Time: 2259.3988 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #322: GFLOPs: 92.4973. Time: 2503.9910 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #323: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #324: GFLOPs: 181.2889. Time: 1277.5874 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #325: GFLOPs: 230.2422. Time: 1005.9512 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #326: GFLOPs: 195.2562. Time: 1186.1974 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #327: GFLOPs: 160.3785. Time: 1444.1610 us. Best GFLOPs: 365.4253
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #328: GFLOPs: 475.6747. Time: 486.9135 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #329: GFLOPs: 345.2943. Time: 670.7682 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #330: GFLOPs: 189.9333. Time: 1219.4408 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #331: GFLOPs: 373.9827. Time: 619.3132 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #332: GFLOPs: 174.5140. Time: 1327.1850 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #333: GFLOPs: 173.2712. Time: 1336.7046 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #334: GFLOPs: 181.3712. Time: 1277.0078 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #335: GFLOPs: 173.1176. Time: 1337.8906 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #336: GFLOPs: 165.8253. Time: 1396.7252 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #337: GFLOPs: 89.6307. Time: 2584.0733 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #338: GFLOPs: 73.6864. Time: 3143.2173 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #339: GFLOPs: 86.4762. Time: 2678.3379 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #340: GFLOPs: 91.8625. Time: 2521.2945 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #341: GFLOPs: 219.3386. Time: 1055.9584 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #342: GFLOPs: 105.1304. Time: 2203.0959 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #343: GFLOPs: 183.8870. Time: 1259.5367 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #344: GFLOPs: 108.6334. Time: 2132.0544 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #345: GFLOPs: 64.4744. Time: 3592.3144 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #346: GFLOPs: 427.1131. Time: 542.2742 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #347: GFLOPs: 226.9160. Time: 1020.6966 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #348: GFLOPs: 140.1558. Time: 1652.5355 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #349: GFLOPs: 243.9762. Time: 949.3238 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #350: GFLOPs: 126.6118. Time: 1829.3118 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #351: GFLOPs: 236.9947. Time: 977.2896 us. Best GFLOPs: 475.6747
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #352: GFLOPs: 522.8416. Time: 442.9878 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #353: GFLOPs: 345.8377. Time: 669.7142 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #354: GFLOPs: 177.8270. Time: 1302.4594 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #355: GFLOPs: 158.2718. Time: 1463.3841 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #356: GFLOPs: 166.6787. Time: 1389.5738 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #357: GFLOPs: 113.5872. Time: 2039.0710 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #358: GFLOPs: 128.5486. Time: 1801.7499 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #359: GFLOPs: 241.9778. Time: 957.1638 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #360: GFLOPs: 217.8702. Time: 1063.0755 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #361: GFLOPs: 197.4553. Time: 1172.9866 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #362: GFLOPs: 495.4945. Time: 467.4369 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #363: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #364: GFLOPs: 172.6151. Time: 1341.7855 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #365: GFLOPs: 187.0732. Time: 1238.0843 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #366: GFLOPs: 126.8507. Time: 1825.8664 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #367: GFLOPs: 167.8703. Time: 1379.7109 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #368: GFLOPs: 135.8278. Time: 1705.1911 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #369: GFLOPs: 177.1073. Time: 1307.7520 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #370: GFLOPs: 148.6124. Time: 1558.5003 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #371: GFLOPs: 133.5276. Time: 1734.5656 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #372: GFLOPs: 238.2532. Time: 972.1270 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #373: GFLOPs: 157.9533. Time: 1466.3346 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #374: GFLOPs: 359.0942. Time: 644.9906 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #375: GFLOPs: 207.1040. Time: 1118.3389 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #376: GFLOPs: 232.7829. Time: 994.9716 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #377: GFLOPs: 252.2354. Time: 918.2390 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #378: GFLOPs: 192.4464. Time: 1203.5163 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #379: GFLOPs: 204.3418. Time: 1133.4558 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #380: GFLOPs: 190.5751. Time: 1215.3343 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #381: GFLOPs: 197.1028. Time: 1175.0845 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #382: GFLOPs: 57.0420. Time: 4060.3828 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #383: GFLOPs: 123.9382. Time: 1868.7727 us. Best GFLOPs: 522.8416
2024-04-29 16:30:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #384: GFLOPs: 10.0023. Time: 23155.8626 us. Best GFLOPs: 522.8416
2024-04-29 17:13:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:13:10 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:13:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:13:15 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:13:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:13:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:13:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:14:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:14:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7813  0.7779  0.7188  0.7188  0.7188  0.7188  0.7188  0.7188  0.7188  0.6862  0.6862  0.6862  0.6498  0.6498  0.6440  0.6440
[17 : 32]:	0.6419  0.6419  0.6419  0.6419  0.6230  0.5863  0.5847  0.5843  0.5843  0.5554  0.5554  0.5548  0.5479  0.5467  0.5307  0.5277
[33 : 48]:	0.5272  0.5267  0.5267  0.5267  0.5229  0.5190  0.5139  0.5103  0.5100  0.5057  0.5025  0.4961  0.4955  0.4910  0.4907  0.4907
[49 : 64]:	0.4900  0.4896  0.4896  0.4875  0.4871  0.4867  0.4864  0.4864  0.4849  0.4804  0.4765  0.4764  0.4764  0.4764  0.4750  0.4693
2024-04-29 17:14:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:14:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #385: GFLOPs: 540.8588. Time: 428.2309 us. Best GFLOPs: 540.8588
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #386: GFLOPs: 478.7306. Time: 483.8053 us. Best GFLOPs: 540.8588
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #387: GFLOPs: 121.3235. Time: 1909.0483 us. Best GFLOPs: 540.8588
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #388: GFLOPs: 225.5645. Time: 1026.8123 us. Best GFLOPs: 540.8588
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #389: GFLOPs: 210.5755. Time: 1099.9022 us. Best GFLOPs: 540.8588
2024-04-29 17:15:37 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #390: GFLOPs: 341.1509. Time: 678.9149 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #391: GFLOPs: 266.1913. Time: 870.0977 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #392: GFLOPs: 194.5911. Time: 1190.2518 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #393: GFLOPs: 173.5810. Time: 1334.3192 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #394: GFLOPs: 322.4312. Time: 718.3313 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #395: GFLOPs: 255.5303. Time: 906.3990 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #396: GFLOPs: 117.0374. Time: 1978.9605 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #397: GFLOPs: 363.6230. Time: 636.9576 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #398: GFLOPs: 135.0028. Time: 1715.6122 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #399: GFLOPs: 324.6935. Time: 713.3262 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #400: GFLOPs: 300.7955. Time: 769.9996 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #401: GFLOPs: 166.7636. Time: 1388.8663 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #402: GFLOPs: 165.6489. Time: 1398.2124 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #403: GFLOPs: 73.6258. Time: 3145.8033 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #404: GFLOPs: 136.5834. Time: 1695.7582 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #405: GFLOPs: 243.4164. Time: 951.5070 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #406: GFLOPs: 232.2047. Time: 997.4495 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #407: GFLOPs: 45.5605. Time: 5083.6236 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #408: GFLOPs: 49.3733. Time: 4691.0442 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #409: GFLOPs: 119.3490. Time: 1940.6311 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #410: GFLOPs: 153.3079. Time: 1510.7667 us. Best GFLOPs: 540.8588
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #411: GFLOPs: 611.4176. Time: 378.8122 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #412: GFLOPs: 174.6263. Time: 1326.3315 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #413: GFLOPs: 205.5951. Time: 1126.5461 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #414: GFLOPs: 492.9632. Time: 469.8371 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #415: GFLOPs: 47.2581. Time: 4901.0062 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #416: GFLOPs: 141.3957. Time: 1638.0443 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #417: GFLOPs: 190.3721. Time: 1216.6300 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #418: GFLOPs: 169.9700. Time: 1362.6663 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #419: GFLOPs: 129.0365. Time: 1794.9374 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #420: GFLOPs: 138.0972. Time: 1677.1695 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #421: GFLOPs: 321.6270. Time: 720.1274 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #422: GFLOPs: 130.2392. Time: 1778.3616 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #423: GFLOPs: 487.8300. Time: 474.7810 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #424: GFLOPs: 200.2104. Time: 1156.8448 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #425: GFLOPs: 183.5695. Time: 1261.7151 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #426: GFLOPs: 76.9381. Time: 3010.3740 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #427: GFLOPs: 253.9323. Time: 912.1029 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #428: GFLOPs: 208.1790. Time: 1112.5637 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #429: GFLOPs: 149.2041. Time: 1552.3197 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #430: GFLOPs: 124.6104. Time: 1858.6931 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #431: GFLOPs: 153.4497. Time: 1509.3706 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #432: GFLOPs: 239.4092. Time: 967.4332 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #433: GFLOPs: 156.9565. Time: 1475.6474 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #434: GFLOPs: 29.6458. Time: 7812.6486 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #435: GFLOPs: 31.6532. Time: 7317.1798 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #436: GFLOPs: 227.8237. Time: 1016.6299 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #437: GFLOPs: 190.4281. Time: 1216.2725 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #438: GFLOPs: 203.6083. Time: 1137.5392 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #439: GFLOPs: 207.3107. Time: 1117.2237 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #440: GFLOPs: 113.3509. Time: 2043.3227 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #441: GFLOPs: 196.7634. Time: 1177.1116 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #442: GFLOPs: 367.1321. Time: 630.8694 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #443: GFLOPs: 182.6621. Time: 1267.9827 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #444: GFLOPs: 161.9554. Time: 1430.1003 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #445: GFLOPs: 264.6096. Time: 875.2986 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #446: GFLOPs: 66.1340. Time: 3502.1680 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #447: GFLOPs: 18.8973. Time: 12256.4039 us. Best GFLOPs: 611.4176
2024-04-29 17:15:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #448: GFLOPs: 131.5571. Time: 1760.5471 us. Best GFLOPs: 611.4176
2024-04-29 17:33:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:33:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:33:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:33:32 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:33:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:33:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:34:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:34:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 17:34:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8065  0.8065  0.8065  0.8065  0.8065  0.8065  0.8065  0.8065  0.8061  0.7934  0.7934  0.7934  0.7708  0.7483  0.7483  0.7483
[17 : 32]:	0.7423  0.7423  0.7423  0.7403  0.7403  0.7403  0.7375  0.7320  0.7270  0.7200  0.7157  0.7107  0.7107  0.6987  0.6904  0.6904
[33 : 48]:	0.6885  0.6885  0.6885  0.6804  0.6787  0.6704  0.6673  0.6661  0.6561  0.6561  0.6511  0.6458  0.6458  0.6458  0.6458  0.6458
[49 : 64]:	0.6458  0.6458  0.6430  0.6387  0.6368  0.6325  0.6288  0.6287  0.6277  0.6250  0.6211  0.6211  0.6211  0.6211  0.6211  0.6197
2024-04-29 17:34:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:34:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #449: GFLOPs: 427.5474. Time: 541.7234 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #450: GFLOPs: 362.9503. Time: 638.1382 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #451: GFLOPs: 263.2032. Time: 879.9756 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #452: GFLOPs: 177.3403. Time: 1306.0340 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #453: GFLOPs: 207.9621. Time: 1113.7239 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #454: GFLOPs: 336.1606. Time: 688.9934 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #455: GFLOPs: 231.5268. Time: 1000.3697 us. Best GFLOPs: 611.4176
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #456: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #457: GFLOPs: 689.3664. Time: 335.9787 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #458: GFLOPs: 477.5832. Time: 484.9677 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #459: GFLOPs: 542.8288. Time: 426.6767 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #460: GFLOPs: 499.8842. Time: 463.3321 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #461: GFLOPs: 583.4057. Time: 397.0006 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #462: GFLOPs: 156.6232. Time: 1478.7876 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #463: GFLOPs: 250.0625. Time: 926.2182 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #464: GFLOPs: 127.3667. Time: 1818.4699 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #465: GFLOPs: 100.8289. Time: 2297.0832 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #466: GFLOPs: 97.9426. Time: 2364.7775 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #467: GFLOPs: 97.9147. Time: 2365.4498 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #468: GFLOPs: 251.3884. Time: 921.3328 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #469: GFLOPs: 464.0007. Time: 499.1639 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #470: GFLOPs: 253.0044. Time: 915.4483 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #471: GFLOPs: 476.5357. Time: 486.0337 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #472: GFLOPs: 481.9535. Time: 480.5700 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #473: GFLOPs: 183.6765. Time: 1260.9801 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #474: GFLOPs: 252.0692. Time: 918.8446 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #475: GFLOPs: 488.0360. Time: 474.5806 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #476: GFLOPs: 263.1580. Time: 880.1267 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #477: GFLOPs: 237.4069. Time: 975.5926 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #478: GFLOPs: 446.0573. Time: 519.2436 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #479: GFLOPs: 257.1647. Time: 900.6385 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #480: GFLOPs: 250.9284. Time: 923.0219 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #481: GFLOPs: 139.5656. Time: 1659.5233 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #482: GFLOPs: 234.4424. Time: 987.9289 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #483: GFLOPs: 202.1717. Time: 1145.6223 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #484: GFLOPs: 659.9627. Time: 350.9478 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #485: GFLOPs: 165.5851. Time: 1398.7518 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #486: GFLOPs: 420.0648. Time: 551.3731 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #487: GFLOPs: 498.0117. Time: 465.0742 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #488: GFLOPs: 81.1224. Time: 2855.0974 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #489: GFLOPs: 181.3236. Time: 1277.3430 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #490: GFLOPs: 181.3368. Time: 1277.2499 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #491: GFLOPs: 401.6447. Time: 576.6600 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #492: GFLOPs: 167.9763. Time: 1378.8401 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #493: GFLOPs: 317.8446. Time: 728.6969 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #494: GFLOPs: 196.8003. Time: 1176.8904 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #495: GFLOPs: 177.3297. Time: 1306.1122 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #496: GFLOPs: 203.3110. Time: 1139.2026 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #497: GFLOPs: 383.9797. Time: 603.1891 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #498: GFLOPs: 170.6124. Time: 1357.5356 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #499: GFLOPs: 195.3066. Time: 1185.8914 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #500: GFLOPs: 401.2015. Time: 577.2970 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #501: GFLOPs: 191.3793. Time: 1210.2268 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #502: GFLOPs: 470.3523. Time: 492.4233 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #503: GFLOPs: 249.0744. Time: 929.8926 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #504: GFLOPs: 544.7965. Time: 425.1357 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #505: GFLOPs: 171.7737. Time: 1348.3577 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #506: GFLOPs: 281.8853. Time: 821.6548 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #507: GFLOPs: 367.1464. Time: 630.8449 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #508: GFLOPs: 91.9779. Time: 2518.1301 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #509: GFLOPs: 202.8983. Time: 1141.5198 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #510: GFLOPs: 132.3708. Time: 1749.7239 us. Best GFLOPs: 689.3664
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #511: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b120)
b144 = sch.decompose_reduction(block=b120, loop=l128)
2024-04-29 17:36:03 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #512: GFLOPs: 140.6452. Time: 1646.7846 us. Best GFLOPs: 689.3664
2024-04-29 18:22:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:22:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:22:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 18:22:39 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:22:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 18:23:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 18:23:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 18:23:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36fe4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13474468)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6e91488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bf378)]: 0 failure(s)
2024-04-29 18:23:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9539  0.9531  0.9531  0.9511  0.9480  0.9257  0.9222  0.8767  0.8708  0.8582  0.8459  0.8390  0.8370  0.8370  0.8370  0.8334
[17 : 32]:	0.8334  0.8331  0.8325  0.8325  0.8303  0.8303  0.8147  0.8147  0.8147  0.8147  0.8143  0.8119  0.8106  0.8007  0.7993  0.7931
[33 : 48]:	0.7931  0.7897  0.7768  0.7738  0.7700  0.7584  0.7579  0.7423  0.7381  0.7346  0.7330  0.7310  0.7310  0.7284  0.7247  0.7247
[49 : 64]:	0.7240  0.7233  0.7112  0.7052  0.7052  0.7042  0.7017  0.6971  0.6971  0.6963  0.6941  0.6809  0.6795  0.6795  0.6786  0.6786
2024-04-29 18:23:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:23:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #513: GFLOPs: 303.5405. Time: 763.0364 us. Best GFLOPs: 689.3664
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #514: GFLOPs: 530.1812. Time: 436.8552 us. Best GFLOPs: 689.3664
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #515: GFLOPs: 555.3556. Time: 417.0525 us. Best GFLOPs: 689.3664
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #516: GFLOPs: 772.5092. Time: 299.8183 us. Best GFLOPs: 772.5092
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #517: GFLOPs: 806.3734. Time: 287.2272 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #518: GFLOPs: 509.7058. Time: 454.4042 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #519: GFLOPs: 611.7381. Time: 378.6137 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #520: GFLOPs: 416.3002. Time: 556.3591 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #521: GFLOPs: 531.0892. Time: 436.1084 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #522: GFLOPs: 108.5938. Time: 2132.8321 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #523: GFLOPs: 464.5758. Time: 498.5461 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #524: GFLOPs: 439.1635. Time: 527.3945 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #525: GFLOPs: 558.5781. Time: 414.6465 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #526: GFLOPs: 516.8454. Time: 448.1271 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #527: GFLOPs: 569.3560. Time: 406.7972 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #528: GFLOPs: 620.6597. Time: 373.1714 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #529: GFLOPs: 648.9796. Time: 356.8870 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #530: GFLOPs: 563.2228. Time: 411.2270 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #531: GFLOPs: 625.2459. Time: 370.4341 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #532: GFLOPs: 527.7930. Time: 438.8319 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #533: GFLOPs: 574.7173. Time: 403.0024 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #534: GFLOPs: 558.2812. Time: 414.8670 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #535: GFLOPs: 490.7973. Time: 471.9106 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #536: GFLOPs: 354.7576. Time: 652.8751 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #537: GFLOPs: 571.8695. Time: 405.0092 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #538: GFLOPs: 514.3783. Time: 450.2764 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #539: GFLOPs: 75.5967. Time: 3063.7910 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #540: GFLOPs: 687.7485. Time: 336.7691 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #541: GFLOPs: 353.9161. Time: 654.4274 us. Best GFLOPs: 806.3734
2024-04-29 18:25:19 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #542: GFLOPs: 423.5224. Time: 546.8716 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #543: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(112) // T.int64(56) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(112) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(112) // T.int64(56) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(112) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(112) // T.int64(56) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(112) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(112) // T.int64(56) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=224)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #544: GFLOPs: 657.0690. Time: 352.4933 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #545: GFLOPs: 423.7777. Time: 546.5422 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #546: GFLOPs: 578.2341. Time: 400.5513 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #547: GFLOPs: 496.7549. Time: 466.2509 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #548: GFLOPs: 543.8348. Time: 425.8874 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #549: GFLOPs: 755.4811. Time: 306.5761 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #550: GFLOPs: 88.4888. Time: 2617.4208 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #551: GFLOPs: 548.0571. Time: 422.6064 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #552: GFLOPs: 298.7410. Time: 775.2950 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #553: GFLOPs: 154.4749. Time: 1499.3535 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #554: GFLOPs: 668.5124. Time: 346.4594 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #555: GFLOPs: 692.7872. Time: 334.3197 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #556: GFLOPs: 478.6723. Time: 483.8643 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #557: GFLOPs: 476.4041. Time: 486.1680 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #558: GFLOPs: 414.3237. Time: 559.0132 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #559: GFLOPs: 268.6551. Time: 862.1179 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #560: GFLOPs: 413.9682. Time: 559.4932 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #561: GFLOPs: 461.9278. Time: 501.4040 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #562: GFLOPs: 492.4973. Time: 470.2816 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #563: GFLOPs: 474.2121. Time: 488.4152 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #564: GFLOPs: 668.8736. Time: 346.2723 us. Best GFLOPs: 806.3734
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #565: GFLOPs: 837.7096. Time: 276.4829 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #566: GFLOPs: 426.0608. Time: 543.6136 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #567: GFLOPs: 527.6894. Time: 438.9181 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #568: GFLOPs: 494.9308. Time: 467.9693 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #569: GFLOPs: 491.7772. Time: 470.9703 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #570: GFLOPs: 565.1978. Time: 409.7900 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #571: GFLOPs: 114.6608. Time: 2019.9791 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #572: GFLOPs: 138.2839. Time: 1674.9056 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #573: GFLOPs: 412.6466. Time: 561.2852 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #574: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(58), T.int64(58), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l123)
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #575: GFLOPs: 79.2362. Time: 2923.0618 us. Best GFLOPs: 837.7096
2024-04-29 18:25:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #576: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(64), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(57) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(57), p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3136)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100352))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100352) // T.int64(1792))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1792) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
