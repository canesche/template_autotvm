2024-04-29 13:32:08 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_max_pool2d"
2024-04-29 13:32:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 13:32:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:32:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + rv0_rv1_fused_0 // T.int64(3) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + rv0_rv1_fused_0 % T.int64(3) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:32:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1), v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 13:43:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:43:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:43:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7328168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc82e358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb323a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1bb32c68)]: 0 failure(s)
2024-04-29 13:43:42 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:43:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7328168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc82e358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb323a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1bb32c68)]: 0 failure(s)
2024-04-29 13:43:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7328168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc82e358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb323a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1bb32c68)]: 0 failure(s)
2024-04-29 13:43:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7328168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc82e358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb323a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1bb32c68)]: 0 failure(s)
2024-04-29 13:44:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7328168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc82e358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb323a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1bb32c68)]: 0 failure(s)
2024-04-29 13:44:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9950  0.9932  0.9923  0.9921  0.9805  0.9777  0.9751  0.9724  0.9719  0.9674  0.9659  0.9649  0.9607  0.9595  0.9529  0.9519
[17 : 32]:	0.9518  0.9507  0.9500  0.9498  0.9483  0.9444  0.9324  0.9217  0.9135  0.9120  0.9038  0.9017  0.8989  0.8945  0.8936  0.8841
[33 : 48]:	0.8808  0.8749  0.8737  0.8728  0.8725  0.8713  0.8645  0.8610  0.8591  0.8521  0.8518  0.8515  0.8474  0.8458  0.8440  0.8384
[49 : 64]:	0.8320  0.8227  0.8218  0.8173  0.8104  0.8033  0.8001  0.7997  0.7970  0.7889  0.7814  0.7584  0.7537  0.7468  0.7446  0.7359
2024-04-29 13:44:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:44:02 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #1: GFLOPs: 1.2008. Time: 1504.3327 us. Best GFLOPs: 1.2008
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #2: GFLOPs: 3.1228. Time: 578.4383 us. Best GFLOPs: 3.1228
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #3: GFLOPs: 17.9892. Time: 100.4123 us. Best GFLOPs: 17.9892
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #4: GFLOPs: 0.8210. Time: 2200.0722 us. Best GFLOPs: 17.9892
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #5: GFLOPs: 45.9259. Time: 39.3316 us. Best GFLOPs: 45.9259
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #6: GFLOPs: 84.4300. Time: 21.3945 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #7: GFLOPs: 22.9569. Time: 78.6838 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #8: GFLOPs: 30.6077. Time: 59.0158 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #9: GFLOPs: 17.1387. Time: 105.3949 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #10: GFLOPs: 34.2042. Time: 52.8103 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #11: GFLOPs: 16.8811. Time: 107.0034 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #12: GFLOPs: 1.1784. Time: 1532.8256 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #13: GFLOPs: 1.4195. Time: 1272.5263 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #14: GFLOPs: 29.5438. Time: 61.1410 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #15: GFLOPs: 1.4868. Time: 1214.9235 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #16: GFLOPs: 42.9994. Time: 42.0084 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #17: GFLOPs: 13.1891. Time: 136.9567 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #18: GFLOPs: 24.9476. Time: 72.4052 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #19: GFLOPs: 18.3056. Time: 98.6768 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #20: GFLOPs: 39.8348. Time: 45.3457 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #21: GFLOPs: 26.8209. Time: 67.3482 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #22: GFLOPs: 9.0749. Time: 199.0469 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #23: GFLOPs: 0.6044. Time: 2988.8388 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #24: GFLOPs: 29.9500. Time: 60.3118 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #25: GFLOPs: 56.1791. Time: 32.1532 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #26: GFLOPs: 14.2715. Time: 126.5696 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #27: GFLOPs: 0.7860. Time: 2298.0751 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #28: GFLOPs: 45.5580. Time: 39.6492 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_max_pool2d] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(32), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b21)
l44 = sch.fuse(l38, l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l44)
sch.annotate(block_or_loop=l44, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l44, ann_key="pragma_unroll_explicit", ann_val=1)
b45 = sch.get_block(name="pool_max_rf", func_name="main")
l46, l47, l48, l49, l50 = sch.get_loops(block=b45)
b51 = sch.decompose_reduction(block=b45, loop=l50)
b52 = sch.get_block(name="pool_max", func_name="main")
l53, l54, l55 = sch.get_loops(block=b52)
b56 = sch.decompose_reduction(block=b52, loop=l55)
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #30: GFLOPs: 13.7734. Time: 131.1471 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #31: GFLOPs: 17.3643. Time: 104.0257 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #32: GFLOPs: 2.9575. Time: 610.7580 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #33: GFLOPs: 28.9670. Time: 62.3584 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #34: GFLOPs: 16.9039. Time: 106.8592 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #35: GFLOPs: 12.8790. Time: 140.2542 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #36: GFLOPs: 10.0678. Time: 179.4175 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #37: GFLOPs: 5.5902. Time: 323.1244 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #38: GFLOPs: 42.7534. Time: 42.2501 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #39: GFLOPs: 16.6425. Time: 108.5375 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #40: GFLOPs: 9.2231. Time: 195.8496 us. Best GFLOPs: 84.4300
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #41: GFLOPs: 90.3862. Time: 19.9846 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #42: GFLOPs: 31.2211. Time: 57.8562 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #43: GFLOPs: 12.9605. Time: 139.3720 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #44: GFLOPs: 45.1109. Time: 40.0421 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #45: GFLOPs: 47.4857. Time: 38.0396 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #46: GFLOPs: 15.4147. Time: 117.1825 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #47: GFLOPs: 13.6299. Time: 132.5271 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #48: GFLOPs: 4.9557. Time: 364.4987 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #49: GFLOPs: 17.1991. Time: 105.0252 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #50: GFLOPs: 17.1299. Time: 105.4493 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #51: GFLOPs: 36.7248. Time: 49.1858 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #52: GFLOPs: 13.3380. Time: 135.4280 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #53: GFLOPs: 13.5314. Time: 133.4925 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #54: GFLOPs: 0.7475. Time: 2416.6007 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #55: GFLOPs: 19.5507. Time: 92.3924 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_max_pool2d] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(56), T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, rv0, rv1])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b5 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit")
b6, b7 = sch.get_child_blocks(b5)
l8, l9, l10, l11, l12, l13, l14, l15 = sch.get_loops(block=b6)
l16 = sch.fuse(l8, l9, l10, preserve_unit_iters=True)
sch.parallel(loop=l16)
l17 = sch.fuse(l15, preserve_unit_iters=True)
sch.vectorize(loop=l17)
l18, l19, l20, l21, l22 = sch.get_loops(block=b7)
l23 = sch.fuse(l18, preserve_unit_iters=True)
sch.parallel(loop=l23)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
b24 = sch.get_block(name="pool_max", func_name="main")
l25, l26, l27, l28, l29 = sch.get_loops(block=b24)
b30 = sch.decompose_reduction(block=b24, loop=l28)
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #57: GFLOPs: 9.0588. Time: 199.4017 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #58: GFLOPs: 7.4511. Time: 242.4255 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #59: GFLOPs: 35.9645. Time: 50.2255 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #60: GFLOPs: 15.4086. Time: 117.2292 us. Best GFLOPs: 90.3862
2024-04-29 14:25:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d] Trial #61: GFLOPs: 35.9825. Time: 50.2003 us. Best GFLOPs: 90.3862
