2024-04-29 13:32:37 [INFO] [task_scheduler.cc:160] Initializing Task #19: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4"
2024-04-29 13:32:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:32:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:32:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(14), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:32:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(14), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:32:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(14), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(56), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:53:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:53:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:53:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 13:53:27 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:53:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 13:53:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 13:53:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 13:53:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 13:53:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9998  0.9985  0.9985  0.9972  0.9966  0.9966  0.9961  0.9961  0.9961  0.9961  0.9958  0.9957  0.9956  0.9952  0.9950
[17 : 32]:	0.9948  0.9948  0.9945  0.9945  0.9932  0.9922  0.9909  0.9901  0.9898  0.9894  0.9893  0.9892  0.9887  0.9884  0.9878  0.9868
[33 : 48]:	0.9863  0.9862  0.9856  0.9848  0.9845  0.9841  0.9839  0.9838  0.9837  0.9823  0.9823  0.9823  0.9818  0.9815  0.9813  0.9810
[49 : 64]:	0.9808  0.9798  0.9797  0.9783  0.9777  0.9776  0.9764  0.9763  0.9758  0.9749  0.9742  0.9734  0.9734  0.9734  0.9731  0.9730
2024-04-29 13:53:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:53:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #1: GFLOPs: 3.8431. Time: 53686.3500 us. Best GFLOPs: 3.8431
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #2: GFLOPs: 78.1111. Time: 2641.4143 us. Best GFLOPs: 78.1111
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #3: GFLOPs: 96.9613. Time: 2127.8985 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #4: GFLOPs: 50.5060. Time: 4085.1317 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #5: GFLOPs: 9.8078. Time: 21036.7302 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #6: GFLOPs: 48.2208. Time: 4278.7269 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #7: GFLOPs: 79.9738. Time: 2579.8927 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #8: GFLOPs: 44.9634. Time: 4588.7071 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #9: GFLOPs: 80.0145. Time: 2578.5798 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(112) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(112) // T.int64(28) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(112) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(112) // T.int64(28) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b102)
b126 = sch.decompose_reduction(block=b102, loop=l110)
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #11: GFLOPs: 37.0447. Time: 5569.5818 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #12: GFLOPs: 9.6267. Time: 21432.3524 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #13: GFLOPs: 33.2916. Time: 6197.4778 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #14: GFLOPs: 45.9892. Time: 4486.3526 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #15: GFLOPs: 5.1192. Time: 40303.5847 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #16: GFLOPs: 60.7387. Time: 3396.9070 us. Best GFLOPs: 96.9613
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #17: GFLOPs: 184.9447. Time: 1115.5969 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #18: GFLOPs: 78.1872. Time: 2638.8435 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2_init * T.int64(8) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2 * T.int64(8) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 8])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #20: GFLOPs: 122.6739. Time: 1681.8881 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #21: GFLOPs: 9.8321. Time: 20984.7878 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #22: GFLOPs: 4.8939. Time: 42159.0557 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #23: GFLOPs: 76.5128. Time: 2696.5898 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #24: GFLOPs: 56.7022. Time: 3638.7225 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #25: GFLOPs: 157.1245. Time: 1313.1228 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #26: GFLOPs: 48.4001. Time: 4262.8793 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #27: GFLOPs: 1.4199. Time: 145311.5710 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(56), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(16) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #29: GFLOPs: 22.9677. Time: 8983.1938 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #30: GFLOPs: 93.0064. Time: 2218.3821 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #31: GFLOPs: 2.2478. Time: 91789.1883 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #32: GFLOPs: 131.4750. Time: 1569.3002 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #33: GFLOPs: 63.1801. Time: 3265.6451 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #34: GFLOPs: 59.2793. Time: 3480.5378 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #35: GFLOPs: 64.4821. Time: 3199.7069 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #36: GFLOPs: 110.6896. Time: 1863.9840 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #37: GFLOPs: 77.3931. Time: 2665.9199 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #38: GFLOPs: 71.6697. Time: 2878.8130 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #39: GFLOPs: 59.9835. Time: 3439.6756 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #40: GFLOPs: 83.3251. Time: 2476.1292 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #41: GFLOPs: 51.8362. Time: 3980.3048 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #42: GFLOPs: 60.9226. Time: 3386.6537 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #43: GFLOPs: 104.7507. Time: 1969.6644 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #44: GFLOPs: 6.6482. Time: 31034.2933 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #45: GFLOPs: 36.7637. Time: 5612.1592 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #46: GFLOPs: 75.3794. Time: 2737.1348 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #47: GFLOPs: 115.1687. Time: 1791.4911 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #48: GFLOPs: 81.8580. Time: 2520.5074 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #49: GFLOPs: 59.3087. Time: 3478.8095 us. Best GFLOPs: 184.9447
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #50: GFLOPs: 262.9347. Time: 784.6956 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #51: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(8), T.int64(28)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(8), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 8])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(56) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(8) + ow_1 * T.int64(8) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(56) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(8) + ow_1 * T.int64(8) + ow_2 * T.int64(8) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 8])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b103)
b124 = sch.decompose_reduction(block=b103, loop=l108)
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #53: GFLOPs: 63.4087. Time: 3253.8682 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #54: GFLOPs: 112.0979. Time: 1840.5666 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #55: GFLOPs: 21.5920. Time: 9555.5436 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #56: GFLOPs: 119.9946. Time: 1719.4419 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #57: GFLOPs: 123.2440. Time: 1674.1071 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #58: GFLOPs: 69.9372. Time: 2950.1290 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #59: GFLOPs: 3.0779. Time: 67033.8960 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #60: GFLOPs: 70.5761. Time: 2923.4226 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #61: GFLOPs: 8.3034. Time: 24848.0020 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #62: GFLOPs: 96.2974. Time: 2142.5681 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #63: GFLOPs: 82.3428. Time: 2505.6694 us. Best GFLOPs: 262.9347
2024-04-29 14:26:05 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #64: GFLOPs: 98.6045. Time: 2092.4368 us. Best GFLOPs: 262.9347
2024-04-29 16:00:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:00:46 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 16:00:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:00:48 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 16:00:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:00:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:01:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:01:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:01:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9003  0.8516  0.8515  0.8159  0.8051  0.8047  0.8041  0.7510  0.7041  0.6980  0.6670  0.6311  0.6205  0.6174  0.6144  0.6130
[17 : 32]:	0.6100  0.6100  0.6085  0.6053  0.6043  0.6037  0.6034  0.6033  0.6025  0.6020  0.6005  0.5948  0.5901  0.5867  0.5833  0.5824
[33 : 48]:	0.5822  0.5792  0.5790  0.5761  0.5755  0.5738  0.5730  0.5722  0.5717  0.5648  0.5634  0.5610  0.5582  0.5580  0.5525  0.5517
[49 : 64]:	0.5492  0.5442  0.5434  0.5430  0.5425  0.5423  0.5420  0.5420  0.5416  0.5403  0.5402  0.5395  0.5379  0.5378  0.5349  0.5347
2024-04-29 16:01:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:01:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #65: GFLOPs: 177.0308. Time: 1165.4677 us. Best GFLOPs: 262.9347
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #66: GFLOPs: 168.6305. Time: 1223.5252 us. Best GFLOPs: 262.9347
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #67: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(448) * T.int64(8) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(448) * T.int64(8) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(448) * T.int64(8) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b104)
b124 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #68: GFLOPs: 133.0762. Time: 1550.4174 us. Best GFLOPs: 262.9347
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #69: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(28) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(28) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b104)
b124 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-29 16:02:44 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #70: GFLOPs: 165.3516. Time: 1247.7880 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #71: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b104)
b124 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #72: GFLOPs: 129.0128. Time: 1599.2494 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(56) * T.int64(8) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b104)
b124 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #74: GFLOPs: 179.2817. Time: 1150.8354 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #75: GFLOPs: 72.7902. Time: 2834.5003 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #76: GFLOPs: 157.8978. Time: 1306.6917 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #77: GFLOPs: 178.8329. Time: 1153.7232 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #78: GFLOPs: 137.2416. Time: 1503.3608 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #79: GFLOPs: 122.4753. Time: 1684.6149 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #80: GFLOPs: 106.9355. Time: 1929.4219 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #81: GFLOPs: 215.4562. Time: 957.6134 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #82: GFLOPs: 218.1617. Time: 945.7376 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #83: GFLOPs: 139.9328. Time: 1474.4482 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #84: GFLOPs: 68.8265. Time: 2997.7374 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #85: GFLOPs: 78.6719. Time: 2622.5839 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #86: GFLOPs: 88.6938. Time: 2326.2474 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #87: GFLOPs: 97.3849. Time: 2118.6418 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #88: GFLOPs: 64.9480. Time: 3176.7512 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #89: GFLOPs: 72.7049. Time: 2837.8250 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #90: GFLOPs: 145.3714. Time: 1419.2871 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #91: GFLOPs: 102.2229. Time: 2018.3713 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #92: GFLOPs: 120.3874. Time: 1713.8319 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #93: GFLOPs: 172.6344. Time: 1195.1480 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #94: GFLOPs: 134.8539. Time: 1529.9795 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #95: GFLOPs: 24.1083. Time: 8558.1962 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #96: GFLOPs: 113.2433. Time: 1821.9507 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #97: GFLOPs: 71.5892. Time: 2882.0524 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #98: GFLOPs: 42.7042. Time: 4831.4670 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #99: GFLOPs: 160.4802. Time: 1285.6649 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #100: GFLOPs: 98.9903. Time: 2084.2816 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #101: GFLOPs: 151.2414. Time: 1364.2015 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #102: GFLOPs: 159.9463. Time: 1289.9564 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #103: GFLOPs: 65.9686. Time: 3127.6049 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #104: GFLOPs: 35.6292. Time: 5790.8618 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #105: GFLOPs: 99.6340. Time: 2070.8165 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #106: GFLOPs: 19.5743. Time: 10540.5560 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #107: GFLOPs: 173.6587. Time: 1188.0991 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #108: GFLOPs: 256.5803. Time: 804.1293 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #109: GFLOPs: 73.0331. Time: 2825.0730 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #110: GFLOPs: 88.9007. Time: 2320.8325 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #111: GFLOPs: 176.5021. Time: 1168.9587 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #112: GFLOPs: 136.4751. Time: 1511.8044 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #113: GFLOPs: 89.2846. Time: 2310.8534 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #114: GFLOPs: 188.0588. Time: 1097.1231 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #115: GFLOPs: 62.7039. Time: 3290.4461 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #116: GFLOPs: 171.6493. Time: 1202.0075 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #117: GFLOPs: 172.3790. Time: 1196.9190 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #118: GFLOPs: 85.8277. Time: 2403.9296 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #119: GFLOPs: 177.1448. Time: 1164.7178 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #120: GFLOPs: 65.0700. Time: 3170.7958 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #121: GFLOPs: 46.4853. Time: 4438.4674 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #122: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(3136) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(3136) // T.int64(224) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(16) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(3136) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(3136) // T.int64(224) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(16) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(3136) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(3136) // T.int64(224) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(16) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l111)
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #123: GFLOPs: 164.7663. Time: 1252.2203 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #124: GFLOPs: 149.5637. Time: 1379.5041 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #125: GFLOPs: 137.1010. Time: 1504.9030 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #126: GFLOPs: 100.2366. Time: 2058.3678 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #127: GFLOPs: 15.8840. Time: 12989.4139 us. Best GFLOPs: 262.9347
2024-04-29 16:02:45 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #128: GFLOPs: 56.9850. Time: 3620.6659 us. Best GFLOPs: 262.9347
2024-04-29 16:46:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:46:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:46:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:46:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:46:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:47:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:47:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:47:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 16:47:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9751  0.9751  0.9717  0.9654  0.9561  0.9000  0.8045  0.7829  0.7777  0.7675  0.7476  0.7400  0.7303  0.7303  0.7239  0.7237
[17 : 32]:	0.7163  0.7143  0.7078  0.7064  0.7058  0.7041  0.7041  0.6994  0.6988  0.6984  0.6984  0.6866  0.6865  0.6827  0.6820  0.6808
[33 : 48]:	0.6806  0.6788  0.6773  0.6747  0.6736  0.6728  0.6697  0.6697  0.6681  0.6639  0.6637  0.6607  0.6596  0.6592  0.6578  0.6560
[49 : 64]:	0.6551  0.6547  0.6529  0.6505  0.6471  0.6446  0.6419  0.6416  0.6415  0.6415  0.6396  0.6376  0.6349  0.6343  0.6321  0.6318
2024-04-29 16:47:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:47:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #129: GFLOPs: 127.1580. Time: 1622.5771 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #130: GFLOPs: 105.8951. Time: 1948.3783 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #131: GFLOPs: 91.4030. Time: 2257.2963 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #132: GFLOPs: 85.4353. Time: 2414.9707 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #133: GFLOPs: 236.7146. Time: 871.6138 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #134: GFLOPs: 246.7569. Time: 836.1417 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #135: GFLOPs: 226.4959. Time: 910.9381 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #136: GFLOPs: 255.1699. Time: 808.5740 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #137: GFLOPs: 90.5228. Time: 2279.2470 us. Best GFLOPs: 262.9347
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #138: GFLOPs: 328.1845. Time: 628.6820 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #139: GFLOPs: 233.3284. Time: 884.2632 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #140: GFLOPs: 268.9477. Time: 767.1519 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #141: GFLOPs: 50.5416. Time: 4082.2567 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #142: GFLOPs: 48.9255. Time: 4217.0955 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #143: GFLOPs: 54.0430. Time: 3817.7683 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #144: GFLOPs: 48.2005. Time: 4280.5296 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #145: GFLOPs: 194.5854. Time: 1060.3248 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #146: GFLOPs: 178.4335. Time: 1156.3062 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #147: GFLOPs: 125.4658. Time: 1644.4622 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #148: GFLOPs: 90.2858. Time: 2285.2300 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #149: GFLOPs: 210.0973. Time: 982.0389 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #150: GFLOPs: 180.5594. Time: 1142.6913 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #151: GFLOPs: 182.3199. Time: 1131.6575 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #152: GFLOPs: 107.6764. Time: 1916.1454 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #153: GFLOPs: 222.3356. Time: 927.9832 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #154: GFLOPs: 268.0273. Time: 769.7861 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #155: GFLOPs: 267.8822. Time: 770.2030 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #156: GFLOPs: 167.6793. Time: 1230.4662 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #157: GFLOPs: 266.6376. Time: 773.7984 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #158: GFLOPs: 57.4492. Time: 3591.4127 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #159: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(196) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(196) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(196) * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #160: GFLOPs: 113.7602. Time: 1813.6728 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #161: GFLOPs: 127.5878. Time: 1617.1119 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #162: GFLOPs: 191.9559. Time: 1074.8494 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #163: GFLOPs: 163.6056. Time: 1261.1040 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #164: GFLOPs: 104.2022. Time: 1980.0326 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #165: GFLOPs: 196.6920. Time: 1048.9687 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #166: GFLOPs: 227.1986. Time: 908.1205 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #167: GFLOPs: 94.0099. Time: 2194.7024 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #168: GFLOPs: 268.3651. Time: 768.8172 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #169: GFLOPs: 173.6159. Time: 1188.3917 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #170: GFLOPs: 223.0706. Time: 924.9256 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #171: GFLOPs: 198.5608. Time: 1039.0960 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #172: GFLOPs: 163.4272. Time: 1262.4812 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #173: GFLOPs: 180.4199. Time: 1143.5751 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #174: GFLOPs: 127.8742. Time: 1613.4899 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #175: GFLOPs: 60.8483. Time: 3390.7872 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #176: GFLOPs: 82.9078. Time: 2488.5929 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #177: GFLOPs: 147.5596. Time: 1398.2401 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #178: GFLOPs: 222.7679. Time: 926.1822 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #179: GFLOPs: 98.1720. Time: 2101.6556 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #180: GFLOPs: 114.1211. Time: 1807.9364 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #181: GFLOPs: 149.0808. Time: 1383.9722 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #182: GFLOPs: 196.7911. Time: 1048.4403 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #183: GFLOPs: 181.1387. Time: 1139.0369 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #184: GFLOPs: 276.1354. Time: 747.1832 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #185: GFLOPs: 140.6066. Time: 1467.3832 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #186: GFLOPs: 183.9791. Time: 1121.4518 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #187: GFLOPs: 164.3615. Time: 1255.3046 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #188: GFLOPs: 111.1261. Time: 1856.6636 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #189: GFLOPs: 193.3903. Time: 1066.8770 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #190: GFLOPs: 96.4553. Time: 2139.0613 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #191: GFLOPs: 11.9092. Time: 17324.7432 us. Best GFLOPs: 328.1845
2024-04-29 16:48:57 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #192: GFLOPs: 21.6929. Time: 9511.0994 us. Best GFLOPs: 328.1845
2024-04-29 18:12:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:12:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:12:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 18:12:46 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:12:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 18:12:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 18:13:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 18:13:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 18:13:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9652  0.8265  0.8265  0.7992  0.7907  0.7776  0.7655  0.7632  0.7613  0.7611  0.7507  0.7496  0.7491  0.7491  0.7423  0.7414
[17 : 32]:	0.7351  0.7321  0.7294  0.7285  0.7282  0.7272  0.7213  0.7167  0.7167  0.7163  0.7154  0.7084  0.6976  0.6926  0.6893  0.6893
[33 : 48]:	0.6853  0.6813  0.6778  0.6778  0.6766  0.6764  0.6760  0.6746  0.6726  0.6691  0.6681  0.6669  0.6658  0.6642  0.6631  0.6631
[49 : 64]:	0.6593  0.6592  0.6588  0.6588  0.6573  0.6573  0.6571  0.6567  0.6548  0.6522  0.6511  0.6502  0.6496  0.6447  0.6441  0.6437
2024-04-29 18:13:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:13:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #193: GFLOPs: 186.8137. Time: 1104.4357 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #194: GFLOPs: 226.2639. Time: 911.8721 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #195: GFLOPs: 226.0151. Time: 912.8758 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #196: GFLOPs: 248.1207. Time: 831.5457 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #197: GFLOPs: 194.8101. Time: 1059.1017 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #198: GFLOPs: 210.6476. Time: 979.4735 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #199: GFLOPs: 113.0050. Time: 1825.7927 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #200: GFLOPs: 178.5629. Time: 1155.4677 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #201: GFLOPs: 147.3419. Time: 1400.3057 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #202: GFLOPs: 184.7345. Time: 1116.8663 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #203: GFLOPs: 187.4832. Time: 1100.4918 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #204: GFLOPs: 95.6965. Time: 2156.0215 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #205: GFLOPs: 232.3378. Time: 888.0333 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #206: GFLOPs: 233.5291. Time: 883.5033 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #207: GFLOPs: 119.2604. Time: 1730.0266 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #208: GFLOPs: 155.9018. Time: 1323.4211 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #209: GFLOPs: 164.0039. Time: 1258.0411 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #210: GFLOPs: 242.4871. Time: 850.8646 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #211: GFLOPs: 178.0692. Time: 1158.6715 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #212: GFLOPs: 193.0555. Time: 1068.7273 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #213: GFLOPs: 133.9007. Time: 1540.8713 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #214: GFLOPs: 140.1310. Time: 1472.3636 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #215: GFLOPs: 249.5840. Time: 826.6705 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #216: GFLOPs: 200.2333. Time: 1030.4167 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #217: GFLOPs: 212.6945. Time: 970.0472 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #218: GFLOPs: 255.1054. Time: 808.7782 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #219: GFLOPs: 245.1955. Time: 841.4661 us. Best GFLOPs: 328.1845
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #220: GFLOPs: 357.6206. Time: 576.9346 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #221: GFLOPs: 182.5404. Time: 1130.2904 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #222: GFLOPs: 167.2684. Time: 1233.4887 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #223: GFLOPs: 129.5699. Time: 1592.3744 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #224: GFLOPs: 114.1467. Time: 1807.5304 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #225: GFLOPs: 154.9445. Time: 1331.5979 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #226: GFLOPs: 141.9252. Time: 1453.7497 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #227: GFLOPs: 152.6227. Time: 1351.8544 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #228: GFLOPs: 152.2743. Time: 1354.9478 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #229: GFLOPs: 129.3972. Time: 1594.4985 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #230: GFLOPs: 82.1455. Time: 2511.6866 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #231: GFLOPs: 96.1908. Time: 2144.9412 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #232: GFLOPs: 186.9671. Time: 1103.5293 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #233: GFLOPs: 140.0262. Time: 1473.4651 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #234: GFLOPs: 139.3344. Time: 1480.7811 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #235: GFLOPs: 341.6754. Time: 603.8588 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #236: GFLOPs: 136.8309. Time: 1507.8732 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #237: GFLOPs: 150.1778. Time: 1373.8628 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #238: GFLOPs: 204.1116. Time: 1010.8378 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #239: GFLOPs: 131.1430. Time: 1573.2731 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #240: GFLOPs: 149.5817. Time: 1379.3378 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #241: GFLOPs: 179.6058. Time: 1148.7586 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #242: GFLOPs: 170.1985. Time: 1212.2532 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #243: GFLOPs: 218.7806. Time: 943.0620 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #244: GFLOPs: 210.6079. Time: 979.6581 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #245: GFLOPs: 126.1134. Time: 1636.0173 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #246: GFLOPs: 144.8503. Time: 1424.3923 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #247: GFLOPs: 169.9899. Time: 1213.7409 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #248: GFLOPs: 232.0248. Time: 889.2312 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #249: GFLOPs: 205.5752. Time: 1003.6410 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #250: GFLOPs: 156.6870. Time: 1316.7890 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #251: GFLOPs: 245.4290. Time: 840.6654 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #252: GFLOPs: 253.9918. Time: 812.3243 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #253: GFLOPs: 183.5368. Time: 1124.1546 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #254: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #255: GFLOPs: 130.9073. Time: 1576.1051 us. Best GFLOPs: 357.6206
2024-04-29 18:14:54 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #256: GFLOPs: 2.2791. Time: 90528.7323 us. Best GFLOPs: 357.6206
2024-04-29 19:20:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:20:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:21:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 19:21:01 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 19:21:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 19:21:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 19:21:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 19:21:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc617d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1d55ba88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13473f78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x158d91c8)]: 0 failure(s)
2024-04-29 19:21:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8691  0.8173  0.8086  0.8086  0.7463  0.7157  0.7078  0.6994  0.6966  0.6962  0.6930  0.6900  0.6844  0.6819  0.6819  0.6808
[17 : 32]:	0.6805  0.6800  0.6800  0.6720  0.6712  0.6595  0.6584  0.6560  0.6512  0.6482  0.6482  0.6412  0.6410  0.6343  0.6305  0.6241
[33 : 48]:	0.6190  0.6180  0.6172  0.6155  0.6109  0.6109  0.6100  0.6085  0.6063  0.6059  0.6055  0.6046  0.6040  0.6021  0.6012  0.6008
[49 : 64]:	0.6008  0.5999  0.5997  0.5974  0.5970  0.5952  0.5945  0.5933  0.5930  0.5922  0.5920  0.5913  0.5912  0.5908  0.5891  0.5891
2024-04-29 19:21:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:21:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #257: GFLOPs: 313.8988. Time: 657.2938 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #258: GFLOPs: 333.3956. Time: 618.8556 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #259: GFLOPs: 189.0190. Time: 1091.5499 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #260: GFLOPs: 98.3099. Time: 2098.7080 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #261: GFLOPs: 330.0247. Time: 625.1766 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #262: GFLOPs: 173.5397. Time: 1188.9138 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #263: GFLOPs: 244.3603. Time: 844.3420 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #264: GFLOPs: 97.7033. Time: 2111.7375 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #265: GFLOPs: 242.3333. Time: 851.4046 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #266: GFLOPs: 203.3683. Time: 1014.5325 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #267: GFLOPs: 171.8837. Time: 1200.3683 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #268: GFLOPs: 208.7576. Time: 988.3411 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #269: GFLOPs: 188.2167. Time: 1096.2030 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #270: GFLOPs: 216.1038. Time: 954.7434 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #271: GFLOPs: 190.5473. Time: 1082.7954 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #272: GFLOPs: 211.5221. Time: 975.4240 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #273: GFLOPs: 345.6246. Time: 596.9589 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #274: GFLOPs: 150.8542. Time: 1367.7024 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #275: GFLOPs: 90.7689. Time: 2273.0668 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #276: GFLOPs: 239.7457. Time: 860.5941 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #277: GFLOPs: 239.1502. Time: 862.7370 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #278: GFLOPs: 343.5458. Time: 600.5711 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #279: GFLOPs: 170.7099. Time: 1208.6218 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #280: GFLOPs: 229.9174. Time: 897.3819 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #281: GFLOPs: 200.0688. Time: 1031.2637 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #282: GFLOPs: 205.6646. Time: 1003.2046 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #283: GFLOPs: 205.3142. Time: 1004.9169 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #284: GFLOPs: 152.9956. Time: 1348.5593 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #285: GFLOPs: 302.5867. Time: 681.8663 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #286: GFLOPs: 199.9898. Time: 1031.6710 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #287: GFLOPs: 171.5035. Time: 1203.0291 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #288: GFLOPs: 110.1953. Time: 1872.3459 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #289: GFLOPs: 186.5487. Time: 1106.0043 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #290: GFLOPs: 151.5051. Time: 1361.8264 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #291: GFLOPs: 160.2390. Time: 1287.5999 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #292: GFLOPs: 134.8600. Time: 1529.9102 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #293: GFLOPs: 298.1483. Time: 692.0170 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #294: GFLOPs: 145.9828. Time: 1413.3425 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #295: GFLOPs: 101.4332. Time: 2034.0850 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #296: GFLOPs: 123.6757. Time: 1668.2638 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #297: GFLOPs: 151.7041. Time: 1360.0400 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #298: GFLOPs: 113.8867. Time: 1811.6584 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #299: GFLOPs: 229.6800. Time: 898.3095 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #300: GFLOPs: 195.1632. Time: 1057.1855 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #301: GFLOPs: 133.2979. Time: 1547.8389 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #302: GFLOPs: 176.7408. Time: 1167.3800 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #303: GFLOPs: 136.6544. Time: 1509.8211 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #304: GFLOPs: 138.9642. Time: 1484.7257 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #305: GFLOPs: 163.4624. Time: 1262.2093 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #306: GFLOPs: 206.8613. Time: 997.4010 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #307: GFLOPs: 185.9990. Time: 1109.2730 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #308: GFLOPs: 175.5005. Time: 1175.6302 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #309: GFLOPs: 195.6461. Time: 1054.5762 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #310: GFLOPs: 298.8119. Time: 690.4802 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #311: GFLOPs: 195.1228. Time: 1057.4047 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #312: GFLOPs: 197.6640. Time: 1043.8101 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #313: GFLOPs: 182.7503. Time: 1128.9926 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #314: GFLOPs: 148.6662. Time: 1387.8317 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #315: GFLOPs: 139.1818. Time: 1482.4042 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #316: GFLOPs: 212.1394. Time: 972.5855 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #317: GFLOPs: 198.0252. Time: 1041.9066 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #318: GFLOPs: 58.7741. Time: 3510.4524 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #319: GFLOPs: 20.5788. Time: 10026.0101 us. Best GFLOPs: 357.6206
2024-04-29 19:23:10 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_4] Trial #320: GFLOPs: 11.7856. Time: 17506.4527 us. Best GFLOPs: 357.6206
