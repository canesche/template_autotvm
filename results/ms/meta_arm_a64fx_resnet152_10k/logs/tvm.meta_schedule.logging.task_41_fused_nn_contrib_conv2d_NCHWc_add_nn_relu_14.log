2024-04-29 13:33:48 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14"
2024-04-29 13:33:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:33:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:33:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(8)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:33:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:33:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:15:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:15:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:15:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 14:15:24 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:15:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 14:15:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 14:15:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 14:15:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 14:15:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9990  0.9989  0.9987  0.9986  0.9981  0.9979  0.9977  0.9959  0.9953  0.9947  0.9938  0.9936  0.9936  0.9934  0.9923
[17 : 32]:	0.9919  0.9918  0.9912  0.9909  0.9902  0.9900  0.9886  0.9885  0.9884  0.9880  0.9878  0.9876  0.9869  0.9869  0.9861  0.9861
[33 : 48]:	0.9861  0.9860  0.9860  0.9847  0.9840  0.9831  0.9824  0.9819  0.9812  0.9796  0.9789  0.9786  0.9779  0.9777  0.9776  0.9775
[49 : 64]:	0.9773  0.9770  0.9770  0.9766  0.9763  0.9760  0.9751  0.9748  0.9747  0.9747  0.9736  0.9729  0.9728  0.9725  0.9721  0.9708
2024-04-29 14:15:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:15:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #1: GFLOPs: 57.1245. Time: 1799.7626 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #2: GFLOPs: 24.9984. Time: 4112.6850 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #3: GFLOPs: 5.1869. Time: 19821.0467 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #4: GFLOPs: 39.5315. Time: 2600.7258 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #5: GFLOPs: 0.8215. Time: 125152.2637 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #6: GFLOPs: 20.4629. Time: 5024.2423 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #7: GFLOPs: 38.4717. Time: 2672.3699 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #9: GFLOPs: 36.0493. Time: 2851.9446 us. Best GFLOPs: 57.1245
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #10: GFLOPs: 81.0011. Time: 1269.2493 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #11: GFLOPs: 61.9539. Time: 1659.4706 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #12: GFLOPs: 47.8530. Time: 2148.4695 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #13: GFLOPs: 5.3049. Time: 19380.2708 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #14: GFLOPs: 10.5782. Time: 9719.0818 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #15: GFLOPs: 63.8239. Time: 1610.8493 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #16: GFLOPs: 10.9726. Time: 9369.7815 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #17: GFLOPs: 8.7571. Time: 11740.2936 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #18: GFLOPs: 65.1057. Time: 1579.1345 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #19: GFLOPs: 20.0386. Time: 5130.6411 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #20: GFLOPs: 38.2370. Time: 2688.7699 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #21: GFLOPs: 3.9710. Time: 25890.1125 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #22: GFLOPs: 12.4892. Time: 8231.9385 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #23: GFLOPs: 24.4236. Time: 4209.4750 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #24: GFLOPs: 24.4214. Time: 4209.8595 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #25: GFLOPs: 18.0175. Time: 5706.1466 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #26: GFLOPs: 73.2893. Time: 1402.8046 us. Best GFLOPs: 81.0011
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #27: GFLOPs: 81.9158. Time: 1255.0771 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #28: GFLOPs: 33.5374. Time: 3065.5469 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #29: GFLOPs: 17.6206. Time: 5834.6746 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #30: GFLOPs: 7.6550. Time: 13430.4897 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #31: GFLOPs: 29.3833. Time: 3498.9459 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #32: GFLOPs: 40.8003. Time: 2519.8492 us. Best GFLOPs: 81.9158
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #33: GFLOPs: 253.7979. Time: 405.0886 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #34: GFLOPs: 3.6823. Time: 27919.8985 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #35: GFLOPs: 48.3859. Time: 2124.8048 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #36: GFLOPs: 22.2260. Time: 4625.6897 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #37: GFLOPs: 16.0749. Time: 6395.7216 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #38: GFLOPs: 8.0405. Time: 12786.6083 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #39: GFLOPs: 30.2174. Time: 3402.3615 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #40: GFLOPs: 60.8653. Time: 1689.1507 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #41: GFLOPs: 39.5808. Time: 2597.4844 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #42: GFLOPs: 2.6087. Time: 39410.7020 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #43: GFLOPs: 37.5876. Time: 2735.2254 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #44: GFLOPs: 42.9770. Time: 2392.2218 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #45: GFLOPs: 89.5040. Time: 1148.6711 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #46: GFLOPs: 117.6447. Time: 873.9082 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #47: GFLOPs: 1.4936. Time: 68834.7280 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #48: GFLOPs: 28.3911. Time: 3621.2229 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #49: GFLOPs: 42.3036. Time: 2430.3020 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #50: GFLOPs: 29.1764. Time: 3523.7647 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #51: GFLOPs: 11.7020. Time: 8785.7330 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #52: GFLOPs: 3.8558. Time: 26663.9133 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #53: GFLOPs: 62.3691. Time: 1648.4217 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #54: GFLOPs: 30.5038. Time: 3370.4173 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #55: GFLOPs: 183.1794. Time: 561.2566 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #56: GFLOPs: 22.8179. Time: 4505.7089 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #57: GFLOPs: 31.8358. Time: 3229.4046 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #58: GFLOPs: 14.3922. Time: 7143.5097 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #59: GFLOPs: 3.4844. Time: 29506.1460 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #60: GFLOPs: 24.6115. Time: 4177.3330 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #61: GFLOPs: 54.4407. Time: 1888.4876 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #62: GFLOPs: 40.4985. Time: 2538.6291 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #63: GFLOPs: 7.9267. Time: 12970.2381 us. Best GFLOPs: 253.7979
2024-04-29 14:27:55 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #64: GFLOPs: 15.9161. Time: 6459.5189 us. Best GFLOPs: 253.7979
2024-04-29 15:54:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:54:35 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 15:54:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 15:54:38 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 15:54:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 15:54:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 15:54:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 15:54:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8ce178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x109b4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x16c6c458)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc91d008)]: 0 failure(s)
2024-04-29 15:55:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8107  0.7991  0.7961  0.7942  0.7912  0.7531  0.7489  0.7333  0.6975  0.6975  0.6975  0.6875  0.6875  0.6737  0.6737  0.6545
[17 : 32]:	0.6514  0.6450  0.6418  0.6417  0.6396  0.6302  0.6230  0.6178  0.6150  0.6061  0.6053  0.6008  0.5982  0.5974  0.5968  0.5968
[33 : 48]:	0.5945  0.5927  0.5833  0.5794  0.5759  0.5757  0.5757  0.5757  0.5734  0.5734  0.5728  0.5710  0.5707  0.5696  0.5692  0.5692
[49 : 64]:	0.5683  0.5661  0.5634  0.5621  0.5621  0.5560  0.5556  0.5478  0.5478  0.5470  0.5464  0.5407  0.5392  0.5384  0.5384  0.5383
2024-04-29 15:55:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:55:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #65: GFLOPs: 270.1991. Time: 380.4995 us. Best GFLOPs: 270.1991
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #66: GFLOPs: 303.6807. Time: 338.5484 us. Best GFLOPs: 303.6807
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #67: GFLOPs: 314.4595. Time: 326.9440 us. Best GFLOPs: 314.4595
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #68: GFLOPs: 324.2009. Time: 317.1201 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #69: GFLOPs: 323.3460. Time: 317.9585 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #70: GFLOPs: 193.5742. Time: 531.1174 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #71: GFLOPs: 149.3953. Time: 688.1785 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #72: GFLOPs: 246.6124. Time: 416.8915 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #73: GFLOPs: 187.3491. Time: 548.7650 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #74: GFLOPs: 230.5052. Time: 446.0229 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #75: GFLOPs: 177.6988. Time: 578.5667 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #76: GFLOPs: 291.4824. Time: 352.7164 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #77: GFLOPs: 50.0895. Time: 2052.5398 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #78: GFLOPs: 318.4194. Time: 322.8780 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #79: GFLOPs: 309.8787. Time: 331.7770 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #80: GFLOPs: 208.1961. Time: 493.8162 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #81: GFLOPs: 262.8625. Time: 391.1194 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #82: GFLOPs: 160.3518. Time: 641.1566 us. Best GFLOPs: 324.2009
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #83: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #84: GFLOPs: 348.1452. Time: 295.3096 us. Best GFLOPs: 348.1452
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #85: GFLOPs: 677.9397. Time: 151.6516 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #86: GFLOPs: 128.0964. Time: 802.6037 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #87: GFLOPs: 68.6408. Time: 1497.8061 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #88: GFLOPs: 247.2550. Time: 415.8081 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #89: GFLOPs: 135.3576. Time: 759.5480 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #90: GFLOPs: 121.1416. Time: 848.6817 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #91: GFLOPs: 92.3079. Time: 1113.7793 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #92: GFLOPs: 164.6883. Time: 624.2742 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #93: GFLOPs: 40.0043. Time: 2569.9869 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #94: GFLOPs: 95.1520. Time: 1080.4882 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #95: GFLOPs: 116.9315. Time: 879.2384 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #96: GFLOPs: 119.6113. Time: 859.5391 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #97: GFLOPs: 60.9413. Time: 1687.0428 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #98: GFLOPs: 105.9844. Time: 970.0545 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #99: GFLOPs: 108.0255. Time: 951.7254 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #100: GFLOPs: 36.4209. Time: 2822.8433 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #101: GFLOPs: 51.0601. Time: 2013.5212 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #102: GFLOPs: 105.5158. Time: 974.3628 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #103: GFLOPs: 113.2725. Time: 907.6394 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #104: GFLOPs: 348.8596. Time: 294.7049 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #105: GFLOPs: 15.0069. Time: 6850.8943 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #106: GFLOPs: 17.8761. Time: 5751.3033 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #107: GFLOPs: 113.0332. Time: 909.5609 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #108: GFLOPs: 77.0772. Time: 1333.8651 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #109: GFLOPs: 100.1234. Time: 1026.8391 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #110: GFLOPs: 33.5942. Time: 3060.3689 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #111: GFLOPs: 62.1018. Time: 1655.5189 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #112: GFLOPs: 62.1800. Time: 1653.4365 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #113: GFLOPs: 112.3717. Time: 914.9159 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #114: GFLOPs: 102.9243. Time: 998.8951 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #115: GFLOPs: 658.2263. Time: 156.1934 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #116: GFLOPs: 116.7064. Time: 880.9336 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #117: GFLOPs: 146.7096. Time: 700.7764 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #118: GFLOPs: 94.9702. Time: 1082.5571 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #119: GFLOPs: 113.3506. Time: 907.0140 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #120: GFLOPs: 64.0515. Time: 1605.1233 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #121: GFLOPs: 57.1824. Time: 1797.9411 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #122: GFLOPs: 140.3418. Time: 732.5731 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #123: GFLOPs: 37.4816. Time: 2742.9642 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #124: GFLOPs: 101.6462. Time: 1011.4555 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #125: GFLOPs: 105.5588. Time: 973.9658 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #126: GFLOPs: 0.2199. Time: 467428.6770 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #127: GFLOPs: 18.0688. Time: 5689.9557 us. Best GFLOPs: 677.9397
2024-04-29 15:56:42 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_14] Trial #128: GFLOPs: 60.1804. Time: 1708.3746 us. Best GFLOPs: 677.9397
