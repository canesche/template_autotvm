2024-04-29 09:58:43 [INFO] [task_scheduler.cc:160] Initializing Task #137: "fused_nn_conv2d_add_nn_relu_67"
2024-04-29 09:58:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(384), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:58:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:58:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0 * T.int64(192) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 6, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 09:58:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 6, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 09:58:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(192) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 6, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 12:53:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:53:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 12:53:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 493 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 973 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:37 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 12:53:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11781408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf3e1488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xee99638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbfb55e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3853da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcc18758)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf3e1378)]: 0 failure(s)
2024-04-29 12:53:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9984  0.9984  0.9982  0.9957  0.9941  0.9926  0.9924  0.9923  0.9915  0.9905  0.9900  0.9898  0.9898  0.9883  0.9876
[17 : 32]:	0.9865  0.9865  0.9843  0.9840  0.9840  0.9840  0.9838  0.9831  0.9830  0.9823  0.9817  0.9815  0.9813  0.9806  0.9799  0.9788
[33 : 48]:	0.9787  0.9781  0.9780  0.9780  0.9776  0.9763  0.9761  0.9761  0.9746  0.9745  0.9735  0.9727  0.9725  0.9714  0.9700  0.9697
[49 : 64]:	0.9670  0.9667  0.9666  0.9663  0.9659  0.9640  0.9636  0.9633  0.9626  0.9619  0.9613  0.9612  0.9606  0.9600  0.9599  0.9590
2024-04-29 12:53:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:53:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #1: GFLOPs: 410.7294. Time: 188.1313 us. Best GFLOPs: 410.7294
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #2: GFLOPs: 691.0525. Time: 111.8165 us. Best GFLOPs: 691.0525
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #3: GFLOPs: 1712.6568. Time: 45.1176 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #4: GFLOPs: 136.8945. Time: 564.4568 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #5: GFLOPs: 646.3833. Time: 119.5437 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #6: GFLOPs: 14.1673. Time: 5454.2011 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #7: GFLOPs: 703.0404. Time: 109.9098 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #8: GFLOPs: 1656.9966. Time: 46.6332 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #9: GFLOPs: 665.4364. Time: 116.1208 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #10: GFLOPs: 1586.4708. Time: 48.7062 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #11: GFLOPs: 414.2529. Time: 186.5311 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #12: GFLOPs: 912.9955. Time: 84.6346 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #13: GFLOPs: 44.5423. Time: 1734.7796 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #14: GFLOPs: 18.4738. Time: 4182.7415 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #15: GFLOPs: 180.3238. Time: 428.5126 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #16: GFLOPs: 11.9900. Time: 6444.6082 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #17: GFLOPs: 44.3680. Time: 1741.5945 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #18: GFLOPs: 346.6553. Time: 222.9045 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #19: GFLOPs: 98.2739. Time: 786.2821 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #20: GFLOPs: 1090.2869. Time: 70.8722 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #21: GFLOPs: 845.8860. Time: 91.3492 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #22: GFLOPs: 644.7689. Time: 119.8430 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #23: GFLOPs: 266.8371. Time: 289.5813 us. Best GFLOPs: 1712.6568
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #24: GFLOPs: 1919.2301. Time: 40.2615 us. Best GFLOPs: 1919.2301
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #25: GFLOPs: 64.4813. Time: 1198.3482 us. Best GFLOPs: 1919.2301
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #26: GFLOPs: 60.1736. Time: 1284.1354 us. Best GFLOPs: 1919.2301
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #27: GFLOPs: 2380.9790. Time: 32.4535 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #28: GFLOPs: 835.9168. Time: 92.4387 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #29: GFLOPs: 423.9846. Time: 182.2496 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #30: GFLOPs: 2057.4702. Time: 37.5563 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #31: GFLOPs: 382.7951. Time: 201.8600 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #32: GFLOPs: 1215.8223. Time: 63.5546 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #33: GFLOPs: 1658.4837. Time: 46.5914 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #34: GFLOPs: 433.4271. Time: 178.2792 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #35: GFLOPs: 304.9485. Time: 253.3905 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #36: GFLOPs: 801.4482. Time: 96.4143 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #37: GFLOPs: 185.5238. Time: 416.5020 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #38: GFLOPs: 892.4903. Time: 86.5791 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #39: GFLOPs: 1218.8578. Time: 63.3963 us. Best GFLOPs: 2380.9790
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #40: GFLOPs: 2698.9657. Time: 28.6299 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #41: GFLOPs: 1333.1751. Time: 57.9602 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #42: GFLOPs: 70.1545. Time: 1101.4414 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #43: GFLOPs: 689.6171. Time: 112.0492 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #44: GFLOPs: 19.8182. Time: 3898.9982 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #45: GFLOPs: 575.3956. Time: 134.2920 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #46: GFLOPs: 139.6368. Time: 553.3717 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #47: GFLOPs: 1800.1960. Time: 42.9237 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #48: GFLOPs: 509.3098. Time: 151.7172 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #49: GFLOPs: 752.3773. Time: 102.7025 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #50: GFLOPs: 1132.7679. Time: 68.2144 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #51: GFLOPs: 907.8622. Time: 85.1132 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #52: GFLOPs: 1135.0977. Time: 68.0744 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #53: GFLOPs: 1139.7492. Time: 67.7965 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #54: GFLOPs: 119.3297. Time: 647.5423 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #55: GFLOPs: 1796.2315. Time: 43.0184 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #56: GFLOPs: 158.3833. Time: 487.8735 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #57: GFLOPs: 293.6582. Time: 263.1326 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #58: GFLOPs: 608.4532. Time: 126.9959 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #59: GFLOPs: 704.4038. Time: 109.6971 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #60: GFLOPs: 1669.3763. Time: 46.2874 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #61: GFLOPs: 1.5567. Time: 49638.7430 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #62: GFLOPs: 765.6720. Time: 100.9192 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #63: GFLOPs: 39.3535. Time: 1963.5099 us. Best GFLOPs: 2698.9657
2024-04-29 14:05:58 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #64: GFLOPs: 1122.1938. Time: 68.8571 us. Best GFLOPs: 2698.9657
