2024-04-29 09:58:54 [INFO] [task_scheduler.cc:160] Initializing Task #169: "fused_nn_max_pool2d"
2024-04-29 09:58:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-04-29 09:58:54 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 09:58:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
2024-04-29 09:58:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
2024-04-29 13:35:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:35:57 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:35:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xae4af98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xface208)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xface7e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac1e28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe7f2bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf125be8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb6345a8)]: 0 failure(s)
2024-04-29 13:35:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:36:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xae4af98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xface208)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xface7e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac1e28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe7f2bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf125be8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb6345a8)]: 0 failure(s)
2024-04-29 13:36:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xae4af98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xface208)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xface7e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac1e28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe7f2bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf125be8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb6345a8)]: 0 failure(s)
2024-04-29 13:36:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xae4af98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xface208)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xface7e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac1e28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe7f2bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf125be8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb6345a8)]: 0 failure(s)
2024-04-29 13:36:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xae4af98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xface208)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xface7e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac1e28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe7f2bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf125be8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb6345a8)]: 0 failure(s)
2024-04-29 13:36:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9864  0.9743  0.9682  0.9374  0.9240  0.8949  0.8948  0.8894  0.8685  0.8667  0.8645  0.8338  0.8240  0.8224  0.8182  0.8152
[17 : 32]:	0.8114  0.8033  0.7917  0.7872  0.7580  0.7457  0.7384  0.7232  0.7163  0.6946  0.6914  0.6886  0.6786  0.6621  0.6304  0.6297
[33 : 48]:	0.6252  0.5939  0.5881  0.5792  0.5616  0.5411  0.5401  0.5270  0.5112  0.4997  0.4907  0.4721  0.4705  0.4214  0.4010  0.4003
[49 : 64]:	0.3985  0.3883  0.3875  0.3805  0.3502  0.3426  0.3238  0.2814  0.2807  0.2806  0.2541  0.1962  0.1522  0.1510  0.1425  0.0861
2024-04-29 13:36:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:36:03 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:121] [Task #169: fused_nn_max_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:121] [Task #169: fused_nn_max_pool2d] Trial #2: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x"):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #3: GFLOPs: 8.5727. Time: 210.7080 us. Best GFLOPs: 8.5727
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #4: GFLOPs: 11.8946. Time: 151.8613 us. Best GFLOPs: 11.8946
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #5: GFLOPs: 347.0418. Time: 5.2050 us. Best GFLOPs: 347.0418
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #6: GFLOPs: 11.8858. Time: 151.9743 us. Best GFLOPs: 347.0418
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #7: GFLOPs: 420.7943. Time: 4.2927 us. Best GFLOPs: 420.7943
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #8: GFLOPs: 440.2334. Time: 4.1031 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #9: GFLOPs: 417.1122. Time: 4.3306 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #10: GFLOPs: 11.9105. Time: 151.6592 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #11: GFLOPs: 11.8836. Time: 152.0026 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #12: GFLOPs: 11.9410. Time: 151.2724 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #13: GFLOPs: 4.2342. Time: 426.6022 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #14: GFLOPs: 11.8855. Time: 151.9787 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #15: GFLOPs: 417.1637. Time: 4.3300 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #16: GFLOPs: 11.8958. Time: 151.8464 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #17: GFLOPs: 11.8828. Time: 152.0121 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #18: GFLOPs: 346.9057. Time: 5.2070 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #19: GFLOPs: 11.8846. Time: 151.9896 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #20: GFLOPs: 11.9128. Time: 151.6298 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #21: GFLOPs: 346.7842. Time: 5.2088 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #22: GFLOPs: 11.9109. Time: 151.6543 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #23: GFLOPs: 417.3075. Time: 4.3285 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #24: GFLOPs: 394.4751. Time: 4.5791 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #25: GFLOPs: 8.5724. Time: 210.7157 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #26: GFLOPs: 425.7734. Time: 4.2425 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #27: GFLOPs: 8.5721. Time: 210.7230 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #28: GFLOPs: 394.4016. Time: 4.5799 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #29: GFLOPs: 11.8805. Time: 152.0416 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #30: GFLOPs: 394.6025. Time: 4.5776 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #31: GFLOPs: 242.5244. Time: 7.4481 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #32: GFLOPs: 11.8684. Time: 152.1973 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #33: GFLOPs: 11.8849. Time: 151.9858 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #34: GFLOPs: 393.0262. Time: 4.5960 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #35: GFLOPs: 237.7010. Time: 7.5992 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #36: GFLOPs: 394.5831. Time: 4.5778 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #37: GFLOPs: 393.1084. Time: 4.5950 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #38: GFLOPs: 11.8844. Time: 151.9916 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #39: GFLOPs: 11.9292. Time: 151.4218 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #40: GFLOPs: 11.9215. Time: 151.5190 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #41: GFLOPs: 417.2883. Time: 4.3287 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #42: GFLOPs: 400.1670. Time: 4.5140 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #43: GFLOPs: 393.0964. Time: 4.5951 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #44: GFLOPs: 11.8939. Time: 151.8707 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #45: GFLOPs: 439.2648. Time: 4.1122 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #46: GFLOPs: 11.8290. Time: 152.7038 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #47: GFLOPs: 11.9416. Time: 151.2645 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #48: GFLOPs: 237.8135. Time: 7.5956 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #49: GFLOPs: 393.0913. Time: 4.5952 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #50: GFLOPs: 8.5730. Time: 210.7015 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #51: GFLOPs: 400.1218. Time: 4.5145 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #52: GFLOPs: 11.9407. Time: 151.2762 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #53: GFLOPs: 4.2339. Time: 426.6403 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #54: GFLOPs: 237.6930. Time: 7.5994 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #55: GFLOPs: 8.5728. Time: 210.7061 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #56: GFLOPs: 4.2316. Time: 426.8725 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #57: GFLOPs: 11.8789. Time: 152.0625 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #58: GFLOPs: 11.8808. Time: 152.0387 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #59: GFLOPs: 400.2456. Time: 4.5131 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #60: GFLOPs: 11.8563. Time: 152.3520 us. Best GFLOPs: 440.2334
2024-04-29 14:09:01 [INFO] [task_scheduler.cc:131] [Task #169: fused_nn_max_pool2d] Trial #61: GFLOPs: 346.7725. Time: 5.2090 us. Best GFLOPs: 440.2334
