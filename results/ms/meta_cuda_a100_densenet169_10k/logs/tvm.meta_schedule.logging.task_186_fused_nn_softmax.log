2024-04-29 09:58:58 [INFO] [task_scheduler.cc:160] Initializing Task #186: "fused_nn_softmax"
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(32)):
                    for k_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(32) + k_1)
                            T.where(k_0 * T.int64(32) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(32)):
                    for ax1_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(32) + ax1_1)
                            T.where(ax1_0 * T.int64(32) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(32)):
                    for i1_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(32) + i1_1)
                            T.where(i1_0 * T.int64(32) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(32)):
                    for ax1_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(32) + ax1_1)
                            T.where(ax1_0 * T.int64(32) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(32)):
                    for ax1_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(32) + ax1_1)
                            T.where(ax1_0 * T.int64(32) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(32)):
                    for i1_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(32) + i1_1)
                            T.where(i1_0 * T.int64(32) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-29 13:56:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:56:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:56:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1003dab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf676478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xda22ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcd35048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe3b7ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x105f3ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe286d88)]: 0 failure(s)
2024-04-29 13:56:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:56:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1003dab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf676478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xda22ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcd35048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe3b7ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x105f3ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe286d88)]: 0 failure(s)
2024-04-29 13:56:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1003dab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf676478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xda22ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcd35048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe3b7ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x105f3ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe286d88)]: 0 failure(s)
2024-04-29 13:56:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1003dab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf676478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xda22ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcd35048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe3b7ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x105f3ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe286d88)]: 0 failure(s)
2024-04-29 13:56:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1003dab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf676478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xda22ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcd35048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe3b7ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x105f3ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe286d88)]: 0 failure(s)
2024-04-29 13:56:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9975  0.9927  0.9884  0.9881  0.9717  0.9708  0.9671  0.9604  0.9585  0.9565  0.9486  0.9469  0.9445  0.9432  0.9426  0.9387
[17 : 32]:	0.9326  0.9326  0.9231  0.9202  0.9183  0.9156  0.9047  0.9044  0.9042  0.9005  0.8884  0.8838  0.8789  0.8733  0.8732  0.8693
[33 : 48]:	0.8660  0.8387  0.8307  0.8272  0.8203  0.8193  0.8185  0.8157  0.8069  0.7981  0.7971  0.7913  0.7884  0.7868  0.7815  0.7815
[49 : 64]:	0.7807  0.7776  0.7760  0.7750  0.7709  0.7687  0.7643  0.7564  0.7467  0.7428  0.7417  0.7264  0.7232  0.7226  0.7191  0.7109
2024-04-29 13:56:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:56:28 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #1: GFLOPs: 0.1353. Time: 29.5615 us. Best GFLOPs: 0.1353
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #2: GFLOPs: 0.0866. Time: 46.1655 us. Best GFLOPs: 0.1353
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #3: GFLOPs: 1.1444. Time: 3.4951 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #4: GFLOPs: 0.1075. Time: 37.2237 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #5: GFLOPs: 0.2250. Time: 17.7788 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #6: GFLOPs: 0.1086. Time: 36.8387 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #7: GFLOPs: 0.2595. Time: 15.4156 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #8: GFLOPs: 0.1083. Time: 36.9489 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #9: GFLOPs: 0.1098. Time: 36.4147 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #10: GFLOPs: 0.1092. Time: 36.6189 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #11: GFLOPs: 0.0867. Time: 46.1120 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #12: GFLOPs: 0.2817. Time: 14.2019 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #13: GFLOPs: 0.1884. Time: 21.2264 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #14: GFLOPs: 0.1094. Time: 36.5603 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #15: GFLOPs: 0.1082. Time: 36.9552 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #16: GFLOPs: 0.1063. Time: 37.6406 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #17: GFLOPs: 0.0869. Time: 46.0434 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #18: GFLOPs: 0.2398. Time: 16.6840 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #19: GFLOPs: 0.1061. Time: 37.7064 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #20: GFLOPs: 0.8189. Time: 4.8844 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #21: GFLOPs: 0.1064. Time: 37.6030 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #22: GFLOPs: 0.1097. Time: 36.4776 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #23: GFLOPs: 0.0897. Time: 44.6047 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #24: GFLOPs: 0.1575. Time: 25.3941 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #25: GFLOPs: 0.0869. Time: 46.0368 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #26: GFLOPs: 0.1097. Time: 36.4791 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #27: GFLOPs: 0.1059. Time: 37.7701 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #28: GFLOPs: 0.1561. Time: 25.6211 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #29: GFLOPs: 0.4597. Time: 8.7004 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #30: GFLOPs: 0.1086. Time: 36.8463 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #31: GFLOPs: 0.0965. Time: 41.4713 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #32: GFLOPs: 0.1094. Time: 36.5539 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #33: GFLOPs: 0.1097. Time: 36.4787 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #34: GFLOPs: 0.1461. Time: 27.3710 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #35: GFLOPs: 0.2607. Time: 15.3442 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #36: GFLOPs: 0.1094. Time: 36.5645 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #37: GFLOPs: 0.1090. Time: 36.7104 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #38: GFLOPs: 0.1090. Time: 36.6867 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #39: GFLOPs: 0.1558. Time: 25.6755 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #40: GFLOPs: 0.1079. Time: 37.0687 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #41: GFLOPs: 0.1082. Time: 36.9848 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #42: GFLOPs: 0.1099. Time: 36.4079 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #43: GFLOPs: 0.1084. Time: 36.8847 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #44: GFLOPs: 0.1091. Time: 36.6791 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #45: GFLOPs: 0.1520. Time: 26.3196 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #46: GFLOPs: 0.1560. Time: 25.6492 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #47: GFLOPs: 0.2518. Time: 15.8884 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #48: GFLOPs: 0.1099. Time: 36.4057 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #49: GFLOPs: 0.1083. Time: 36.9341 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #50: GFLOPs: 0.1526. Time: 26.2076 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #51: GFLOPs: 0.1565. Time: 25.5519 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #52: GFLOPs: 0.1097. Time: 36.4788 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #53: GFLOPs: 0.1094. Time: 36.5486 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #54: GFLOPs: 0.3917. Time: 10.2132 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #55: GFLOPs: 0.0839. Time: 47.6764 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #56: GFLOPs: 0.2297. Time: 17.4168 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #57: GFLOPs: 0.2605. Time: 15.3535 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #58: GFLOPs: 0.1096. Time: 36.4803 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #59: GFLOPs: 0.1351. Time: 29.6180 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #60: GFLOPs: 0.1568. Time: 25.5174 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #61: GFLOPs: 0.1457. Time: 27.4497 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #62: GFLOPs: 0.2188. Time: 18.2856 us. Best GFLOPs: 1.1444
2024-04-29 14:10:44 [INFO] [task_scheduler.cc:131] [Task #186: fused_nn_softmax] Trial #63: GFLOPs: 0.1058. Time: 37.8108 us. Best GFLOPs: 1.1444
