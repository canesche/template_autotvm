2024-04-29 09:58:04 [INFO] [task_scheduler.cc:160] Initializing Task #70: "fused_nn_conv2d_add_nn_relu_34"
2024-04-29 09:58:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1184), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1184), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:58:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:58:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0 * T.int64(296) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37888)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(296))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0 * T.int64(296) + ax0_ax1_ax2_ax3_fused % T.int64(296))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(148), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0 * T.int64(296) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 148, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 09:58:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37888)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(296))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + ax0_ax1_ax2_ax3_fused % T.int64(296))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(148), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 148, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 09:58:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37888)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(296))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + ax0_ax1_ax2_ax3_fused % T.int64(296))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(148), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(296) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 148, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:31:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:31:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:31:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 477 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 959 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:18 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-29 11:31:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb854ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfc250e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10a068a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x86864b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9274948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd320a48)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10a06878)]: 0 failure(s)
2024-04-29 11:31:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9975  0.9972  0.9968  0.9961  0.9960  0.9958  0.9957  0.9936  0.9935  0.9933  0.9928  0.9922  0.9904  0.9902  0.9901
[17 : 32]:	0.9898  0.9891  0.9887  0.9858  0.9858  0.9854  0.9831  0.9830  0.9823  0.9820  0.9818  0.9815  0.9810  0.9807  0.9803  0.9796
[33 : 48]:	0.9787  0.9785  0.9777  0.9776  0.9762  0.9755  0.9748  0.9746  0.9738  0.9736  0.9732  0.9730  0.9728  0.9723  0.9710  0.9700
[49 : 64]:	0.9698  0.9694  0.9683  0.9676  0.9666  0.9664  0.9659  0.9657  0.9649  0.9647  0.9638  0.9623  0.9615  0.9614  0.9598  0.9578
2024-04-29 11:31:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:31:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #1: GFLOPs: 117.1592. Time: 507.5022 us. Best GFLOPs: 117.1592
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #2: GFLOPs: 1074.8874. Time: 55.3161 us. Best GFLOPs: 1074.8874
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #3: GFLOPs: 153.8747. Time: 386.4090 us. Best GFLOPs: 1074.8874
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #4: GFLOPs: 1702.0618. Time: 34.9333 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #5: GFLOPs: 72.7520. Time: 817.2769 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #6: GFLOPs: 104.8185. Time: 567.2527 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #7: GFLOPs: 146.7871. Time: 405.0666 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #8: GFLOPs: 256.1647. Time: 232.1106 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #9: GFLOPs: 1074.8638. Time: 55.3173 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #10: GFLOPs: 74.1245. Time: 802.1442 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #11: GFLOPs: 185.8098. Time: 319.9969 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #12: GFLOPs: 153.3192. Time: 387.8091 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #13: GFLOPs: 27.1895. Time: 2186.8188 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #14: GFLOPs: 313.9435. Time: 189.3926 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #15: GFLOPs: 96.2817. Time: 617.5479 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #16: GFLOPs: 546.4595. Time: 108.8069 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #17: GFLOPs: 113.2188. Time: 525.1652 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #18: GFLOPs: 122.1737. Time: 486.6723 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #19: GFLOPs: 190.3892. Time: 312.3001 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #20: GFLOPs: 439.0321. Time: 135.4310 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #21: GFLOPs: 120.1340. Time: 494.9354 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #22: GFLOPs: 370.3144. Time: 160.5624 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #23: GFLOPs: 29.1333. Time: 2040.9157 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #24: GFLOPs: 13.5497. Time: 4388.1962 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #25: GFLOPs: 67.7274. Time: 877.9093 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #26: GFLOPs: 78.8951. Time: 753.6409 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #27: GFLOPs: 113.3707. Time: 524.4614 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #28: GFLOPs: 39.0154. Time: 1523.9757 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #29: GFLOPs: 301.7046. Time: 197.0754 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #30: GFLOPs: 1417.5570. Time: 41.9444 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #31: GFLOPs: 467.3446. Time: 127.2264 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #32: GFLOPs: 408.7658. Time: 145.4587 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #33: GFLOPs: 183.9624. Time: 323.2103 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #34: GFLOPs: 831.5806. Time: 71.5007 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #35: GFLOPs: 456.6579. Time: 130.2037 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #36: GFLOPs: 521.2468. Time: 114.0699 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #37: GFLOPs: 8.6433. Time: 6879.1636 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #38: GFLOPs: 275.4864. Time: 215.8312 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #39: GFLOPs: 181.9882. Time: 326.7166 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #40: GFLOPs: 579.5744. Time: 102.5900 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #41: GFLOPs: 116.6782. Time: 509.5944 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #42: GFLOPs: 31.2330. Time: 1903.7126 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #43: GFLOPs: 74.6862. Time: 796.1112 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #44: GFLOPs: 28.9207. Time: 2055.9203 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #45: GFLOPs: 187.7985. Time: 316.6083 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #46: GFLOPs: 152.5590. Time: 389.7414 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #47: GFLOPs: 199.9998. Time: 297.2931 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #48: GFLOPs: 202.5679. Time: 293.5242 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #49: GFLOPs: 39.2697. Time: 1514.1096 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #50: GFLOPs: 81.0757. Time: 733.3709 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #51: GFLOPs: 109.0153. Time: 545.4149 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #52: GFLOPs: 313.8952. Time: 189.4217 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #53: GFLOPs: 207.6195. Time: 286.3823 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #54: GFLOPs: 283.4021. Time: 209.8028 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #55: GFLOPs: 1341.2013. Time: 44.3323 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #56: GFLOPs: 527.2204. Time: 112.7774 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #57: GFLOPs: 182.2255. Time: 326.2910 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #58: GFLOPs: 609.1092. Time: 97.6156 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #59: GFLOPs: 163.2154. Time: 364.2950 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #60: GFLOPs: 50.5963. Time: 1175.1559 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #61: GFLOPs: 262.1638. Time: 226.7992 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #62: GFLOPs: 304.7457. Time: 195.1088 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #63: GFLOPs: 461.1139. Time: 128.9455 us. Best GFLOPs: 1702.0618
2024-04-29 14:00:42 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_conv2d_add_nn_relu_34] Trial #64: GFLOPs: 55.6337. Time: 1068.7510 us. Best GFLOPs: 1702.0618
