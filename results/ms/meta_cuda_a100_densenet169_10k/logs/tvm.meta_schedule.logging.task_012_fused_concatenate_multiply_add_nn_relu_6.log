2024-04-29 09:57:30 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_concatenate_multiply_add_nn_relu_6"
2024-04-29 09:57:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(640), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(1440), T.int64(1), T.int64(1)), "float32"), p27: T.Buffer((T.int64(1), T.int64(1440), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1440), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1440), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1440), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1440), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1440), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p25[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1408) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], T.if_then_else(T.int64(864) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], T.if_then_else(T.int64(832) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1440), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p26[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p26[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1440), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p27[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p27[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1440), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:57:30 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 09:57:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(640), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(1440), T.int64(1), T.int64(1)), "float32"), p27: T.Buffer((T.int64(1), T.int64(1440), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1440), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(69), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1440), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(70560))
                    T.reads(p25[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p26[v_ax0, v_ax1, T.int64(0), T.int64(0)], p27[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1408) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], T.if_then_else(T.int64(864) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], T.if_then_else(T.int64(832) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))))))))) * p26[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p27[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 10:14:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:14:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:14:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xee09e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde26498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbf95138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x59d4508)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc44fa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd331508)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbf95618)]: 0 failure(s)
2024-04-29 10:14:27 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:14:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xee09e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde26498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbf95138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x59d4508)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc44fa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd331508)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbf95618)]: 0 failure(s)
2024-04-29 10:14:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xee09e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde26498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbf95138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x59d4508)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc44fa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd331508)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbf95618)]: 0 failure(s)
2024-04-29 10:14:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xee09e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde26498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbf95138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x59d4508)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc44fa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd331508)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbf95618)]: 0 failure(s)
2024-04-29 10:14:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xee09e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde26498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbf95138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x59d4508)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc44fa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd331508)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbf95618)]: 0 failure(s)
2024-04-29 10:14:32 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.7290  0.6714  0.5398  0.4537  0.2655  0.1253
2024-04-29 10:14:32 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 10:14:32 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #1: GFLOPs: 43.0047. Time: 4.9223 us. Best GFLOPs: 43.0047
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #2: GFLOPs: 50.6585. Time: 4.1786 us. Best GFLOPs: 50.6585
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #3: GFLOPs: 59.7609. Time: 3.5421 us. Best GFLOPs: 59.7609
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #4: GFLOPs: 62.9065. Time: 3.3650 us. Best GFLOPs: 62.9065
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #5: GFLOPs: 63.0989. Time: 3.3547 us. Best GFLOPs: 63.0989
2024-04-29 13:58:07 [INFO] [task_scheduler.cc:131] [Task #12: fused_concatenate_multiply_add_nn_relu_6] Trial #6: GFLOPs: 63.1568. Time: 3.3517 us. Best GFLOPs: 63.1568
