2024-04-29 09:58:58 [INFO] [task_scheduler.cc:160] Initializing Task #183: "fused_nn_global_avg_pool2d"
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1664), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1664), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(52), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1664))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 09:58:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1664), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(32)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 13:52:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:52:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:52:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33bb168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde59cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1152cd28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xfbecfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ffe7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfad0588)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf9537b8)]: 0 failure(s)
2024-04-29 13:52:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:52:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33bb168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde59cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1152cd28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xfbecfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ffe7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfad0588)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf9537b8)]: 0 failure(s)
2024-04-29 13:52:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33bb168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde59cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1152cd28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xfbecfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ffe7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfad0588)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf9537b8)]: 0 failure(s)
2024-04-29 13:52:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33bb168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde59cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1152cd28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xfbecfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ffe7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfad0588)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf9537b8)]: 0 failure(s)
2024-04-29 13:52:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33bb168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xde59cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1152cd28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xfbecfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ffe7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfad0588)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf9537b8)]: 0 failure(s)
2024-04-29 13:52:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9967  0.9958  0.9925  0.9905  0.9901  0.9885  0.9870  0.9862  0.9850  0.9826  0.9727  0.9661  0.9612  0.9483  0.9472  0.9419
[17 : 32]:	0.9330  0.9316  0.9305  0.9259  0.9212  0.9191  0.9187  0.9178  0.9155  0.9150  0.9101  0.9067  0.9036  0.9018  0.9000  0.8911
[33 : 48]:	0.8890  0.8864  0.8832  0.8722  0.8710  0.8709  0.8691  0.8689  0.8619  0.8606  0.8591  0.8566  0.8522  0.8495  0.8447  0.8436
[49 : 64]:	0.8316  0.8290  0.8268  0.8213  0.8191  0.8127  0.8072  0.8039  0.8004  0.7975  0.7929  0.7897  0.7811  0.7756  0.7720  0.7675
2024-04-29 13:52:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:52:02 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 4.5456. Time: 18.3033 us. Best GFLOPs: 4.5456
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 7.2198. Time: 11.5239 us. Best GFLOPs: 7.2198
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 10.3475. Time: 8.0406 us. Best GFLOPs: 10.3475
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 20.5447. Time: 4.0497 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 4.6526. Time: 17.8824 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 10.2169. Time: 8.1434 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 14.1386. Time: 5.8846 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 14.1388. Time: 5.8845 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 4.7626. Time: 17.4695 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 12.3704. Time: 6.7258 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 4.7659. Time: 17.4573 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 14.8736. Time: 5.5938 us. Best GFLOPs: 20.5447
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 20.5452. Time: 4.0496 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 10.2273. Time: 8.1351 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 7.4715. Time: 11.1357 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 12.3135. Time: 6.7568 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 4.7271. Time: 17.6006 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 10.0298. Time: 8.2952 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 14.8726. Time: 5.5942 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.7569. Time: 17.4902 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 18.0926. Time: 4.5986 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 10.0612. Time: 8.2694 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 20.4767. Time: 4.0631 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 20.4767. Time: 4.0631 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 7.5730. Time: 10.9865 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 10.0742. Time: 8.2587 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 14.4788. Time: 5.7463 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 7.4713. Time: 11.1360 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 18.0873. Time: 4.5999 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 4.7842. Time: 17.3906 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 14.1379. Time: 5.8849 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 12.4185. Time: 6.6997 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 12.4084. Time: 6.7051 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 7.3110. Time: 11.3800 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 13.0787. Time: 6.3615 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 13.0810. Time: 6.3604 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 13.2593. Time: 6.2748 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 13.0345. Time: 6.3831 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 10.0710. Time: 8.2613 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 18.0904. Time: 4.5991 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 12.6811. Time: 6.5610 us. Best GFLOPs: 20.5452
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 20.6164. Time: 4.0356 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 20.3493. Time: 4.0886 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 13.0434. Time: 6.3787 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 7.4486. Time: 11.1699 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 20.4765. Time: 4.0632 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 13.3655. Time: 6.2250 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 13.1073. Time: 6.3476 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 4.7751. Time: 17.4238 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 10.0362. Time: 8.2900 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 13.4867. Time: 6.1691 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 12.3903. Time: 6.7149 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 10.0298. Time: 8.2952 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 12.6265. Time: 6.5893 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 13.0810. Time: 6.3604 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 13.3674. Time: 6.2241 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 7.5728. Time: 10.9867 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 12.3915. Time: 6.7143 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 12.6344. Time: 6.5852 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 4.7266. Time: 17.6025 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 13.1852. Time: 6.3101 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 12.3770. Time: 6.7222 us. Best GFLOPs: 20.6164
2024-04-29 14:10:25 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 20.5830. Time: 4.0422 us. Best GFLOPs: 20.6164
