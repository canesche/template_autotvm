2024-04-29 09:58:36 [INFO] [task_scheduler.cc:160] Initializing Task #118: "fused_nn_conv2d_add_nn_relu_58"
2024-04-29 09:58:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(416), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(416), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:58:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:58:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(13), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(416), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(416), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(416), rc_0 * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 2, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[13, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 09:58:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(13), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 2, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[13, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 09:58:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(416), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(13), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(416), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 2, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[13, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 12:29:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:29:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 12:29:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 953 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:34 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-04-29 12:29:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe976768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee8df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf3e7b28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1172f658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc3bb638)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11720768)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcda7c08)]: 0 failure(s)
2024-04-29 12:29:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9978  0.9966  0.9965  0.9926  0.9924  0.9919  0.9918  0.9908  0.9901  0.9898  0.9895  0.9895  0.9879  0.9873  0.9872
[17 : 32]:	0.9865  0.9856  0.9854  0.9839  0.9837  0.9826  0.9820  0.9810  0.9781  0.9778  0.9777  0.9777  0.9774  0.9766  0.9766  0.9760
[33 : 48]:	0.9747  0.9740  0.9736  0.9733  0.9733  0.9730  0.9730  0.9729  0.9720  0.9716  0.9714  0.9707  0.9701  0.9696  0.9686  0.9685
[49 : 64]:	0.9674  0.9674  0.9669  0.9665  0.9658  0.9642  0.9637  0.9615  0.9612  0.9610  0.9609  0.9604  0.9586  0.9583  0.9581  0.9581
2024-04-29 12:29:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:29:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #1: GFLOPs: 441.4603. Time: 47.3959 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #2: GFLOPs: 219.6003. Time: 95.2795 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #3: GFLOPs: 131.5869. Time: 159.0082 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #4: GFLOPs: 377.2125. Time: 55.4684 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #5: GFLOPs: 300.0850. Time: 69.7249 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #6: GFLOPs: 292.9077. Time: 71.4334 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #7: GFLOPs: 274.7041. Time: 76.1670 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #8: GFLOPs: 103.8163. Time: 201.5424 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #9: GFLOPs: 349.9355. Time: 59.7921 us. Best GFLOPs: 441.4603
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #10: GFLOPs: 601.5653. Time: 34.7816 us. Best GFLOPs: 601.5653
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #11: GFLOPs: 247.8268. Time: 84.4275 us. Best GFLOPs: 601.5653
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #12: GFLOPs: 293.5600. Time: 71.2747 us. Best GFLOPs: 601.5653
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #13: GFLOPs: 149.4774. Time: 139.9770 us. Best GFLOPs: 601.5653
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #14: GFLOPs: 699.1793. Time: 29.9256 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #15: GFLOPs: 12.4179. Time: 1684.9408 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #16: GFLOPs: 77.1161. Time: 271.3234 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #17: GFLOPs: 262.1501. Time: 79.8146 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #18: GFLOPs: 343.4928. Time: 60.9136 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #19: GFLOPs: 323.6060. Time: 64.6570 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #20: GFLOPs: 296.0042. Time: 70.6861 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #21: GFLOPs: 441.0893. Time: 47.4357 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #22: GFLOPs: 138.7338. Time: 150.8168 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #23: GFLOPs: 589.4506. Time: 35.4964 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #24: GFLOPs: 293.9852. Time: 71.1716 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #25: GFLOPs: 45.0301. Time: 464.6533 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #26: GFLOPs: 409.7467. Time: 51.0642 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #27: GFLOPs: 221.4635. Time: 94.4778 us. Best GFLOPs: 699.1793
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #28: GFLOPs: 781.2303. Time: 26.7826 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #29: GFLOPs: 168.0402. Time: 124.5142 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #30: GFLOPs: 173.1283. Time: 120.8549 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #31: GFLOPs: 21.9521. Time: 953.1392 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #32: GFLOPs: 125.5639. Time: 166.6355 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #33: GFLOPs: 142.5881. Time: 146.7401 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #34: GFLOPs: 673.3759. Time: 31.0724 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #35: GFLOPs: 298.9341. Time: 69.9933 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #36: GFLOPs: 73.9234. Time: 283.0416 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #37: GFLOPs: 243.6587. Time: 85.8717 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #38: GFLOPs: 319.6483. Time: 65.4575 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #39: GFLOPs: 164.5886. Time: 127.1254 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #40: GFLOPs: 200.7711. Time: 104.2152 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #41: GFLOPs: 148.7139. Time: 140.6956 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #42: GFLOPs: 160.9390. Time: 130.0082 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #43: GFLOPs: 250.8217. Time: 83.4194 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #44: GFLOPs: 162.7497. Time: 128.5618 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #45: GFLOPs: 750.6488. Time: 27.8737 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #46: GFLOPs: 32.6990. Time: 639.8781 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #47: GFLOPs: 126.2851. Time: 165.6838 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #48: GFLOPs: 169.1279. Time: 123.7134 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #49: GFLOPs: 78.5950. Time: 266.2178 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #50: GFLOPs: 393.5688. Time: 53.1632 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #51: GFLOPs: 211.2956. Time: 99.0243 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #52: GFLOPs: 352.1811. Time: 59.4109 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #53: GFLOPs: 36.8441. Time: 567.8894 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #54: GFLOPs: 29.9232. Time: 699.2368 us. Best GFLOPs: 781.2303
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #55: GFLOPs: 790.5086. Time: 26.4683 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #56: GFLOPs: 306.9766. Time: 68.1596 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #57: GFLOPs: 295.5800. Time: 70.7876 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #58: GFLOPs: 56.3831. Time: 371.0933 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #59: GFLOPs: 99.6019. Time: 210.0701 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #60: GFLOPs: 145.1985. Time: 144.1020 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #61: GFLOPs: 506.7514. Time: 41.2893 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #62: GFLOPs: 169.8905. Time: 123.1581 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #63: GFLOPs: 6.1238. Time: 3416.7468 us. Best GFLOPs: 790.5086
2024-04-29 14:04:17 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_58] Trial #64: GFLOPs: 578.3248. Time: 36.1793 us. Best GFLOPs: 790.5086
