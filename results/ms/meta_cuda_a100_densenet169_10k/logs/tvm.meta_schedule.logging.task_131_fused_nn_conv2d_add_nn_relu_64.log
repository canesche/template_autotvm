2024-04-29 09:58:41 [INFO] [task_scheduler.cc:160] Initializing Task #131: "fused_nn_conv2d_add_nn_relu_64"
2024-04-29 09:58:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:58:41 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:58:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(94080)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused % T.int64(120))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0 * T.int64(120) + rc_1 * T.int64(60) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 4, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 60])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 09:58:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(94080)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused % T.int64(120))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + rc_1 * T.int64(60) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 4, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 60])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 09:58:41 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(94080)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused % T.int64(120))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(120) + rc_1 * T.int64(60) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(392) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(392) // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 4, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 60])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 12:46:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:46:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 12:46:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 491 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 977 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 1465 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:39 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-04-29 12:46:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 12:46:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9991  0.9978  0.9963  0.9949  0.9948  0.9913  0.9890  0.9887  0.9875  0.9875  0.9860  0.9852  0.9838  0.9833  0.9830
[17 : 32]:	0.9820  0.9819  0.9819  0.9817  0.9817  0.9813  0.9808  0.9792  0.9788  0.9784  0.9777  0.9774  0.9773  0.9766  0.9761  0.9754
[33 : 48]:	0.9752  0.9751  0.9742  0.9738  0.9728  0.9726  0.9721  0.9716  0.9692  0.9677  0.9672  0.9666  0.9666  0.9655  0.9653  0.9642
[49 : 64]:	0.9641  0.9605  0.9600  0.9590  0.9587  0.9584  0.9584  0.9572  0.9568  0.9562  0.9556  0.9553  0.9549  0.9537  0.9533  0.9528
2024-04-29 12:46:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:46:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #1: GFLOPs: 1628.5471. Time: 59.2790 us. Best GFLOPs: 1628.5471
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #2: GFLOPs: 345.3684. Time: 279.5236 us. Best GFLOPs: 1628.5471
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #3: GFLOPs: 179.0373. Time: 539.2096 us. Best GFLOPs: 1628.5471
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #4: GFLOPs: 353.8464. Time: 272.8263 us. Best GFLOPs: 1628.5471
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #5: GFLOPs: 290.3519. Time: 332.4883 us. Best GFLOPs: 1628.5471
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #6: GFLOPs: 1974.5114. Time: 48.8924 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #7: GFLOPs: 665.2356. Time: 145.1194 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #8: GFLOPs: 232.2438. Time: 415.6780 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #9: GFLOPs: 137.6967. Time: 701.0963 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #10: GFLOPs: 1286.2426. Time: 75.0548 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #11: GFLOPs: 56.3532. Time: 1713.1000 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #12: GFLOPs: 212.5329. Time: 454.2291 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #13: GFLOPs: 1034.3906. Time: 93.3290 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #14: GFLOPs: 584.0929. Time: 165.2796 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #15: GFLOPs: 1127.8499. Time: 85.5953 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #16: GFLOPs: 9.2615. Time: 10423.6030 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #17: GFLOPs: 675.5164. Time: 142.9108 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #18: GFLOPs: 1539.4354. Time: 62.7104 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #19: GFLOPs: 773.8498. Time: 124.7511 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #20: GFLOPs: 1910.2245. Time: 50.5378 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #21: GFLOPs: 189.0838. Time: 510.5599 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #22: GFLOPs: 109.0097. Time: 885.5969 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #23: GFLOPs: 295.1385. Time: 327.0960 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #24: GFLOPs: 1422.4470. Time: 67.8680 us. Best GFLOPs: 1974.5114
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:121] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(160), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(588))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[160, 1, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #26: GFLOPs: 2008.6076. Time: 48.0625 us. Best GFLOPs: 2008.6076
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #27: GFLOPs: 2284.0215. Time: 42.2670 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #28: GFLOPs: 16.9797. Time: 5685.5324 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #29: GFLOPs: 2109.6878. Time: 45.7597 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #30: GFLOPs: 126.0850. Time: 765.6628 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:121] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1176))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(6))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(6) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 32, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[80, 2, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #32: GFLOPs: 651.4588. Time: 148.1884 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #33: GFLOPs: 6.1405. Time: 15721.6186 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #34: GFLOPs: 164.4575. Time: 587.0127 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #35: GFLOPs: 1962.4297. Time: 49.1934 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #36: GFLOPs: 843.3089. Time: 114.4760 us. Best GFLOPs: 2284.0215
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #37: GFLOPs: 2298.8058. Time: 41.9951 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #38: GFLOPs: 366.7388. Time: 263.2354 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #39: GFLOPs: 739.1431. Time: 130.6088 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #40: GFLOPs: 1605.8420. Time: 60.1171 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #41: GFLOPs: 104.3812. Time: 924.8662 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #42: GFLOPs: 867.3776. Time: 111.2994 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #43: GFLOPs: 803.4262. Time: 120.1587 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #44: GFLOPs: 1691.4692. Time: 57.0738 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #45: GFLOPs: 94.4408. Time: 1022.2132 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #46: GFLOPs: 866.2642. Time: 111.4425 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #47: GFLOPs: 30.9123. Time: 3122.9793 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #48: GFLOPs: 654.7030. Time: 147.4541 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #49: GFLOPs: 1772.8556. Time: 54.4537 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #50: GFLOPs: 520.9353. Time: 185.3179 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #51: GFLOPs: 1017.7997. Time: 94.8503 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #52: GFLOPs: 300.8732. Time: 320.8615 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #53: GFLOPs: 642.0620. Time: 150.3572 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #54: GFLOPs: 1149.8848. Time: 83.9550 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #55: GFLOPs: 872.7279. Time: 110.6171 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #56: GFLOPs: 261.0925. Time: 369.7487 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #57: GFLOPs: 1628.8639. Time: 59.2675 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #58: GFLOPs: 112.1962. Time: 860.4447 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #59: GFLOPs: 147.9774. Time: 652.3875 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #60: GFLOPs: 6.2743. Time: 15386.3317 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #61: GFLOPs: 20.8395. Time: 4632.4830 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #62: GFLOPs: 63.6596. Time: 1516.4819 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #63: GFLOPs: 322.3080. Time: 299.5229 us. Best GFLOPs: 2298.8058
2024-04-29 14:05:26 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #64: GFLOPs: 1905.5280. Time: 50.6624 us. Best GFLOPs: 2298.8058
2024-04-29 16:12:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:12:56 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 16:12:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:12:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 871 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 1300 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:01 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 16:13:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6ca21d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10891f28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1d3c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf7b7dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf0d14b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x117ea498)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbd0a318)]: 0 failure(s)
2024-04-29 16:13:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8736  1.8063  1.3822  1.3627  1.3455  1.3338  1.2999  1.2979  1.2967  1.2827  1.2823  1.2813  1.2712  1.2628  1.2591  1.2541
[17 : 32]:	1.2524  1.2469  1.2459  1.2456  1.2420  1.2380  1.2210  1.2185  1.2178  1.2017  1.1983  1.1930  1.1703  1.1684  1.1643  1.1566
[33 : 48]:	1.1554  1.1459  1.1448  1.1442  1.1370  1.1336  1.1261  1.1244  1.1235  1.1232  1.1219  1.1175  1.1158  1.1146  1.0901  1.0886
[49 : 64]:	1.0881  1.0818  1.0779  1.0770  1.0733  1.0707  1.0663  1.0635  1.0599  1.0572  1.0507  1.0482  1.0375  1.0363  1.0341  1.0272
2024-04-29 16:13:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:13:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #65: GFLOPs: 3434.7641. Time: 28.1063 us. Best GFLOPs: 3434.7641
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #66: GFLOPs: 3470.3240. Time: 27.8183 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #67: GFLOPs: 3365.1541. Time: 28.6877 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #68: GFLOPs: 3083.3220. Time: 31.3099 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #69: GFLOPs: 3111.3793. Time: 31.0276 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #70: GFLOPs: 3036.9037. Time: 31.7885 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #71: GFLOPs: 3199.9604. Time: 30.1687 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #72: GFLOPs: 3083.4485. Time: 31.3087 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #73: GFLOPs: 3036.7635. Time: 31.7900 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #74: GFLOPs: 3091.7679. Time: 31.2244 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #75: GFLOPs: 3386.6534. Time: 28.5056 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #76: GFLOPs: 2826.7489. Time: 34.1518 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #77: GFLOPs: 2917.7197. Time: 33.0870 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #78: GFLOPs: 3198.6670. Time: 30.1809 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #79: GFLOPs: 3066.2437. Time: 31.4843 us. Best GFLOPs: 3470.3240
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #80: GFLOPs: 3675.1300. Time: 26.2681 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #81: GFLOPs: 3225.7611. Time: 29.9274 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #82: GFLOPs: 3421.7934. Time: 28.2129 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #83: GFLOPs: 3406.2575. Time: 28.3416 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #84: GFLOPs: 3092.2217. Time: 31.2198 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #85: GFLOPs: 3005.7929. Time: 32.1175 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #86: GFLOPs: 3303.7687. Time: 29.2208 us. Best GFLOPs: 3675.1300
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #87: GFLOPs: 3685.3299. Time: 26.1954 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #88: GFLOPs: 3104.8118. Time: 31.0932 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #89: GFLOPs: 2945.9850. Time: 32.7696 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #90: GFLOPs: 3414.7424. Time: 28.2711 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #91: GFLOPs: 3085.0864. Time: 31.2920 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #92: GFLOPs: 3040.3013. Time: 31.7530 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #93: GFLOPs: 2312.7283. Time: 41.7423 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #94: GFLOPs: 2709.9746. Time: 35.6234 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #95: GFLOPs: 3210.3528. Time: 30.0710 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #96: GFLOPs: 3188.7660. Time: 30.2746 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #97: GFLOPs: 3588.2373. Time: 26.9042 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #98: GFLOPs: 3467.2537. Time: 27.8430 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #99: GFLOPs: 2923.9645. Time: 33.0163 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #100: GFLOPs: 3028.2410. Time: 31.8794 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #101: GFLOPs: 3334.3234. Time: 28.9530 us. Best GFLOPs: 3685.3299
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #102: GFLOPs: 3736.0652. Time: 25.8397 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #103: GFLOPs: 3148.0372. Time: 30.6663 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #104: GFLOPs: 2991.7667. Time: 32.2681 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #105: GFLOPs: 3333.5395. Time: 28.9598 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #106: GFLOPs: 3151.0661. Time: 30.6368 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #107: GFLOPs: 3204.8444. Time: 30.1227 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #108: GFLOPs: 3182.8534. Time: 30.3308 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #109: GFLOPs: 3704.4111. Time: 26.0605 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #110: GFLOPs: 3393.2946. Time: 28.4498 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #111: GFLOPs: 3592.0861. Time: 26.8754 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #112: GFLOPs: 2695.2046. Time: 35.8187 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #113: GFLOPs: 2782.4959. Time: 34.6950 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #114: GFLOPs: 2129.9029. Time: 45.3254 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #115: GFLOPs: 2098.7816. Time: 45.9975 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #116: GFLOPs: 3016.2201. Time: 32.0065 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #117: GFLOPs: 2191.0910. Time: 44.0596 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #118: GFLOPs: 2096.7407. Time: 46.0422 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #119: GFLOPs: 2390.5098. Time: 40.3841 us. Best GFLOPs: 3736.0652
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #120: GFLOPs: 3738.9346. Time: 25.8198 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #121: GFLOPs: 2191.3741. Time: 44.0539 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #122: GFLOPs: 3565.0268. Time: 27.0794 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #123: GFLOPs: 3095.4753. Time: 31.1870 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #124: GFLOPs: 635.9624. Time: 151.7993 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #125: GFLOPs: 3720.0940. Time: 25.9506 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #126: GFLOPs: 1153.9072. Time: 83.6624 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #127: GFLOPs: 224.1280. Time: 430.7299 us. Best GFLOPs: 3738.9346
2024-04-29 16:14:47 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #128: GFLOPs: 305.3221. Time: 316.1862 us. Best GFLOPs: 3738.9346
