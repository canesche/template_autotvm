2024-04-29 09:57:58 [INFO] [task_scheduler.cc:160] Initializing Task #64: "fused_nn_contrib_conv2d_winograd_without_weight_transform"
2024-04-29 09:57:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(9), T.int64(9)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(9), T.int64(9)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(16), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(16), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
2024-04-29 09:57:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:57:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 16])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 8, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-04-29 09:57:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 16])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 8, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-29 09:57:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 16])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 8, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-29 11:23:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:23:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:23:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 483 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 960 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:21 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-04-29 11:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 11:23:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9990  0.9981  0.9980  0.9972  0.9965  0.9949  0.9935  0.9931  0.9929  0.9924  0.9924  0.9909  0.9901  0.9890  0.9888
[17 : 32]:	0.9888  0.9869  0.9853  0.9845  0.9841  0.9840  0.9840  0.9836  0.9835  0.9825  0.9819  0.9818  0.9813  0.9812  0.9807  0.9801
[33 : 48]:	0.9781  0.9780  0.9777  0.9764  0.9764  0.9760  0.9758  0.9751  0.9740  0.9739  0.9718  0.9717  0.9711  0.9701  0.9695  0.9687
[49 : 64]:	0.9681  0.9678  0.9676  0.9674  0.9670  0.9668  0.9665  0.9621  0.9613  0.9611  0.9597  0.9595  0.9591  0.9588  0.9581  0.9581
2024-04-29 11:23:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:23:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #1: GFLOPs: 87.1483. Time: 43.2403 us. Best GFLOPs: 87.1483
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #2: GFLOPs: 94.3458. Time: 39.9416 us. Best GFLOPs: 94.3458
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #3: GFLOPs: 188.4778. Time: 19.9934 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #4: GFLOPs: 131.5657. Time: 28.6421 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #5: GFLOPs: 60.3960. Time: 62.3935 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #6: GFLOPs: 55.5283. Time: 67.8631 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #7: GFLOPs: 117.1611. Time: 32.1636 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #8: GFLOPs: 111.3942. Time: 33.8287 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #9: GFLOPs: 58.5723. Time: 64.3363 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #10: GFLOPs: 73.8689. Time: 51.0136 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #11: GFLOPs: 113.4050. Time: 33.2289 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #12: GFLOPs: 144.3172. Time: 26.1114 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #13: GFLOPs: 102.7621. Time: 36.6703 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #14: GFLOPs: 162.3811. Time: 23.2066 us. Best GFLOPs: 188.4778
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #15: GFLOPs: 202.6294. Time: 18.5971 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #16: GFLOPs: 55.7655. Time: 67.5743 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #17: GFLOPs: 132.1896. Time: 28.5069 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #18: GFLOPs: 16.4702. Time: 228.7961 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #19: GFLOPs: 79.6457. Time: 47.3135 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #20: GFLOPs: 98.0470. Time: 38.4338 us. Best GFLOPs: 202.6294
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #21: GFLOPs: 246.0782. Time: 15.3135 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #22: GFLOPs: 68.9439. Time: 54.6578 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #23: GFLOPs: 125.8080. Time: 29.9529 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #24: GFLOPs: 45.4873. Time: 82.8434 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #25: GFLOPs: 69.2501. Time: 54.4161 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #26: GFLOPs: 122.8192. Time: 30.6819 us. Best GFLOPs: 246.0782
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #27: GFLOPs: 271.2693. Time: 13.8914 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #28: GFLOPs: 83.7989. Time: 44.9686 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #29: GFLOPs: 145.4289. Time: 25.9118 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #30: GFLOPs: 83.3065. Time: 45.2344 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #31: GFLOPs: 188.5760. Time: 19.9830 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #32: GFLOPs: 65.9981. Time: 57.0974 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #33: GFLOPs: 133.9692. Time: 28.1283 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #34: GFLOPs: 58.0545. Time: 64.9100 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #35: GFLOPs: 96.2901. Time: 39.1351 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #36: GFLOPs: 162.7650. Time: 23.1519 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #37: GFLOPs: 81.0947. Time: 46.4681 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #38: GFLOPs: 68.8118. Time: 54.7627 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #39: GFLOPs: 77.3776. Time: 48.7004 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #40: GFLOPs: 121.5828. Time: 30.9939 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #41: GFLOPs: 222.9014. Time: 16.9058 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #42: GFLOPs: 133.9207. Time: 28.1384 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #43: GFLOPs: 225.1622. Time: 16.7360 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #44: GFLOPs: 124.3690. Time: 30.2995 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #45: GFLOPs: 66.9575. Time: 56.2792 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #46: GFLOPs: 164.9261. Time: 22.8485 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #47: GFLOPs: 95.7800. Time: 39.3435 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #48: GFLOPs: 57.0371. Time: 66.0679 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #49: GFLOPs: 132.0779. Time: 28.5311 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #50: GFLOPs: 60.1945. Time: 62.6024 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #51: GFLOPs: 149.9972. Time: 25.1226 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #52: GFLOPs: 66.3585. Time: 56.7873 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #53: GFLOPs: 117.0331. Time: 32.1988 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #54: GFLOPs: 101.4088. Time: 37.1597 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #55: GFLOPs: 156.3958. Time: 24.0948 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #56: GFLOPs: 62.6827. Time: 60.1174 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #57: GFLOPs: 94.3543. Time: 39.9380 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #58: GFLOPs: 104.9596. Time: 35.9026 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #59: GFLOPs: 171.9798. Time: 21.9114 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #60: GFLOPs: 170.8171. Time: 22.0606 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #61: GFLOPs: 104.3582. Time: 36.1095 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #62: GFLOPs: 213.8721. Time: 17.6195 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #63: GFLOPs: 147.4209. Time: 25.5616 us. Best GFLOPs: 271.2693
2024-04-29 14:00:19 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #64: GFLOPs: 191.9859. Time: 19.6281 us. Best GFLOPs: 271.2693
2024-04-29 14:13:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:13:50 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 14:13:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:13:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 836 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:13:58 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-29 14:14:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:14:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:14:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:14:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:14:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9117  1.8884  1.7869  1.7813  1.7141  1.7082  1.6913  1.6838  1.6468  1.6217  1.6074  1.6028  1.5950  1.5825  1.5718  1.5620
[17 : 32]:	1.5270  1.5220  1.5009  1.4983  1.4935  1.4923  1.4813  1.4793  1.4594  1.4567  1.4452  1.4405  1.4405  1.4391  1.4363  1.4293
[33 : 48]:	1.4272  1.4257  1.4238  1.4237  1.4222  1.4170  1.4168  1.4156  1.4139  1.4090  1.4052  1.3963  1.3914  1.3857  1.3814  1.3776
[49 : 64]:	1.3765  1.3719  1.3696  1.3679  1.3653  1.3644  1.3644  1.3634  1.3609  1.3554  1.3549  1.3508  1.3492  1.3490  1.3444  1.3441
2024-04-29 14:14:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:14:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #65: GFLOPs: 277.9810. Time: 13.5560 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #66: GFLOPs: 227.1530. Time: 16.5893 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #67: GFLOPs: 223.9630. Time: 16.8256 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #68: GFLOPs: 266.7425. Time: 14.1272 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #69: GFLOPs: 268.7884. Time: 14.0197 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #70: GFLOPs: 239.3238. Time: 15.7457 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #71: GFLOPs: 224.7940. Time: 16.7634 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #72: GFLOPs: 225.1198. Time: 16.7392 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #73: GFLOPs: 266.5510. Time: 14.1373 us. Best GFLOPs: 277.9810
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #74: GFLOPs: 290.2719. Time: 12.9820 us. Best GFLOPs: 290.2719
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #75: GFLOPs: 215.2673. Time: 17.5053 us. Best GFLOPs: 290.2719
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #76: GFLOPs: 293.7792. Time: 12.8270 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #77: GFLOPs: 247.5274. Time: 15.2238 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #78: GFLOPs: 250.2647. Time: 15.0573 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #79: GFLOPs: 242.3605. Time: 15.5484 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #80: GFLOPs: 269.4492. Time: 13.9853 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #81: GFLOPs: 271.4284. Time: 13.8833 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #82: GFLOPs: 204.8748. Time: 18.3933 us. Best GFLOPs: 293.7792
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #83: GFLOPs: 304.9442. Time: 12.3574 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #84: GFLOPs: 302.6671. Time: 12.4504 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #85: GFLOPs: 286.6192. Time: 13.1475 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #86: GFLOPs: 302.2586. Time: 12.4672 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #87: GFLOPs: 242.9353. Time: 15.5116 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #88: GFLOPs: 292.2755. Time: 12.8930 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #89: GFLOPs: 204.9549. Time: 18.3861 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #90: GFLOPs: 138.9200. Time: 27.1258 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #91: GFLOPs: 205.6000. Time: 18.3284 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #92: GFLOPs: 231.2729. Time: 16.2938 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #93: GFLOPs: 234.3002. Time: 16.0833 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #94: GFLOPs: 287.0186. Time: 13.1292 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #95: GFLOPs: 237.7064. Time: 15.8528 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #96: GFLOPs: 256.7220. Time: 14.6786 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #97: GFLOPs: 247.1982. Time: 15.2441 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #98: GFLOPs: 279.3060. Time: 13.4917 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #99: GFLOPs: 208.0583. Time: 18.1118 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #100: GFLOPs: 238.4216. Time: 15.8053 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #101: GFLOPs: 275.0960. Time: 13.6982 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #102: GFLOPs: 204.9230. Time: 18.3890 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #103: GFLOPs: 287.9687. Time: 13.0859 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #104: GFLOPs: 301.4512. Time: 12.5006 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #105: GFLOPs: 204.7253. Time: 18.4067 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #106: GFLOPs: 259.6025. Time: 14.5157 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #107: GFLOPs: 211.6396. Time: 17.8054 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #108: GFLOPs: 219.9482. Time: 17.1328 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #109: GFLOPs: 243.3379. Time: 15.4860 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #110: GFLOPs: 250.5109. Time: 15.0425 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #111: GFLOPs: 208.3520. Time: 18.0863 us. Best GFLOPs: 304.9442
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #112: GFLOPs: 305.8444. Time: 12.3210 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #113: GFLOPs: 285.0670. Time: 13.2191 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #114: GFLOPs: 145.5028. Time: 25.8986 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #115: GFLOPs: 282.4932. Time: 13.3395 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #116: GFLOPs: 288.6090. Time: 13.0568 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #117: GFLOPs: 242.2375. Time: 15.5563 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #118: GFLOPs: 252.1306. Time: 14.9459 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #119: GFLOPs: 254.1317. Time: 14.8282 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #120: GFLOPs: 202.4867. Time: 18.6102 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #121: GFLOPs: 208.4829. Time: 18.0750 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #122: GFLOPs: 200.2879. Time: 18.8145 us. Best GFLOPs: 305.8444
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #123: GFLOPs: 309.9927. Time: 12.1562 us. Best GFLOPs: 309.9927
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #124: GFLOPs: 244.3115. Time: 15.4242 us. Best GFLOPs: 309.9927
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #125: GFLOPs: 253.8789. Time: 14.8430 us. Best GFLOPs: 309.9927
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #126: GFLOPs: 44.9952. Time: 83.7493 us. Best GFLOPs: 309.9927
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #127: GFLOPs: 171.9225. Time: 21.9187 us. Best GFLOPs: 309.9927
2024-04-29 14:16:33 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #128: GFLOPs: 100.1806. Time: 37.6153 us. Best GFLOPs: 309.9927
2024-04-29 14:22:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:22:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 14:23:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 774 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 1162 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:09 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-29 14:23:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:23:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4881  1.4588  1.4170  1.3962  1.3904  1.3788  1.3659  1.3585  1.3544  1.3517  1.3346  1.3179  1.3126  1.2936  1.2893  1.2704
[17 : 32]:	1.2697  1.2696  1.2573  1.2564  1.2543  1.2490  1.2316  1.2316  1.2249  1.2157  1.2143  1.2142  1.2008  1.1950  1.1911  1.1897
[33 : 48]:	1.1850  1.1830  1.1748  1.1732  1.1694  1.1634  1.1633  1.1573  1.1566  1.1537  1.1433  1.1433  1.1407  1.1236  1.1037  1.1025
[49 : 64]:	1.1014  1.0920  1.0832  1.0787  1.0784  1.0663  1.0657  1.0616  1.0609  1.0609  1.0495  1.0449  1.0438  1.0353  1.0334  1.0297
2024-04-29 14:23:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:23:55 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #129: GFLOPs: 274.5046. Time: 13.7277 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #130: GFLOPs: 196.5064. Time: 19.1766 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #131: GFLOPs: 282.0940. Time: 13.3584 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #132: GFLOPs: 266.5222. Time: 14.1389 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #133: GFLOPs: 192.2769. Time: 19.5984 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #134: GFLOPs: 88.5177. Time: 42.5714 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #135: GFLOPs: 192.9725. Time: 19.5278 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #136: GFLOPs: 208.1419. Time: 18.1046 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #137: GFLOPs: 207.4724. Time: 18.1630 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #138: GFLOPs: 11.2624. Time: 334.5931 us. Best GFLOPs: 309.9927
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #139: GFLOPs: 315.8039. Time: 11.9325 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #140: GFLOPs: 157.3311. Time: 23.9515 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #141: GFLOPs: 208.6868. Time: 18.0573 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #142: GFLOPs: 270.3714. Time: 13.9376 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #143: GFLOPs: 11.2862. Time: 333.8884 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #144: GFLOPs: 145.5522. Time: 25.8898 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #145: GFLOPs: 90.8230. Time: 41.4908 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #146: GFLOPs: 11.2832. Time: 333.9761 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #147: GFLOPs: 295.1418. Time: 12.7678 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #148: GFLOPs: 238.6470. Time: 15.7904 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #149: GFLOPs: 239.1768. Time: 15.7554 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #150: GFLOPs: 252.2742. Time: 14.9374 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #151: GFLOPs: 234.8774. Time: 16.0438 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #152: GFLOPs: 231.5192. Time: 16.2765 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #153: GFLOPs: 278.6616. Time: 13.5229 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #154: GFLOPs: 252.0045. Time: 14.9534 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #155: GFLOPs: 88.1310. Time: 42.7582 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #156: GFLOPs: 92.3530. Time: 40.8034 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #157: GFLOPs: 146.7498. Time: 25.6785 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #158: GFLOPs: 89.4715. Time: 42.1176 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #159: GFLOPs: 209.3515. Time: 18.0000 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #160: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 1, 16])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135 = sch.split(loop=l133, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b149)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b151)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b153)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #161: GFLOPs: 237.4645. Time: 15.8690 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #162: GFLOPs: 11.5621. Time: 325.9204 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #163: GFLOPs: 241.0578. Time: 15.6324 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #164: GFLOPs: 7.7077. Time: 488.9041 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #165: GFLOPs: 11.5946. Time: 325.0063 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #166: GFLOPs: 262.9231. Time: 14.3324 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #167: GFLOPs: 11.5661. Time: 325.8075 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #168: GFLOPs: 206.1961. Time: 18.2754 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #169: GFLOPs: 187.3704. Time: 20.1116 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #170: GFLOPs: 282.1195. Time: 13.3572 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #171: GFLOPs: 208.8740. Time: 18.0411 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #172: GFLOPs: 208.9986. Time: 18.0304 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #173: GFLOPs: 146.9416. Time: 25.6450 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #174: GFLOPs: 261.9566. Time: 14.3853 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #175: GFLOPs: 227.3783. Time: 16.5729 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #176: GFLOPs: 183.4353. Time: 20.5430 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #177: GFLOPs: 198.5254. Time: 18.9816 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #178: GFLOPs: 145.5415. Time: 25.8917 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #179: GFLOPs: 56.7406. Time: 66.4131 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #180: GFLOPs: 194.7348. Time: 19.3510 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #181: GFLOPs: 130.6885. Time: 28.8344 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #182: GFLOPs: 212.6189. Time: 17.7234 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #183: GFLOPs: 106.4800. Time: 35.3899 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #184: GFLOPs: 251.3068. Time: 14.9949 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #185: GFLOPs: 233.3692. Time: 16.1475 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #186: GFLOPs: 233.3611. Time: 16.1480 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #187: GFLOPs: 115.5883. Time: 32.6012 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #188: GFLOPs: 86.6943. Time: 43.4668 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #189: GFLOPs: 86.6647. Time: 43.4816 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #190: GFLOPs: 122.2076. Time: 30.8354 us. Best GFLOPs: 315.8039
2024-04-29 14:25:29 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #191: GFLOPs: 167.6169. Time: 22.4817 us. Best GFLOPs: 315.8039
2024-04-29 14:34:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:34:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 14:34:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 389 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:34:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 772 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:34:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 1149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:34:27 [INFO] [evolutionary_search.cc:723] Sampled 81 candidate(s)
2024-04-29 14:34:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:34:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:34:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:35:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:35:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5395  1.5019  1.4991  1.4852  1.4683  1.4558  1.3882  1.3650  1.3627  1.3627  1.3547  1.3451  1.3439  1.3286  1.3264  1.2775
[17 : 32]:	1.2732  1.2664  1.2574  1.2531  1.2328  1.2319  1.2302  1.1971  1.1753  1.1707  1.1468  1.1375  1.1244  1.0705  1.0330  1.0227
[33 : 48]:	1.0138  1.0109  1.0072  1.0001  0.9967  0.9958  0.9946  0.9925  0.9922  0.9913  0.9861  0.9851  0.9834  0.9819  0.9817  0.9805
[49 : 64]:	0.9787  0.9765  0.9729  0.9721  0.9702  0.9695  0.9685  0.9681  0.9667  0.9659  0.9618  0.9615  0.9607  0.9607  0.9603  0.9601
2024-04-29 14:35:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:35:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #192: GFLOPs: 181.1413. Time: 20.8032 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #193: GFLOPs: 181.2196. Time: 20.7942 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #194: GFLOPs: 184.9042. Time: 20.3798 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #195: GFLOPs: 85.0622. Time: 44.3008 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #196: GFLOPs: 85.7257. Time: 43.9579 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #197: GFLOPs: 255.7805. Time: 14.7326 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #198: GFLOPs: 195.4665. Time: 19.2786 us. Best GFLOPs: 315.8039
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #199: GFLOPs: 332.0204. Time: 11.3497 us. Best GFLOPs: 332.0204
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #200: GFLOPs: 332.3436. Time: 11.3386 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #201: GFLOPs: 332.3253. Time: 11.3393 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #202: GFLOPs: 167.5034. Time: 22.4970 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #203: GFLOPs: 306.2670. Time: 12.3040 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #204: GFLOPs: 331.2574. Time: 11.3758 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #205: GFLOPs: 324.7114. Time: 11.6051 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #206: GFLOPs: 324.8638. Time: 11.5997 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #207: GFLOPs: 233.6885. Time: 16.1254 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #208: GFLOPs: 297.8652. Time: 12.6511 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #209: GFLOPs: 162.0261. Time: 23.2575 us. Best GFLOPs: 332.3436
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #210: GFLOPs: 347.9056. Time: 10.8314 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #211: GFLOPs: 301.9894. Time: 12.4783 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #212: GFLOPs: 288.9724. Time: 13.0404 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #213: GFLOPs: 312.4113. Time: 12.0620 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #214: GFLOPs: 307.6740. Time: 12.2478 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #215: GFLOPs: 186.3314. Time: 20.2237 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #216: GFLOPs: 226.6124. Time: 16.6289 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #217: GFLOPs: 312.7673. Time: 12.0483 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #218: GFLOPs: 191.3896. Time: 19.6893 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #219: GFLOPs: 186.4014. Time: 20.2162 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #220: GFLOPs: 158.9541. Time: 23.7070 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #221: GFLOPs: 124.4864. Time: 30.2709 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #222: GFLOPs: 319.8601. Time: 11.7812 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #223: GFLOPs: 321.9600. Time: 11.7043 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #224: GFLOPs: 181.5900. Time: 20.7518 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #225: GFLOPs: 234.3054. Time: 16.0829 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #226: GFLOPs: 250.1370. Time: 15.0650 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #227: GFLOPs: 268.9372. Time: 14.0119 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #228: GFLOPs: 319.8873. Time: 11.7801 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #229: GFLOPs: 304.7309. Time: 12.3661 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #230: GFLOPs: 334.7711. Time: 11.2564 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #231: GFLOPs: 269.1815. Time: 13.9992 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #232: GFLOPs: 100.9373. Time: 37.3333 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #233: GFLOPs: 308.8447. Time: 12.2013 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #234: GFLOPs: 338.8462. Time: 11.1210 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #235: GFLOPs: 116.9632. Time: 32.2180 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #236: GFLOPs: 114.8753. Time: 32.8036 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #237: GFLOPs: 111.7258. Time: 33.7283 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #238: GFLOPs: 104.4197. Time: 36.0882 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #239: GFLOPs: 306.3198. Time: 12.3019 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #240: GFLOPs: 304.8879. Time: 12.3597 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #241: GFLOPs: 112.4965. Time: 33.4972 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #242: GFLOPs: 123.2134. Time: 30.5837 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #243: GFLOPs: 293.6480. Time: 12.8328 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #244: GFLOPs: 320.0199. Time: 11.7753 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #245: GFLOPs: 328.9367. Time: 11.4561 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #246: GFLOPs: 235.6681. Time: 15.9899 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #247: GFLOPs: 305.0756. Time: 12.3521 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #248: GFLOPs: 105.7273. Time: 35.6419 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #249: GFLOPs: 325.9219. Time: 11.5620 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #250: GFLOPs: 295.1144. Time: 12.7690 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #251: GFLOPs: 307.5656. Time: 12.2521 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #252: GFLOPs: 307.8671. Time: 12.2401 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #253: GFLOPs: 24.0972. Time: 156.3800 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #254: GFLOPs: 249.8818. Time: 15.0804 us. Best GFLOPs: 347.9056
2024-04-29 14:36:39 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #255: GFLOPs: 72.3691. Time: 52.0709 us. Best GFLOPs: 347.9056
2024-04-29 14:48:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:48:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 14:48:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 383 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:48:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 773 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:48:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 1158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:48:45 [INFO] [evolutionary_search.cc:723] Sampled 72 candidate(s)
2024-04-29 14:48:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:49:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:49:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:49:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 14:49:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2930  1.1973  1.1786  1.1265  1.1228  1.1169  1.0900  1.0720  1.0627  1.0577  1.0556  1.0417  1.0274  1.0267  1.0187  1.0176
[17 : 32]:	1.0145  1.0140  1.0124  1.0090  1.0061  1.0028  0.9953  0.9950  0.9909  0.9907  0.9861  0.9822  0.9768  0.9743  0.9710  0.9701
[33 : 48]:	0.9637  0.9623  0.9623  0.9612  0.9598  0.9593  0.9572  0.9569  0.9563  0.9554  0.9542  0.9499  0.9495  0.9485  0.9483  0.9468
[49 : 64]:	0.9467  0.9466  0.9464  0.9458  0.9451  0.9449  0.9436  0.9423  0.9406  0.9404  0.9398  0.9395  0.9395  0.9387  0.9384  0.9383
2024-04-29 14:49:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:49:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #256: GFLOPs: 376.6848. Time: 10.0039 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #257: GFLOPs: 287.2265. Time: 13.1197 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #258: GFLOPs: 81.7333. Time: 46.1051 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #259: GFLOPs: 322.4365. Time: 11.6870 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #260: GFLOPs: 186.2352. Time: 20.2342 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #261: GFLOPs: 327.5586. Time: 11.5043 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #262: GFLOPs: 237.6731. Time: 15.8551 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #263: GFLOPs: 164.1417. Time: 22.9577 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #264: GFLOPs: 252.2614. Time: 14.9382 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #265: GFLOPs: 170.8369. Time: 22.0580 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #266: GFLOPs: 165.7428. Time: 22.7360 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #267: GFLOPs: 169.0374. Time: 22.2928 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #268: GFLOPs: 254.5163. Time: 14.8058 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #269: GFLOPs: 254.7733. Time: 14.7909 us. Best GFLOPs: 376.6848
2024-04-29 14:50:54 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #270: GFLOPs: 355.5572. Time: 10.5984 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #271: GFLOPs: 347.2926. Time: 10.8506 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #272: GFLOPs: 351.8206. Time: 10.7109 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #273: GFLOPs: 250.6186. Time: 15.0361 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #274: GFLOPs: 289.5955. Time: 13.0124 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #275: GFLOPs: 106.2999. Time: 35.4499 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #276: GFLOPs: 243.0938. Time: 15.5015 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #277: GFLOPs: 226.9077. Time: 16.6073 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #278: GFLOPs: 218.6201. Time: 17.2368 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #279: GFLOPs: 272.5483. Time: 13.8262 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #280: GFLOPs: 258.7703. Time: 14.5624 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #281: GFLOPs: 259.6867. Time: 14.5110 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #282: GFLOPs: 219.2614. Time: 17.1864 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #283: GFLOPs: 266.9014. Time: 14.1188 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #284: GFLOPs: 324.6141. Time: 11.6086 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #285: GFLOPs: 233.0344. Time: 16.1707 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #286: GFLOPs: 324.1963. Time: 11.6236 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #287: GFLOPs: 202.2619. Time: 18.6309 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #288: GFLOPs: 204.4792. Time: 18.4289 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #289: GFLOPs: 328.3328. Time: 11.4771 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #290: GFLOPs: 318.1090. Time: 11.8460 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #291: GFLOPs: 325.1442. Time: 11.5897 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #292: GFLOPs: 200.2836. Time: 18.8149 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #293: GFLOPs: 309.4054. Time: 12.1792 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #294: GFLOPs: 192.5534. Time: 19.5703 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #295: GFLOPs: 318.5765. Time: 11.8286 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #296: GFLOPs: 331.5941. Time: 11.3643 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #297: GFLOPs: 296.2329. Time: 12.7208 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #298: GFLOPs: 326.9124. Time: 11.5270 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #299: GFLOPs: 216.0247. Time: 17.4439 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #300: GFLOPs: 337.0734. Time: 11.1795 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #301: GFLOPs: 329.6890. Time: 11.4299 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #302: GFLOPs: 323.9163. Time: 11.6336 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #303: GFLOPs: 297.7470. Time: 12.6561 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #304: GFLOPs: 347.1572. Time: 10.8548 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #305: GFLOPs: 295.2718. Time: 12.7622 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #306: GFLOPs: 324.0584. Time: 11.6285 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #307: GFLOPs: 305.5886. Time: 12.3314 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #308: GFLOPs: 311.2748. Time: 12.1061 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #309: GFLOPs: 347.4069. Time: 10.8470 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #310: GFLOPs: 333.9420. Time: 11.2844 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #311: GFLOPs: 334.8337. Time: 11.2543 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #312: GFLOPs: 329.5406. Time: 11.4351 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #313: GFLOPs: 323.8052. Time: 11.6376 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #314: GFLOPs: 312.2646. Time: 12.0677 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #315: GFLOPs: 342.3644. Time: 11.0068 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #316: GFLOPs: 324.4125. Time: 11.6158 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #317: GFLOPs: 110.5260. Time: 34.0944 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #318: GFLOPs: 118.8582. Time: 31.7043 us. Best GFLOPs: 376.6848
2024-04-29 14:50:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #319: GFLOPs: 121.8643. Time: 30.9223 us. Best GFLOPs: 376.6848
2024-04-29 15:06:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:06:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 15:06:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 385 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:06:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 764 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:06:58 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 15:07:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:07:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:07:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:07:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:07:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7273  1.3451  1.2519  1.1927  1.1713  1.1122  1.0775  1.0700  1.0231  1.0192  1.0167  0.9898  0.9866  0.9830  0.9826  0.9803
[17 : 32]:	0.9789  0.9764  0.9747  0.9724  0.9705  0.9690  0.9690  0.9664  0.9658  0.9628  0.9600  0.9585  0.9528  0.9507  0.9437  0.9423
[33 : 48]:	0.9408  0.9392  0.9310  0.9289  0.9288  0.9282  0.9256  0.9250  0.9219  0.9211  0.9205  0.9184  0.9180  0.9174  0.9168  0.9163
[49 : 64]:	0.9150  0.9141  0.9128  0.9116  0.9113  0.9108  0.9087  0.9081  0.9076  0.9070  0.9064  0.9061  0.9046  0.9046  0.9035  0.9032
2024-04-29 15:07:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:07:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #320: GFLOPs: 229.3658. Time: 16.4293 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #321: GFLOPs: 227.8988. Time: 16.5351 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #322: GFLOPs: 238.3926. Time: 15.8072 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #323: GFLOPs: 207.4328. Time: 18.1665 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #324: GFLOPs: 107.3939. Time: 35.0888 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #325: GFLOPs: 239.3883. Time: 15.7415 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #326: GFLOPs: 139.1210. Time: 27.0866 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #327: GFLOPs: 138.9529. Time: 27.1194 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #328: GFLOPs: 227.2730. Time: 16.5806 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #329: GFLOPs: 227.9854. Time: 16.5288 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #330: GFLOPs: 227.6385. Time: 16.5540 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #331: GFLOPs: 257.3622. Time: 14.6421 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #332: GFLOPs: 370.0181. Time: 10.1841 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #333: GFLOPs: 374.6490. Time: 10.0583 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #334: GFLOPs: 374.5518. Time: 10.0609 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #335: GFLOPs: 374.4527. Time: 10.0635 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #336: GFLOPs: 352.8094. Time: 10.6809 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #337: GFLOPs: 347.2597. Time: 10.8516 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #338: GFLOPs: 316.9175. Time: 11.8905 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #339: GFLOPs: 301.8474. Time: 12.4842 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #340: GFLOPs: 353.5249. Time: 10.6593 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #341: GFLOPs: 374.6227. Time: 10.0590 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #342: GFLOPs: 374.6706. Time: 10.0577 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #343: GFLOPs: 374.5819. Time: 10.0601 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #344: GFLOPs: 74.0081. Time: 50.9177 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #345: GFLOPs: 352.6071. Time: 10.6870 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #346: GFLOPs: 353.0365. Time: 10.6740 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #347: GFLOPs: 316.8631. Time: 11.8926 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #348: GFLOPs: 374.0374. Time: 10.0747 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #349: GFLOPs: 350.0577. Time: 10.7649 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #350: GFLOPs: 345.5732. Time: 10.9046 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #351: GFLOPs: 345.0592. Time: 10.9208 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #352: GFLOPs: 345.1206. Time: 10.9188 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #353: GFLOPs: 353.8630. Time: 10.6491 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #354: GFLOPs: 348.2570. Time: 10.8205 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #355: GFLOPs: 242.9962. Time: 15.5077 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #356: GFLOPs: 345.3679. Time: 10.9110 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #357: GFLOPs: 346.3003. Time: 10.8817 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #358: GFLOPs: 362.1489. Time: 10.4054 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #359: GFLOPs: 313.7765. Time: 12.0096 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #360: GFLOPs: 355.9284. Time: 10.5873 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #361: GFLOPs: 351.0950. Time: 10.7330 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #362: GFLOPs: 346.5541. Time: 10.8737 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #363: GFLOPs: 334.7751. Time: 11.2563 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #364: GFLOPs: 243.1361. Time: 15.4988 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #365: GFLOPs: 354.7353. Time: 10.6229 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #366: GFLOPs: 347.1285. Time: 10.8557 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #367: GFLOPs: 345.3632. Time: 10.9112 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #368: GFLOPs: 346.8226. Time: 10.8653 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #369: GFLOPs: 344.9260. Time: 10.9250 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #370: GFLOPs: 169.3203. Time: 22.2556 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #371: GFLOPs: 333.1461. Time: 11.3113 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #372: GFLOPs: 345.5823. Time: 10.9043 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #373: GFLOPs: 351.5739. Time: 10.7184 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #374: GFLOPs: 329.3318. Time: 11.4423 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #375: GFLOPs: 325.2241. Time: 11.5868 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #376: GFLOPs: 205.6747. Time: 18.3217 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #377: GFLOPs: 354.6437. Time: 10.6256 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #378: GFLOPs: 328.7379. Time: 11.4630 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #379: GFLOPs: 326.3878. Time: 11.5455 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #380: GFLOPs: 338.7610. Time: 11.1238 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #381: GFLOPs: 147.1235. Time: 25.6133 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #382: GFLOPs: 121.7844. Time: 30.9425 us. Best GFLOPs: 376.6848
2024-04-29 15:09:40 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #383: GFLOPs: 66.0906. Time: 57.0175 us. Best GFLOPs: 376.6848
2024-04-29 15:31:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:31:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 15:31:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 388 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:31:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 761 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:31:16 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 15:31:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:31:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:31:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:32:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:32:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8590  1.5305  1.4921  1.4894  1.4764  1.4674  1.4649  1.4618  1.4597  1.4497  1.4429  1.4420  1.4408  1.4395  1.4364  1.4359
[17 : 32]:	1.4359  1.4318  1.4268  1.4257  1.4212  1.4203  1.4169  1.4166  1.4166  1.4156  1.4153  1.4115  1.4086  1.4059  1.4057  1.4037
[33 : 48]:	1.4029  1.3776  1.3721  1.3706  1.3396  1.3320  1.3304  1.3289  1.3214  1.1248  1.0916  1.0801  1.0470  1.0247  1.0231  1.0189
[49 : 64]:	1.0125  1.0070  1.0070  1.0061  1.0010  0.9992  0.9952  0.9938  0.9935  0.9921  0.9921  0.9893  0.9855  0.9823  0.9778  0.9767
2024-04-29 15:32:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:32:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #384: GFLOPs: 215.5937. Time: 17.4788 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #385: GFLOPs: 326.2985. Time: 11.5487 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #386: GFLOPs: 278.7180. Time: 13.5202 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #387: GFLOPs: 290.5885. Time: 12.9679 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #388: GFLOPs: 279.5079. Time: 13.4820 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #389: GFLOPs: 62.9155. Time: 59.8950 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #390: GFLOPs: 236.7000. Time: 15.9202 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #391: GFLOPs: 330.2183. Time: 11.4116 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #392: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  275: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  274: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  273: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  272: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  271: tvm::transform::Pass::operator()(tvm::IRModule) const
  270: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  269: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  268: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  267: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  266: _ZN3tvm7runtime13PackedFun
  265: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  264: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  263: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  262: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  261: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorI
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorI
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  220: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  219: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  218: _ZZN3tvm3tir11StmtFunctorI
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  211: _ZZN3tvm3tir11StmtFunctorI
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorI
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorI
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorI
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorI
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorI
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorI
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorI
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorI
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorI
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorI
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorI
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorI
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorI
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorI
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  122: _ZZN3tvm3tir11StmtFunctorIFNS
  121: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  120: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorI
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorI
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorI
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorI
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorI
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorI
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorI
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorI
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorI
  92: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  91: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorIFNS
  89: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  88: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  87: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  86: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorI
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  82: _ZZN3tvm3tir11StmtFunctorI
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorI
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorI
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorI
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorI
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorI
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorI
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorI
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorI
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  55: _ZZN3tvm3tir11StmtFunctorIFNS
  54: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  53: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  52: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  51: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorI
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorI
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorI
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorI
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorI
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorI
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorIFNS
  31: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  30: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(64)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2048))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2048) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(128) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 4, 1, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 128, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #393: GFLOPs: 346.3947. Time: 10.8787 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #394: GFLOPs: 311.3109. Time: 12.1047 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #395: GFLOPs: 289.3116. Time: 13.0251 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #396: GFLOPs: 336.1195. Time: 11.2113 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #397: GFLOPs: 338.5594. Time: 11.1305 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #398: GFLOPs: 345.5558. Time: 10.9051 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #399: GFLOPs: 337.3014. Time: 11.1720 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #400: GFLOPs: 309.4694. Time: 12.1767 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #401: GFLOPs: 257.7235. Time: 14.6216 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #402: GFLOPs: 307.2956. Time: 12.2628 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #403: GFLOPs: 309.4579. Time: 12.1772 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #404: GFLOPs: 324.6186. Time: 11.6085 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #405: GFLOPs: 276.7625. Time: 13.6157 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #406: GFLOPs: 332.8750. Time: 11.3205 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #407: GFLOPs: 83.0424. Time: 45.3783 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #408: GFLOPs: 292.4457. Time: 12.8855 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #409: GFLOPs: 339.2301. Time: 11.1084 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #410: GFLOPs: 82.9057. Time: 45.4531 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #411: GFLOPs: 310.4548. Time: 12.1381 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #412: GFLOPs: 316.5882. Time: 11.9029 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #413: GFLOPs: 323.0993. Time: 11.6630 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #414: GFLOPs: 324.4133. Time: 11.6158 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #415: GFLOPs: 203.4912. Time: 18.5183 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #416: GFLOPs: 324.8136. Time: 11.6015 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #417: GFLOPs: 325.2891. Time: 11.5845 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #418: GFLOPs: 246.6079. Time: 15.2806 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #419: GFLOPs: 124.3932. Time: 30.2936 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #420: GFLOPs: 314.9923. Time: 11.9632 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #421: GFLOPs: 314.9934. Time: 11.9632 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #422: GFLOPs: 303.9959. Time: 12.3960 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #423: GFLOPs: 253.0758. Time: 14.8901 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #424: GFLOPs: 252.2917. Time: 14.9364 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #425: GFLOPs: 75.9947. Time: 49.5866 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #426: GFLOPs: 208.9308. Time: 18.0362 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #427: GFLOPs: 85.8981. Time: 43.8696 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #428: GFLOPs: 166.4749. Time: 22.6360 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #429: GFLOPs: 372.8159. Time: 10.1077 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #430: GFLOPs: 373.9893. Time: 10.0760 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #431: GFLOPs: 103.2421. Time: 36.4998 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #432: GFLOPs: 89.7517. Time: 41.9861 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #433: GFLOPs: 365.6876. Time: 10.3048 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #434: GFLOPs: 365.6387. Time: 10.3061 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #435: GFLOPs: 374.2159. Time: 10.0699 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #436: GFLOPs: 365.5633. Time: 10.3083 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #437: GFLOPs: 374.5567. Time: 10.0607 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #438: GFLOPs: 317.1661. Time: 11.8812 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #439: GFLOPs: 366.7257. Time: 10.2756 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #440: GFLOPs: 348.8804. Time: 10.8012 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #441: GFLOPs: 364.9422. Time: 10.3258 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #442: GFLOPs: 364.5236. Time: 10.3377 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #443: GFLOPs: 364.9383. Time: 10.3259 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #444: GFLOPs: 75.5404. Time: 49.8848 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #445: GFLOPs: 136.9752. Time: 27.5110 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #446: GFLOPs: 193.2160. Time: 19.5031 us. Best GFLOPs: 376.6848
2024-04-29 15:33:55 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #447: GFLOPs: 133.6961. Time: 28.1857 us. Best GFLOPs: 376.6848
2024-04-29 15:46:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:46:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 15:46:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 392 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:46:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 779 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:46:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 1169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:46:48 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 15:46:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:47:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:47:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:47:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 15:47:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4360  2.3309  1.8399  1.7633  1.4802  1.4795  1.4646  1.3739  1.3739  1.3739  1.3684  1.3636  1.3590  1.3114  1.3065  1.2969
[17 : 32]:	1.2940  1.2921  1.1741  1.0934  1.0918  1.0883  1.0859  1.0804  1.0801  1.0764  1.0740  1.0682  1.0675  1.0659  1.0649  1.0631
[33 : 48]:	1.0620  1.0478  1.0478  1.0404  1.0354  1.0325  1.0137  1.0133  1.0117  1.0053  1.0027  1.0020  1.0011  1.0010  1.0009  1.0004
[49 : 64]:	1.0004  0.9993  0.9993  0.9988  0.9988  0.9983  0.9977  0.9970  0.9970  0.9969  0.9969  0.9966  0.9963  0.9954  0.9949  0.9942
2024-04-29 15:47:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:47:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #448: GFLOPs: 264.5608. Time: 14.2437 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #449: GFLOPs: 313.6182. Time: 12.0156 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #450: GFLOPs: 302.7845. Time: 12.4456 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #451: GFLOPs: 241.8158. Time: 15.5834 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #452: GFLOPs: 349.7211. Time: 10.7752 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #453: GFLOPs: 348.9841. Time: 10.7980 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #454: GFLOPs: 349.0240. Time: 10.7967 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #455: GFLOPs: 337.9546. Time: 11.1504 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #456: GFLOPs: 337.5922. Time: 11.1623 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #457: GFLOPs: 337.9435. Time: 11.1507 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #458: GFLOPs: 330.7667. Time: 11.3927 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #459: GFLOPs: 337.5328. Time: 11.1643 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #460: GFLOPs: 330.5024. Time: 11.4018 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #461: GFLOPs: 349.7640. Time: 10.7739 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #462: GFLOPs: 286.3699. Time: 13.1589 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #463: GFLOPs: 291.6625. Time: 12.9201 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #464: GFLOPs: 351.7433. Time: 10.7133 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #465: GFLOPs: 300.4004. Time: 12.5443 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #466: GFLOPs: 238.7040. Time: 15.7866 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #467: GFLOPs: 311.4476. Time: 12.0994 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #468: GFLOPs: 316.5660. Time: 11.9037 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #469: GFLOPs: 317.5256. Time: 11.8678 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #470: GFLOPs: 311.7167. Time: 12.0889 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #471: GFLOPs: 317.5199. Time: 11.8680 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #472: GFLOPs: 311.3428. Time: 12.1034 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #473: GFLOPs: 317.5748. Time: 11.8659 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #474: GFLOPs: 317.5787. Time: 11.8658 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #475: GFLOPs: 307.7025. Time: 12.2466 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #476: GFLOPs: 313.6824. Time: 12.0132 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #477: GFLOPs: 307.7995. Time: 12.2428 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #478: GFLOPs: 307.8610. Time: 12.2403 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #479: GFLOPs: 301.7361. Time: 12.4888 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #480: GFLOPs: 313.6381. Time: 12.0149 us. Best GFLOPs: 376.6848
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #481: GFLOPs: 381.5275. Time: 9.8769 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #482: GFLOPs: 381.5235. Time: 9.8770 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #483: GFLOPs: 249.4447. Time: 15.1068 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #484: GFLOPs: 313.6529. Time: 12.0143 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #485: GFLOPs: 312.7891. Time: 12.0475 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #486: GFLOPs: 255.5675. Time: 14.7449 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #487: GFLOPs: 251.9636. Time: 14.9558 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #488: GFLOPs: 248.6951. Time: 15.1524 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #489: GFLOPs: 256.8016. Time: 14.6741 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #490: GFLOPs: 249.3517. Time: 15.1125 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #491: GFLOPs: 256.1559. Time: 14.7110 us. Best GFLOPs: 381.5275
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #492: GFLOPs: 391.5936. Time: 9.6230 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #493: GFLOPs: 389.8271. Time: 9.6666 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #494: GFLOPs: 390.1866. Time: 9.6577 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #495: GFLOPs: 252.5918. Time: 14.9186 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #496: GFLOPs: 256.8307. Time: 14.6724 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #497: GFLOPs: 250.6269. Time: 15.0356 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #498: GFLOPs: 250.6500. Time: 15.0342 us. Best GFLOPs: 391.5936
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #499: GFLOPs: 394.6783. Time: 9.5478 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #500: GFLOPs: 382.3531. Time: 9.8556 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #501: GFLOPs: 394.5489. Time: 9.5510 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #502: GFLOPs: 391.3115. Time: 9.6300 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #503: GFLOPs: 391.7996. Time: 9.6180 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #504: GFLOPs: 393.7298. Time: 9.5708 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #505: GFLOPs: 392.4697. Time: 9.6016 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #506: GFLOPs: 390.8735. Time: 9.6408 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #507: GFLOPs: 238.0923. Time: 15.8271 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #508: GFLOPs: 390.0023. Time: 9.6623 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #509: GFLOPs: 166.3388. Time: 22.6545 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #510: GFLOPs: 292.8615. Time: 12.8672 us. Best GFLOPs: 394.6783
2024-04-29 15:49:30 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #511: GFLOPs: 161.0026. Time: 23.4053 us. Best GFLOPs: 394.6783
2024-04-29 16:16:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:16:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:16:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 378 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:16:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 768 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:16:46 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 16:16:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:17:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:17:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:17:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb06288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xeb8e928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x963a558)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0df9d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xfbf9a08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf94fed8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe10d998)]: 0 failure(s)
2024-04-29 16:17:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.9321  1.8000  1.7532  1.7532  1.7189  1.7172  1.6823  1.6739  1.4676  1.4676  1.4113  1.3640  1.3033  1.3017  1.2323  1.2106
[17 : 32]:	1.2088  1.2059  1.2021  1.1638  1.1638  1.1577  1.1555  1.1352  1.1295  1.1295  1.1283  1.1272  1.1272  1.1211  1.1202  1.1145
[33 : 48]:	1.1071  1.1065  1.1055  1.1017  1.1009  1.0981  1.0960  1.0940  1.0935  1.0931  1.0816  1.0732  1.0646  1.0629  1.0620  1.0589
[49 : 64]:	1.0563  1.0557  1.0556  1.0349  1.0334  1.0243  1.0217  1.0209  1.0200  1.0089  1.0031  1.0014  1.0010  0.9969  0.9936  0.9913
2024-04-29 16:17:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:17:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #512: GFLOPs: 173.7922. Time: 21.6829 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #513: GFLOPs: 66.9026. Time: 56.3255 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #514: GFLOPs: 66.7804. Time: 56.4285 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #515: GFLOPs: 66.8412. Time: 56.3772 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #516: GFLOPs: 66.9030. Time: 56.3251 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #517: GFLOPs: 72.3507. Time: 52.0841 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #518: GFLOPs: 76.8600. Time: 49.0283 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #519: GFLOPs: 66.7725. Time: 56.4352 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #520: GFLOPs: 67.6836. Time: 55.6755 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #521: GFLOPs: 69.0129. Time: 54.6031 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #522: GFLOPs: 68.9984. Time: 54.6146 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #523: GFLOPs: 86.1921. Time: 43.7200 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #524: GFLOPs: 88.4652. Time: 42.5966 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #525: GFLOPs: 70.7717. Time: 53.2462 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #526: GFLOPs: 68.6767. Time: 54.8705 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #527: GFLOPs: 68.1565. Time: 55.2892 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #528: GFLOPs: 215.5631. Time: 17.4813 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #529: GFLOPs: 218.3778. Time: 17.2560 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #530: GFLOPs: 215.7995. Time: 17.4621 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #531: GFLOPs: 68.4981. Time: 55.0135 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #532: GFLOPs: 68.4988. Time: 55.0129 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #533: GFLOPs: 85.3741. Time: 44.1389 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #534: GFLOPs: 64.5214. Time: 58.4042 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #535: GFLOPs: 246.7793. Time: 15.2700 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #536: GFLOPs: 68.1542. Time: 55.2911 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #537: GFLOPs: 66.0702. Time: 57.0351 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #538: GFLOPs: 246.8361. Time: 15.2665 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #539: GFLOPs: 102.2186. Time: 36.8653 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #540: GFLOPs: 102.2785. Time: 36.8437 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #541: GFLOPs: 266.4843. Time: 14.1409 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #542: GFLOPs: 72.6243. Time: 51.8879 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #543: GFLOPs: 16.4765. Time: 228.7086 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #544: GFLOPs: 64.0349. Time: 58.8479 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #545: GFLOPs: 9.3679. Time: 402.2600 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #546: GFLOPs: 69.2666. Time: 54.4031 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #547: GFLOPs: 46.6328. Time: 80.8084 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #548: GFLOPs: 99.0398. Time: 38.0486 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #549: GFLOPs: 85.3543. Time: 44.1492 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #550: GFLOPs: 78.6192. Time: 47.9313 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #551: GFLOPs: 46.4338. Time: 81.1547 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #552: GFLOPs: 75.5369. Time: 49.8871 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #553: GFLOPs: 105.1578. Time: 35.8349 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #554: GFLOPs: 87.3649. Time: 43.1331 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #555: GFLOPs: 279.6335. Time: 13.4759 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #556: GFLOPs: 87.7974. Time: 42.9206 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #557: GFLOPs: 212.7004. Time: 17.7166 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #558: GFLOPs: 222.6313. Time: 16.9263 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #559: GFLOPs: 209.8554. Time: 17.9567 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #560: GFLOPs: 70.4894. Time: 53.4594 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #561: GFLOPs: 70.4745. Time: 53.4707 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #562: GFLOPs: 70.4385. Time: 53.4980 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #563: GFLOPs: 17.4308. Time: 216.1876 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #564: GFLOPs: 65.7964. Time: 57.2725 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #565: GFLOPs: 14.9922. Time: 251.3515 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #566: GFLOPs: 205.3243. Time: 18.3530 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #567: GFLOPs: 201.6254. Time: 18.6897 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #568: GFLOPs: 18.0688. Time: 208.5542 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #569: GFLOPs: 65.8655. Time: 57.2123 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #570: GFLOPs: 195.8092. Time: 19.2449 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #571: GFLOPs: 11.6801. Time: 322.6283 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #572: GFLOPs: 151.9081. Time: 24.8066 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #573: GFLOPs: 79.3943. Time: 47.4634 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #574: GFLOPs: 208.5870. Time: 18.0659 us. Best GFLOPs: 394.6783
2024-04-29 16:18:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #575: GFLOPs: 122.1222. Time: 30.8570 us. Best GFLOPs: 394.6783
