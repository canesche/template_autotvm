2024-04-29 09:58:12 [INFO] [task_scheduler.cc:160] Initializing Task #80: "fused_nn_conv2d_add_nn_relu_39"
2024-04-29 09:58:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 09:58:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 09:58:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(131072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused % T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(1024) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 09:58:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(131072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused % T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 09:58:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(131072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused % T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:42:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:42:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:42:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:42:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:42:53 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 11:42:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:42:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:43:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:43:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 11:43:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9981  0.9976  0.9975  0.9959  0.9949  0.9943  0.9940  0.9937  0.9931  0.9930  0.9916  0.9914  0.9909  0.9908  0.9887
[17 : 32]:	0.9887  0.9884  0.9861  0.9852  0.9850  0.9844  0.9839  0.9833  0.9823  0.9818  0.9818  0.9815  0.9813  0.9811  0.9807  0.9797
[33 : 48]:	0.9793  0.9786  0.9766  0.9765  0.9762  0.9759  0.9751  0.9749  0.9747  0.9742  0.9742  0.9730  0.9723  0.9716  0.9710  0.9698
[49 : 64]:	0.9691  0.9688  0.9675  0.9664  0.9664  0.9643  0.9634  0.9628  0.9618  0.9606  0.9591  0.9585  0.9572  0.9565  0.9562  0.9562
2024-04-29 11:43:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:43:03 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #1: GFLOPs: 830.4510. Time: 61.9307 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #2: GFLOPs: 71.2362. Time: 721.9705 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #3: GFLOPs: 29.9611. Time: 1716.5711 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #4: GFLOPs: 434.3501. Time: 118.4077 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #5: GFLOPs: 11.4993. Time: 4472.4758 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #6: GFLOPs: 518.1770. Time: 99.2526 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #7: GFLOPs: 142.7879. Time: 360.1874 us. Best GFLOPs: 830.4510
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #8: GFLOPs: 911.3298. Time: 56.4345 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #9: GFLOPs: 256.8447. Time: 200.2393 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #10: GFLOPs: 370.0413. Time: 138.9855 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #11: GFLOPs: 325.7391. Time: 157.8883 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #12: GFLOPs: 879.6233. Time: 58.4687 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #13: GFLOPs: 499.2251. Time: 103.0205 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #14: GFLOPs: 237.0692. Time: 216.9425 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #15: GFLOPs: 459.2561. Time: 111.9863 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #16: GFLOPs: 94.2780. Time: 545.5187 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #17: GFLOPs: 123.7226. Time: 415.6912 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #18: GFLOPs: 53.3016. Time: 964.8936 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #19: GFLOPs: 163.7340. Time: 314.1095 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #20: GFLOPs: 161.3106. Time: 318.8284 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #21: GFLOPs: 28.4581. Time: 1807.2320 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #22: GFLOPs: 463.4681. Time: 110.9686 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #23: GFLOPs: 512.0562. Time: 100.4390 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #24: GFLOPs: 406.1285. Time: 126.6358 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #25: GFLOPs: 569.9903. Time: 90.2303 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #26: GFLOPs: 329.4761. Time: 156.0975 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #27: GFLOPs: 148.7265. Time: 345.8052 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #28: GFLOPs: 39.1233. Time: 1314.5726 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #29: GFLOPs: 848.5572. Time: 60.6092 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #30: GFLOPs: 63.3214. Time: 812.2121 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #31: GFLOPs: 899.3062. Time: 57.1890 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #32: GFLOPs: 31.2360. Time: 1646.5080 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #33: GFLOPs: 39.8822. Time: 1289.5573 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #34: GFLOPs: 598.9370. Time: 85.8695 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #35: GFLOPs: 295.8954. Time: 173.8128 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #36: GFLOPs: 67.5980. Time: 760.8272 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #37: GFLOPs: 87.9821. Time: 584.5556 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #38: GFLOPs: 344.0359. Time: 149.4914 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #39: GFLOPs: 879.6031. Time: 58.4700 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #40: GFLOPs: 301.8881. Time: 170.3625 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #41: GFLOPs: 10.9406. Time: 4700.8580 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #42: GFLOPs: 127.9083. Time: 402.0881 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #43: GFLOPs: 189.9974. Time: 270.6901 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #44: GFLOPs: 173.8692. Time: 295.7995 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #45: GFLOPs: 94.0831. Time: 546.6488 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #46: GFLOPs: 386.0698. Time: 133.2153 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #47: GFLOPs: 361.0277. Time: 142.4555 us. Best GFLOPs: 911.3298
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #48: GFLOPs: 985.8808. Time: 52.1670 us. Best GFLOPs: 985.8808
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #49: GFLOPs: 393.7744. Time: 130.6088 us. Best GFLOPs: 985.8808
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #50: GFLOPs: 9.1679. Time: 5609.8132 us. Best GFLOPs: 985.8808
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #51: GFLOPs: 38.7326. Time: 1327.8316 us. Best GFLOPs: 985.8808
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #52: GFLOPs: 1152.9930. Time: 44.6060 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #53: GFLOPs: 104.7952. Time: 490.7707 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #54: GFLOPs: 62.7625. Time: 819.4443 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #55: GFLOPs: 506.7230. Time: 101.4961 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #56: GFLOPs: 86.2363. Time: 596.3890 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #57: GFLOPs: 268.4238. Time: 191.6015 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:121] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 < T.int64(512))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 4, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 98], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 98], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #59: GFLOPs: 133.9393. Time: 383.9829 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #60: GFLOPs: 547.6509. Time: 93.9109 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #61: GFLOPs: 28.4890. Time: 1805.2754 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #62: GFLOPs: 234.5563. Time: 219.2668 us. Best GFLOPs: 1152.9930
2024-04-29 14:01:25 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #63: GFLOPs: 10.9614. Time: 4691.9680 us. Best GFLOPs: 1152.9930
2024-04-29 16:01:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:01:50 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 16:01:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:01:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 845 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:01:53 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 16:01:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 65 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:01:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:02:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:02:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x807ca38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x96928b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc68e5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a68c38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x113412a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xfac99b8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe3b60f8)]: 0 failure(s)
2024-04-29 16:02:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5762  1.5429  1.4962  1.4962  1.4662  1.4640  1.4565  1.4144  1.4113  1.4000  1.3957  1.2930  1.2041  1.1902  1.1576  1.1574
[17 : 32]:	1.1486  1.1393  1.1375  1.1273  1.1168  1.1020  1.0963  1.0957  1.0927  1.0887  1.0851  1.0842  1.0833  1.0826  1.0795  1.0795
[33 : 48]:	1.0754  1.0751  1.0748  1.0693  1.0677  1.0675  1.0672  1.0672  1.0652  1.0584  1.0490  1.0467  1.0390  1.0371  1.0359  1.0334
[49 : 64]:	1.0298  1.0270  1.0256  1.0255  1.0192  1.0131  1.0060  1.0034  1.0028  1.0026  1.0013  1.0013  0.9987  0.9924  0.9894  0.9882
2024-04-29 16:02:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:02:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #64: GFLOPs: 942.1876. Time: 54.5862 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #65: GFLOPs: 1053.5160. Time: 48.8179 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #66: GFLOPs: 955.7593. Time: 53.8110 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #67: GFLOPs: 1041.6719. Time: 49.3729 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #68: GFLOPs: 1041.6357. Time: 49.3747 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #69: GFLOPs: 1041.0360. Time: 49.4031 us. Best GFLOPs: 1152.9930
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #70: GFLOPs: 1343.8990. Time: 38.2695 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #71: GFLOPs: 958.3030. Time: 53.6682 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #72: GFLOPs: 959.4686. Time: 53.6030 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #73: GFLOPs: 1259.5798. Time: 40.8314 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #74: GFLOPs: 543.6583. Time: 94.6006 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #75: GFLOPs: 947.4287. Time: 54.2842 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #76: GFLOPs: 1061.5433. Time: 48.4487 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #77: GFLOPs: 418.0809. Time: 123.0154 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #78: GFLOPs: 1000.4496. Time: 51.4073 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #79: GFLOPs: 891.2809. Time: 57.7039 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #80: GFLOPs: 1178.9528. Time: 43.6238 us. Best GFLOPs: 1343.8990
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #81: GFLOPs: 1814.9231. Time: 28.3375 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #82: GFLOPs: 891.3938. Time: 57.6966 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #83: GFLOPs: 1031.0267. Time: 49.8827 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #84: GFLOPs: 984.7837. Time: 52.2251 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #85: GFLOPs: 1047.5017. Time: 49.0982 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #86: GFLOPs: 1018.0028. Time: 50.5209 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #87: GFLOPs: 1035.5105. Time: 49.6667 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #88: GFLOPs: 891.3023. Time: 57.7025 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #89: GFLOPs: 675.8039. Time: 76.1026 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #90: GFLOPs: 666.9904. Time: 77.1082 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #91: GFLOPs: 1121.4839. Time: 45.8592 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #92: GFLOPs: 1180.1436. Time: 43.5798 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #93: GFLOPs: 1121.4861. Time: 45.8592 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #94: GFLOPs: 1121.7157. Time: 45.8498 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #95: GFLOPs: 891.3091. Time: 57.7021 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #96: GFLOPs: 1180.7056. Time: 43.5590 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #97: GFLOPs: 1020.6066. Time: 50.3920 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #98: GFLOPs: 1060.9607. Time: 48.4753 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #99: GFLOPs: 1509.0679. Time: 34.0809 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #100: GFLOPs: 891.3183. Time: 57.7015 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #101: GFLOPs: 1179.8552. Time: 43.5904 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #102: GFLOPs: 1121.5546. Time: 45.8564 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #103: GFLOPs: 891.3758. Time: 57.6978 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #104: GFLOPs: 1039.9542. Time: 49.4545 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #105: GFLOPs: 1179.5440. Time: 43.6019 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #106: GFLOPs: 891.3689. Time: 57.6982 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #107: GFLOPs: 1038.1947. Time: 49.5383 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #108: GFLOPs: 901.9492. Time: 57.0214 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #109: GFLOPs: 891.3938. Time: 57.6966 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #110: GFLOPs: 1072.5950. Time: 47.9495 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #111: GFLOPs: 891.3578. Time: 57.6989 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #112: GFLOPs: 1179.4534. Time: 43.6053 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #113: GFLOPs: 1040.1385. Time: 49.4457 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #114: GFLOPs: 902.0467. Time: 57.0152 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #115: GFLOPs: 1079.9037. Time: 47.6250 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #116: GFLOPs: 853.3137. Time: 60.2714 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #117: GFLOPs: 1016.6071. Time: 50.5902 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #118: GFLOPs: 842.8953. Time: 61.0164 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #119: GFLOPs: 886.8613. Time: 57.9915 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #120: GFLOPs: 1149.1269. Time: 44.7561 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #121: GFLOPs: 851.5116. Time: 60.3989 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #122: GFLOPs: 1375.3350. Time: 37.3948 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #123: GFLOPs: 1148.9123. Time: 44.7644 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #124: GFLOPs: 1131.4631. Time: 45.4548 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #125: GFLOPs: 38.9373. Time: 1320.8522 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #126: GFLOPs: 562.9121. Time: 91.3649 us. Best GFLOPs: 1814.9231
2024-04-29 16:03:30 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #127: GFLOPs: 8.5446. Time: 6019.0721 us. Best GFLOPs: 1814.9231
