2024-04-30 10:09:56 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3"
2024-04-30 10:09:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(114), T.int64(114)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(114), T.int64(114)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(784), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(128), T.int64(784), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 10:09:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 10:09:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(288), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(6144))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(6144) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(196), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(196)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 196, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 10:09:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(288), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(6144))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(6144) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(196), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(196)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 196, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:09:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(288), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(6144))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(6144) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(196), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(196)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(96) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(96) // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(196) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 196, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:21:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 10:21:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 10:21:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 508 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:21:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:21:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1513 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:22:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:22:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2515 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:22:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:22:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3525 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:22:34 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-30 10:22:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:23:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:23:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:23:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 10:23:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9993  0.9985  0.9978  0.9968  0.9963  0.9940  0.9932  0.9931  0.9930  0.9919  0.9918  0.9898  0.9896  0.9882  0.9879
[17 : 32]:	0.9874  0.9871  0.9868  0.9866  0.9863  0.9861  0.9859  0.9841  0.9839  0.9833  0.9829  0.9825  0.9814  0.9813  0.9798  0.9789
[33 : 48]:	0.9788  0.9772  0.9772  0.9771  0.9764  0.9756  0.9753  0.9749  0.9742  0.9737  0.9734  0.9733  0.9729  0.9724  0.9718  0.9703
[49 : 64]:	0.9698  0.9695  0.9691  0.9690  0.9689  0.9685  0.9682  0.9648  0.9646  0.9644  0.9637  0.9636  0.9621  0.9618  0.9617  0.9614
2024-04-30 10:23:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 10:23:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1: GFLOPs: 321.0264. Time: 4646.4465 us. Best GFLOPs: 321.0264
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #2: GFLOPs: 7494.9077. Time: 199.0194 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #3: GFLOPs: 764.6804. Time: 1950.6608 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #4: GFLOPs: 658.6994. Time: 2264.5111 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #5: GFLOPs: 26.9139. Time: 55422.2920 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #6: GFLOPs: 748.8450. Time: 1991.9103 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #7: GFLOPs: 3465.6443. Time: 430.4054 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #8: GFLOPs: 2114.5719. Time: 705.4062 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #9: GFLOPs: 7091.7440. Time: 210.3336 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #10: GFLOPs: 212.6673. Time: 7013.9221 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #11: GFLOPs: 362.2733. Time: 4117.4222 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #12: GFLOPs: 1462.4106. Time: 1019.9818 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #13: GFLOPs: 122.3831. Time: 12188.2171 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #14: GFLOPs: 477.1376. Time: 3126.2098 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #15: GFLOPs: 2599.3829. Time: 573.8409 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(9), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(196), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(98) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(8) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(784), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3136))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(98) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(8) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(98) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 8, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 98, 4, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #17: GFLOPs: 130.7527. Time: 11408.0429 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #18: GFLOPs: 423.0568. Time: 3525.8439 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #19: GFLOPs: 414.6182. Time: 3597.6045 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #20: GFLOPs: 4498.4758. Time: 331.5861 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #21: GFLOPs: 112.8110. Time: 13222.3996 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #22: GFLOPs: 455.7613. Time: 3272.8360 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #23: GFLOPs: 216.7007. Time: 6883.3743 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #24: GFLOPs: 100.8078. Time: 14796.7997 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #25: GFLOPs: 587.2789. Time: 2539.9040 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #26: GFLOPs: 1795.8686. Time: 830.5909 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #27: GFLOPs: 148.3494. Time: 10054.8606 us. Best GFLOPs: 7494.9077
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #28: GFLOPs: 9588.4998. Time: 155.5647 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #29: GFLOPs: 416.4093. Time: 3582.1301 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #30: GFLOPs: 1026.8417. Time: 1452.6408 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #31: GFLOPs: 807.1243. Time: 1848.0823 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #32: GFLOPs: 3781.8105. Time: 394.4228 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #33: GFLOPs: 2956.5969. Time: 504.5098 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #34: GFLOPs: 383.5521. Time: 3888.9943 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #35: GFLOPs: 4718.0633. Time: 316.1535 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #36: GFLOPs: 3648.7053. Time: 408.8114 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #37: GFLOPs: 18.2140. Time: 81894.7397 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #38: GFLOPs: 18.3687. Time: 81204.9050 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #39: GFLOPs: 451.3861. Time: 3304.5595 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #40: GFLOPs: 1947.8565. Time: 765.7813 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #41: GFLOPs: 44.7065. Time: 33364.9927 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #42: GFLOPs: 7952.1050. Time: 187.5770 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #43: GFLOPs: 769.0369. Time: 1939.6106 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #44: GFLOPs: 46.9981. Time: 31738.1112 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #45: GFLOPs: 998.7313. Time: 1493.5270 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #46: GFLOPs: 641.4874. Time: 2325.2713 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #47: GFLOPs: 6089.2069. Time: 244.9633 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #48: GFLOPs: 1713.4906. Time: 870.5225 us. Best GFLOPs: 9588.4998
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #49: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(3) + eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(147))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(147) // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(882))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(16), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 3, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 8, 8, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[16, 1, 7, 1, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #50: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(588), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(196) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(48) // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + co_3_init * T.int64(16) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(196) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(196) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(196) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(48) // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + co_3 * T.int64(16) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(32), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(196) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(48) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 2, 16])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[49, 1, 16, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 96], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #51: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(56)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 1, 2, 56, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 48, 3], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 10:50:59 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #52: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(196) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(196) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(196) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(512))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(196) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(196) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(196) // T.int64(49) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 4, 4, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[49, 1, 8, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 1, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 96, 3], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 96, 3], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #53: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(672), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(112) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(112) // T.int64(56) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(14) + eps_1_nu_1_co_1_p_1_fused * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(112) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(112) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(512))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(112) // T.int64(56) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(112) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(112) // T.int64(56) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(14) + eps_1_nu_1_co_1_p_1_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(8) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(112) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(112) // T.int64(56) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(14) + eps_1_nu_1_co_1_p_1_fused * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 32, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[56, 2, 1, 1, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 4, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #54: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(56)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(56) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 1, 2, 56, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 48, 3], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 48, 3], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #55: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(21), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(32) * T.int64(3) + eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(16) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(32) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(16) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(32) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(64) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(32) // T.int64(16) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 64, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 16, 1, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #56: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(128)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(128), ci_0)
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0)
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(16), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 1, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 1, 28, 2, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #57: GFLOPs: 1761.4535. Time: 846.8189 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #58: GFLOPs: 349.3812. Time: 4269.3548 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #59: GFLOPs: 6225.1732. Time: 239.6130 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #60: GFLOPs: 306.5909. Time: 4865.2191 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #61: GFLOPs: 1531.0194. Time: 974.2738 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #62: GFLOPs: 1300.4341. Time: 1147.0263 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #63: GFLOPs: 54.9325. Time: 27153.9190 us. Best GFLOPs: 9588.4998
2024-04-30 10:51:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #64: GFLOPs: 7679.0145. Time: 194.2479 us. Best GFLOPs: 9588.4998
2024-04-30 11:33:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 11:33:11 [INFO] [evolutionary_search.cc:715] Picked top 55 candidate(s) from database
2024-04-30 11:33:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 449 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:33:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 900 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:33:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1353 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:33:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:33:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2256 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:33:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2700 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:34:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:34:07 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 11:34:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 153 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:34:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:35:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:35:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 11:35:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0072  0.9561  0.9415  0.9415  0.9409  0.9405  0.9405  0.9397  0.9373  0.9325  0.9283  0.9278  0.9262  0.9235  0.9140  0.9135
[17 : 32]:	0.9123  0.9122  0.9103  0.9093  0.9062  0.9060  0.9054  0.9027  0.9018  0.9005  0.8996  0.8995  0.8982  0.8976  0.8950  0.8925
[33 : 48]:	0.8923  0.8919  0.8913  0.8846  0.8844  0.8783  0.8770  0.8715  0.8715  0.8682  0.8652  0.8642  0.8639  0.8638  0.8633  0.8611
[49 : 64]:	0.8601  0.8545  0.8543  0.8536  0.8528  0.8528  0.8527  0.8517  0.8502  0.8475  0.8450  0.8427  0.8414  0.8396  0.8395  0.8392
2024-04-30 11:35:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 11:35:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #65: GFLOPs: 8750.7407. Time: 170.4578 us. Best GFLOPs: 9588.4998
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #66: GFLOPs: 6261.1005. Time: 238.2380 us. Best GFLOPs: 9588.4998
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #67: GFLOPs: 6105.5387. Time: 244.3080 us. Best GFLOPs: 9588.4998
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #68: GFLOPs: 9926.9780. Time: 150.2604 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #69: GFLOPs: 6728.7517. Time: 221.6804 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #70: GFLOPs: 9668.1768. Time: 154.2827 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #71: GFLOPs: 9747.2581. Time: 153.0309 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #72: GFLOPs: 9134.5298. Time: 163.2960 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #73: GFLOPs: 8426.0088. Time: 177.0271 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #74: GFLOPs: 9672.5478. Time: 154.2130 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #75: GFLOPs: 9507.8158. Time: 156.8848 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #76: GFLOPs: 7749.7895. Time: 192.4739 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #77: GFLOPs: 9375.7586. Time: 159.0946 us. Best GFLOPs: 9926.9780
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #78: GFLOPs: 9976.7357. Time: 149.5110 us. Best GFLOPs: 9976.7357
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #79: GFLOPs: 9866.2679. Time: 151.1850 us. Best GFLOPs: 9976.7357
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #80: GFLOPs: 10647.1976. Time: 140.0962 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #81: GFLOPs: 6422.5362. Time: 232.2497 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #82: GFLOPs: 6385.0270. Time: 233.6141 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #83: GFLOPs: 8935.2742. Time: 166.9375 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #84: GFLOPs: 6663.6756. Time: 223.8452 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #85: GFLOPs: 9934.5238. Time: 150.1463 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #86: GFLOPs: 9829.3445. Time: 151.7530 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #87: GFLOPs: 9652.0923. Time: 154.5398 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #88: GFLOPs: 6183.2395. Time: 241.2380 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #89: GFLOPs: 9302.9783. Time: 160.3392 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #90: GFLOPs: 6653.8400. Time: 224.1761 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #91: GFLOPs: 6338.2127. Time: 235.3396 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #92: GFLOPs: 5734.8929. Time: 260.0976 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #93: GFLOPs: 10016.2733. Time: 148.9209 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #94: GFLOPs: 6116.5563. Time: 243.8680 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #95: GFLOPs: 5503.8570. Time: 271.0158 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #96: GFLOPs: 6299.2520. Time: 236.7951 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #97: GFLOPs: 6184.4821. Time: 241.1895 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #98: GFLOPs: 6600.4334. Time: 225.9900 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #99: GFLOPs: 6278.2005. Time: 237.5891 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #100: GFLOPs: 8895.0480. Time: 167.6924 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #101: GFLOPs: 6352.8658. Time: 234.7967 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #102: GFLOPs: 6321.2090. Time: 235.9726 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #103: GFLOPs: 6130.0275. Time: 243.3320 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #104: GFLOPs: 5970.2717. Time: 249.8433 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #105: GFLOPs: 5970.1187. Time: 249.8497 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #106: GFLOPs: 8924.8213. Time: 167.1330 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #107: GFLOPs: 9671.3579. Time: 154.2319 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #108: GFLOPs: 5949.3943. Time: 250.7200 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #109: GFLOPs: 7081.5005. Time: 210.6379 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #110: GFLOPs: 6293.7013. Time: 237.0040 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #111: GFLOPs: 7984.0538. Time: 186.8264 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #112: GFLOPs: 7502.0393. Time: 198.8302 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #113: GFLOPs: 6232.9141. Time: 239.3154 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #114: GFLOPs: 6870.8321. Time: 217.0963 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #115: GFLOPs: 7082.0536. Time: 210.6214 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #116: GFLOPs: 6427.9048. Time: 232.0557 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #117: GFLOPs: 6145.4351. Time: 242.7220 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #118: GFLOPs: 6872.4448. Time: 217.0453 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #119: GFLOPs: 7909.0452. Time: 188.5983 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #120: GFLOPs: 8156.9919. Time: 182.8655 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #121: GFLOPs: 6300.9944. Time: 236.7296 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #122: GFLOPs: 9465.9943. Time: 157.5780 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #123: GFLOPs: 10049.1256. Time: 148.4340 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #124: GFLOPs: 6169.6372. Time: 241.7698 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #125: GFLOPs: 7359.9346. Time: 202.6692 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #126: GFLOPs: 51.3252. Time: 29062.4007 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #127: GFLOPs: 1668.0019. Time: 894.2629 us. Best GFLOPs: 10647.1976
2024-04-30 11:36:59 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #128: GFLOPs: 6670.2883. Time: 223.6233 us. Best GFLOPs: 10647.1976
2024-04-30 12:31:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 12:31:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 12:32:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 409 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1219 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2430 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2836 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3241 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:32:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3643 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:33:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 4049 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:33:02 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 12:33:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:33:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:34:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:34:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 12:34:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9332  0.9290  0.9284  0.9276  0.9270  0.9269  0.9261  0.9261  0.9253  0.9245  0.9245  0.9188  0.9183  0.9177  0.9169  0.9162
[17 : 32]:	0.9161  0.9161  0.9153  0.9152  0.9148  0.9146  0.9146  0.9138  0.9133  0.9083  0.9026  0.9019  0.9014  0.9005  0.8979  0.8975
[33 : 48]:	0.8967  0.8960  0.8957  0.8944  0.8943  0.8941  0.8934  0.8930  0.8924  0.8921  0.8918  0.8915  0.8915  0.8910  0.8907  0.8907
[49 : 64]:	0.8890  0.8888  0.8883  0.8882  0.8881  0.8874  0.8863  0.8851  0.8844  0.8832  0.8832  0.8816  0.8813  0.8813  0.8800  0.8798
2024-04-30 12:34:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 12:34:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #129: GFLOPs: 8831.6898. Time: 168.8954 us. Best GFLOPs: 10647.1976
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #130: GFLOPs: 9827.0770. Time: 151.7880 us. Best GFLOPs: 10647.1976
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #131: GFLOPs: 9861.7115. Time: 151.2549 us. Best GFLOPs: 10647.1976
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #132: GFLOPs: 9492.8122. Time: 157.1328 us. Best GFLOPs: 10647.1976
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #133: GFLOPs: 11082.0667. Time: 134.5987 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #134: GFLOPs: 9888.1160. Time: 150.8510 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #135: GFLOPs: 9534.2594. Time: 156.4497 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #136: GFLOPs: 9422.7290. Time: 158.3015 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #137: GFLOPs: 9859.3104. Time: 151.2917 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #138: GFLOPs: 9471.8667. Time: 157.4803 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #139: GFLOPs: 9141.5575. Time: 163.1705 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #140: GFLOPs: 8219.6788. Time: 181.4709 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #141: GFLOPs: 9242.6727. Time: 161.3854 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #142: GFLOPs: 10693.2394. Time: 139.4930 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #143: GFLOPs: 8630.7469. Time: 172.8277 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #144: GFLOPs: 9277.7482. Time: 160.7752 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #145: GFLOPs: 10013.4931. Time: 148.9622 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #146: GFLOPs: 9972.2516. Time: 149.5783 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #147: GFLOPs: 10779.3966. Time: 138.3781 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #148: GFLOPs: 8525.4632. Time: 174.9620 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #149: GFLOPs: 7069.3665. Time: 210.9994 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #150: GFLOPs: 9731.0168. Time: 153.2864 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #151: GFLOPs: 8704.3059. Time: 171.3672 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #152: GFLOPs: 10037.5628. Time: 148.6050 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #153: GFLOPs: 8788.4547. Time: 169.7263 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #154: GFLOPs: 9459.5009. Time: 157.6861 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #155: GFLOPs: 8650.5028. Time: 172.4330 us. Best GFLOPs: 11082.0667
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #156: GFLOPs: 11402.6219. Time: 130.8148 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #157: GFLOPs: 9200.7380. Time: 162.1209 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #158: GFLOPs: 8944.3321. Time: 166.7684 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #159: GFLOPs: 9945.9956. Time: 149.9731 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #160: GFLOPs: 8311.3810. Time: 179.4686 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #161: GFLOPs: 9121.2428. Time: 163.5339 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #162: GFLOPs: 9594.4330. Time: 155.4685 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #163: GFLOPs: 9954.3524. Time: 149.8472 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #164: GFLOPs: 8783.6725. Time: 169.8187 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #165: GFLOPs: 9718.7209. Time: 153.4803 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #166: GFLOPs: 8979.8085. Time: 166.1096 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #167: GFLOPs: 9998.6423. Time: 149.1835 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #168: GFLOPs: 9807.8630. Time: 152.0853 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #169: GFLOPs: 8461.0963. Time: 176.2930 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #170: GFLOPs: 9871.2328. Time: 151.1090 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #171: GFLOPs: 10242.8511. Time: 145.6267 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #172: GFLOPs: 9420.4179. Time: 158.3403 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #173: GFLOPs: 9788.9989. Time: 152.3784 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #174: GFLOPs: 10517.1222. Time: 141.8289 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #175: GFLOPs: 8861.9373. Time: 168.3190 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #176: GFLOPs: 10085.7742. Time: 147.8947 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #177: GFLOPs: 6195.7304. Time: 240.7516 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #178: GFLOPs: 8985.5265. Time: 166.0039 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #179: GFLOPs: 10046.3941. Time: 148.4744 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #180: GFLOPs: 9611.7730. Time: 155.1880 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #181: GFLOPs: 8640.2215. Time: 172.6382 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #182: GFLOPs: 9941.0919. Time: 150.0471 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #183: GFLOPs: 9917.6007. Time: 150.4025 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #184: GFLOPs: 9825.4084. Time: 151.8138 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #185: GFLOPs: 9996.1353. Time: 149.2209 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #186: GFLOPs: 9799.7394. Time: 152.2114 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #187: GFLOPs: 9812.8071. Time: 152.0087 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #188: GFLOPs: 9944.4735. Time: 149.9961 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #189: GFLOPs: 8949.6906. Time: 166.6686 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #190: GFLOPs: 2817.0795. Time: 529.4959 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #191: GFLOPs: 827.2367. Time: 1803.1503 us. Best GFLOPs: 11402.6219
2024-04-30 12:35:52 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #192: GFLOPs: 3662.2339. Time: 407.3012 us. Best GFLOPs: 11402.6219
2024-04-30 13:19:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 13:20:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 13:20:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:20:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2831 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:21:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3235 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:21:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3637 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:21:09 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 13:21:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:21:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:22:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:22:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 13:22:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9816  0.9808  0.9793  0.9780  0.9632  0.9500  0.9465  0.9372  0.9255  0.9247  0.9221  0.9164  0.9065  0.9061  0.9046  0.9045
[17 : 32]:	0.9043  0.9042  0.9026  0.9003  0.8991  0.8968  0.8960  0.8947  0.8926  0.8923  0.8886  0.8874  0.8854  0.8854  0.8837  0.8832
[33 : 48]:	0.8824  0.8820  0.8818  0.8815  0.8815  0.8810  0.8809  0.8807  0.8805  0.8800  0.8797  0.8791  0.8775  0.8768  0.8759  0.8757
[49 : 64]:	0.8756  0.8749  0.8739  0.8731  0.8725  0.8724  0.8722  0.8721  0.8720  0.8702  0.8694  0.8687  0.8684  0.8684  0.8682  0.8681
2024-04-30 13:22:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 13:22:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #193: GFLOPs: 11491.7000. Time: 129.8008 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #194: GFLOPs: 11474.3242. Time: 129.9974 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #195: GFLOPs: 10367.7246. Time: 143.8727 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #196: GFLOPs: 10814.2080. Time: 137.9326 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #197: GFLOPs: 10858.7699. Time: 137.3666 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #198: GFLOPs: 10369.8139. Time: 143.8437 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #199: GFLOPs: 10735.7269. Time: 138.9410 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #200: GFLOPs: 10600.1586. Time: 140.7179 us. Best GFLOPs: 11491.7000
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #201: GFLOPs: 11690.1623. Time: 127.5972 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #202: GFLOPs: 9344.4118. Time: 159.6283 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #203: GFLOPs: 10466.1774. Time: 142.5193 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #204: GFLOPs: 11014.1735. Time: 135.4284 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #205: GFLOPs: 10336.3841. Time: 144.3089 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #206: GFLOPs: 8984.3963. Time: 166.0247 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #207: GFLOPs: 9363.2356. Time: 159.3073 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #208: GFLOPs: 9193.1360. Time: 162.2550 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #209: GFLOPs: 8653.3588. Time: 172.3761 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #210: GFLOPs: 10649.9551. Time: 140.0599 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #211: GFLOPs: 11203.2636. Time: 133.1426 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #212: GFLOPs: 10605.2068. Time: 140.6509 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #213: GFLOPs: 10323.7151. Time: 144.4860 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #214: GFLOPs: 7264.7397. Time: 205.3249 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #215: GFLOPs: 10359.3309. Time: 143.9892 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #216: GFLOPs: 9682.4480. Time: 154.0553 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #217: GFLOPs: 8835.0086. Time: 168.8320 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #218: GFLOPs: 10774.8276. Time: 138.4368 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #219: GFLOPs: 10989.7817. Time: 135.7290 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #220: GFLOPs: 11090.2057. Time: 134.5000 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #221: GFLOPs: 8828.6585. Time: 168.9534 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #222: GFLOPs: 10256.3942. Time: 145.4344 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #223: GFLOPs: 9552.6162. Time: 156.1491 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #224: GFLOPs: 10436.5922. Time: 142.9233 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #225: GFLOPs: 8658.4561. Time: 172.2746 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #226: GFLOPs: 10648.5343. Time: 140.0786 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #227: GFLOPs: 7018.0286. Time: 212.5429 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #228: GFLOPs: 11107.4009. Time: 134.2917 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #229: GFLOPs: 6863.5517. Time: 217.3266 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #230: GFLOPs: 7207.5563. Time: 206.9539 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #231: GFLOPs: 10285.3677. Time: 145.0247 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #232: GFLOPs: 7073.5932. Time: 210.8733 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #233: GFLOPs: 10242.9907. Time: 145.6247 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #234: GFLOPs: 9176.2545. Time: 162.5535 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #235: GFLOPs: 10912.3464. Time: 136.6922 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #236: GFLOPs: 9093.9464. Time: 164.0247 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #237: GFLOPs: 10216.2443. Time: 146.0059 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #238: GFLOPs: 10074.4936. Time: 148.0603 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #239: GFLOPs: 9386.8902. Time: 158.9059 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #240: GFLOPs: 10158.8531. Time: 146.8308 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #241: GFLOPs: 10196.5913. Time: 146.2873 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #242: GFLOPs: 9535.8430. Time: 156.4237 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #243: GFLOPs: 8615.8649. Time: 173.1262 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #244: GFLOPs: 9562.2092. Time: 155.9924 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #245: GFLOPs: 9515.0513. Time: 156.7655 us. Best GFLOPs: 11690.1623
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #246: GFLOPs: 12142.5390. Time: 122.8435 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #247: GFLOPs: 8677.8770. Time: 171.8891 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #248: GFLOPs: 9030.0596. Time: 165.1852 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #249: GFLOPs: 10089.4670. Time: 147.8405 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #250: GFLOPs: 7053.3014. Time: 211.4800 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #251: GFLOPs: 10030.0724. Time: 148.7160 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #252: GFLOPs: 9805.4317. Time: 152.1230 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #253: GFLOPs: 10008.4695. Time: 149.0370 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #254: GFLOPs: 258.9639. Time: 5760.0000 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #255: GFLOPs: 7465.0898. Time: 199.8144 us. Best GFLOPs: 12142.5390
2024-04-30 13:24:03 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #256: GFLOPs: 3797.5654. Time: 392.7864 us. Best GFLOPs: 12142.5390
2024-04-30 14:13:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 14:13:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 14:13:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:13:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 812 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:13:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1218 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:13:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1625 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:13:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2031 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2830 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3234 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3641 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 4047 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:14:32 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 14:14:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:15:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 168 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:15:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:16:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 14:16:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9398  0.9390  0.9327  0.9327  0.9313  0.9312  0.9308  0.9278  0.9246  0.9235  0.9232  0.9218  0.9211  0.9195  0.9160  0.9147
[17 : 32]:	0.9143  0.9143  0.9138  0.9134  0.9081  0.9060  0.9049  0.9042  0.9033  0.9026  0.9021  0.9019  0.9010  0.8998  0.8973  0.8953
[33 : 48]:	0.8951  0.8916  0.8912  0.8902  0.8900  0.8899  0.8894  0.8886  0.8886  0.8877  0.8876  0.8866  0.8866  0.8860  0.8856  0.8852
[49 : 64]:	0.8849  0.8840  0.8840  0.8833  0.8826  0.8821  0.8819  0.8819  0.8816  0.8816  0.8813  0.8806  0.8803  0.8796  0.8791  0.8783
2024-04-30 14:16:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 14:16:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #257: GFLOPs: 11641.6766. Time: 128.1286 us. Best GFLOPs: 12142.5390
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #258: GFLOPs: 12203.4571. Time: 122.2303 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #259: GFLOPs: 10692.4029. Time: 139.5039 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #260: GFLOPs: 11072.5310. Time: 134.7146 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #261: GFLOPs: 11565.8364. Time: 128.9688 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #262: GFLOPs: 10429.9151. Time: 143.0148 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #263: GFLOPs: 11276.5156. Time: 132.2778 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #264: GFLOPs: 10910.1960. Time: 136.7191 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #265: GFLOPs: 11005.0863. Time: 135.5402 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #266: GFLOPs: 11494.3923. Time: 129.7704 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #267: GFLOPs: 8605.8738. Time: 173.3272 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #268: GFLOPs: 11241.6293. Time: 132.6883 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #269: GFLOPs: 10834.8611. Time: 137.6697 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #270: GFLOPs: 12190.0185. Time: 122.3650 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #271: GFLOPs: 11726.4552. Time: 127.2023 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #272: GFLOPs: 11493.6581. Time: 129.7787 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #273: GFLOPs: 11235.0431. Time: 132.7660 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #274: GFLOPs: 11407.7062. Time: 130.7565 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #275: GFLOPs: 10246.2595. Time: 145.5782 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #276: GFLOPs: 11491.8853. Time: 129.7987 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #277: GFLOPs: 11368.3560. Time: 131.2091 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #278: GFLOPs: 11491.3479. Time: 129.8048 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #279: GFLOPs: 11212.9192. Time: 133.0280 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #280: GFLOPs: 11410.2593. Time: 130.7273 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #281: GFLOPs: 11210.0557. Time: 133.0620 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #282: GFLOPs: 10632.4302. Time: 140.2908 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #283: GFLOPs: 11405.2207. Time: 130.7850 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #284: GFLOPs: 9843.9404. Time: 151.5280 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #285: GFLOPs: 11512.1257. Time: 129.5705 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #286: GFLOPs: 9643.0834. Time: 154.6841 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #287: GFLOPs: 8231.9806. Time: 181.1997 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #288: GFLOPs: 10632.1118. Time: 140.2950 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #289: GFLOPs: 11038.2307. Time: 135.1333 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #290: GFLOPs: 10425.9030. Time: 143.0698 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #291: GFLOPs: 11095.4773. Time: 134.4360 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #292: GFLOPs: 11047.1816. Time: 135.0238 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #293: GFLOPs: 10898.8699. Time: 136.8612 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #294: GFLOPs: 8818.3990. Time: 169.1500 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #295: GFLOPs: 9245.3329. Time: 161.3389 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #296: GFLOPs: 10729.9357. Time: 139.0159 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #297: GFLOPs: 10404.1276. Time: 143.3693 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #298: GFLOPs: 10420.4315. Time: 143.1449 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #299: GFLOPs: 11259.8105. Time: 132.4740 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #300: GFLOPs: 11074.8183. Time: 134.6868 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #301: GFLOPs: 11042.2830. Time: 135.0837 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #302: GFLOPs: 10649.2924. Time: 140.0687 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #303: GFLOPs: 11641.6800. Time: 128.1286 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #304: GFLOPs: 10355.2319. Time: 144.0462 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #305: GFLOPs: 10624.7529. Time: 140.3922 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #306: GFLOPs: 11046.5115. Time: 135.0320 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #307: GFLOPs: 10172.1754. Time: 146.6385 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #308: GFLOPs: 10967.5226. Time: 136.0045 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #309: GFLOPs: 11262.2149. Time: 132.4457 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #310: GFLOPs: 11155.4151. Time: 133.7137 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #311: GFLOPs: 11099.5583. Time: 134.3866 us. Best GFLOPs: 12203.4571
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #312: GFLOPs: 12266.5902. Time: 121.6012 us. Best GFLOPs: 12266.5902
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #313: GFLOPs: 12289.2934. Time: 121.3766 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #314: GFLOPs: 11395.5208. Time: 130.8964 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #315: GFLOPs: 10768.3090. Time: 138.5206 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #316: GFLOPs: 11074.1307. Time: 134.6952 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #317: GFLOPs: 10827.6829. Time: 137.7610 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #318: GFLOPs: 5795.6662. Time: 257.3703 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #319: GFLOPs: 2626.2374. Time: 567.9731 us. Best GFLOPs: 12289.2934
2024-04-30 14:17:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #320: GFLOPs: 4986.9202. Time: 299.1089 us. Best GFLOPs: 12289.2934
2024-04-30 15:15:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 15:15:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 15:15:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:15:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 813 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:15:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1219 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:15:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1618 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:15:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2026 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2831 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3239 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3644 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 4047 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:16:31 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 15:16:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:17:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:17:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:18:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 15:18:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9870  0.9864  0.9817  0.9817  0.9807  0.9761  0.9747  0.9710  0.9682  0.9601  0.9593  0.9593  0.9573  0.9573  0.9541  0.9534
[17 : 32]:	0.9533  0.9530  0.9530  0.9522  0.9513  0.9511  0.9489  0.9486  0.9473  0.9469  0.9468  0.9467  0.9456  0.9449  0.9446  0.9443
[33 : 48]:	0.9395  0.9379  0.9371  0.9362  0.9349  0.9347  0.9335  0.9335  0.9333  0.9322  0.9309  0.9304  0.9287  0.9285  0.9284  0.9279
[49 : 64]:	0.9273  0.9269  0.9266  0.9259  0.9248  0.9237  0.9234  0.9233  0.9231  0.9231  0.9224  0.9216  0.9207  0.9203  0.9199  0.9199
2024-04-30 15:18:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 15:18:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #321: GFLOPs: 11380.1756. Time: 131.0729 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #322: GFLOPs: 12013.3183. Time: 124.1649 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #323: GFLOPs: 12194.1706. Time: 122.3234 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #324: GFLOPs: 11349.7081. Time: 131.4247 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #325: GFLOPs: 12114.5164. Time: 123.1277 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #326: GFLOPs: 11733.5600. Time: 127.1253 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #327: GFLOPs: 11907.9462. Time: 125.2636 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #328: GFLOPs: 12068.0612. Time: 123.6016 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #329: GFLOPs: 11959.1955. Time: 124.7268 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #330: GFLOPs: 12040.1157. Time: 123.8885 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #331: GFLOPs: 11791.6783. Time: 126.4987 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #332: GFLOPs: 10347.9592. Time: 144.1475 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #333: GFLOPs: 12029.8123. Time: 123.9946 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #334: GFLOPs: 11245.5592. Time: 132.6419 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #335: GFLOPs: 11536.9785. Time: 129.2914 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #336: GFLOPs: 12051.8221. Time: 123.7682 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #337: GFLOPs: 12028.1541. Time: 124.0117 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #338: GFLOPs: 11670.8760. Time: 127.8081 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #339: GFLOPs: 11643.6378. Time: 128.1071 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #340: GFLOPs: 12014.9424. Time: 124.1481 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #341: GFLOPs: 11247.6571. Time: 132.6171 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #342: GFLOPs: 11618.8633. Time: 128.3802 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #343: GFLOPs: 11453.9429. Time: 130.2287 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #344: GFLOPs: 11521.1677. Time: 129.4688 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #345: GFLOPs: 11642.7704. Time: 128.1166 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #346: GFLOPs: 11887.8493. Time: 125.4754 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #347: GFLOPs: 12036.7389. Time: 123.9233 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #348: GFLOPs: 12012.1003. Time: 124.1775 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #349: GFLOPs: 11527.1069. Time: 129.4021 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #350: GFLOPs: 11710.5143. Time: 127.3755 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #351: GFLOPs: 11654.0116. Time: 127.9930 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #352: GFLOPs: 11598.4178. Time: 128.6065 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #353: GFLOPs: 12125.0329. Time: 123.0209 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #354: GFLOPs: 11391.0929. Time: 130.9472 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #355: GFLOPs: 11656.2637. Time: 127.9683 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #356: GFLOPs: 11784.3876. Time: 126.5770 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #357: GFLOPs: 11837.7732. Time: 126.0061 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #358: GFLOPs: 11574.6891. Time: 128.8702 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #359: GFLOPs: 11243.0197. Time: 132.6718 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #360: GFLOPs: 11545.8277. Time: 129.1923 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #361: GFLOPs: 11352.9355. Time: 131.3874 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #362: GFLOPs: 11541.6600. Time: 129.2390 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #363: GFLOPs: 11188.5603. Time: 133.3176 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #364: GFLOPs: 11462.9673. Time: 130.1262 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #365: GFLOPs: 11266.7800. Time: 132.3921 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #366: GFLOPs: 11472.4544. Time: 130.0186 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #367: GFLOPs: 11546.4916. Time: 129.1849 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #368: GFLOPs: 12061.1426. Time: 123.6725 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #369: GFLOPs: 11368.1341. Time: 131.2117 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #370: GFLOPs: 11263.2984. Time: 132.4330 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #371: GFLOPs: 11460.8027. Time: 130.1508 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #372: GFLOPs: 11271.0833. Time: 132.3415 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #373: GFLOPs: 11478.1497. Time: 129.9541 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #374: GFLOPs: 11528.3921. Time: 129.3877 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #375: GFLOPs: 11601.2961. Time: 128.5746 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #376: GFLOPs: 12263.1239. Time: 121.6356 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #377: GFLOPs: 11686.8712. Time: 127.6331 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #378: GFLOPs: 11350.1806. Time: 131.4192 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #379: GFLOPs: 11566.5741. Time: 128.9606 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #380: GFLOPs: 11053.0492. Time: 134.9521 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #381: GFLOPs: 11413.2780. Time: 130.6927 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #382: GFLOPs: 730.2707. Time: 2042.5742 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #383: GFLOPs: 709.8317. Time: 2101.3885 us. Best GFLOPs: 12289.2934
2024-04-30 15:19:21 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #384: GFLOPs: 503.3750. Time: 2963.2622 us. Best GFLOPs: 12289.2934
2024-04-30 16:13:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 16:13:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 16:13:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:13:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2834 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3234 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3635 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:14:42 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 16:15:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:15:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:15:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:16:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 16:16:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9864  0.9858  0.9823  0.9774  0.9768  0.9763  0.9753  0.9752  0.9742  0.9740  0.9738  0.9734  0.9725  0.9720  0.9719  0.9714
[17 : 32]:	0.9711  0.9710  0.9710  0.9702  0.9693  0.9685  0.9672  0.9669  0.9669  0.9652  0.9643  0.9628  0.9623  0.9617  0.9617  0.9612
[33 : 48]:	0.9608  0.9604  0.9602  0.9601  0.9596  0.9594  0.9591  0.9587  0.9585  0.9584  0.9580  0.9560  0.9558  0.9557  0.9553  0.9541
[49 : 64]:	0.9534  0.9518  0.9518  0.9513  0.9510  0.9486  0.9486  0.9485  0.9472  0.9469  0.9467  0.9465  0.9465  0.9460  0.9456  0.9454
2024-04-30 16:16:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 16:16:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #385: GFLOPs: 12242.0650. Time: 121.8448 us. Best GFLOPs: 12289.2934
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #386: GFLOPs: 12219.8098. Time: 122.0667 us. Best GFLOPs: 12289.2934
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #387: GFLOPs: 12024.1489. Time: 124.0530 us. Best GFLOPs: 12289.2934
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #388: GFLOPs: 12116.7310. Time: 123.1052 us. Best GFLOPs: 12289.2934
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #389: GFLOPs: 12425.3278. Time: 120.0477 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #390: GFLOPs: 11891.6626. Time: 125.4351 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #391: GFLOPs: 12101.9822. Time: 123.2552 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #392: GFLOPs: 11913.9476. Time: 125.2005 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #393: GFLOPs: 12082.5861. Time: 123.4531 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #394: GFLOPs: 12173.5653. Time: 122.5304 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #395: GFLOPs: 12197.8315. Time: 122.2867 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #396: GFLOPs: 12203.7038. Time: 122.2278 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #397: GFLOPs: 11760.6396. Time: 126.8326 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #398: GFLOPs: 11863.7041. Time: 125.7307 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #399: GFLOPs: 11802.7720. Time: 126.3798 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #400: GFLOPs: 12042.4663. Time: 123.8643 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #401: GFLOPs: 11763.0691. Time: 126.8064 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #402: GFLOPs: 11201.3949. Time: 133.1649 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #403: GFLOPs: 11564.0894. Time: 128.9883 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #404: GFLOPs: 11197.4076. Time: 133.2123 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #405: GFLOPs: 11720.8241. Time: 127.2634 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #406: GFLOPs: 12188.5380. Time: 122.3799 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #407: GFLOPs: 11295.2818. Time: 132.0580 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #408: GFLOPs: 11867.1946. Time: 125.6937 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #409: GFLOPs: 11561.7948. Time: 129.0139 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #410: GFLOPs: 11986.9148. Time: 124.4384 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #411: GFLOPs: 11623.5276. Time: 128.3287 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #412: GFLOPs: 11716.9259. Time: 127.3058 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #413: GFLOPs: 11780.2531. Time: 126.6214 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #414: GFLOPs: 12088.0363. Time: 123.3974 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #415: GFLOPs: 12085.4633. Time: 123.4237 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #416: GFLOPs: 11217.0970. Time: 132.9784 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #417: GFLOPs: 12088.9147. Time: 123.3884 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #418: GFLOPs: 11999.1555. Time: 124.3114 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #419: GFLOPs: 12181.4352. Time: 122.4513 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #420: GFLOPs: 11725.4446. Time: 127.2133 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #421: GFLOPs: 12097.2028. Time: 123.3039 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #422: GFLOPs: 11827.1464. Time: 126.1194 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #423: GFLOPs: 12133.9663. Time: 122.9303 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #424: GFLOPs: 11582.1190. Time: 128.7875 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #425: GFLOPs: 11949.0290. Time: 124.8329 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #426: GFLOPs: 11652.0085. Time: 128.0150 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #427: GFLOPs: 11405.7719. Time: 130.7787 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #428: GFLOPs: 12261.9775. Time: 121.6469 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #429: GFLOPs: 11801.9382. Time: 126.3887 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #430: GFLOPs: 11977.8463. Time: 124.5326 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #431: GFLOPs: 12211.7572. Time: 122.1472 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #432: GFLOPs: 12111.8225. Time: 123.1551 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #433: GFLOPs: 11805.2655. Time: 126.3531 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #434: GFLOPs: 11683.8626. Time: 127.6660 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #435: GFLOPs: 11679.8190. Time: 127.7102 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #436: GFLOPs: 11709.8335. Time: 127.3829 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #437: GFLOPs: 11995.5941. Time: 124.3483 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #438: GFLOPs: 11647.4127. Time: 128.0655 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #439: GFLOPs: 11941.5433. Time: 124.9112 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #440: GFLOPs: 11652.3169. Time: 128.0116 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #441: GFLOPs: 11795.5445. Time: 126.4573 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #442: GFLOPs: 11427.8293. Time: 130.5263 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #443: GFLOPs: 12013.8180. Time: 124.1597 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #444: GFLOPs: 11945.1363. Time: 124.8736 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #445: GFLOPs: 11932.0392. Time: 125.0107 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #446: GFLOPs: 6898.6931. Time: 216.2195 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #447: GFLOPs: 125.5451. Time: 11881.2442 us. Best GFLOPs: 12425.3278
2024-04-30 16:17:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #448: GFLOPs: 6047.7173. Time: 246.6438 us. Best GFLOPs: 12425.3278
2024-04-30 17:07:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 17:07:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 17:08:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2420 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2824 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3227 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:08:55 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 17:09:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:09:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:10:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:10:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0001  0.9900  0.9883  0.9879  0.9864  0.9857  0.9838  0.9834  0.9833  0.9833  0.9832  0.9792  0.9781  0.9768  0.9767  0.9767
[17 : 32]:	0.9765  0.9754  0.9752  0.9751  0.9746  0.9735  0.9726  0.9726  0.9720  0.9716  0.9713  0.9707  0.9699  0.9697  0.9697  0.9697
[33 : 48]:	0.9689  0.9687  0.9686  0.9685  0.9684  0.9684  0.9679  0.9677  0.9669  0.9664  0.9662  0.9660  0.9658  0.9656  0.9655  0.9655
[49 : 64]:	0.9653  0.9652  0.9652  0.9649  0.9649  0.9647  0.9643  0.9636  0.9635  0.9635  0.9634  0.9632  0.9632  0.9632  0.9625  0.9624
2024-04-30 17:10:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 17:10:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #449: GFLOPs: 12476.9498. Time: 119.5510 us. Best GFLOPs: 12476.9498
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #450: GFLOPs: 12568.6424. Time: 118.6789 us. Best GFLOPs: 12568.6424
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #451: GFLOPs: 12529.4782. Time: 119.0498 us. Best GFLOPs: 12568.6424
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #452: GFLOPs: 10983.2050. Time: 135.8103 us. Best GFLOPs: 12568.6424
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #453: GFLOPs: 11261.5626. Time: 132.4534 us. Best GFLOPs: 12568.6424
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #454: GFLOPs: 12538.6073. Time: 118.9631 us. Best GFLOPs: 12568.6424
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #455: GFLOPs: 12621.6643. Time: 118.1803 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #456: GFLOPs: 10922.2326. Time: 136.5684 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #457: GFLOPs: 12222.0432. Time: 122.0444 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #458: GFLOPs: 10989.7307. Time: 135.7296 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #459: GFLOPs: 12296.0959. Time: 121.3094 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #460: GFLOPs: 12219.8592. Time: 122.0662 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #461: GFLOPs: 12222.9962. Time: 122.0349 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #462: GFLOPs: 12342.3994. Time: 120.8543 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #463: GFLOPs: 12138.2331. Time: 122.8871 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #464: GFLOPs: 12170.6419. Time: 122.5599 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #465: GFLOPs: 12375.0173. Time: 120.5358 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #466: GFLOPs: 12320.0622. Time: 121.0734 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #467: GFLOPs: 12300.3282. Time: 121.2677 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #468: GFLOPs: 12193.7022. Time: 122.3281 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #469: GFLOPs: 11888.7595. Time: 125.4657 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #470: GFLOPs: 12219.2314. Time: 122.0725 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #471: GFLOPs: 12180.2558. Time: 122.4631 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #472: GFLOPs: 12176.0125. Time: 122.5058 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #473: GFLOPs: 12239.9975. Time: 121.8654 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #474: GFLOPs: 12462.5016. Time: 119.6896 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #475: GFLOPs: 12056.3639. Time: 123.7216 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #476: GFLOPs: 12159.2686. Time: 122.6745 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #477: GFLOPs: 11928.3639. Time: 125.0492 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #478: GFLOPs: 12064.2006. Time: 123.6412 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #479: GFLOPs: 12062.7236. Time: 123.6563 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #480: GFLOPs: 12063.4510. Time: 123.6489 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #481: GFLOPs: 12207.5280. Time: 122.1895 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #482: GFLOPs: 12062.1420. Time: 123.6623 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #483: GFLOPs: 12457.9296. Time: 119.7335 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #484: GFLOPs: 12232.6226. Time: 121.9389 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #485: GFLOPs: 12180.4738. Time: 122.4609 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #486: GFLOPs: 11041.6055. Time: 135.0920 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #487: GFLOPs: 12141.0335. Time: 122.8587 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #488: GFLOPs: 12285.6597. Time: 121.4125 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #489: GFLOPs: 12078.8841. Time: 123.4909 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #490: GFLOPs: 12060.0197. Time: 123.6841 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #491: GFLOPs: 12118.3835. Time: 123.0884 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #492: GFLOPs: 11947.4133. Time: 124.8498 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #493: GFLOPs: 12074.2416. Time: 123.5384 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #494: GFLOPs: 12132.5564. Time: 122.9446 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #495: GFLOPs: 12051.4373. Time: 123.7721 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #496: GFLOPs: 12049.2317. Time: 123.7948 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #497: GFLOPs: 11336.9277. Time: 131.5729 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #498: GFLOPs: 12070.7434. Time: 123.5742 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #499: GFLOPs: 12070.4358. Time: 123.5773 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #500: GFLOPs: 12117.9501. Time: 123.0928 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #501: GFLOPs: 12113.2499. Time: 123.1405 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #502: GFLOPs: 12130.7590. Time: 122.9628 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #503: GFLOPs: 11897.1411. Time: 125.3774 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #504: GFLOPs: 11858.3565. Time: 125.7874 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #505: GFLOPs: 11855.9431. Time: 125.8130 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #506: GFLOPs: 11918.4423. Time: 125.1533 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #507: GFLOPs: 11906.1439. Time: 125.2826 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #508: GFLOPs: 11923.1874. Time: 125.1035 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #509: GFLOPs: 11952.8919. Time: 124.7926 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #510: GFLOPs: 418.7631. Time: 3561.9954 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #511: GFLOPs: 285.6304. Time: 5222.2465 us. Best GFLOPs: 12621.6643
2024-04-30 17:11:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #512: GFLOPs: 5703.2513. Time: 261.5407 us. Best GFLOPs: 12621.6643
2024-04-30 17:52:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 17:52:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 17:52:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:52:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:52:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:52:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:52:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:52:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:53:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 2826 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:53:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3232 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:53:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 3640 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:53:15 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 17:53:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 165 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:54:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 164 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:54:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4e5a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c7748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c7d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45bcf88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9a008b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c4408)]: 156 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c8bb8)]: 0 failure(s)
2024-04-30 17:55:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9752  0.9751  0.9736  0.9709  0.9709  0.9693  0.9691  0.9687  0.9686  0.9685  0.9678  0.9676  0.9666  0.9665  0.9662  0.9661
[17 : 32]:	0.9660  0.9655  0.9650  0.9650  0.9649  0.9644  0.9638  0.9632  0.9632  0.9632  0.9632  0.9631  0.9630  0.9629  0.9629  0.9627
[33 : 48]:	0.9625  0.9616  0.9614  0.9614  0.9614  0.9613  0.9610  0.9609  0.9609  0.9608  0.9606  0.9606  0.9602  0.9596  0.9596  0.9596
[49 : 64]:	0.9594  0.9592  0.9591  0.9591  0.9586  0.9586  0.9584  0.9581  0.9577  0.9575  0.9573  0.9568  0.9568  0.9566  0.9565  0.9563
2024-04-30 17:55:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 17:55:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #513: GFLOPs: 12478.1944. Time: 119.5391 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #514: GFLOPs: 12478.8204. Time: 119.5331 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #515: GFLOPs: 12504.5827. Time: 119.2868 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #516: GFLOPs: 12563.8385. Time: 118.7242 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #517: GFLOPs: 12510.4101. Time: 119.2313 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #518: GFLOPs: 12540.0458. Time: 118.9495 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #519: GFLOPs: 12499.3552. Time: 119.3367 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #520: GFLOPs: 12506.0241. Time: 119.2731 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #521: GFLOPs: 12448.6269. Time: 119.8230 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #522: GFLOPs: 12418.8274. Time: 120.1105 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #523: GFLOPs: 12525.9922. Time: 119.0830 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #524: GFLOPs: 11121.8539. Time: 134.1172 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #525: GFLOPs: 12283.7942. Time: 121.4309 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #526: GFLOPs: 12238.9195. Time: 121.8761 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #527: GFLOPs: 12566.4349. Time: 118.6997 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #528: GFLOPs: 12401.4968. Time: 120.2784 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #529: GFLOPs: 11101.0272. Time: 134.3688 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #530: GFLOPs: 12193.4744. Time: 122.3304 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #531: GFLOPs: 12255.5360. Time: 121.7109 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #532: GFLOPs: 12249.9128. Time: 121.7668 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #533: GFLOPs: 12431.8397. Time: 119.9848 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #534: GFLOPs: 12590.3565. Time: 118.4742 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #535: GFLOPs: 12328.1443. Time: 120.9941 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #536: GFLOPs: 12316.7403. Time: 121.1061 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #537: GFLOPs: 12315.8370. Time: 121.1150 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #538: GFLOPs: 12418.8708. Time: 120.1101 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #539: GFLOPs: 12472.9645. Time: 119.5892 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #540: GFLOPs: 12275.7197. Time: 121.5108 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #541: GFLOPs: 12284.5618. Time: 121.4233 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #542: GFLOPs: 12359.6923. Time: 120.6852 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #543: GFLOPs: 12358.3900. Time: 120.6979 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #544: GFLOPs: 11720.6398. Time: 127.2654 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #545: GFLOPs: 12225.6246. Time: 122.0087 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #546: GFLOPs: 12297.5105. Time: 121.2955 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #547: GFLOPs: 12330.1842. Time: 120.9740 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #548: GFLOPs: 12470.6990. Time: 119.6109 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #549: GFLOPs: 12066.8406. Time: 123.6141 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #550: GFLOPs: 12248.3018. Time: 121.7828 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #551: GFLOPs: 10242.1933. Time: 145.6360 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #552: GFLOPs: 12058.7743. Time: 123.6968 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #553: GFLOPs: 12067.9454. Time: 123.6028 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #554: GFLOPs: 12117.9098. Time: 123.0932 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #555: GFLOPs: 12071.3571. Time: 123.5679 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #556: GFLOPs: 12056.3620. Time: 123.7216 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #557: GFLOPs: 12254.8988. Time: 121.7172 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #558: GFLOPs: 12239.0610. Time: 121.8747 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #559: GFLOPs: 12198.0539. Time: 122.2844 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #560: GFLOPs: 12123.6612. Time: 123.0348 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #561: GFLOPs: 12415.0566. Time: 120.1470 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #562: GFLOPs: 12142.8069. Time: 122.8408 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #563: GFLOPs: 12203.0926. Time: 122.2339 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #564: GFLOPs: 12326.4031. Time: 121.0111 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #565: GFLOPs: 12119.7722. Time: 123.0743 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #566: GFLOPs: 12144.6668. Time: 122.8220 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #567: GFLOPs: 12048.8965. Time: 123.7982 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #568: GFLOPs: 12124.8345. Time: 123.0229 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #569: GFLOPs: 12157.7476. Time: 122.6898 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #570: GFLOPs: 12149.4476. Time: 122.7737 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #571: GFLOPs: 10913.9035. Time: 136.6727 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #572: GFLOPs: 12202.1521. Time: 122.2434 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #573: GFLOPs: 12291.2917. Time: 121.3568 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #574: GFLOPs: 117.4570. Time: 12699.3917 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #575: GFLOPs: 3556.8889. Time: 419.3643 us. Best GFLOPs: 12621.6643
2024-04-30 17:56:10 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #576: GFLOPs: 17.5979. Time: 84761.9423 us. Best GFLOPs: 12621.6643
