2024-04-30 10:09:55 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2"
2024-04-30 10:09:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(784), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(128), T.int64(784), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 10:09:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 10:09:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(36), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(5376))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(5376) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 6, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[8, 1, 16, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 2, 14, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 10:09:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(36), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(5376))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(5376) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 6, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[8, 1, 16, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 2, 14, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:09:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(36), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32256)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(5376))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(5376) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 6, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[8, 1, 16, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 2, 14, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:17:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 10:17:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 10:18:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 504 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2516 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:18:45 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 10:19:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 152 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:19:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:19:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:20:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 10:20:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9984  0.9982  0.9965  0.9962  0.9905  0.9902  0.9902  0.9897  0.9897  0.9894  0.9891  0.9890  0.9890  0.9886  0.9877
[17 : 32]:	0.9872  0.9870  0.9868  0.9864  0.9855  0.9851  0.9849  0.9848  0.9836  0.9820  0.9816  0.9812  0.9810  0.9807  0.9807  0.9801
[33 : 48]:	0.9791  0.9785  0.9780  0.9777  0.9773  0.9765  0.9743  0.9741  0.9735  0.9729  0.9725  0.9716  0.9703  0.9702  0.9691  0.9683
[49 : 64]:	0.9682  0.9675  0.9672  0.9664  0.9657  0.9650  0.9648  0.9643  0.9637  0.9630  0.9616  0.9604  0.9599  0.9598  0.9589  0.9586
2024-04-30 10:20:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 10:20:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #1: GFLOPs: 3963.5705. Time: 210.4481 us. Best GFLOPs: 3963.5705
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #2: GFLOPs: 6921.3394. Time: 120.5151 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #3: GFLOPs: 746.9443. Time: 1116.7175 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #4: GFLOPs: 2903.2328. Time: 287.3093 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #5: GFLOPs: 1257.2532. Time: 663.4509 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #6: GFLOPs: 1003.8716. Time: 830.9089 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #7: GFLOPs: 179.2569. Time: 4653.2423 us. Best GFLOPs: 6921.3394
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #8: GFLOPs: 8013.4476. Time: 104.0908 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #9: GFLOPs: 7158.4493. Time: 116.5233 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #10: GFLOPs: 5608.9691. Time: 148.7129 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #11: GFLOPs: 226.1791. Time: 3687.8994 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #12: GFLOPs: 6647.1152. Time: 125.4869 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #13: GFLOPs: 6538.2851. Time: 127.5756 us. Best GFLOPs: 8013.4476
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #14: GFLOPs: 8376.7988. Time: 99.5757 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #15: GFLOPs: 7915.2214. Time: 105.3825 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #16: GFLOPs: 4166.6561. Time: 200.1907 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #17: GFLOPs: 5882.6910. Time: 141.7932 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #18: GFLOPs: 6806.1925. Time: 122.5540 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #19: GFLOPs: 7932.7391. Time: 105.1498 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #20: GFLOPs: 6769.2839. Time: 123.2222 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #21: GFLOPs: 870.3306. Time: 958.4012 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #22: GFLOPs: 229.1906. Time: 3639.4421 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #23: GFLOPs: 5372.5441. Time: 155.2571 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #24: GFLOPs: 7887.6694. Time: 105.7506 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #25: GFLOPs: 6450.8852. Time: 129.3041 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #26: GFLOPs: 72.8123. Time: 11455.8291 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #27: GFLOPs: 410.1550. Time: 2033.6845 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #28: GFLOPs: 6259.6293. Time: 133.2548 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #29: GFLOPs: 7954.3756. Time: 104.8638 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #30: GFLOPs: 4254.6630. Time: 196.0498 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #31: GFLOPs: 188.2277. Time: 4431.4714 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #32: GFLOPs: 1820.0506. Time: 458.2982 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #33: GFLOPs: 3275.1000. Time: 254.6871 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #34: GFLOPs: 4522.4543. Time: 184.4410 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #35: GFLOPs: 595.7104. Time: 1400.2204 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #36: GFLOPs: 796.3349. Time: 1047.4560 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #37: GFLOPs: 3256.5701. Time: 256.1363 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #38: GFLOPs: 591.6360. Time: 1409.8632 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #39: GFLOPs: 3026.4105. Time: 275.6156 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #40: GFLOPs: 960.0347. Time: 868.8497 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #41: GFLOPs: 2168.0018. Time: 384.7441 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #42: GFLOPs: 5938.9111. Time: 140.4510 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #43: GFLOPs: 7102.3565. Time: 117.4435 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #44: GFLOPs: 2186.2887. Time: 381.5259 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #45: GFLOPs: 2548.7488. Time: 327.2687 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #46: GFLOPs: 494.5564. Time: 1686.6142 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #47: GFLOPs: 116.3004. Time: 7172.1692 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #48: GFLOPs: 8249.5870. Time: 101.1112 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #49: GFLOPs: 1276.4615. Time: 653.4673 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #50: GFLOPs: 113.4075. Time: 7355.1188 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #51: GFLOPs: 4212.5704. Time: 198.0088 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #52: GFLOPs: 7950.9851. Time: 104.9085 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #53: GFLOPs: 6492.9440. Time: 128.4665 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #54: GFLOPs: 6432.2249. Time: 129.6792 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #55: GFLOPs: 4998.4511. Time: 166.8769 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #56: GFLOPs: 877.9969. Time: 950.0327 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #57: GFLOPs: 3714.6442. Time: 224.5507 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #58: GFLOPs: 4032.8882. Time: 206.8309 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #59: GFLOPs: 487.1076. Time: 1712.4057 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #60: GFLOPs: 183.1556. Time: 4554.1933 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #61: GFLOPs: 109.3034. Time: 7631.2866 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #62: GFLOPs: 6010.6586. Time: 138.7744 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #63: GFLOPs: 2287.5083. Time: 364.6438 us. Best GFLOPs: 8376.7988
2024-04-30 10:50:58 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #64: GFLOPs: 276.5945. Time: 3015.6993 us. Best GFLOPs: 8376.7988
2024-04-30 11:59:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 11:59:27 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-30 11:59:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 442 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 11:59:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 878 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 11:59:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1320 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 11:59:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1764 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:00:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:00:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2650 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:00:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3087 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:00:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3525 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:00:30 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-30 12:00:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:01:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:01:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:01:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 12:02:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0434  1.0385  1.0370  1.0186  1.0158  1.0153  0.9980  0.9954  0.9903  0.9843  0.9809  0.9807  0.9793  0.9754  0.9754  0.9754
[17 : 32]:	0.9729  0.9728  0.9717  0.9712  0.9698  0.9693  0.9692  0.9689  0.9674  0.9674  0.9673  0.9673  0.9661  0.9652  0.9652  0.9640
[33 : 48]:	0.9638  0.9629  0.9615  0.9602  0.9602  0.9596  0.9594  0.9593  0.9581  0.9578  0.9566  0.9563  0.9560  0.9556  0.9549  0.9542
[49 : 64]:	0.9542  0.9536  0.9535  0.9530  0.9526  0.9519  0.9519  0.9517  0.9516  0.9504  0.9504  0.9497  0.9491  0.9461  0.9453  0.9448
2024-04-30 12:02:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 12:02:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #65: GFLOPs: 7584.3573. Time: 109.9798 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #66: GFLOPs: 7764.9599. Time: 107.4218 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #67: GFLOPs: 7666.1904. Time: 108.8058 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #68: GFLOPs: 7664.1921. Time: 108.8341 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #69: GFLOPs: 5893.3401. Time: 141.5370 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #70: GFLOPs: 5771.2770. Time: 144.5305 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #71: GFLOPs: 5724.8703. Time: 145.7021 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #72: GFLOPs: 5963.3531. Time: 139.8753 us. Best GFLOPs: 8376.7988
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #73: GFLOPs: 8800.8353. Time: 94.7780 us. Best GFLOPs: 8800.8353
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #74: GFLOPs: 6340.3811. Time: 131.5577 us. Best GFLOPs: 8800.8353
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #75: GFLOPs: 8469.7882. Time: 98.4825 us. Best GFLOPs: 8800.8353
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #76: GFLOPs: 8362.7835. Time: 99.7426 us. Best GFLOPs: 8800.8353
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #77: GFLOPs: 8868.8225. Time: 94.0515 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #78: GFLOPs: 8347.2185. Time: 99.9286 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #79: GFLOPs: 8573.4146. Time: 97.2921 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #80: GFLOPs: 8449.6015. Time: 98.7178 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #81: GFLOPs: 8411.2888. Time: 99.1674 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #82: GFLOPs: 8663.8863. Time: 96.2762 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #83: GFLOPs: 7768.8832. Time: 107.3675 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #84: GFLOPs: 8439.8512. Time: 98.8318 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #85: GFLOPs: 7779.3654. Time: 107.2229 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #86: GFLOPs: 8514.5615. Time: 97.9646 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #87: GFLOPs: 8410.2034. Time: 99.1802 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #88: GFLOPs: 8813.0070. Time: 94.6471 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #89: GFLOPs: 8256.5446. Time: 101.0260 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #90: GFLOPs: 8045.9494. Time: 103.6703 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #91: GFLOPs: 8401.5566. Time: 99.2823 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #92: GFLOPs: 8687.8127. Time: 96.0110 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #93: GFLOPs: 8105.1545. Time: 102.9130 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #94: GFLOPs: 7634.8672. Time: 109.2522 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #95: GFLOPs: 8126.5215. Time: 102.6424 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #96: GFLOPs: 8189.9849. Time: 101.8471 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #97: GFLOPs: 8146.8697. Time: 102.3861 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #98: GFLOPs: 8499.7563. Time: 98.1353 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #99: GFLOPs: 8732.1932. Time: 95.5231 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #100: GFLOPs: 8429.9778. Time: 98.9476 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #101: GFLOPs: 8076.9771. Time: 103.2720 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #102: GFLOPs: 8172.8670. Time: 102.0604 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #103: GFLOPs: 8382.2116. Time: 99.5114 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #104: GFLOPs: 8432.5817. Time: 98.9170 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #105: GFLOPs: 8334.7212. Time: 100.0784 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #106: GFLOPs: 8608.1171. Time: 96.8999 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #107: GFLOPs: 7762.3145. Time: 107.4584 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #108: GFLOPs: 8122.6256. Time: 102.6916 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #109: GFLOPs: 8357.4406. Time: 99.8064 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #110: GFLOPs: 8076.6482. Time: 103.2762 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #111: GFLOPs: 8100.0921. Time: 102.9773 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #112: GFLOPs: 8414.6525. Time: 99.1278 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #113: GFLOPs: 8540.9098. Time: 97.6624 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #114: GFLOPs: 7880.6962. Time: 105.8442 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #115: GFLOPs: 8122.4615. Time: 102.6937 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #116: GFLOPs: 8562.3843. Time: 97.4175 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #117: GFLOPs: 8591.0809. Time: 97.0921 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #118: GFLOPs: 8085.7820. Time: 103.1596 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #119: GFLOPs: 8386.2533. Time: 99.4635 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #120: GFLOPs: 7260.8848. Time: 114.8794 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #121: GFLOPs: 7825.6482. Time: 106.5887 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #122: GFLOPs: 7617.7227. Time: 109.4981 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #123: GFLOPs: 7616.3099. Time: 109.5184 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #124: GFLOPs: 7988.4259. Time: 104.4168 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #125: GFLOPs: 4891.3373. Time: 170.5312 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #126: GFLOPs: 151.2247. Time: 5515.8028 us. Best GFLOPs: 8868.8225
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + p_3_init * T.int64(4) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4704))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4704) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(784), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0)
                                    v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1536))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + p_3 * T.int64(4) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(56) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 8, 16, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 28, 7, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 168, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 168], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 12:03:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #128: GFLOPs: 366.0229. Time: 2278.8897 us. Best GFLOPs: 8868.8225
2024-04-30 13:13:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 13:13:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 13:13:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:13:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:13:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:13:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1611 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:14:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2013 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:14:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2412 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:14:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2812 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:14:19 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-30 13:14:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:15:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:15:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:15:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 13:15:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0752  1.0573  1.0485  1.0144  1.0080  0.9997  0.9944  0.9927  0.9911  0.9869  0.9865  0.9798  0.9789  0.9764  0.9762  0.9760
[17 : 32]:	0.9759  0.9756  0.9725  0.9725  0.9720  0.9720  0.9720  0.9720  0.9716  0.9716  0.9716  0.9716  0.9716  0.9716  0.9716  0.9716
[33 : 48]:	0.9710  0.9699  0.9692  0.9681  0.9677  0.9675  0.9673  0.9673  0.9673  0.9673  0.9671  0.9669  0.9669  0.9668  0.9663  0.9656
[49 : 64]:	0.9655  0.9654  0.9654  0.9651  0.9648  0.9636  0.9635  0.9631  0.9624  0.9621  0.9618  0.9614  0.9612  0.9612  0.9611  0.9610
2024-04-30 13:15:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 13:15:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #129: GFLOPs: 7112.5923. Time: 117.2745 us. Best GFLOPs: 8868.8225
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #130: GFLOPs: 7085.0373. Time: 117.7306 us. Best GFLOPs: 8868.8225
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #131: GFLOPs: 7001.9522. Time: 119.1276 us. Best GFLOPs: 8868.8225
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #132: GFLOPs: 9165.4491. Time: 91.0076 us. Best GFLOPs: 9165.4491
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #133: GFLOPs: 9338.5643. Time: 89.3206 us. Best GFLOPs: 9338.5643
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #134: GFLOPs: 9071.7425. Time: 91.9477 us. Best GFLOPs: 9338.5643
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #135: GFLOPs: 9049.8515. Time: 92.1701 us. Best GFLOPs: 9338.5643
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #136: GFLOPs: 9539.8988. Time: 87.4355 us. Best GFLOPs: 9539.8988
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #137: GFLOPs: 9115.5793. Time: 91.5055 us. Best GFLOPs: 9539.8988
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #138: GFLOPs: 9284.4073. Time: 89.8416 us. Best GFLOPs: 9539.8988
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #139: GFLOPs: 9248.0973. Time: 90.1943 us. Best GFLOPs: 9539.8988
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #140: GFLOPs: 8753.7881. Time: 95.2874 us. Best GFLOPs: 9539.8988
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #141: GFLOPs: 9754.0495. Time: 85.5158 us. Best GFLOPs: 9754.0495
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #142: GFLOPs: 8759.5347. Time: 95.2249 us. Best GFLOPs: 9754.0495
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #143: GFLOPs: 9031.5883. Time: 92.3565 us. Best GFLOPs: 9754.0495
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #144: GFLOPs: 8807.8231. Time: 94.7028 us. Best GFLOPs: 9754.0495
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #145: GFLOPs: 9895.6208. Time: 84.2924 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #146: GFLOPs: 8753.4215. Time: 95.2914 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #147: GFLOPs: 9240.3134. Time: 90.2703 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #148: GFLOPs: 9642.4694. Time: 86.5054 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #149: GFLOPs: 8703.5491. Time: 95.8374 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #150: GFLOPs: 8633.2214. Time: 96.6181 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #151: GFLOPs: 8755.5006. Time: 95.2688 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #152: GFLOPs: 8676.9616. Time: 96.1311 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #153: GFLOPs: 8750.6507. Time: 95.3216 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #154: GFLOPs: 8738.3119. Time: 95.4562 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #155: GFLOPs: 8738.0411. Time: 95.4591 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #156: GFLOPs: 8692.0238. Time: 95.9645 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #157: GFLOPs: 8742.7212. Time: 95.4080 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #158: GFLOPs: 8800.1603. Time: 94.7853 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #159: GFLOPs: 8847.2726. Time: 94.2806 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #160: GFLOPs: 8748.8962. Time: 95.3407 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #161: GFLOPs: 8142.4100. Time: 102.4421 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #162: GFLOPs: 8898.8035. Time: 93.7346 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #163: GFLOPs: 9632.3504. Time: 86.5963 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #164: GFLOPs: 9234.4396. Time: 90.3277 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #165: GFLOPs: 8695.3797. Time: 95.9275 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #166: GFLOPs: 8700.4752. Time: 95.8713 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #167: GFLOPs: 8472.3206. Time: 98.4531 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #168: GFLOPs: 8531.5194. Time: 97.7699 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #169: GFLOPs: 8458.7500. Time: 98.6110 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #170: GFLOPs: 8648.2892. Time: 96.4498 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #171: GFLOPs: 9379.7971. Time: 88.9279 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #172: GFLOPs: 7783.3623. Time: 107.1678 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #173: GFLOPs: 8741.0079. Time: 95.4267 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #174: GFLOPs: 8729.7325. Time: 95.5500 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #175: GFLOPs: 8684.6985. Time: 96.0455 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #176: GFLOPs: 8467.7955. Time: 98.5057 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #177: GFLOPs: 9591.9129. Time: 86.9614 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #178: GFLOPs: 8581.3000. Time: 97.2027 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #179: GFLOPs: 8474.4182. Time: 98.4287 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #180: GFLOPs: 9748.6328. Time: 85.5634 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #181: GFLOPs: 9265.4560. Time: 90.0253 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #182: GFLOPs: 8727.7277. Time: 95.5719 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #183: GFLOPs: 9434.0933. Time: 88.4161 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #184: GFLOPs: 9138.0421. Time: 91.2806 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #185: GFLOPs: 8484.0694. Time: 98.3167 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #186: GFLOPs: 9598.0440. Time: 86.9058 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #187: GFLOPs: 9090.7967. Time: 91.7550 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #188: GFLOPs: 8270.9465. Time: 100.8501 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #189: GFLOPs: 8572.6007. Time: 97.3014 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #190: GFLOPs: 499.0408. Time: 1671.4582 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #191: GFLOPs: 4142.8423. Time: 201.3414 us. Best GFLOPs: 9895.6208
2024-04-30 13:16:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #192: GFLOPs: 97.0330. Time: 8596.3090 us. Best GFLOPs: 9895.6208
2024-04-30 14:51:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 14:51:33 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 14:51:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:51:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 808 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:51:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1623 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2026 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2830 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3233 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3635 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:52:35 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 14:52:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:53:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:53:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:54:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 14:54:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0165  1.0117  0.9991  0.9943  0.9936  0.9875  0.9863  0.9861  0.9842  0.9771  0.9767  0.9736  0.9727  0.9710  0.9689  0.9685
[17 : 32]:	0.9678  0.9672  0.9660  0.9656  0.9620  0.9582  0.9580  0.9578  0.9571  0.9566  0.9566  0.9549  0.9538  0.9519  0.9519  0.9508
[33 : 48]:	0.9503  0.9493  0.9444  0.9441  0.9432  0.9394  0.9385  0.9384  0.9377  0.9361  0.9354  0.9339  0.9336  0.9333  0.9333  0.9333
[49 : 64]:	0.9332  0.9332  0.9332  0.9332  0.9331  0.9329  0.9325  0.9322  0.9322  0.9322  0.9321  0.9321  0.9321  0.9321  0.9319  0.9319
2024-04-30 14:54:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 14:54:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #193: GFLOPs: 9737.3149. Time: 85.6628 us. Best GFLOPs: 9895.6208
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #194: GFLOPs: 9802.4255. Time: 85.0938 us. Best GFLOPs: 9895.6208
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #195: GFLOPs: 9027.0937. Time: 92.4025 us. Best GFLOPs: 9895.6208
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #196: GFLOPs: 9707.0667. Time: 85.9298 us. Best GFLOPs: 9895.6208
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #197: GFLOPs: 10203.4572. Time: 81.7493 us. Best GFLOPs: 10203.4572
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #198: GFLOPs: 9748.8417. Time: 85.5615 us. Best GFLOPs: 10203.4572
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #199: GFLOPs: 9525.1516. Time: 87.5709 us. Best GFLOPs: 10203.4572
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #200: GFLOPs: 10721.4740. Time: 77.7995 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #201: GFLOPs: 9610.3971. Time: 86.7941 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #202: GFLOPs: 9528.9609. Time: 87.5359 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #203: GFLOPs: 9534.6641. Time: 87.4835 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #204: GFLOPs: 9536.3356. Time: 87.4682 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #205: GFLOPs: 9534.9556. Time: 87.4808 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #206: GFLOPs: 9706.1571. Time: 85.9378 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #207: GFLOPs: 9684.0603. Time: 86.1339 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #208: GFLOPs: 9736.2540. Time: 85.6722 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #209: GFLOPs: 9106.5918. Time: 91.5958 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #210: GFLOPs: 9106.8731. Time: 91.5930 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #211: GFLOPs: 9669.7468. Time: 86.2614 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #212: GFLOPs: 9966.6376. Time: 83.6918 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #213: GFLOPs: 9553.2384. Time: 87.3134 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #214: GFLOPs: 9124.5039. Time: 91.4160 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #215: GFLOPs: 9546.4022. Time: 87.3759 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #216: GFLOPs: 9023.1779. Time: 92.4426 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #217: GFLOPs: 10435.8547. Time: 79.9288 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #218: GFLOPs: 9665.0101. Time: 86.3037 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #219: GFLOPs: 9665.3713. Time: 86.3004 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #220: GFLOPs: 9656.0352. Time: 86.3839 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #221: GFLOPs: 10028.7810. Time: 83.1732 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #222: GFLOPs: 9259.8784. Time: 90.0796 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #223: GFLOPs: 9275.5441. Time: 89.9274 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #224: GFLOPs: 10030.6701. Time: 83.1575 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #225: GFLOPs: 9380.3417. Time: 88.9228 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #226: GFLOPs: 9331.5176. Time: 89.3880 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #227: GFLOPs: 9203.7890. Time: 90.6285 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #228: GFLOPs: 10077.9691. Time: 82.7673 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #229: GFLOPs: 8469.2903. Time: 98.4883 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #230: GFLOPs: 9133.0445. Time: 91.3305 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #231: GFLOPs: 9659.7033. Time: 86.3511 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #232: GFLOPs: 8280.0160. Time: 100.7396 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #233: GFLOPs: 9719.0215. Time: 85.8241 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #234: GFLOPs: 9025.5077. Time: 92.4187 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #235: GFLOPs: 9087.3316. Time: 91.7900 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #236: GFLOPs: 9299.2767. Time: 89.6979 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #237: GFLOPs: 9631.0518. Time: 86.6080 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #238: GFLOPs: 9164.6001. Time: 91.0161 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #239: GFLOPs: 9121.3991. Time: 91.4471 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #240: GFLOPs: 9164.9509. Time: 91.0126 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #241: GFLOPs: 9064.6775. Time: 92.0194 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #242: GFLOPs: 9101.0130. Time: 91.6520 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #243: GFLOPs: 8467.6236. Time: 98.5077 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #244: GFLOPs: 8959.3703. Time: 93.1009 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #245: GFLOPs: 9067.7270. Time: 91.9884 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #246: GFLOPs: 9821.9544. Time: 84.9246 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #247: GFLOPs: 9048.4917. Time: 92.1840 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #248: GFLOPs: 9074.8277. Time: 91.9164 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #249: GFLOPs: 9080.5086. Time: 91.8589 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #250: GFLOPs: 9627.5252. Time: 86.6397 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #251: GFLOPs: 9080.4182. Time: 91.8598 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #252: GFLOPs: 9027.5743. Time: 92.3976 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #253: GFLOPs: 9167.9629. Time: 90.9827 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #254: GFLOPs: 3887.1516. Time: 214.5854 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #255: GFLOPs: 633.8038. Time: 1316.0632 us. Best GFLOPs: 10721.4740
2024-04-30 14:55:14 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #256: GFLOPs: 439.8224. Time: 1896.5060 us. Best GFLOPs: 10721.4740
2024-04-30 16:05:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 16:05:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 16:05:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:05:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2828 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3231 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 3632 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:06:47 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-30 16:07:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:07:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:07:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:08:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 16:08:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9947  0.9839  0.9810  0.9808  0.9798  0.9797  0.9769  0.9768  0.9713  0.9568  0.9557  0.9476  0.9475  0.9464  0.9438  0.9431
[17 : 32]:	0.9418  0.9414  0.9414  0.9412  0.9406  0.9396  0.9391  0.9389  0.9382  0.9377  0.9374  0.9363  0.9363  0.9357  0.9330  0.9324
[33 : 48]:	0.9316  0.9312  0.9310  0.9305  0.9301  0.9270  0.9250  0.9250  0.9249  0.9219  0.9196  0.9196  0.9189  0.9187  0.9179  0.9175
[49 : 64]:	0.9175  0.9168  0.9167  0.9167  0.9161  0.9161  0.9155  0.9150  0.9147  0.9144  0.9140  0.9138  0.9137  0.9131  0.9129  0.9093
2024-04-30 16:08:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 16:08:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #257: GFLOPs: 10475.3781. Time: 79.6273 us. Best GFLOPs: 10721.4740
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #258: GFLOPs: 10530.4349. Time: 79.2110 us. Best GFLOPs: 10721.4740
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #259: GFLOPs: 10625.0396. Time: 78.5057 us. Best GFLOPs: 10721.4740
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #260: GFLOPs: 10336.4802. Time: 80.6973 us. Best GFLOPs: 10721.4740
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #261: GFLOPs: 10725.9574. Time: 77.7670 us. Best GFLOPs: 10725.9574
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #262: GFLOPs: 10779.8509. Time: 77.3782 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #263: GFLOPs: 10623.2443. Time: 78.5189 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #264: GFLOPs: 10729.2826. Time: 77.7429 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #265: GFLOPs: 9686.9535. Time: 86.1082 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #266: GFLOPs: 9825.2666. Time: 84.8960 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #267: GFLOPs: 9910.3187. Time: 84.1674 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #268: GFLOPs: 9554.5399. Time: 87.3015 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #269: GFLOPs: 9570.5091. Time: 87.1558 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #270: GFLOPs: 9554.4986. Time: 87.3019 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #271: GFLOPs: 9882.8448. Time: 84.4014 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #272: GFLOPs: 10628.8724. Time: 78.4774 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #273: GFLOPs: 9578.2745. Time: 87.0852 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #274: GFLOPs: 10134.0044. Time: 82.3096 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #275: GFLOPs: 10738.1126. Time: 77.6790 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #276: GFLOPs: 9897.9682. Time: 84.2724 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #277: GFLOPs: 9882.6256. Time: 84.4033 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #278: GFLOPs: 9907.6768. Time: 84.1899 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #279: GFLOPs: 10362.9372. Time: 80.4913 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #280: GFLOPs: 9908.6175. Time: 84.1819 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #281: GFLOPs: 10383.2363. Time: 80.3339 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #282: GFLOPs: 10538.7086. Time: 79.1488 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #283: GFLOPs: 9998.7316. Time: 83.4232 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #284: GFLOPs: 9910.6890. Time: 84.1643 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #285: GFLOPs: 9909.7037. Time: 84.1726 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #286: GFLOPs: 9909.8016. Time: 84.1718 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #287: GFLOPs: 10011.6925. Time: 83.3152 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #288: GFLOPs: 9922.8439. Time: 84.0612 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #289: GFLOPs: 9824.9471. Time: 84.8988 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #290: GFLOPs: 9752.6742. Time: 85.5279 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #291: GFLOPs: 10406.8941. Time: 80.1513 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #292: GFLOPs: 9793.0790. Time: 85.1750 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #293: GFLOPs: 9876.2888. Time: 84.4574 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #294: GFLOPs: 9492.0397. Time: 87.8764 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #295: GFLOPs: 10732.7145. Time: 77.7181 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #296: GFLOPs: 10419.7875. Time: 80.0521 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #297: GFLOPs: 9890.0395. Time: 84.3400 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #298: GFLOPs: 10220.5773. Time: 81.6124 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #299: GFLOPs: 9854.0659. Time: 84.6479 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #300: GFLOPs: 9849.8388. Time: 84.6842 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #301: GFLOPs: 9825.8035. Time: 84.8914 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #302: GFLOPs: 9833.2838. Time: 84.8268 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #303: GFLOPs: 9656.7256. Time: 86.3777 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #304: GFLOPs: 10562.6050. Time: 78.9697 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #305: GFLOPs: 10253.2736. Time: 81.3521 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #306: GFLOPs: 9930.1633. Time: 83.9992 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #307: GFLOPs: 10335.1854. Time: 80.7074 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #308: GFLOPs: 9646.8067. Time: 86.4665 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #309: GFLOPs: 9850.7092. Time: 84.6767 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #310: GFLOPs: 9844.2294. Time: 84.7325 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #311: GFLOPs: 10062.4711. Time: 82.8947 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #312: GFLOPs: 9953.5163. Time: 83.8021 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #313: GFLOPs: 9879.9749. Time: 84.4259 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #314: GFLOPs: 9645.2780. Time: 86.4802 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #315: GFLOPs: 9901.0924. Time: 84.2458 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #316: GFLOPs: 9894.6034. Time: 84.3011 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #317: GFLOPs: 9666.7025. Time: 86.2886 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #318: GFLOPs: 131.4959. Time: 6343.3599 us. Best GFLOPs: 10779.8509
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #319: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(32) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_1_nu_1_co_1_p_1_fused * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2352))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2352) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(37)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1536))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(32) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_1_nu_1_co_1_p_1_fused * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(32), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_1_nu_1_co_1_p_1_fused * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 2, 4, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 2, 7, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 16:09:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #320: GFLOPs: 9886.9591. Time: 84.3663 us. Best GFLOPs: 10779.8509
2024-04-30 17:16:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 17:16:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 17:16:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:16:59 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 17:17:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 57 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:17:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 58 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:17:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:18:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bd598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6c8128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe6c9378)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4e70e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9d265a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a23478)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe6c2fc8)]: 0 failure(s)
2024-04-30 17:18:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9910  0.9910  0.9910  0.9894  0.9893  0.9893  0.9871  0.9831  0.9825  0.9819  0.9804  0.9788  0.9788  0.9788  0.9781  0.9714
[17 : 32]:	0.9714  0.9707  0.9697  0.9658  0.9619  0.9608  0.9589  0.9579  0.9574  0.9530  0.9519  0.9508  0.9502  0.9500  0.9498  0.9497
[33 : 48]:	0.9492  0.9485  0.9484  0.9481  0.9471  0.9470  0.9466  0.9465  0.9464  0.9449  0.9446  0.9444  0.9426  0.9416  0.9416  0.9416
[49 : 64]:	0.9415  0.9413  0.9413  0.9407  0.9401  0.9395  0.9388  0.9385  0.9385  0.9377  0.9375  0.9367  0.9367  0.9366  0.9365  0.9365
2024-04-30 17:18:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 17:18:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #321: GFLOPs: 10796.2887. Time: 77.2604 us. Best GFLOPs: 10796.2887
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #322: GFLOPs: 10723.4373. Time: 77.7853 us. Best GFLOPs: 10796.2887
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #323: GFLOPs: 10805.0788. Time: 77.1976 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #324: GFLOPs: 10628.3637. Time: 78.4811 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #325: GFLOPs: 10757.5684. Time: 77.5385 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #326: GFLOPs: 10710.5957. Time: 77.8786 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #327: GFLOPs: 10802.8382. Time: 77.2136 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #328: GFLOPs: 10733.8434. Time: 77.7099 us. Best GFLOPs: 10805.0788
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #329: GFLOPs: 10857.2612. Time: 76.8265 us. Best GFLOPs: 10857.2612
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #330: GFLOPs: 10705.5932. Time: 77.9150 us. Best GFLOPs: 10857.2612
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #331: GFLOPs: 10673.9100. Time: 78.1462 us. Best GFLOPs: 10857.2612
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #332: GFLOPs: 10759.5067. Time: 77.5245 us. Best GFLOPs: 10857.2612
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #333: GFLOPs: 10889.5967. Time: 76.5984 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #334: GFLOPs: 10550.0327. Time: 79.0638 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #335: GFLOPs: 10744.4666. Time: 77.6331 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #336: GFLOPs: 10802.3075. Time: 77.2174 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #337: GFLOPs: 10805.2410. Time: 77.1964 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #338: GFLOPs: 10802.9413. Time: 77.2128 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #339: GFLOPs: 10780.0857. Time: 77.3765 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #340: GFLOPs: 10672.5717. Time: 78.1560 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #341: GFLOPs: 10838.0143. Time: 76.9630 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #342: GFLOPs: 10518.7441. Time: 79.2990 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #343: GFLOPs: 10347.9345. Time: 80.6080 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #344: GFLOPs: 10000.3301. Time: 83.4098 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #345: GFLOPs: 10492.9501. Time: 79.4939 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #346: GFLOPs: 10456.8298. Time: 79.7685 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #347: GFLOPs: 10571.6560. Time: 78.9021 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #348: GFLOPs: 10639.6994. Time: 78.3975 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #349: GFLOPs: 10575.1633. Time: 78.8759 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #350: GFLOPs: 10649.2268. Time: 78.3274 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #351: GFLOPs: 10706.4187. Time: 77.9089 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #352: GFLOPs: 10419.3848. Time: 80.0552 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #353: GFLOPs: 10506.7064. Time: 79.3898 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #354: GFLOPs: 10681.3382. Time: 78.0919 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #355: GFLOPs: 10868.2488. Time: 76.7489 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #356: GFLOPs: 10260.8433. Time: 81.2921 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #357: GFLOPs: 9886.9374. Time: 84.3665 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #358: GFLOPs: 9981.7549. Time: 83.5650 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #359: GFLOPs: 10421.6456. Time: 80.0378 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #360: GFLOPs: 10705.7667. Time: 77.9137 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #361: GFLOPs: 10415.4884. Time: 80.0851 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #362: GFLOPs: 10770.1119. Time: 77.4482 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #363: GFLOPs: 10861.0130. Time: 76.8000 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #364: GFLOPs: 10506.2001. Time: 79.3937 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #365: GFLOPs: 10037.2637. Time: 83.1029 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #366: GFLOPs: 10746.0303. Time: 77.6218 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #367: GFLOPs: 10527.1516. Time: 79.2357 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #368: GFLOPs: 10534.7489. Time: 79.1785 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #369: GFLOPs: 10473.5542. Time: 79.6411 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #370: GFLOPs: 9975.2165. Time: 83.6198 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #371: GFLOPs: 9949.7231. Time: 83.8341 us. Best GFLOPs: 10889.5967
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #372: GFLOPs: 10901.7541. Time: 76.5130 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #373: GFLOPs: 10418.3012. Time: 80.0635 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #374: GFLOPs: 10031.1691. Time: 83.1534 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #375: GFLOPs: 10514.5113. Time: 79.3309 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #376: GFLOPs: 9772.0311. Time: 85.3585 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #377: GFLOPs: 9773.6631. Time: 85.3442 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #378: GFLOPs: 10322.4168. Time: 80.8072 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #379: GFLOPs: 9877.3605. Time: 84.4483 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #380: GFLOPs: 10886.0242. Time: 76.6236 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #381: GFLOPs: 9963.7150. Time: 83.7163 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #382: GFLOPs: 831.8536. Time: 1002.7315 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #383: GFLOPs: 6989.4760. Time: 119.3403 us. Best GFLOPs: 10901.7541
2024-04-30 17:19:28 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #384: GFLOPs: 346.3894. Time: 2408.0580 us. Best GFLOPs: 10901.7541
