2024-04-30 10:10:02 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_avg_pool2d"
2024-04-30 10:10:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(1), T.int64(1)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-30 10:10:02 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 10:10:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                            v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                            v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                        v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-30 10:45:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 10:45:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 10:45:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba36618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefe88b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x52a1658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4516dd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a27ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xefe8d88)]: 0 failure(s)
2024-04-30 10:45:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 10:45:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba36618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefe88b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x52a1658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4516dd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a27ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xefe8d88)]: 0 failure(s)
2024-04-30 10:45:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba36618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefe88b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x52a1658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4516dd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a27ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xefe8d88)]: 0 failure(s)
2024-04-30 10:45:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba36618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefe88b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x52a1658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4516dd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a27ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xefe8d88)]: 0 failure(s)
2024-04-30 10:45:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba36618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefe88b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x52a1658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4516dd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9a27ba8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xefe8d88)]: 0 failure(s)
2024-04-30 10:45:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9848  0.9839  0.9756  0.9693  0.9634  0.9577  0.9536  0.9464  0.9443  0.9429  0.9368  0.9236  0.9175  0.9046  0.9045
[17 : 32]:	0.8890  0.8704  0.8675  0.8675  0.8666  0.8568  0.8450  0.8417  0.8383  0.8383  0.8279  0.8261  0.8238  0.8191  0.8172  0.8131
[33 : 48]:	0.7855  0.7801  0.7789  0.7754  0.7691  0.7686  0.7646  0.7616  0.7552  0.7524  0.7494  0.7485  0.7467  0.7329  0.7164  0.7159
[49 : 64]:	0.7148  0.7065  0.7026  0.6961  0.6939  0.6902  0.6762  0.6754  0.6369  0.6329  0.6223  0.6199  0.6164  0.6150  0.6142  0.6126
2024-04-30 10:45:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 10:45:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #1: GFLOPs: 69.1117. Time: 5.8081 us. Best GFLOPs: 69.1117
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #2: GFLOPs: 67.4107. Time: 5.9547 us. Best GFLOPs: 69.1117
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #3: GFLOPs: 73.3160. Time: 5.4750 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #4: GFLOPs: 69.9465. Time: 5.7388 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #5: GFLOPs: 66.0199. Time: 6.0801 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #6: GFLOPs: 68.5205. Time: 5.8582 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #7: GFLOPs: 66.0177. Time: 6.0803 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #8: GFLOPs: 71.2138. Time: 5.6367 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #9: GFLOPs: 72.1578. Time: 5.5629 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #10: GFLOPs: 70.3401. Time: 5.7067 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #11: GFLOPs: 68.4350. Time: 5.8655 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #12: GFLOPs: 69.0571. Time: 5.8127 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #13: GFLOPs: 66.5257. Time: 6.0339 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #14: GFLOPs: 73.2019. Time: 5.4836 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #15: GFLOPs: 72.0490. Time: 5.5713 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #16: GFLOPs: 66.1517. Time: 6.0680 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #17: GFLOPs: 73.2948. Time: 5.4766 us. Best GFLOPs: 73.3160
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #18: GFLOPs: 73.3179. Time: 5.4749 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #19: GFLOPs: 67.7742. Time: 5.9227 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #20: GFLOPs: 71.0881. Time: 5.6466 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #21: GFLOPs: 68.4353. Time: 5.8655 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #22: GFLOPs: 66.0192. Time: 6.0802 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #23: GFLOPs: 68.1379. Time: 5.8911 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #24: GFLOPs: 67.7108. Time: 5.9283 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #25: GFLOPs: 71.0758. Time: 5.6476 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #26: GFLOPs: 73.3164. Time: 5.4750 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #27: GFLOPs: 70.4991. Time: 5.6938 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #28: GFLOPs: 73.2932. Time: 5.4767 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #29: GFLOPs: 67.6924. Time: 5.9299 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #30: GFLOPs: 69.7426. Time: 5.7556 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #31: GFLOPs: 67.6895. Time: 5.9301 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #32: GFLOPs: 68.5672. Time: 5.8542 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #33: GFLOPs: 69.9035. Time: 5.7423 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #34: GFLOPs: 70.0838. Time: 5.7275 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #35: GFLOPs: 69.8622. Time: 5.7457 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #36: GFLOPs: 70.3330. Time: 5.7072 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #37: GFLOPs: 70.4305. Time: 5.6993 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #38: GFLOPs: 67.3849. Time: 5.9569 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #39: GFLOPs: 67.2906. Time: 5.9653 us. Best GFLOPs: 73.3179
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #40: GFLOPs: 73.3202. Time: 5.4747 us. Best GFLOPs: 73.3202
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #41: GFLOPs: 70.4753. Time: 5.6957 us. Best GFLOPs: 73.3202
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #42: GFLOPs: 68.2506. Time: 5.8814 us. Best GFLOPs: 73.3202
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #43: GFLOPs: 73.2974. Time: 5.4764 us. Best GFLOPs: 73.3202
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #44: GFLOPs: 75.0210. Time: 5.3506 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #45: GFLOPs: 72.1715. Time: 5.5619 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #46: GFLOPs: 68.3302. Time: 5.8745 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #47: GFLOPs: 66.5579. Time: 6.0310 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #48: GFLOPs: 71.4035. Time: 5.6217 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #49: GFLOPs: 71.0663. Time: 5.6484 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #50: GFLOPs: 73.0166. Time: 5.4975 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #51: GFLOPs: 69.7606. Time: 5.7541 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #52: GFLOPs: 71.5322. Time: 5.6116 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #53: GFLOPs: 68.5218. Time: 5.8581 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #54: GFLOPs: 71.9118. Time: 5.5820 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #55: GFLOPs: 70.0775. Time: 5.7281 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #56: GFLOPs: 72.1517. Time: 5.5634 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #57: GFLOPs: 65.9676. Time: 6.0849 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #58: GFLOPs: 67.1236. Time: 5.9801 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #59: GFLOPs: 70.4704. Time: 5.6961 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #60: GFLOPs: 73.2915. Time: 5.4769 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #61: GFLOPs: 67.7498. Time: 5.9249 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #62: GFLOPs: 73.3110. Time: 5.4754 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #63: GFLOPs: 70.4110. Time: 5.7009 us. Best GFLOPs: 75.0210
2024-04-30 10:51:16 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #64: GFLOPs: 69.5722. Time: 5.7697 us. Best GFLOPs: 75.0210
