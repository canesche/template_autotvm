2024-04-30 10:09:57 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4"
2024-04-30 10:09:57 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(256), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 10:09:57 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 10:09:57 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(451584)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(589824)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(98304))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(98304) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(8), T.int64(14), T.int64(4), T.int64(2), T.int64(6), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(128) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 2, 8, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 32, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 10:09:57 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(451584)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(589824)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(98304))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(98304) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(8), T.int64(14), T.int64(4), T.int64(2), T.int64(6), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 2, 8, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 32, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:09:57 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(451584)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(589824)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(98304))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(98304) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(8), T.int64(14), T.int64(4), T.int64(2), T.int64(6), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused * T.int64(64) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 2, 8, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 32, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:26:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 10:26:06 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 10:26:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 502 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:26:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:26:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1511 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:26:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:26:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2520 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:26:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3026 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:27:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3533 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:27:08 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 10:27:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:28:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:28:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 10:28:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9989  0.9984  0.9984  0.9969  0.9960  0.9950  0.9936  0.9933  0.9928  0.9924  0.9923  0.9919  0.9917  0.9907  0.9900
[17 : 32]:	0.9885  0.9882  0.9878  0.9867  0.9860  0.9857  0.9857  0.9834  0.9830  0.9826  0.9824  0.9819  0.9814  0.9804  0.9803  0.9803
[33 : 48]:	0.9800  0.9795  0.9793  0.9789  0.9784  0.9782  0.9781  0.9781  0.9773  0.9772  0.9768  0.9767  0.9765  0.9764  0.9754  0.9752
[49 : 64]:	0.9751  0.9741  0.9741  0.9735  0.9719  0.9716  0.9710  0.9701  0.9696  0.9686  0.9685  0.9658  0.9656  0.9645  0.9645  0.9642
2024-04-30 10:28:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 10:28:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #1: GFLOPs: 4648.2629. Time: 139.4658 us. Best GFLOPs: 4648.2629
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #2: GFLOPs: 4894.8840. Time: 132.4391 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #3: GFLOPs: 2021.8076. Time: 320.6408 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #4: GFLOPs: 2101.8483. Time: 308.4304 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #5: GFLOPs: 319.6308. Time: 2028.1958 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #6: GFLOPs: 259.4873. Time: 2498.2879 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #7: GFLOPs: 4133.5036. Time: 156.8340 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #8: GFLOPs: 593.3838. Time: 1092.5036 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #9: GFLOPs: 4368.1900. Time: 148.4079 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #10: GFLOPs: 1485.2127. Time: 436.4856 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #11: GFLOPs: 3715.3246. Time: 174.4865 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #12: GFLOPs: 74.1529. Time: 8742.3998 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #13: GFLOPs: 97.3651. Time: 6658.1759 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #14: GFLOPs: 1228.2648. Time: 527.7965 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #15: GFLOPs: 2977.0680. Time: 217.7558 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #16: GFLOPs: 1220.8652. Time: 530.9955 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #17: GFLOPs: 3932.8754. Time: 164.8346 us. Best GFLOPs: 4894.8840
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #18: GFLOPs: 7754.2107. Time: 83.6028 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #19: GFLOPs: 13.7904. Time: 47009.1093 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #20: GFLOPs: 4367.0516. Time: 148.4466 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #21: GFLOPs: 5263.4110. Time: 123.1661 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #22: GFLOPs: 432.6030. Time: 1498.5423 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #23: GFLOPs: 395.4357. Time: 1639.3914 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #24: GFLOPs: 666.9794. Time: 971.9549 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #25: GFLOPs: 5069.5127. Time: 127.8770 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #26: GFLOPs: 1518.8134. Time: 426.8292 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #27: GFLOPs: 2237.4179. Time: 289.7420 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #28: GFLOPs: 1366.2280. Time: 474.4991 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #29: GFLOPs: 982.4313. Time: 659.8669 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #30: GFLOPs: 2189.3512. Time: 296.1032 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #31: GFLOPs: 1735.7339. Time: 373.4869 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #32: GFLOPs: 4585.8627. Time: 141.3636 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #33: GFLOPs: 4775.4618. Time: 135.7510 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #34: GFLOPs: 4063.1643. Time: 159.5490 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #35: GFLOPs: 1667.9854. Time: 388.6568 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #36: GFLOPs: 3502.8728. Time: 185.0692 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #37: GFLOPs: 318.8003. Time: 2033.4796 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #38: GFLOPs: 1486.8013. Time: 436.0192 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #39: GFLOPs: 5604.9452. Time: 115.6611 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #40: GFLOPs: 4684.3066. Time: 138.3927 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #41: GFLOPs: 3003.1494. Time: 215.8647 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #42: GFLOPs: 54.1820. Time: 11964.7572 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #43: GFLOPs: 34.4330. Time: 18827.0937 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #44: GFLOPs: 355.7792. Time: 1822.1243 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #45: GFLOPs: 4043.4640. Time: 160.3264 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #46: GFLOPs: 2074.9707. Time: 312.4256 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #47: GFLOPs: 437.7532. Time: 1480.9118 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #48: GFLOPs: 3754.3662. Time: 172.6720 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #49: GFLOPs: 2682.4729. Time: 241.6703 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #50: GFLOPs: 3053.5701. Time: 212.3003 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #51: GFLOPs: 115.6475. Time: 5605.6035 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #52: GFLOPs: 539.1794. Time: 1202.3344 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #53: GFLOPs: 224.4169. Time: 2888.7041 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #54: GFLOPs: 4094.8918. Time: 158.3128 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #55: GFLOPs: 187.0362. Time: 3466.0352 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #56: GFLOPs: 56.4069. Time: 11492.8071 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #57: GFLOPs: 3344.0911. Time: 193.8565 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #58: GFLOPs: 2078.4789. Time: 311.8982 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #59: GFLOPs: 7241.7460. Time: 89.5190 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #60: GFLOPs: 5668.9987. Time: 114.3542 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #61: GFLOPs: 4368.5193. Time: 148.3967 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #62: GFLOPs: 899.8460. Time: 720.4276 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #63: GFLOPs: 935.3605. Time: 693.0739 us. Best GFLOPs: 7754.2107
2024-04-30 10:51:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #64: GFLOPs: 4779.7414. Time: 135.6295 us. Best GFLOPs: 7754.2107
2024-04-30 12:14:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 12:14:50 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-30 12:14:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 438 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 879 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1322 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1763 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2641 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3078 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:15:46 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-30 12:16:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:16:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:16:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:17:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 12:17:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2884  1.2755  1.2611  1.2401  1.2372  1.2294  1.2079  1.2067  1.2015  1.1991  1.1899  1.1899  1.1882  1.1796  1.1723  1.1659
[17 : 32]:	1.1659  1.1647  1.1506  1.1455  1.1337  1.0989  1.0815  1.0609  1.0609  1.0509  1.0459  1.0396  1.0208  1.0203  1.0200  1.0124
[33 : 48]:	1.0086  1.0070  1.0036  1.0033  0.9961  0.9947  0.9880  0.9729  0.9605  0.9595  0.9572  0.9549  0.9503  0.9500  0.9493  0.9493
[49 : 64]:	0.9483  0.9464  0.9460  0.9454  0.9267  0.9218  0.9177  0.9143  0.9104  0.9042  0.9013  0.8900  0.8897  0.8887  0.8868  0.8856
2024-04-30 12:17:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 12:17:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #65: GFLOPs: 3158.4804. Time: 205.2487 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #66: GFLOPs: 4094.9135. Time: 158.3120 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #67: GFLOPs: 3553.0280. Time: 182.4567 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #68: GFLOPs: 3589.3502. Time: 180.6104 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #69: GFLOPs: 3426.9566. Time: 189.1690 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #70: GFLOPs: 3342.4187. Time: 193.9535 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #71: GFLOPs: 3426.5086. Time: 189.1937 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #72: GFLOPs: 3332.3255. Time: 194.5410 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #73: GFLOPs: 3336.4389. Time: 194.3012 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #74: GFLOPs: 3395.6937. Time: 190.9106 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #75: GFLOPs: 2098.9206. Time: 308.8606 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #76: GFLOPs: 2098.3145. Time: 308.9498 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #77: GFLOPs: 3430.7331. Time: 188.9608 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #78: GFLOPs: 2722.3444. Time: 238.1308 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #79: GFLOPs: 3069.4017. Time: 211.2053 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #80: GFLOPs: 2139.8487. Time: 302.9532 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #81: GFLOPs: 2138.9713. Time: 303.0774 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #82: GFLOPs: 3107.6371. Time: 208.6067 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #83: GFLOPs: 3340.5446. Time: 194.0623 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #84: GFLOPs: 3187.4217. Time: 203.3850 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #85: GFLOPs: 2086.6021. Time: 310.6840 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #86: GFLOPs: 2128.0518. Time: 304.6326 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #87: GFLOPs: 2203.7575. Time: 294.1675 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #88: GFLOPs: 2646.5577. Time: 244.9499 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #89: GFLOPs: 2646.3710. Time: 244.9671 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #90: GFLOPs: 63.5348. Time: 10203.4431 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #91: GFLOPs: 7424.2534. Time: 87.3184 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #92: GFLOPs: 7745.9966. Time: 83.6915 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #93: GFLOPs: 7500.3024. Time: 86.4330 us. Best GFLOPs: 7754.2107
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #94: GFLOPs: 7893.3080. Time: 82.1296 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #95: GFLOPs: 7611.5063. Time: 85.1703 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #96: GFLOPs: 7576.4522. Time: 85.5643 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #97: GFLOPs: 7871.0432. Time: 82.3619 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #98: GFLOPs: 7390.8811. Time: 87.7127 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #99: GFLOPs: 7826.6332. Time: 82.8292 us. Best GFLOPs: 7893.3080
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #100: GFLOPs: 7902.5756. Time: 82.0332 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #101: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(576), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(64) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(28) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(576), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1) // T.int64(588))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1) % T.int64(588) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1764))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(576), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2304) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2304) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2304) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(64) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(28) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(64) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(28) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 64, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 576], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 576, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #102: GFLOPs: 57.6984. Time: 11235.5558 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #103: GFLOPs: 7873.1682. Time: 82.3397 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #104: GFLOPs: 57.7294. Time: 11229.5252 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #105: GFLOPs: 73.0421. Time: 8875.3490 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #106: GFLOPs: 73.0238. Time: 8877.5679 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #107: GFLOPs: 2563.4899. Time: 252.8873 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #108: GFLOPs: 4168.6691. Time: 155.5110 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #109: GFLOPs: 72.8341. Time: 8900.6933 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #110: GFLOPs: 5333.6784. Time: 121.5435 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #111: GFLOPs: 72.7936. Time: 8905.6428 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #112: GFLOPs: 72.8313. Time: 8901.0347 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #113: GFLOPs: 72.7755. Time: 8907.8610 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #114: GFLOPs: 72.9103. Time: 8891.3918 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #115: GFLOPs: 72.8606. Time: 8897.4507 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #116: GFLOPs: 72.7406. Time: 8912.1277 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #117: GFLOPs: 7332.6134. Time: 88.4097 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #118: GFLOPs: 75.5353. Time: 8582.4000 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #119: GFLOPs: 4117.6464. Time: 157.4380 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #120: GFLOPs: 72.7399. Time: 8912.2136 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #121: GFLOPs: 48.0106. Time: 13502.7199 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #122: GFLOPs: 75.4445. Time: 8592.7251 us. Best GFLOPs: 7902.5756
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #123: GFLOPs: 8287.2369. Time: 78.2256 us. Best GFLOPs: 8287.2369
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #124: GFLOPs: 7136.4662. Time: 90.8396 us. Best GFLOPs: 8287.2369
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #125: GFLOPs: 41.7296. Time: 15535.1039 us. Best GFLOPs: 8287.2369
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #126: GFLOPs: 43.6779. Time: 14842.1489 us. Best GFLOPs: 8287.2369
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #127: GFLOPs: 4.7380. Time: 136825.1747 us. Best GFLOPs: 8287.2369
2024-04-30 12:18:55 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #128: GFLOPs: 108.8801. Time: 5954.0181 us. Best GFLOPs: 8287.2369
2024-04-30 13:41:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 13:42:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 13:42:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1606 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:42:46 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-30 13:43:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:43:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:43:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:44:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 13:44:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0067  0.9976  0.9976  0.9970  0.9968  0.9968  0.9962  0.9911  0.9896  0.9862  0.9784  0.9726  0.9657  0.9651  0.9625  0.9622
[17 : 32]:	0.9618  0.9618  0.9609  0.9602  0.9594  0.9579  0.9576  0.9548  0.9521  0.9495  0.9495  0.9488  0.9488  0.9486  0.9483  0.9482
[33 : 48]:	0.9462  0.9459  0.9458  0.9456  0.9450  0.9447  0.9446  0.9431  0.9426  0.9426  0.9425  0.9423  0.9422  0.9418  0.9417  0.9399
[49 : 64]:	0.9388  0.9380  0.9374  0.9366  0.9324  0.9322  0.9309  0.9307  0.9294  0.9271  0.9268  0.9266  0.9263  0.9257  0.9251  0.9248
2024-04-30 13:44:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 13:44:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #129: GFLOPs: 8009.7543. Time: 80.9356 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #130: GFLOPs: 7785.5634. Time: 83.2662 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #131: GFLOPs: 7778.5311. Time: 83.3414 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #132: GFLOPs: 7786.8678. Time: 83.2522 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #133: GFLOPs: 7846.1888. Time: 82.6228 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #134: GFLOPs: 7823.9726. Time: 82.8574 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #135: GFLOPs: 7845.5587. Time: 82.6294 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #136: GFLOPs: 7674.7719. Time: 84.4682 us. Best GFLOPs: 8287.2369
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #137: GFLOPs: 8338.9529. Time: 77.7404 us. Best GFLOPs: 8338.9529
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #138: GFLOPs: 8275.1641. Time: 78.3397 us. Best GFLOPs: 8338.9529
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #139: GFLOPs: 8735.7129. Time: 74.2096 us. Best GFLOPs: 8735.7129
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #140: GFLOPs: 8735.8352. Time: 74.2086 us. Best GFLOPs: 8735.8352
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #141: GFLOPs: 7656.2090. Time: 84.6730 us. Best GFLOPs: 8735.8352
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #142: GFLOPs: 7640.3939. Time: 84.8482 us. Best GFLOPs: 8735.8352
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #143: GFLOPs: 8793.3292. Time: 73.7234 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #144: GFLOPs: 8299.0368. Time: 78.1144 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #145: GFLOPs: 8319.5030. Time: 77.9222 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #146: GFLOPs: 8230.6173. Time: 78.7637 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #147: GFLOPs: 8291.5965. Time: 78.1845 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #148: GFLOPs: 8524.0209. Time: 76.0526 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #149: GFLOPs: 8301.7855. Time: 78.0885 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #150: GFLOPs: 8290.5355. Time: 78.1945 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #151: GFLOPs: 8313.3761. Time: 77.9796 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #152: GFLOPs: 8027.3995. Time: 80.7577 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #153: GFLOPs: 7587.5314. Time: 85.4394 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #154: GFLOPs: 7759.0894. Time: 83.5503 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #155: GFLOPs: 8505.0292. Time: 76.2224 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #156: GFLOPs: 8004.9651. Time: 80.9840 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #157: GFLOPs: 7614.4410. Time: 85.1374 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #158: GFLOPs: 8582.3319. Time: 75.5359 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #159: GFLOPs: 8087.9640. Time: 80.1529 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #160: GFLOPs: 7996.8776. Time: 81.0659 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #161: GFLOPs: 7752.0821. Time: 83.6258 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #162: GFLOPs: 7544.0863. Time: 85.9314 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #163: GFLOPs: 7542.7536. Time: 85.9466 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #164: GFLOPs: 7668.6317. Time: 84.5358 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #165: GFLOPs: 7708.9345. Time: 84.0938 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #166: GFLOPs: 7620.3031. Time: 85.0719 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #167: GFLOPs: 7842.0288. Time: 82.6666 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #168: GFLOPs: 7936.5783. Time: 81.6818 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #169: GFLOPs: 7822.5902. Time: 82.8720 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #170: GFLOPs: 7690.7357. Time: 84.2928 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #171: GFLOPs: 7779.3865. Time: 83.3323 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #172: GFLOPs: 7919.4341. Time: 81.8586 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #173: GFLOPs: 7554.2758. Time: 85.8155 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #174: GFLOPs: 7912.7903. Time: 81.9273 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #175: GFLOPs: 7692.5815. Time: 84.2726 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #176: GFLOPs: 8275.6585. Time: 78.3350 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #177: GFLOPs: 8258.4612. Time: 78.4981 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #178: GFLOPs: 8629.4737. Time: 75.1232 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #179: GFLOPs: 7872.3088. Time: 82.3486 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #180: GFLOPs: 8037.7909. Time: 80.6532 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #181: GFLOPs: 7612.9769. Time: 85.1538 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #182: GFLOPs: 8183.8851. Time: 79.2135 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #183: GFLOPs: 7929.6358. Time: 81.7533 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #184: GFLOPs: 7864.9254. Time: 82.4259 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #185: GFLOPs: 7926.3521. Time: 81.7872 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #186: GFLOPs: 7617.5467. Time: 85.1027 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #187: GFLOPs: 6486.9166. Time: 99.9356 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #188: GFLOPs: 7821.4917. Time: 82.8837 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #189: GFLOPs: 6496.6388. Time: 99.7860 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #190: GFLOPs: 5459.0883. Time: 118.7513 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #191: GFLOPs: 1076.5232. Time: 602.1923 us. Best GFLOPs: 8793.3292
2024-04-30 13:45:40 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #192: GFLOPs: 511.1171. Time: 1268.3471 us. Best GFLOPs: 8793.3292
2024-04-30 15:32:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 15:32:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 15:32:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:32:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:32:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:32:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:32:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:32:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2413 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:33:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2821 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:33:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3226 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:33:12 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 15:33:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:33:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:34:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:34:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 15:34:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9893  0.9787  0.9787  0.9752  0.9751  0.9722  0.9696  0.9674  0.9667  0.9641  0.9633  0.9626  0.9621  0.9620  0.9610  0.9598
[17 : 32]:	0.9587  0.9573  0.9568  0.9568  0.9559  0.9544  0.9535  0.9535  0.9526  0.9515  0.9505  0.9500  0.9494  0.9491  0.9482  0.9472
[33 : 48]:	0.9472  0.9471  0.9466  0.9458  0.9440  0.9430  0.9419  0.9411  0.9408  0.9405  0.9400  0.9383  0.9366  0.9357  0.9336  0.9333
[49 : 64]:	0.9329  0.9328  0.9326  0.9315  0.9308  0.9305  0.9293  0.9287  0.9283  0.9278  0.9272  0.9269  0.9265  0.9249  0.9245  0.9243
2024-04-30 15:34:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 15:34:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #193: GFLOPs: 8631.1445. Time: 75.1087 us. Best GFLOPs: 8793.3292
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #194: GFLOPs: 3816.4970. Time: 169.8610 us. Best GFLOPs: 8793.3292
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #195: GFLOPs: 3816.5038. Time: 169.8607 us. Best GFLOPs: 8793.3292
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #196: GFLOPs: 6940.3402. Time: 93.4066 us. Best GFLOPs: 8793.3292
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #197: GFLOPs: 8494.4976. Time: 76.3169 us. Best GFLOPs: 8793.3292
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #198: GFLOPs: 8904.4255. Time: 72.8036 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #199: GFLOPs: 6656.3509. Time: 97.3918 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #200: GFLOPs: 8335.2522. Time: 77.7750 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #201: GFLOPs: 6977.1779. Time: 92.9135 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #202: GFLOPs: 8165.0685. Time: 79.3960 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #203: GFLOPs: 8172.2279. Time: 79.3265 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #204: GFLOPs: 8582.6133. Time: 75.5334 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #205: GFLOPs: 6871.0128. Time: 94.3491 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #206: GFLOPs: 8206.7226. Time: 78.9930 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #207: GFLOPs: 7064.9649. Time: 91.7590 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #208: GFLOPs: 7013.9151. Time: 92.4268 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #209: GFLOPs: 8608.5776. Time: 75.3056 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #210: GFLOPs: 8330.7412. Time: 77.8171 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #211: GFLOPs: 8604.6633. Time: 75.3398 us. Best GFLOPs: 8904.4255
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #212: GFLOPs: 9089.0112. Time: 71.3250 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #213: GFLOPs: 6737.1779. Time: 96.2234 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #214: GFLOPs: 6674.7322. Time: 97.1236 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #215: GFLOPs: 8599.5201. Time: 75.3849 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #216: GFLOPs: 7211.8241. Time: 89.8904 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #217: GFLOPs: 8602.3358. Time: 75.3602 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #218: GFLOPs: 6946.0570. Time: 93.3298 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #219: GFLOPs: 8400.0983. Time: 77.1746 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #220: GFLOPs: 8392.7596. Time: 77.2420 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #221: GFLOPs: 8849.6505. Time: 73.2542 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #222: GFLOPs: 7302.3513. Time: 88.7761 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #223: GFLOPs: 7196.8243. Time: 90.0778 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #224: GFLOPs: 8319.9815. Time: 77.9177 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #225: GFLOPs: 9002.3229. Time: 72.0118 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #226: GFLOPs: 8653.8677. Time: 74.9115 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #227: GFLOPs: 8582.9507. Time: 75.5304 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #228: GFLOPs: 8687.3276. Time: 74.6229 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #229: GFLOPs: 8399.4987. Time: 77.1801 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #230: GFLOPs: 8320.4187. Time: 77.9136 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #231: GFLOPs: 9059.9216. Time: 71.5540 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #232: GFLOPs: 8319.9770. Time: 77.9178 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #233: GFLOPs: 8403.1420. Time: 77.1466 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #234: GFLOPs: 8668.7565. Time: 74.7828 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #235: GFLOPs: 8336.6192. Time: 77.7622 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #236: GFLOPs: 8856.9805. Time: 73.1936 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #237: GFLOPs: 8478.1956. Time: 76.4637 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #238: GFLOPs: 7438.0451. Time: 87.1565 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #239: GFLOPs: 8684.7534. Time: 74.6451 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #240: GFLOPs: 3400.0262. Time: 190.6673 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #241: GFLOPs: 8665.0493. Time: 74.8148 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #242: GFLOPs: 8323.2719. Time: 77.8869 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #243: GFLOPs: 8801.7595. Time: 73.6528 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #244: GFLOPs: 7954.6991. Time: 81.4957 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #245: GFLOPs: 8096.3705. Time: 80.0697 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #246: GFLOPs: 6853.0451. Time: 94.5965 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #247: GFLOPs: 7954.6169. Time: 81.4966 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #248: GFLOPs: 7665.4724. Time: 84.5706 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #249: GFLOPs: 6194.0355. Time: 104.6610 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #250: GFLOPs: 8507.4532. Time: 76.2007 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #251: GFLOPs: 8321.0759. Time: 77.9075 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #252: GFLOPs: 8586.0907. Time: 75.5028 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #253: GFLOPs: 8096.4151. Time: 80.0693 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #254: GFLOPs: 1937.0392. Time: 334.6726 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #255: GFLOPs: 1426.9875. Time: 454.2955 us. Best GFLOPs: 9089.0112
2024-04-30 15:36:02 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #256: GFLOPs: 5340.8995. Time: 121.3792 us. Best GFLOPs: 9089.0112
2024-04-30 16:47:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 16:47:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 16:48:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2006 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:48:34 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-30 16:48:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:49:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:49:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:49:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 16:50:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9784  0.9740  0.9738  0.9711  0.9639  0.9635  0.9625  0.9618  0.9611  0.9611  0.9611  0.9609  0.9567  0.9530  0.9521  0.9518
[17 : 32]:	0.9500  0.9480  0.9477  0.9472  0.9438  0.9426  0.9417  0.9404  0.9403  0.9399  0.9399  0.9395  0.9371  0.9346  0.9334  0.9327
[33 : 48]:	0.9326  0.9326  0.9321  0.9319  0.9318  0.9318  0.9314  0.9311  0.9301  0.9295  0.9294  0.9294  0.9293  0.9293  0.9293  0.9291
[49 : 64]:	0.9290  0.9289  0.9285  0.9285  0.9285  0.9283  0.9274  0.9271  0.9269  0.9268  0.9268  0.9268  0.9267  0.9258  0.9256  0.9255
2024-04-30 16:50:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 16:50:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #257: GFLOPs: 8889.1135. Time: 72.9290 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #258: GFLOPs: 9017.6586. Time: 71.8894 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #259: GFLOPs: 8925.1741. Time: 72.6343 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #260: GFLOPs: 9046.3128. Time: 71.6617 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #261: GFLOPs: 8746.3413. Time: 74.1194 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #262: GFLOPs: 8884.6428. Time: 72.9657 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #263: GFLOPs: 8859.5858. Time: 73.1720 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #264: GFLOPs: 8882.7119. Time: 72.9815 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #265: GFLOPs: 8794.7724. Time: 73.7113 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #266: GFLOPs: 8858.8653. Time: 73.1780 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #267: GFLOPs: 8857.9872. Time: 73.1852 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #268: GFLOPs: 8859.4197. Time: 73.1734 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #269: GFLOPs: 8838.8336. Time: 73.3438 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #270: GFLOPs: 9008.3196. Time: 71.9639 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #271: GFLOPs: 8686.5971. Time: 74.6292 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #272: GFLOPs: 7432.9378. Time: 87.2164 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #273: GFLOPs: 8837.8849. Time: 73.3517 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #274: GFLOPs: 8696.8649. Time: 74.5411 us. Best GFLOPs: 9089.0112
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #275: GFLOPs: 9453.7649. Time: 68.5731 us. Best GFLOPs: 9453.7649
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #276: GFLOPs: 8696.2623. Time: 74.5463 us. Best GFLOPs: 9453.7649
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #277: GFLOPs: 8456.6063. Time: 76.6589 us. Best GFLOPs: 9453.7649
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #278: GFLOPs: 8476.6330. Time: 76.4778 us. Best GFLOPs: 9453.7649
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #279: GFLOPs: 8628.7579. Time: 75.1295 us. Best GFLOPs: 9453.7649
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #280: GFLOPs: 9523.9756. Time: 68.0676 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #281: GFLOPs: 8634.7150. Time: 75.0776 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #282: GFLOPs: 9087.4858. Time: 71.3370 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #283: GFLOPs: 8822.6136. Time: 73.4787 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #284: GFLOPs: 8665.2523. Time: 74.8130 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #285: GFLOPs: 8614.1955. Time: 75.2565 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #286: GFLOPs: 8194.0508. Time: 79.1152 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #287: GFLOPs: 9137.3927. Time: 70.9474 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #288: GFLOPs: 8565.7801. Time: 75.6818 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #289: GFLOPs: 8607.8927. Time: 75.3116 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #290: GFLOPs: 9072.7466. Time: 71.4529 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #291: GFLOPs: 8181.7190. Time: 79.2344 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #292: GFLOPs: 8563.3172. Time: 75.7036 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #293: GFLOPs: 8545.8551. Time: 75.8583 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #294: GFLOPs: 8474.6223. Time: 76.4959 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #295: GFLOPs: 8481.4810. Time: 76.4340 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #296: GFLOPs: 8181.7190. Time: 79.2344 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #297: GFLOPs: 8482.9183. Time: 76.4211 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #298: GFLOPs: 8632.4965. Time: 75.0969 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #299: GFLOPs: 8483.2035. Time: 76.4185 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #300: GFLOPs: 8671.0783. Time: 74.7628 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #301: GFLOPs: 8285.0022. Time: 78.2467 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #302: GFLOPs: 8284.0408. Time: 78.2558 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #303: GFLOPs: 8644.5986. Time: 74.9918 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #304: GFLOPs: 8593.9174. Time: 75.4340 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #305: GFLOPs: 8477.5955. Time: 76.4691 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #306: GFLOPs: 8683.1073. Time: 74.6592 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #307: GFLOPs: 8487.6437. Time: 76.3786 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #308: GFLOPs: 8575.2865. Time: 75.5979 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #309: GFLOPs: 8631.8395. Time: 75.1026 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #310: GFLOPs: 8578.3195. Time: 75.5712 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #311: GFLOPs: 8674.8308. Time: 74.7304 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #312: GFLOPs: 8621.5182. Time: 75.1925 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #313: GFLOPs: 8352.5749. Time: 77.6137 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #314: GFLOPs: 8272.6845. Time: 78.3632 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #315: GFLOPs: 8670.2636. Time: 74.7698 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #316: GFLOPs: 8591.5576. Time: 75.4548 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #317: GFLOPs: 8688.9180. Time: 74.6093 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #318: GFLOPs: 4072.5164. Time: 159.1826 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #319: GFLOPs: 6776.9639. Time: 95.6585 us. Best GFLOPs: 9523.9756
2024-04-30 16:51:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #320: GFLOPs: 4984.0255. Time: 130.0703 us. Best GFLOPs: 9523.9756
2024-04-30 18:14:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 18:14:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 18:14:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:14:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 813 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:14:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2420 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 2825 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3232 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 3629 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:15:39 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-30 18:15:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 60 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:16:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 59 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:16:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:17:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52725a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe6f9428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefcbde8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb206cb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5403128)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe6c5e28)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9a59bc8)]: 0 failure(s)
2024-04-30 18:17:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9324  0.9324  0.9313  0.9294  0.9293  0.9288  0.9287  0.9284  0.9283  0.9280  0.9278  0.9266  0.9264  0.9263  0.9263  0.9255
[17 : 32]:	0.9250  0.9249  0.9241  0.9240  0.9238  0.9237  0.9235  0.9230  0.9230  0.9230  0.9219  0.9208  0.9207  0.9207  0.9198  0.9197
[33 : 48]:	0.9197  0.9195  0.9188  0.9181  0.9165  0.9164  0.9152  0.9151  0.9147  0.9139  0.9136  0.9131  0.9125  0.9124  0.9123  0.9118
[49 : 64]:	0.9115  0.9108  0.9103  0.9093  0.9082  0.9068  0.9063  0.9052  0.9050  0.9048  0.9046  0.9045  0.9039  0.9036  0.9031  0.9027
2024-04-30 18:17:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 18:17:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #321: GFLOPs: 9440.8472. Time: 68.6669 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #322: GFLOPs: 8228.6195. Time: 78.7828 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #323: GFLOPs: 9013.5368. Time: 71.9223 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #324: GFLOPs: 9018.7499. Time: 71.8807 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #325: GFLOPs: 9163.3016. Time: 70.7468 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #326: GFLOPs: 9086.0959. Time: 71.3479 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #327: GFLOPs: 9086.1227. Time: 71.3477 us. Best GFLOPs: 9523.9756
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #328: GFLOPs: 9667.2120. Time: 67.0590 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #329: GFLOPs: 8763.8523. Time: 73.9713 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #330: GFLOPs: 8948.2674. Time: 72.4469 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #331: GFLOPs: 9463.8332. Time: 68.5001 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #332: GFLOPs: 9634.1480. Time: 67.2892 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #333: GFLOPs: 8888.1886. Time: 72.9366 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #334: GFLOPs: 9128.8646. Time: 71.0136 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #335: GFLOPs: 9178.0332. Time: 70.6332 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #336: GFLOPs: 9239.5606. Time: 70.1629 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #337: GFLOPs: 9077.5064. Time: 71.4154 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #338: GFLOPs: 8895.3683. Time: 72.8777 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #339: GFLOPs: 8207.0162. Time: 78.9902 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #340: GFLOPs: 9094.0725. Time: 71.2853 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #341: GFLOPs: 9130.3807. Time: 71.0019 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #342: GFLOPs: 9012.5358. Time: 71.9302 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #343: GFLOPs: 8898.5630. Time: 72.8515 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #344: GFLOPs: 9587.1227. Time: 67.6192 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #345: GFLOPs: 8884.8384. Time: 72.9641 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #346: GFLOPs: 8993.1344. Time: 72.0854 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #347: GFLOPs: 5988.3901. Time: 108.2551 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #348: GFLOPs: 8125.4691. Time: 79.7830 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #349: GFLOPs: 8859.7623. Time: 73.1706 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #350: GFLOPs: 8952.5983. Time: 72.4118 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #351: GFLOPs: 8980.1406. Time: 72.1897 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #352: GFLOPs: 8978.3215. Time: 72.2044 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #353: GFLOPs: 6071.5503. Time: 106.7724 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #354: GFLOPs: 8834.8137. Time: 73.3772 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #355: GFLOPs: 8949.4893. Time: 72.4370 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #356: GFLOPs: 9182.1008. Time: 70.6019 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #357: GFLOPs: 8269.2859. Time: 78.3954 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #358: GFLOPs: 8746.1921. Time: 74.1207 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #359: GFLOPs: 7973.2999. Time: 81.3056 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #360: GFLOPs: 9377.6380. Time: 69.1298 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #361: GFLOPs: 6225.6559. Time: 104.1294 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #362: GFLOPs: 9342.7973. Time: 69.3876 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #363: GFLOPs: 9228.2326. Time: 70.2490 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #364: GFLOPs: 8382.3899. Time: 77.3376 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #365: GFLOPs: 8837.4932. Time: 73.3550 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #366: GFLOPs: 8986.8588. Time: 72.1358 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #367: GFLOPs: 9235.9207. Time: 70.1905 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #368: GFLOPs: 8893.8358. Time: 72.8903 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #369: GFLOPs: 8929.3319. Time: 72.6005 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #370: GFLOPs: 8815.9904. Time: 73.5339 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #371: GFLOPs: 9144.2014. Time: 70.8945 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #372: GFLOPs: 7227.3012. Time: 89.6979 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #373: GFLOPs: 9408.2109. Time: 68.9051 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #374: GFLOPs: 8816.7080. Time: 73.5279 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #375: GFLOPs: 8817.4253. Time: 73.5219 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #376: GFLOPs: 7238.7764. Time: 89.5557 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #377: GFLOPs: 7651.6654. Time: 84.7232 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #378: GFLOPs: 6887.2608. Time: 94.1265 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #379: GFLOPs: 8854.0725. Time: 73.2176 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #380: GFLOPs: 9332.7150. Time: 69.4625 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #381: GFLOPs: 9077.2869. Time: 71.4171 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #382: GFLOPs: 6422.1693. Time: 100.9431 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #383: GFLOPs: 162.4981. Time: 3989.4253 us. Best GFLOPs: 9667.2120
2024-04-30 18:18:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #384: GFLOPs: 474.6881. Time: 1365.6839 us. Best GFLOPs: 9667.2120
