2024-04-30 10:09:54 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1"
2024-04-30 10:09:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(226), T.int64(226)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(226), T.int64(226)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(3136), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3136), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 10:09:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 10:09:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(50176))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(50176) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(392), T.int64(4), T.int64(6), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(6) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(32) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(784)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 4, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 392, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 8, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 10:09:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(50176))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(50176) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(392), T.int64(4), T.int64(6), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(6) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(32) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(784)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 4, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 392, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 8, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:09:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(50176))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(50176) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(392), T.int64(4), T.int64(6), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(6) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(32) + ci_1 * T.int64(4) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(784)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(1568) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(784) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 4, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 392, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 8, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 10:13:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 10:13:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 10:13:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 503 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:13:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:13:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1517 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:13:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:13:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2528 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:14:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3034 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:14:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3540 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:14:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4045 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:14:21 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 10:14:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:14:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:15:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:15:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 10:15:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9989  0.9978  0.9977  0.9976  0.9955  0.9943  0.9939  0.9937  0.9934  0.9925  0.9923  0.9922  0.9918  0.9914
[17 : 32]:	0.9912  0.9905  0.9894  0.9894  0.9887  0.9886  0.9881  0.9872  0.9871  0.9870  0.9868  0.9866  0.9859  0.9854  0.9843  0.9837
[33 : 48]:	0.9835  0.9829  0.9821  0.9810  0.9801  0.9788  0.9785  0.9785  0.9775  0.9772  0.9750  0.9750  0.9740  0.9731  0.9729  0.9724
[49 : 64]:	0.9722  0.9713  0.9705  0.9693  0.9689  0.9681  0.9677  0.9673  0.9654  0.9649  0.9645  0.9630  0.9615  0.9614  0.9601  0.9584
2024-04-30 10:15:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 10:15:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #1: GFLOPs: 7978.5127. Time: 257.9955 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #2: GFLOPs: 1928.2072. Time: 1067.5306 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #3: GFLOPs: 17.3304. Time: 118775.1260 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #4: GFLOPs: 7969.9756. Time: 258.2718 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #5: GFLOPs: 4435.3356. Time: 464.0957 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #6: GFLOPs: 6148.2170. Time: 334.7995 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #7: GFLOPs: 1105.8647. Time: 1861.3672 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #8: GFLOPs: 7583.9429. Time: 271.4182 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #9: GFLOPs: 3326.4669. Time: 618.8007 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #10: GFLOPs: 707.6162. Time: 2908.9499 us. Best GFLOPs: 7978.5127
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #11: GFLOPs: 8837.7195. Time: 232.9131 us. Best GFLOPs: 8837.7195
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #12: GFLOPs: 1786.2107. Time: 1152.3950 us. Best GFLOPs: 8837.7195
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #13: GFLOPs: 10850.6461. Time: 189.7049 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #14: GFLOPs: 2466.9301. Time: 834.4056 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #15: GFLOPs: 7289.5518. Time: 282.3795 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #16: GFLOPs: 1312.9824. Time: 1567.7440 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #17: GFLOPs: 6196.9753. Time: 332.1653 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #18: GFLOPs: 8849.0396. Time: 232.6151 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #19: GFLOPs: 10554.8594. Time: 195.0211 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 2, 28, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #21: GFLOPs: 8296.4745. Time: 248.1078 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #22: GFLOPs: 760.1649. Time: 2707.8602 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(8) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(8) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(8), T.int64(28)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 4, 4, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[16, 1, 7, 4, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 84, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #24: GFLOPs: 8787.8395. Time: 234.2351 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #25: GFLOPs: 5772.3377. Time: 356.6008 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #26: GFLOPs: 1266.5249. Time: 1625.2506 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #27: GFLOPs: 271.2945. Time: 7587.4012 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #28: GFLOPs: 1817.5075. Time: 1132.5512 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #29: GFLOPs: 5813.3230. Time: 354.0867 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #30: GFLOPs: 3478.6891. Time: 591.7230 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #31: GFLOPs: 8169.3575. Time: 251.9684 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #32: GFLOPs: 1824.7860. Time: 1128.0338 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #33: GFLOPs: 209.7071. Time: 9815.6918 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #34: GFLOPs: 1192.9950. Time: 1725.4223 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #35: GFLOPs: 145.0173. Time: 14194.3044 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #36: GFLOPs: 5184.0768. Time: 397.0659 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #37: GFLOPs: 747.3524. Time: 2754.2832 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #38: GFLOPs: 589.3753. Time: 3492.5461 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(56) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(336))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(336) // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(56) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(56) * T.int64(56) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 1, 32, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[56, 2, 14, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 42, 3], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #40: GFLOPs: 1861.1430. Time: 1105.9979 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #41: GFLOPs: 516.0812. Time: 3988.5588 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #42: GFLOPs: 873.8255. Time: 2355.6421 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #43: GFLOPs: 1460.6656. Time: 1409.2344 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #44: GFLOPs: 1760.0911. Time: 1169.4964 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #45: GFLOPs: 1491.1105. Time: 1380.4612 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #46: GFLOPs: 6727.9258. Time: 305.9517 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #47: GFLOPs: 5868.6302. Time: 350.7497 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #48: GFLOPs: 779.3526. Time: 2641.1924 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #49: GFLOPs: 271.0202. Time: 7595.0813 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #50: GFLOPs: 1420.7768. Time: 1448.7991 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #51: GFLOPs: 9688.8442. Time: 212.4526 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #52: GFLOPs: 5699.9082. Time: 361.1322 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #53: GFLOPs: 328.7085. Time: 6262.1441 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #54: GFLOPs: 1374.1753. Time: 1497.9313 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #55: GFLOPs: 6283.3291. Time: 327.6003 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #56: GFLOPs: 8400.9744. Time: 245.0216 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #57: GFLOPs: 2027.4891. Time: 1015.2559 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #58: GFLOPs: 8439.1527. Time: 243.9131 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #59: GFLOPs: 6205.7015. Time: 331.6982 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #60: GFLOPs: 3291.4584. Time: 625.3824 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #61: GFLOPs: 6855.9231. Time: 300.2397 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #62: GFLOPs: 940.0125. Time: 2189.7795 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #63: GFLOPs: 20.2012. Time: 101895.8537 us. Best GFLOPs: 10850.6461
2024-04-30 10:50:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #64: GFLOPs: 2083.3586. Time: 988.0297 us. Best GFLOPs: 10850.6461
2024-04-30 11:24:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 11:24:29 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-30 11:24:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 443 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:24:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 888 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:24:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1333 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1779 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2226 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2670 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3565 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4456 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:25:51 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 11:26:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:26:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:26:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:27:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 11:27:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1224  1.0797  1.0485  1.0485  1.0463  1.0437  1.0296  1.0089  1.0014  0.9996  0.9962  0.9949  0.9926  0.9875  0.9874  0.9873
[17 : 32]:	0.9820  0.9786  0.9781  0.9775  0.9775  0.9772  0.9769  0.9764  0.9760  0.9755  0.9753  0.9753  0.9743  0.9729  0.9729  0.9727
[33 : 48]:	0.9711  0.9709  0.9684  0.9684  0.9684  0.9670  0.9665  0.9639  0.9617  0.9601  0.9580  0.9566  0.9566  0.9559  0.9545  0.9538
[49 : 64]:	0.9532  0.9531  0.9516  0.9490  0.9483  0.9467  0.9463  0.9458  0.9444  0.9441  0.9441  0.9432  0.9416  0.9398  0.9394  0.9378
2024-04-30 11:27:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 11:27:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #65: GFLOPs: 9215.8470. Time: 223.3566 us. Best GFLOPs: 10850.6461
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #66: GFLOPs: 11879.4291. Time: 173.2760 us. Best GFLOPs: 11879.4291
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #67: GFLOPs: 11836.1501. Time: 173.9096 us. Best GFLOPs: 11879.4291
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #68: GFLOPs: 11886.0111. Time: 173.1801 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #69: GFLOPs: 7803.5182. Time: 263.7811 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #70: GFLOPs: 7815.7732. Time: 263.3674 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #71: GFLOPs: 7496.4872. Time: 274.5846 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #72: GFLOPs: 10539.7473. Time: 195.3007 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #73: GFLOPs: 10730.5820. Time: 191.8275 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #74: GFLOPs: 10833.5656. Time: 190.0039 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #75: GFLOPs: 8059.1029. Time: 255.4156 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #76: GFLOPs: 10491.2746. Time: 196.2031 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #77: GFLOPs: 10827.1573. Time: 190.1164 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #78: GFLOPs: 7538.5574. Time: 273.0523 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #79: GFLOPs: 6790.8787. Time: 303.1154 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #80: GFLOPs: 6874.1875. Time: 299.4420 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #81: GFLOPs: 6422.2469. Time: 320.5140 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #82: GFLOPs: 10732.6493. Time: 191.7905 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #83: GFLOPs: 11504.4193. Time: 178.9243 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #84: GFLOPs: 10776.6310. Time: 191.0078 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #85: GFLOPs: 10816.7195. Time: 190.2999 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #86: GFLOPs: 5245.8694. Time: 392.3888 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #87: GFLOPs: 10599.7165. Time: 194.1958 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #88: GFLOPs: 10583.3163. Time: 194.4967 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #89: GFLOPs: 10790.9285. Time: 190.7547 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #90: GFLOPs: 10576.8785. Time: 194.6151 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #91: GFLOPs: 10862.2064. Time: 189.5030 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #92: GFLOPs: 10844.8574. Time: 189.8061 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #93: GFLOPs: 10490.5545. Time: 196.2165 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #94: GFLOPs: 10493.7518. Time: 196.1567 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #95: GFLOPs: 10484.3721. Time: 196.3322 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #96: GFLOPs: 10707.4465. Time: 192.2419 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #97: GFLOPs: 11554.6140. Time: 178.1470 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #98: GFLOPs: 11404.6022. Time: 180.4903 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #99: GFLOPs: 10840.4139. Time: 189.8839 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #100: GFLOPs: 10884.1951. Time: 189.1201 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #101: GFLOPs: 10936.5196. Time: 188.2153 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #102: GFLOPs: 10443.9490. Time: 197.0921 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #103: GFLOPs: 10456.2816. Time: 196.8597 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #104: GFLOPs: 11544.1106. Time: 178.3091 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #105: GFLOPs: 11451.7533. Time: 179.7472 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #106: GFLOPs: 10540.9561. Time: 195.2783 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #107: GFLOPs: 10447.9411. Time: 197.0168 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #108: GFLOPs: 8059.9854. Time: 255.3876 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #109: GFLOPs: 6031.9975. Time: 341.2502 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #110: GFLOPs: 11873.0815. Time: 173.3687 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #111: GFLOPs: 6013.5704. Time: 342.2959 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #112: GFLOPs: 10779.8609. Time: 190.9505 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #113: GFLOPs: 11062.2270. Time: 186.0765 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #114: GFLOPs: 10447.4070. Time: 197.0269 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #115: GFLOPs: 7742.1296. Time: 265.8726 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #116: GFLOPs: 6859.7892. Time: 300.0705 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #117: GFLOPs: 11458.2238. Time: 179.6457 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #118: GFLOPs: 11491.0902. Time: 179.1318 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #119: GFLOPs: 10878.0040. Time: 189.2278 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #120: GFLOPs: 10864.2029. Time: 189.4681 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #121: GFLOPs: 8980.8498. Time: 229.2011 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #122: GFLOPs: 10873.5896. Time: 189.3046 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #123: GFLOPs: 10912.1080. Time: 188.6364 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #124: GFLOPs: 4756.5904. Time: 432.7512 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #125: GFLOPs: 4809.0828. Time: 428.0276 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #126: GFLOPs: 5524.1050. Time: 372.6251 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #127: GFLOPs: 6932.9179. Time: 296.9053 us. Best GFLOPs: 11886.0111
2024-04-30 11:28:34 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #128: GFLOPs: 1999.7721. Time: 1029.3274 us. Best GFLOPs: 11886.0111
2024-04-30 12:10:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 12:11:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 12:11:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2830 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:11:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3237 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:12:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3646 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:12:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4049 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:12:09 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 12:12:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:12:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:13:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:13:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:13:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0095  0.9910  0.9910  0.9910  0.9800  0.9791  0.9791  0.9775  0.9681  0.9657  0.9655  0.9626  0.9622  0.9578  0.9570  0.9567
[17 : 32]:	0.9518  0.9495  0.9494  0.9492  0.9483  0.9475  0.9473  0.9469  0.9467  0.9467  0.9460  0.9457  0.9455  0.9455  0.9454  0.9452
[33 : 48]:	0.9452  0.9450  0.9450  0.9437  0.9427  0.9427  0.9421  0.9420  0.9418  0.9402  0.9394  0.9393  0.9384  0.9383  0.9375  0.9367
[49 : 64]:	0.9367  0.9362  0.9357  0.9357  0.9355  0.9355  0.9337  0.9317  0.9317  0.9307  0.9304  0.9304  0.9300  0.9295  0.9288  0.9285
2024-04-30 12:13:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 12:13:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #129: GFLOPs: 11902.8010. Time: 172.9358 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #130: GFLOPs: 11753.0530. Time: 175.1392 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #131: GFLOPs: 11767.5726. Time: 174.9231 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #132: GFLOPs: 11762.8458. Time: 174.9934 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #133: GFLOPs: 11852.5897. Time: 173.6684 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #134: GFLOPs: 11736.2750. Time: 175.3896 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #135: GFLOPs: 11721.8263. Time: 175.6058 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #136: GFLOPs: 11848.5193. Time: 173.7281 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #137: GFLOPs: 11847.0013. Time: 173.7503 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #138: GFLOPs: 11498.1135. Time: 179.0224 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #139: GFLOPs: 11345.9125. Time: 181.4239 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #140: GFLOPs: 11841.1602. Time: 173.8360 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #141: GFLOPs: 11671.6523. Time: 176.3607 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #142: GFLOPs: 11700.9875. Time: 175.9185 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #143: GFLOPs: 11466.0177. Time: 179.5236 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #144: GFLOPs: 11475.8447. Time: 179.3698 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #145: GFLOPs: 11661.0980. Time: 176.5203 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #146: GFLOPs: 11706.4502. Time: 175.8364 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #147: GFLOPs: 10910.2638. Time: 188.6682 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #148: GFLOPs: 11302.3474. Time: 182.1232 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #149: GFLOPs: 11410.7928. Time: 180.3924 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #150: GFLOPs: 11346.7003. Time: 181.4113 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #151: GFLOPs: 11853.4949. Time: 173.6551 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #152: GFLOPs: 11315.2960. Time: 181.9148 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #153: GFLOPs: 11355.6199. Time: 181.2689 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #154: GFLOPs: 11362.6425. Time: 181.1568 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #155: GFLOPs: 10381.2003. Time: 198.2835 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #156: GFLOPs: 10363.8689. Time: 198.6150 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #157: GFLOPs: 10877.6619. Time: 189.2337 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #158: GFLOPs: 10881.7803. Time: 189.1621 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #159: GFLOPs: 11686.5046. Time: 176.1365 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #160: GFLOPs: 11868.6651. Time: 173.4332 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #161: GFLOPs: 10838.8008. Time: 189.9122 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #162: GFLOPs: 11486.4992. Time: 179.2034 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #163: GFLOPs: 11472.4829. Time: 179.4224 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #164: GFLOPs: 11513.9493. Time: 178.7762 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #165: GFLOPs: 4099.9549. Time: 502.0592 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #166: GFLOPs: 11564.0741. Time: 178.0013 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #167: GFLOPs: 11454.2146. Time: 179.7085 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #168: GFLOPs: 11504.1762. Time: 178.9281 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #169: GFLOPs: 11516.2006. Time: 178.7413 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #170: GFLOPs: 10809.9622. Time: 190.4188 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #171: GFLOPs: 11790.9712. Time: 174.5760 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #172: GFLOPs: 11628.1261. Time: 177.0208 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #173: GFLOPs: 11247.7399. Time: 183.0075 us. Best GFLOPs: 11902.8010
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #174: GFLOPs: 11943.3183. Time: 172.3491 us. Best GFLOPs: 11943.3183
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #175: GFLOPs: 11946.0341. Time: 172.3099 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #176: GFLOPs: 11018.5671. Time: 186.8138 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #177: GFLOPs: 10972.7069. Time: 187.5946 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #178: GFLOPs: 11924.5578. Time: 172.6203 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #179: GFLOPs: 11565.7403. Time: 177.9757 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #180: GFLOPs: 11613.1049. Time: 177.2498 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #181: GFLOPs: 10865.4914. Time: 189.4457 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #182: GFLOPs: 10834.9297. Time: 189.9800 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #183: GFLOPs: 11453.3871. Time: 179.7215 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #184: GFLOPs: 11763.0337. Time: 174.9906 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #185: GFLOPs: 11095.3268. Time: 185.5214 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #186: GFLOPs: 4203.8257. Time: 489.6540 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #187: GFLOPs: 11521.9673. Time: 178.6518 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #188: GFLOPs: 11452.3353. Time: 179.7380 us. Best GFLOPs: 11946.0341
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #189: GFLOPs: 12147.7050. Time: 169.4493 us. Best GFLOPs: 12147.7050
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #190: GFLOPs: 3140.0022. Time: 655.5474 us. Best GFLOPs: 12147.7050
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #191: GFLOPs: 8293.4491. Time: 248.1983 us. Best GFLOPs: 12147.7050
2024-04-30 12:14:47 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #192: GFLOPs: 855.0894. Time: 2407.2573 us. Best GFLOPs: 12147.7050
2024-04-30 12:48:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 12:48:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 12:49:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1622 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2025 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2430 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2839 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:49:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3243 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:50:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3648 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:50:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4052 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:50:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4460 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:50:13 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 12:50:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:50:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:51:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:51:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 12:51:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0789  1.0702  1.0702  1.0527  1.0527  1.0527  1.0432  1.0415  1.0402  1.0394  1.0350  1.0329  1.0296  1.0243  1.0156  1.0092
[17 : 32]:	1.0063  0.9977  0.9890  0.9872  0.9871  0.9865  0.9853  0.9849  0.9804  0.9793  0.9792  0.9788  0.9784  0.9744  0.9744  0.9735
[33 : 48]:	0.9718  0.9718  0.9715  0.9698  0.9698  0.9697  0.9693  0.9690  0.9686  0.9685  0.9671  0.9642  0.9615  0.9602  0.9583  0.9582
[49 : 64]:	0.9578  0.9574  0.9574  0.9570  0.9566  0.9565  0.9562  0.9562  0.9558  0.9555  0.9551  0.9548  0.9544  0.9541  0.9538  0.9530
2024-04-30 12:51:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 12:51:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #193: GFLOPs: 10284.6590. Time: 200.1447 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #194: GFLOPs: 10478.0215. Time: 196.4512 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #195: GFLOPs: 10390.0733. Time: 198.1141 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #196: GFLOPs: 10379.1141. Time: 198.3233 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #197: GFLOPs: 10535.0682. Time: 195.3875 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #198: GFLOPs: 10381.8259. Time: 198.2715 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #199: GFLOPs: 9364.8475. Time: 219.8029 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #200: GFLOPs: 10102.3007. Time: 203.7576 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #201: GFLOPs: 10254.4489. Time: 200.7344 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #202: GFLOPs: 10207.2221. Time: 201.6631 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #203: GFLOPs: 10323.7659. Time: 199.3866 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #204: GFLOPs: 10141.6739. Time: 202.9665 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #205: GFLOPs: 9255.4982. Time: 222.3997 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #206: GFLOPs: 9182.8816. Time: 224.1584 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #207: GFLOPs: 10495.3289. Time: 196.1273 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #208: GFLOPs: 8900.2981. Time: 231.2754 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #209: GFLOPs: 9430.4177. Time: 218.2746 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #210: GFLOPs: 9231.0977. Time: 222.9876 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #211: GFLOPs: 11809.4775. Time: 174.3024 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #212: GFLOPs: 8797.9780. Time: 233.9651 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #213: GFLOPs: 9317.3436. Time: 220.9235 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #214: GFLOPs: 9253.9298. Time: 222.4374 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #215: GFLOPs: 9315.6202. Time: 220.9644 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #216: GFLOPs: 11707.7133. Time: 175.8174 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #217: GFLOPs: 11832.5522. Time: 173.9625 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #218: GFLOPs: 8928.0243. Time: 230.5572 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #219: GFLOPs: 11658.0689. Time: 176.5661 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #220: GFLOPs: 9009.2649. Time: 228.4782 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #221: GFLOPs: 8944.3948. Time: 230.1352 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #222: GFLOPs: 8963.9731. Time: 229.6326 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #223: GFLOPs: 8965.0305. Time: 229.6055 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #224: GFLOPs: 11831.4680. Time: 173.9784 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #225: GFLOPs: 12013.5371. Time: 171.3417 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #226: GFLOPs: 924.3251. Time: 2226.9440 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #227: GFLOPs: 11847.4158. Time: 173.7442 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #228: GFLOPs: 9062.8614. Time: 227.1270 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #229: GFLOPs: 9188.7614. Time: 224.0150 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #230: GFLOPs: 8927.4178. Time: 230.5729 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #231: GFLOPs: 11769.2259. Time: 174.8985 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #232: GFLOPs: 11732.2836. Time: 175.4492 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #233: GFLOPs: 11676.3330. Time: 176.2900 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #234: GFLOPs: 915.2086. Time: 2249.1269 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #235: GFLOPs: 11560.2276. Time: 178.0605 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #236: GFLOPs: 11663.5123. Time: 176.4837 us. Best GFLOPs: 12147.7050
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #237: GFLOPs: 12203.7997. Time: 168.6704 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #238: GFLOPs: 11437.8642. Time: 179.9654 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #239: GFLOPs: 11531.0877. Time: 178.5105 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #240: GFLOPs: 11697.2488. Time: 175.9747 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #241: GFLOPs: 11336.5969. Time: 181.5730 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #242: GFLOPs: 11745.2026. Time: 175.2563 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #243: GFLOPs: 10696.1904. Time: 192.4442 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #244: GFLOPs: 12047.2057. Time: 170.8629 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #245: GFLOPs: 11250.5193. Time: 182.9622 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #246: GFLOPs: 11488.2671. Time: 179.1759 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #247: GFLOPs: 11544.3320. Time: 178.3057 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #248: GFLOPs: 11543.1631. Time: 178.3238 us. Best GFLOPs: 12203.7997
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #249: GFLOPs: 12412.7961. Time: 165.8305 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #250: GFLOPs: 11834.8023. Time: 173.9294 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #251: GFLOPs: 12387.5535. Time: 166.1684 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #252: GFLOPs: 10451.0396. Time: 196.9584 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #253: GFLOPs: 11756.9878. Time: 175.0806 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #254: GFLOPs: 5155.8248. Time: 399.2417 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #255: GFLOPs: 608.4007. Time: 3383.3300 us. Best GFLOPs: 12412.7961
2024-04-30 12:52:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #256: GFLOPs: 8122.2935. Time: 253.4284 us. Best GFLOPs: 12412.7961
2024-04-30 13:27:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 13:27:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 13:28:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2836 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:28:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3240 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:29:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3648 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:29:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4053 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:29:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4460 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:29:17 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 13:29:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:30:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:30:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:30:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 13:31:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0021  0.9997  0.9933  0.9890  0.9807  0.9761  0.9646  0.9603  0.9594  0.9592  0.9592  0.9566  0.9526  0.9521  0.9521  0.9509
[17 : 32]:	0.9497  0.9497  0.9491  0.9471  0.9470  0.9464  0.9459  0.9438  0.9435  0.9431  0.9431  0.9429  0.9421  0.9404  0.9401  0.9397
[33 : 48]:	0.9396  0.9386  0.9384  0.9383  0.9380  0.9380  0.9380  0.9378  0.9376  0.9374  0.9370  0.9367  0.9363  0.9363  0.9362  0.9356
[49 : 64]:	0.9356  0.9354  0.9351  0.9346  0.9345  0.9339  0.9339  0.9339  0.9338  0.9337  0.9336  0.9333  0.9333  0.9329  0.9326  0.9326
2024-04-30 13:31:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 13:31:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #257: GFLOPs: 10674.2740. Time: 192.8394 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #258: GFLOPs: 11765.4872. Time: 174.9541 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #259: GFLOPs: 11714.2902. Time: 175.7187 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #260: GFLOPs: 10635.9576. Time: 193.5341 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #261: GFLOPs: 11786.4662. Time: 174.6427 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #262: GFLOPs: 10659.7220. Time: 193.1026 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #263: GFLOPs: 12397.2301. Time: 166.0387 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #264: GFLOPs: 11833.4951. Time: 173.9486 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #265: GFLOPs: 10411.6850. Time: 197.7029 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #266: GFLOPs: 11878.9002. Time: 173.2837 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #267: GFLOPs: 11883.5026. Time: 173.2166 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #268: GFLOPs: 11853.2883. Time: 173.6582 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #269: GFLOPs: 11878.6312. Time: 173.2877 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #270: GFLOPs: 11414.0056. Time: 180.3416 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #271: GFLOPs: 11745.8936. Time: 175.2459 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #272: GFLOPs: 11810.5574. Time: 174.2865 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #273: GFLOPs: 11845.6628. Time: 173.7699 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #274: GFLOPs: 11836.3441. Time: 173.9068 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #275: GFLOPs: 11412.9277. Time: 180.3586 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #276: GFLOPs: 11737.2928. Time: 175.3744 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #277: GFLOPs: 10665.7213. Time: 192.9940 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #278: GFLOPs: 3626.9549. Time: 567.5340 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #279: GFLOPs: 11292.6842. Time: 182.2791 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #280: GFLOPs: 11833.5357. Time: 173.9480 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #281: GFLOPs: 11579.7574. Time: 177.7602 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #282: GFLOPs: 11808.1943. Time: 174.3213 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #283: GFLOPs: 11836.4742. Time: 173.9048 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #284: GFLOPs: 11402.2304. Time: 180.5279 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #285: GFLOPs: 11834.6066. Time: 173.9323 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #286: GFLOPs: 11735.6289. Time: 175.3992 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #287: GFLOPs: 12411.2046. Time: 165.8518 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #288: GFLOPs: 11685.3940. Time: 176.1533 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #289: GFLOPs: 11643.0702. Time: 176.7936 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #290: GFLOPs: 11886.4258. Time: 173.1740 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #291: GFLOPs: 11460.8541. Time: 179.6044 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #292: GFLOPs: 11722.4209. Time: 175.5969 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #293: GFLOPs: 8871.8477. Time: 232.0171 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #294: GFLOPs: 11805.9330. Time: 174.3547 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #295: GFLOPs: 11384.3049. Time: 180.8121 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #296: GFLOPs: 11821.4409. Time: 174.1260 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #297: GFLOPs: 11592.7329. Time: 177.5613 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #298: GFLOPs: 11341.8105. Time: 181.4896 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #299: GFLOPs: 11460.2367. Time: 179.6141 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #300: GFLOPs: 11551.3990. Time: 178.1966 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #301: GFLOPs: 11826.5972. Time: 174.0501 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #302: GFLOPs: 12255.6738. Time: 167.9565 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #303: GFLOPs: 11400.0796. Time: 180.5619 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #304: GFLOPs: 11716.0701. Time: 175.6920 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #305: GFLOPs: 11688.1965. Time: 176.1110 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #306: GFLOPs: 11199.9437. Time: 183.7884 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #307: GFLOPs: 12196.5650. Time: 168.7705 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #308: GFLOPs: 11817.4993. Time: 174.1841 us. Best GFLOPs: 12412.7961
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #309: GFLOPs: 12550.0486. Time: 164.0169 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #310: GFLOPs: 10800.1401. Time: 190.5920 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #311: GFLOPs: 10726.0911. Time: 191.9078 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #312: GFLOPs: 10723.0412. Time: 191.9624 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #313: GFLOPs: 11433.3058. Time: 180.0372 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #314: GFLOPs: 8839.7359. Time: 232.8599 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #315: GFLOPs: 11470.2791. Time: 179.4569 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #316: GFLOPs: 10847.0236. Time: 189.7682 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #317: GFLOPs: 11378.9809. Time: 180.8967 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #318: GFLOPs: 1025.8290. Time: 2006.5920 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #319: GFLOPs: 497.4649. Time: 4137.8201 us. Best GFLOPs: 12550.0486
2024-04-30 13:32:08 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #320: GFLOPs: 778.3644. Time: 2644.5457 us. Best GFLOPs: 12550.0486
2024-04-30 14:08:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 14:08:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 14:08:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1223 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1630 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2037 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2444 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2851 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3257 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:09:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3663 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4069 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4469 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4877 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 5282 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 5688 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:10:30 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 14:10:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:11:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:12:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:12:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9873  0.9853  0.9834  0.9833  0.9739  0.9699  0.9692  0.9686  0.9676  0.9674  0.9608  0.9595  0.9594  0.9565  0.9558
[17 : 32]:	0.9553  0.9551  0.9550  0.9536  0.9529  0.9529  0.9529  0.9515  0.9514  0.9514  0.9505  0.9496  0.9473  0.9462  0.9461  0.9460
[33 : 48]:	0.9459  0.9459  0.9449  0.9448  0.9447  0.9430  0.9430  0.9426  0.9417  0.9416  0.9414  0.9409  0.9409  0.9409  0.9409  0.9409
[49 : 64]:	0.9405  0.9405  0.9405  0.9404  0.9396  0.9387  0.9351  0.9344  0.9344  0.9344  0.9343  0.9343  0.9341  0.9338  0.9337  0.9333
2024-04-30 14:12:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 14:12:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #321: GFLOPs: 12409.5712. Time: 165.8736 us. Best GFLOPs: 12550.0486
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #322: GFLOPs: 12481.4378. Time: 164.9185 us. Best GFLOPs: 12550.0486
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #323: GFLOPs: 12416.1805. Time: 165.7853 us. Best GFLOPs: 12550.0486
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #324: GFLOPs: 11258.1680. Time: 182.8379 us. Best GFLOPs: 12550.0486
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #325: GFLOPs: 12595.6090. Time: 163.4236 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #326: GFLOPs: 11924.5092. Time: 172.6210 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #327: GFLOPs: 11590.8004. Time: 177.5909 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #328: GFLOPs: 11588.9542. Time: 177.6192 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #329: GFLOPs: 11861.3764. Time: 173.5397 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #330: GFLOPs: 11763.2609. Time: 174.9872 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #331: GFLOPs: 11880.6564. Time: 173.2581 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #332: GFLOPs: 12395.3342. Time: 166.0641 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #333: GFLOPs: 12264.2091. Time: 167.8396 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #334: GFLOPs: 11816.6766. Time: 174.1962 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #335: GFLOPs: 11678.7218. Time: 176.2539 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #336: GFLOPs: 11658.5008. Time: 176.5596 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #337: GFLOPs: 2635.8583. Time: 780.9298 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #338: GFLOPs: 12223.7510. Time: 168.3951 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #339: GFLOPs: 11800.3211. Time: 174.4376 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #340: GFLOPs: 11526.0187. Time: 178.5890 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #341: GFLOPs: 11626.7194. Time: 177.0422 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #342: GFLOPs: 11625.4800. Time: 177.0611 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #343: GFLOPs: 11843.1421. Time: 173.8069 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #344: GFLOPs: 11715.2347. Time: 175.7046 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #345: GFLOPs: 11834.8867. Time: 173.9282 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #346: GFLOPs: 11831.2628. Time: 173.9814 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #347: GFLOPs: 10572.3655. Time: 194.6982 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #348: GFLOPs: 11684.7231. Time: 176.1634 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #349: GFLOPs: 11737.3228. Time: 175.3739 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #350: GFLOPs: 11663.3028. Time: 176.4869 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #351: GFLOPs: 11831.9572. Time: 173.9712 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #352: GFLOPs: 11402.8036. Time: 180.5188 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #353: GFLOPs: 11866.2647. Time: 173.4683 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #354: GFLOPs: 11854.3687. Time: 173.6423 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #355: GFLOPs: 11829.1957. Time: 174.0118 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #356: GFLOPs: 11447.4936. Time: 179.8141 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #357: GFLOPs: 11789.8318. Time: 174.5928 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #358: GFLOPs: 11848.7732. Time: 173.7243 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #359: GFLOPs: 11866.2647. Time: 173.4683 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #360: GFLOPs: 11333.9314. Time: 181.6157 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #361: GFLOPs: 12227.4391. Time: 168.3443 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #362: GFLOPs: 11850.8194. Time: 173.6943 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #363: GFLOPs: 11572.5675. Time: 177.8707 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #364: GFLOPs: 11577.7439. Time: 177.7911 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #365: GFLOPs: 11666.6201. Time: 176.4367 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #366: GFLOPs: 11729.4796. Time: 175.4912 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #367: GFLOPs: 11673.1172. Time: 176.3385 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #368: GFLOPs: 11792.9080. Time: 174.5473 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #369: GFLOPs: 11809.5970. Time: 174.3006 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #370: GFLOPs: 11449.8069. Time: 179.7777 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #371: GFLOPs: 11716.3283. Time: 175.6882 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #372: GFLOPs: 11808.5613. Time: 174.3159 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #373: GFLOPs: 11825.3603. Time: 174.0683 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #374: GFLOPs: 12232.7260. Time: 168.2716 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #375: GFLOPs: 11675.7373. Time: 176.2989 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #376: GFLOPs: 11688.1874. Time: 176.1112 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #377: GFLOPs: 11688.0704. Time: 176.1129 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #378: GFLOPs: 11691.4373. Time: 176.0622 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #379: GFLOPs: 11742.7561. Time: 175.2928 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #380: GFLOPs: 11687.0699. Time: 176.1280 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #381: GFLOPs: 11187.0795. Time: 183.9998 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #382: GFLOPs: 9739.8006. Time: 211.3411 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #383: GFLOPs: 8038.7481. Time: 256.0623 us. Best GFLOPs: 12595.6090
2024-04-30 14:13:17 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #384: GFLOPs: 2501.4940. Time: 822.8763 us. Best GFLOPs: 12595.6090
2024-04-30 14:57:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 14:58:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 14:58:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1618 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2025 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:58:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2839 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3246 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3655 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4061 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4468 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4874 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 5279 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 14:59:35 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 14:59:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:00:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:00:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:01:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:01:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9825  0.9804  0.9775  0.9774  0.9766  0.9747  0.9739  0.9735  0.9724  0.9720  0.9708  0.9705  0.9700  0.9693  0.9692  0.9692
[17 : 32]:	0.9692  0.9690  0.9684  0.9684  0.9681  0.9680  0.9672  0.9665  0.9665  0.9662  0.9642  0.9638  0.9638  0.9638  0.9629  0.9627
[33 : 48]:	0.9626  0.9622  0.9614  0.9614  0.9609  0.9593  0.9593  0.9592  0.9588  0.9569  0.9558  0.9558  0.9555  0.9552  0.9542  0.9538
[49 : 64]:	0.9534  0.9533  0.9532  0.9532  0.9526  0.9518  0.9516  0.9516  0.9510  0.9509  0.9500  0.9499  0.9498  0.9496  0.9495  0.9495
2024-04-30 15:01:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 15:01:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #385: GFLOPs: 12472.1085. Time: 165.0419 us. Best GFLOPs: 12595.6090
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #386: GFLOPs: 12605.3157. Time: 163.2978 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #387: GFLOPs: 12414.6202. Time: 165.8061 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #388: GFLOPs: 12405.2516. Time: 165.9314 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #389: GFLOPs: 11402.9276. Time: 180.5168 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #390: GFLOPs: 10849.9481. Time: 189.7171 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #391: GFLOPs: 11877.0768. Time: 173.3103 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #392: GFLOPs: 12213.0365. Time: 168.5429 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #393: GFLOPs: 11631.0371. Time: 176.9765 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #394: GFLOPs: 11845.5832. Time: 173.7711 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #395: GFLOPs: 11792.9403. Time: 174.5468 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #396: GFLOPs: 10687.1896. Time: 192.6063 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #397: GFLOPs: 12029.4415. Time: 171.1152 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #398: GFLOPs: 12471.7041. Time: 165.0472 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #399: GFLOPs: 10765.5304. Time: 191.2047 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #400: GFLOPs: 10761.7086. Time: 191.2726 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #401: GFLOPs: 10750.5607. Time: 191.4710 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #402: GFLOPs: 11672.6141. Time: 176.3461 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #403: GFLOPs: 11734.7599. Time: 175.4122 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #404: GFLOPs: 11808.8134. Time: 174.3122 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #405: GFLOPs: 11804.6278. Time: 174.3740 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #406: GFLOPs: 12281.6673. Time: 167.6010 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #407: GFLOPs: 12584.6577. Time: 163.5658 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #408: GFLOPs: 10910.2928. Time: 188.6677 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #409: GFLOPs: 11829.3560. Time: 174.0095 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #410: GFLOPs: 11724.5897. Time: 175.5644 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #411: GFLOPs: 10890.1259. Time: 189.0171 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #412: GFLOPs: 10858.9740. Time: 189.5594 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #413: GFLOPs: 10861.0935. Time: 189.5224 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #414: GFLOPs: 10864.3243. Time: 189.4660 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #415: GFLOPs: 11713.3740. Time: 175.7325 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #416: GFLOPs: 11726.4460. Time: 175.5366 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #417: GFLOPs: 12138.9524. Time: 169.5715 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #418: GFLOPs: 11665.0653. Time: 176.4602 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #419: GFLOPs: 11801.2369. Time: 174.4241 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #420: GFLOPs: 10882.2823. Time: 189.1534 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #421: GFLOPs: 12323.2217. Time: 167.0359 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #422: GFLOPs: 10765.9308. Time: 191.1976 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #423: GFLOPs: 10761.5625. Time: 191.2752 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #424: GFLOPs: 10705.1026. Time: 192.2840 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #425: GFLOPs: 11728.4305. Time: 175.5069 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #426: GFLOPs: 11782.1529. Time: 174.7066 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #427: GFLOPs: 11915.0527. Time: 172.7580 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #428: GFLOPs: 12068.8970. Time: 170.5558 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #429: GFLOPs: 11208.9402. Time: 183.6409 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #430: GFLOPs: 12218.2401. Time: 168.4711 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #431: GFLOPs: 11686.0694. Time: 176.1431 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #432: GFLOPs: 11830.4605. Time: 173.9932 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #433: GFLOPs: 12111.9905. Time: 169.9490 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #434: GFLOPs: 11464.5165. Time: 179.5471 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #435: GFLOPs: 10790.2096. Time: 190.7674 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #436: GFLOPs: 10791.3232. Time: 190.7477 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #437: GFLOPs: 11260.2332. Time: 182.8044 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #438: GFLOPs: 12215.1166. Time: 168.5142 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #439: GFLOPs: 10848.2520. Time: 189.7467 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #440: GFLOPs: 10861.3670. Time: 189.5176 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #441: GFLOPs: 12373.7854. Time: 166.3533 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #442: GFLOPs: 10949.8572. Time: 187.9860 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #443: GFLOPs: 11719.3805. Time: 175.6424 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #444: GFLOPs: 11721.5988. Time: 175.6092 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #445: GFLOPs: 11892.7940. Time: 173.0813 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #446: GFLOPs: 10248.7430. Time: 200.8461 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #447: GFLOPs: 2360.4423. Time: 872.0485 us. Best GFLOPs: 12605.3157
2024-04-30 15:02:24 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #448: GFLOPs: 941.6775. Time: 2185.9079 us. Best GFLOPs: 12605.3157
2024-04-30 15:41:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 15:41:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 15:41:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2432 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:41:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2838 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3243 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3649 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4056 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4461 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4866 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:42:34 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 15:42:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:43:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:43:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:44:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 15:44:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0065  0.9871  0.9868  0.9865  0.9852  0.9848  0.9848  0.9825  0.9809  0.9805  0.9805  0.9778  0.9763  0.9747  0.9745  0.9744
[17 : 32]:	0.9738  0.9734  0.9734  0.9734  0.9719  0.9705  0.9703  0.9697  0.9694  0.9688  0.9681  0.9681  0.9678  0.9676  0.9671  0.9664
[33 : 48]:	0.9663  0.9656  0.9651  0.9643  0.9640  0.9640  0.9639  0.9636  0.9635  0.9626  0.9623  0.9608  0.9601  0.9601  0.9585  0.9585
[49 : 64]:	0.9585  0.9582  0.9568  0.9568  0.9566  0.9564  0.9563  0.9555  0.9545  0.9544  0.9542  0.9537  0.9534  0.9534  0.9528  0.9524
2024-04-30 15:44:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 15:44:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #449: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2016), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(8) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(8) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(4) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 2, 1, 1, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[14, 2, 112, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #450: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), ci_p_fused_0 // T.int64(49) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2016), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(4) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(336) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(336) // T.int64(56) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(14) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_1_nu_1_co_1_p_1_fused * T.int64(112) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[14, 2, 112, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 4, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #451: GFLOPs: 12405.7291. Time: 165.9250 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #452: GFLOPs: 12218.1049. Time: 168.4730 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #453: GFLOPs: 12360.8472. Time: 166.5274 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #454: GFLOPs: 12417.6299. Time: 165.7660 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #455: GFLOPs: 12462.1295. Time: 165.1740 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #456: GFLOPs: 12171.6615. Time: 169.1158 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #457: GFLOPs: 12322.2154. Time: 167.0495 us. Best GFLOPs: 12605.3157
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #458: GFLOPs: 12691.4721. Time: 162.1892 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #459: GFLOPs: 12258.0658. Time: 167.9237 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #460: GFLOPs: 12443.6209. Time: 165.4197 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #461: GFLOPs: 12483.1041. Time: 164.8965 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #462: GFLOPs: 12333.0990. Time: 166.9021 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #463: GFLOPs: 12522.8289. Time: 164.3734 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #464: GFLOPs: 12428.5432. Time: 165.6204 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #465: GFLOPs: 12440.0811. Time: 165.4668 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #466: GFLOPs: 12403.3969. Time: 165.9562 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #467: GFLOPs: 12398.1338. Time: 166.0266 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #468: GFLOPs: 12396.0916. Time: 166.0540 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #469: GFLOPs: 12058.5315. Time: 170.7024 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #470: GFLOPs: 12024.1603. Time: 171.1904 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #471: GFLOPs: 12164.7372. Time: 169.2121 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #472: GFLOPs: 12077.4229. Time: 170.4354 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #473: GFLOPs: 12272.6463. Time: 167.7242 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #474: GFLOPs: 12181.9037. Time: 168.9736 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #475: GFLOPs: 12164.3109. Time: 169.2180 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #476: GFLOPs: 2432.6608. Time: 846.1600 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #477: GFLOPs: 12319.9257. Time: 167.0806 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #478: GFLOPs: 12315.8912. Time: 167.1353 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #479: GFLOPs: 12489.2490. Time: 164.8154 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #480: GFLOPs: 12096.4657. Time: 170.1671 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #481: GFLOPs: 11710.5903. Time: 175.7742 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #482: GFLOPs: 12517.2943. Time: 164.4461 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #483: GFLOPs: 12247.4251. Time: 168.0696 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #484: GFLOPs: 12174.9136. Time: 169.0706 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #485: GFLOPs: 12182.6690. Time: 168.9630 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #486: GFLOPs: 12167.1766. Time: 169.1781 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #487: GFLOPs: 12329.9316. Time: 166.9450 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #488: GFLOPs: 12054.1521. Time: 170.7644 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #489: GFLOPs: 12351.8641. Time: 166.6485 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #490: GFLOPs: 11635.5385. Time: 176.9080 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #491: GFLOPs: 11848.5133. Time: 173.7281 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #492: GFLOPs: 11932.0375. Time: 172.5120 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #493: GFLOPs: 12170.6639. Time: 169.1297 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #494: GFLOPs: 12223.0433. Time: 168.4049 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #495: GFLOPs: 12051.6509. Time: 170.7999 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #496: GFLOPs: 12495.9063. Time: 164.7276 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #497: GFLOPs: 11893.8468. Time: 173.0660 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #498: GFLOPs: 11872.9975. Time: 173.3699 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #499: GFLOPs: 12389.9598. Time: 166.1362 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #500: GFLOPs: 11572.6441. Time: 177.8695 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #501: GFLOPs: 12106.1892. Time: 170.0304 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #502: GFLOPs: 12015.2852. Time: 171.3168 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #503: GFLOPs: 12403.9138. Time: 165.9493 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #504: GFLOPs: 11606.4541. Time: 177.3513 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #505: GFLOPs: 11924.1386. Time: 172.6263 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #506: GFLOPs: 12240.3661. Time: 168.1666 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #507: GFLOPs: 12061.3558. Time: 170.6624 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #508: GFLOPs: 12495.1210. Time: 164.7379 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #509: GFLOPs: 12196.7093. Time: 168.7685 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #510: GFLOPs: 868.9464. Time: 2368.8691 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #511: GFLOPs: 8303.5761. Time: 247.8956 us. Best GFLOPs: 12691.4721
2024-04-30 15:45:20 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #512: GFLOPs: 124.8036. Time: 16493.2751 us. Best GFLOPs: 12691.4721
2024-04-30 16:21:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 16:21:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 16:21:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1219 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1624 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2027 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:21:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2834 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:22:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3241 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:22:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3643 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:22:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4047 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:22:17 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 16:22:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:23:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:23:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:23:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 163 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:23:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0033  0.9922  0.9896  0.9896  0.9895  0.9874  0.9871  0.9869  0.9861  0.9861  0.9817  0.9817  0.9812  0.9810  0.9810  0.9809
[17 : 32]:	0.9805  0.9799  0.9797  0.9797  0.9795  0.9795  0.9794  0.9790  0.9786  0.9786  0.9784  0.9784  0.9781  0.9780  0.9780  0.9779
[33 : 48]:	0.9778  0.9774  0.9774  0.9772  0.9772  0.9770  0.9770  0.9767  0.9767  0.9765  0.9764  0.9757  0.9749  0.9747  0.9747  0.9747
[49 : 64]:	0.9747  0.9745  0.9743  0.9741  0.9741  0.9741  0.9740  0.9738  0.9738  0.9736  0.9734  0.9733  0.9726  0.9725  0.9724  0.9723
2024-04-30 16:23:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 16:23:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #513: GFLOPs: 12622.9854. Time: 163.0692 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #514: GFLOPs: 12550.5270. Time: 164.0107 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #515: GFLOPs: 12607.8680. Time: 163.2647 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #516: GFLOPs: 12583.7463. Time: 163.5777 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #517: GFLOPs: 12630.5179. Time: 162.9720 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #518: GFLOPs: 12339.4414. Time: 166.8163 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #519: GFLOPs: 12571.6730. Time: 163.7348 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #520: GFLOPs: 12688.0234. Time: 162.2333 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #521: GFLOPs: 12621.5540. Time: 163.0877 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #522: GFLOPs: 12622.1115. Time: 163.0805 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #523: GFLOPs: 12535.8866. Time: 164.2022 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #524: GFLOPs: 12541.7693. Time: 164.1252 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #525: GFLOPs: 12486.8018. Time: 164.8477 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #526: GFLOPs: 12443.6307. Time: 165.4196 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #527: GFLOPs: 12512.0310. Time: 164.5153 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #528: GFLOPs: 12662.6106. Time: 162.5589 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #529: GFLOPs: 12307.0466. Time: 167.2554 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #530: GFLOPs: 12620.8865. Time: 163.0963 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #531: GFLOPs: 12454.9786. Time: 165.2689 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #532: GFLOPs: 12422.5066. Time: 165.7009 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #533: GFLOPs: 12538.7269. Time: 164.1650 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #534: GFLOPs: 12410.0095. Time: 165.8677 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #535: GFLOPs: 12410.0528. Time: 165.8672 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #536: GFLOPs: 12019.1558. Time: 171.2616 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #537: GFLOPs: 12328.3934. Time: 166.9658 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #538: GFLOPs: 12382.7171. Time: 166.2333 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #539: GFLOPs: 12555.4262. Time: 163.9467 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #540: GFLOPs: 12489.4444. Time: 164.8128 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #541: GFLOPs: 12521.0177. Time: 164.3972 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #542: GFLOPs: 12424.7872. Time: 165.6705 us. Best GFLOPs: 12691.4721
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #543: GFLOPs: 12830.2050. Time: 160.4355 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #544: GFLOPs: 12531.0606. Time: 164.2654 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #545: GFLOPs: 12783.6991. Time: 161.0191 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #546: GFLOPs: 12330.3748. Time: 166.9390 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #547: GFLOPs: 12526.7764. Time: 164.3216 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #548: GFLOPs: 12554.6939. Time: 163.9562 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #549: GFLOPs: 12535.0095. Time: 164.2137 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #550: GFLOPs: 12386.7911. Time: 166.1787 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #551: GFLOPs: 12176.6407. Time: 169.0466 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #552: GFLOPs: 12449.7739. Time: 165.3380 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #553: GFLOPs: 12284.3790. Time: 167.5640 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #554: GFLOPs: 12093.0000. Time: 170.2158 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #555: GFLOPs: 12437.9637. Time: 165.4950 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #556: GFLOPs: 12496.2824. Time: 164.7226 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #557: GFLOPs: 12539.9186. Time: 164.1494 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #558: GFLOPs: 12485.2313. Time: 164.8684 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #559: GFLOPs: 12534.6309. Time: 164.2187 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #560: GFLOPs: 12648.7537. Time: 162.7370 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #561: GFLOPs: 11953.0323. Time: 172.2090 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #562: GFLOPs: 12643.1858. Time: 162.8087 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #563: GFLOPs: 12159.0117. Time: 169.2917 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #564: GFLOPs: 12178.6452. Time: 169.0188 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #565: GFLOPs: 12379.3672. Time: 166.2783 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #566: GFLOPs: 12379.2404. Time: 166.2800 us. Best GFLOPs: 12830.2050
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #567: GFLOPs: 12855.9808. Time: 160.1138 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #568: GFLOPs: 12455.4182. Time: 165.2630 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #569: GFLOPs: 12492.9555. Time: 164.7665 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #570: GFLOPs: 12367.4465. Time: 166.4386 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #571: GFLOPs: 12374.8031. Time: 166.3396 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #572: GFLOPs: 12281.5503. Time: 167.6026 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #573: GFLOPs: 12345.1766. Time: 166.7388 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #574: GFLOPs: 367.9956. Time: 5593.5999 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #575: GFLOPs: 2726.3692. Time: 755.0042 us. Best GFLOPs: 12855.9808
2024-04-30 16:25:04 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #576: GFLOPs: 9615.3119. Time: 214.0773 us. Best GFLOPs: 12855.9808
2024-04-30 16:59:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 16:59:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 16:59:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 16:59:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1223 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1630 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2036 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2441 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2849 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3254 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3660 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:00:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4068 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:01:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4471 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:01:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4877 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:01:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 5284 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:01:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 5688 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:01:29 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 17:01:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:02:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:02:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 152 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:03:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:03:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2330  1.2330  1.1268  1.0541  1.0357  1.0159  1.0110  0.9920  0.9850  0.9840  0.9826  0.9826  0.9816  0.9813  0.9812  0.9795
[17 : 32]:	0.9795  0.9792  0.9789  0.9783  0.9780  0.9779  0.9767  0.9764  0.9763  0.9758  0.9757  0.9756  0.9753  0.9753  0.9752  0.9752
[33 : 48]:	0.9749  0.9749  0.9742  0.9727  0.9726  0.9726  0.9725  0.9725  0.9724  0.9723  0.9723  0.9722  0.9722  0.9716  0.9716  0.9716
[49 : 64]:	0.9715  0.9715  0.9708  0.9707  0.9704  0.9698  0.9697  0.9696  0.9691  0.9690  0.9689  0.9689  0.9687  0.9687  0.9685  0.9685
2024-04-30 17:03:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 17:03:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #577: GFLOPs: 2980.1793. Time: 690.7035 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #578: GFLOPs: 3017.1648. Time: 682.2366 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #579: GFLOPs: 10593.9994. Time: 194.3006 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #580: GFLOPs: 3042.3358. Time: 676.5921 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #581: GFLOPs: 3235.4735. Time: 636.2037 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #582: GFLOPs: 10327.5321. Time: 199.3139 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #583: GFLOPs: 3029.0917. Time: 679.5503 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #584: GFLOPs: 1339.0716. Time: 1537.1995 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #585: GFLOPs: 12690.8672. Time: 162.1970 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #586: GFLOPs: 12268.0774. Time: 167.7867 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #587: GFLOPs: 12686.2395. Time: 162.2561 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #588: GFLOPs: 12629.6596. Time: 162.9830 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #589: GFLOPs: 12680.4587. Time: 162.3301 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #590: GFLOPs: 12631.6898. Time: 162.9568 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #591: GFLOPs: 12349.6735. Time: 166.6781 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #592: GFLOPs: 12606.9646. Time: 163.2764 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #593: GFLOPs: 12628.2165. Time: 163.0017 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #594: GFLOPs: 12361.4598. Time: 166.5192 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #595: GFLOPs: 12649.0941. Time: 162.7326 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #596: GFLOPs: 12442.3683. Time: 165.4364 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #597: GFLOPs: 12327.6969. Time: 166.9752 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #598: GFLOPs: 12627.6684. Time: 163.0087 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #599: GFLOPs: 12634.6813. Time: 162.9183 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #600: GFLOPs: 12623.0497. Time: 163.0684 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #601: GFLOPs: 12478.9186. Time: 164.9518 us. Best GFLOPs: 12855.9808
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #602: GFLOPs: 13214.9856. Time: 155.7641 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #603: GFLOPs: 12573.6104. Time: 163.7096 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #604: GFLOPs: 12261.6277. Time: 167.8750 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #605: GFLOPs: 12452.6542. Time: 165.2997 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #606: GFLOPs: 12441.2307. Time: 165.4515 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #607: GFLOPs: 12592.6911. Time: 163.4615 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #608: GFLOPs: 12545.2370. Time: 164.0798 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #609: GFLOPs: 12602.0263. Time: 163.3404 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #610: GFLOPs: 12623.5894. Time: 163.0614 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #611: GFLOPs: 12856.7126. Time: 160.1047 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #612: GFLOPs: 12366.3624. Time: 166.4532 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #613: GFLOPs: 12405.3640. Time: 165.9299 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #614: GFLOPs: 12467.5593. Time: 165.1021 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #615: GFLOPs: 12622.2581. Time: 163.0786 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #616: GFLOPs: 12421.7757. Time: 165.7106 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #617: GFLOPs: 12563.7128. Time: 163.8385 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #618: GFLOPs: 12399.4894. Time: 166.0085 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #619: GFLOPs: 12316.0820. Time: 167.1327 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #620: GFLOPs: 12659.7920. Time: 162.5951 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #621: GFLOPs: 12612.4033. Time: 163.2060 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #622: GFLOPs: 12445.2931. Time: 165.3975 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #623: GFLOPs: 12398.3340. Time: 166.0239 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #624: GFLOPs: 12497.4304. Time: 164.7075 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #625: GFLOPs: 12607.9246. Time: 163.2640 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #626: GFLOPs: 12538.2706. Time: 164.1710 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #627: GFLOPs: 12493.6508. Time: 164.7573 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #628: GFLOPs: 12656.4845. Time: 162.6376 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #629: GFLOPs: 12487.5455. Time: 164.8379 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #630: GFLOPs: 12473.7926. Time: 165.0196 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #631: GFLOPs: 12036.7655. Time: 171.0111 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #632: GFLOPs: 12195.6775. Time: 168.7828 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #633: GFLOPs: 12495.7498. Time: 164.7296 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #634: GFLOPs: 12535.5390. Time: 164.2068 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #635: GFLOPs: 12420.9752. Time: 165.7213 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #636: GFLOPs: 12450.6368. Time: 165.3265 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #637: GFLOPs: 12461.3289. Time: 165.1846 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #638: GFLOPs: 769.6780. Time: 2674.3915 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #639: GFLOPs: 7192.0206. Time: 286.2089 us. Best GFLOPs: 13214.9856
2024-04-30 17:04:26 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #640: GFLOPs: 4913.3908. Time: 418.9409 us. Best GFLOPs: 13214.9856
2024-04-30 17:29:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 17:29:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 17:29:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 814 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1621 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2029 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2434 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2839 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3245 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:30:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3650 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:31:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4055 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:31:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 4459 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:31:11 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 17:31:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:31:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:32:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:32:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 150 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 17:32:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9680  0.9670  0.9661  0.9629  0.9627  0.9608  0.9604  0.9589  0.9588  0.9576  0.9570  0.9570  0.9560  0.9550  0.9547  0.9544
[17 : 32]:	0.9535  0.9535  0.9534  0.9529  0.9527  0.9526  0.9526  0.9522  0.9518  0.9513  0.9511  0.9508  0.9506  0.9505  0.9503  0.9502
[33 : 48]:	0.9501  0.9500  0.9499  0.9498  0.9495  0.9494  0.9494  0.9494  0.9492  0.9487  0.9482  0.9482  0.9482  0.9476  0.9475  0.9473
[49 : 64]:	0.9472  0.9471  0.9471  0.9470  0.9470  0.9470  0.9468  0.9467  0.9467  0.9466  0.9466  0.9462  0.9461  0.9458  0.9456  0.9456
2024-04-30 17:32:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 17:32:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #641: GFLOPs: 13215.7379. Time: 155.7552 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #642: GFLOPs: 12099.4090. Time: 170.1257 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #643: GFLOPs: 12045.8854. Time: 170.8816 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #644: GFLOPs: 12176.4218. Time: 169.0497 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #645: GFLOPs: 11483.8383. Time: 179.2450 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #646: GFLOPs: 12259.2863. Time: 167.9070 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #647: GFLOPs: 12527.0943. Time: 164.3175 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #648: GFLOPs: 12538.4272. Time: 164.1689 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #649: GFLOPs: 12537.6320. Time: 164.1793 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #650: GFLOPs: 12654.0829. Time: 162.6685 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #651: GFLOPs: 12097.9930. Time: 170.1456 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #652: GFLOPs: 12097.1328. Time: 170.1577 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #653: GFLOPs: 12582.6718. Time: 163.5917 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #654: GFLOPs: 12578.1999. Time: 163.6498 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #655: GFLOPs: 12537.5550. Time: 164.1804 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #656: GFLOPs: 12700.6270. Time: 162.0723 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #657: GFLOPs: 12634.3998. Time: 162.9219 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #658: GFLOPs: 12522.8917. Time: 164.3726 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #659: GFLOPs: 12831.9564. Time: 160.4136 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #660: GFLOPs: 12442.7290. Time: 165.4316 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #661: GFLOPs: 12512.5879. Time: 164.5080 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #662: GFLOPs: 12690.4369. Time: 162.2025 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #663: GFLOPs: 12604.7962. Time: 163.3045 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #664: GFLOPs: 12575.5628. Time: 163.6841 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #665: GFLOPs: 12759.2864. Time: 161.3272 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #666: GFLOPs: 12534.3217. Time: 164.2227 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #667: GFLOPs: 12375.5798. Time: 166.3292 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #668: GFLOPs: 12629.8480. Time: 162.9806 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #669: GFLOPs: 12851.9874. Time: 160.1636 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #670: GFLOPs: 12551.1125. Time: 164.0030 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #671: GFLOPs: 12146.0784. Time: 169.4720 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #672: GFLOPs: 12555.2722. Time: 163.9487 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #673: GFLOPs: 12529.1581. Time: 164.2904 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #674: GFLOPs: 12536.1325. Time: 164.1990 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #675: GFLOPs: 12408.4936. Time: 165.8880 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #676: GFLOPs: 12104.6951. Time: 170.0514 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #677: GFLOPs: 12743.1521. Time: 161.5315 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #678: GFLOPs: 12825.9047. Time: 160.4893 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #679: GFLOPs: 12687.4795. Time: 162.2403 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #680: GFLOPs: 12580.6742. Time: 163.6176 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #681: GFLOPs: 12505.2618. Time: 164.6043 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #682: GFLOPs: 12584.1080. Time: 163.5730 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #683: GFLOPs: 12181.5762. Time: 168.9782 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #684: GFLOPs: 12255.0708. Time: 167.9648 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #685: GFLOPs: 12558.5252. Time: 163.9062 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #686: GFLOPs: 12442.4744. Time: 165.4350 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #687: GFLOPs: 12459.9904. Time: 165.2024 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #688: GFLOPs: 12764.6238. Time: 161.2598 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #689: GFLOPs: 12533.7738. Time: 164.2299 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #690: GFLOPs: 12534.7906. Time: 164.2166 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #691: GFLOPs: 12879.5932. Time: 159.8203 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #692: GFLOPs: 12389.7366. Time: 166.1391 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #693: GFLOPs: 12539.0794. Time: 164.1604 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #694: GFLOPs: 12538.3832. Time: 164.1695 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #695: GFLOPs: 12130.2554. Time: 169.6931 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #696: GFLOPs: 12549.8510. Time: 164.0195 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #697: GFLOPs: 12462.7196. Time: 165.1662 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #698: GFLOPs: 12456.8430. Time: 165.2441 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #699: GFLOPs: 12525.5310. Time: 164.3380 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #700: GFLOPs: 12132.8307. Time: 169.6570 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #701: GFLOPs: 12766.1583. Time: 161.2404 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #702: GFLOPs: 3965.6506. Time: 519.0624 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #703: GFLOPs: 6205.5084. Time: 331.7086 us. Best GFLOPs: 13215.7379
2024-04-30 17:33:59 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #704: GFLOPs: 944.3861. Time: 2179.6385 us. Best GFLOPs: 13215.7379
2024-04-30 18:06:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 18:06:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 18:07:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 2834 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 3638 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:07:57 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 18:08:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:08:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:09:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:09:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb36368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xefc6ac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xefc70a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x54a8768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x493a3e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb29d388)]: 170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb134fc8)]: 0 failure(s)
2024-04-30 18:09:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9744  0.9688  0.9667  0.9665  0.9653  0.9648  0.9630  0.9626  0.9620  0.9610  0.9609  0.9607  0.9607  0.9600  0.9593  0.9591
[17 : 32]:	0.9588  0.9586  0.9583  0.9583  0.9577  0.9575  0.9574  0.9566  0.9562  0.9560  0.9558  0.9557  0.9555  0.9554  0.9551  0.9536
[33 : 48]:	0.9536  0.9533  0.9528  0.9527  0.9527  0.9525  0.9522  0.9521  0.9517  0.9516  0.9514  0.9513  0.9513  0.9504  0.9504  0.9504
[49 : 64]:	0.9504  0.9504  0.9503  0.9503  0.9503  0.9503  0.9501  0.9501  0.9501  0.9499  0.9499  0.9497  0.9496  0.9495  0.9494  0.9492
2024-04-30 18:09:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 18:09:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #705: GFLOPs: 12837.9572. Time: 160.3386 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #706: GFLOPs: 12277.8154. Time: 167.6536 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #707: GFLOPs: 12682.3276. Time: 162.3062 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #708: GFLOPs: 12532.2020. Time: 164.2505 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #709: GFLOPs: 12714.5060. Time: 161.8954 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #710: GFLOPs: 13057.5344. Time: 157.6423 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #711: GFLOPs: 12405.4970. Time: 165.9281 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #712: GFLOPs: 13132.1944. Time: 156.7461 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #713: GFLOPs: 12502.8724. Time: 164.6358 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #714: GFLOPs: 12657.2954. Time: 162.6272 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #715: GFLOPs: 12321.7412. Time: 167.0560 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #716: GFLOPs: 12591.5359. Time: 163.4765 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #717: GFLOPs: 12619.4579. Time: 163.1148 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #718: GFLOPs: 12823.7658. Time: 160.5160 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #719: GFLOPs: 12530.6957. Time: 164.2702 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #720: GFLOPs: 12572.6320. Time: 163.7223 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #721: GFLOPs: 12533.8326. Time: 164.2291 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #722: GFLOPs: 12407.8263. Time: 165.8969 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #723: GFLOPs: 12595.4047. Time: 163.4263 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #724: GFLOPs: 12552.3602. Time: 163.9867 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #725: GFLOPs: 12578.3899. Time: 163.6474 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #726: GFLOPs: 12477.4548. Time: 164.9712 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #727: GFLOPs: 12609.2433. Time: 163.2469 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #728: GFLOPs: 13042.7481. Time: 157.8211 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #729: GFLOPs: 12544.0000. Time: 164.0960 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #730: GFLOPs: 13040.6269. Time: 157.8467 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #731: GFLOPs: 12740.9184. Time: 161.5598 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #732: GFLOPs: 12576.9677. Time: 163.6659 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #733: GFLOPs: 13085.0612. Time: 157.3107 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #734: GFLOPs: 12956.3083. Time: 158.8740 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #735: GFLOPs: 12626.0771. Time: 163.0293 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #736: GFLOPs: 12610.8231. Time: 163.2265 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #737: GFLOPs: 12637.4156. Time: 162.8830 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #738: GFLOPs: 12999.7382. Time: 158.3432 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #739: GFLOPs: 12616.9923. Time: 163.1467 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #740: GFLOPs: 12597.4557. Time: 163.3997 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #741: GFLOPs: 12697.0325. Time: 162.1182 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #742: GFLOPs: 12630.7799. Time: 162.9686 us. Best GFLOPs: 13215.7379
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #743: GFLOPs: 13220.6828. Time: 155.6970 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #744: GFLOPs: 12581.1234. Time: 163.6118 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #745: GFLOPs: 12754.1202. Time: 161.3926 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #746: GFLOPs: 13042.6857. Time: 157.8218 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #747: GFLOPs: 12571.7052. Time: 163.7344 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #748: GFLOPs: 12514.3746. Time: 164.4845 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #749: GFLOPs: 12519.7494. Time: 164.4139 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #750: GFLOPs: 12459.2468. Time: 165.2123 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #751: GFLOPs: 12619.5299. Time: 163.1139 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #752: GFLOPs: 12631.4147. Time: 162.9604 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #753: GFLOPs: 12636.6355. Time: 162.8931 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #754: GFLOPs: 12614.8763. Time: 163.1740 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #755: GFLOPs: 12836.1586. Time: 160.3611 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #756: GFLOPs: 12895.7603. Time: 159.6199 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #757: GFLOPs: 12882.7164. Time: 159.7815 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #758: GFLOPs: 12966.8316. Time: 158.7450 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #759: GFLOPs: 12512.6817. Time: 164.5067 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #760: GFLOPs: 12954.9475. Time: 158.8907 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #761: GFLOPs: 12514.3618. Time: 164.4846 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #762: GFLOPs: 12317.2777. Time: 167.1165 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #763: GFLOPs: 13007.3958. Time: 158.2500 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #764: GFLOPs: 12676.7210. Time: 162.3780 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #765: GFLOPs: 12585.1240. Time: 163.5598 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #766: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(36), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(8) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(588))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(588) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3528))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(64), ci_0)
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1152))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(8) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(8), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(12) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(3) + eps_1_nu_1_co_1_p_1_fused % T.int64(12) // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 3, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 2, 4, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[16, 1, 98, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 196, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #767: GFLOPs: 6056.2672. Time: 339.8827 us. Best GFLOPs: 13220.6828
2024-04-30 18:11:07 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #768: GFLOPs: 1318.4275. Time: 1561.2692 us. Best GFLOPs: 13220.6828
