2024-04-29 19:45:12 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6"
2024-04-29 19:45:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32), T.int64(256), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:45:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:45:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_n, v_ic // T.int64(256), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(256)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:45:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(30), T.int64(256)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(7) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:45:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(30), T.int64(256)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(7) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 20:15:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:15:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:15:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 20:15:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:15:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 20:15:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 20:15:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 20:15:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 20:16:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9990  0.9985  0.9965  0.9964  0.9955  0.9952  0.9927  0.9919  0.9914  0.9911  0.9910  0.9910  0.9907  0.9906  0.9900
[17 : 32]:	0.9898  0.9896  0.9888  0.9886  0.9886  0.9880  0.9877  0.9874  0.9869  0.9865  0.9865  0.9863  0.9862  0.9860  0.9858  0.9855
[33 : 48]:	0.9849  0.9848  0.9841  0.9823  0.9821  0.9818  0.9815  0.9813  0.9802  0.9792  0.9792  0.9791  0.9781  0.9780  0.9776  0.9772
[49 : 64]:	0.9770  0.9761  0.9747  0.9741  0.9741  0.9736  0.9727  0.9726  0.9707  0.9703  0.9703  0.9687  0.9687  0.9684  0.9679  0.9675
2024-04-29 20:16:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:16:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1: GFLOPs: 5.1309. Time: 360655.1883 us. Best GFLOPs: 5.1309
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #2: GFLOPs: 31.6631. Time: 58443.2273 us. Best GFLOPs: 31.6631
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #3: GFLOPs: 24.1007. Time: 76781.4967 us. Best GFLOPs: 31.6631
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #4: GFLOPs: 1.9571. Time: 945509.8203 us. Best GFLOPs: 31.6631
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #5: GFLOPs: 37.1244. Time: 49845.7080 us. Best GFLOPs: 37.1244
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #6: GFLOPs: 177.8615. Time: 10404.1101 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #8: GFLOPs: 29.8941. Time: 61901.5840 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #9: GFLOPs: 18.3175. Time: 101022.8387 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #10: GFLOPs: 65.6704. Time: 28178.4505 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #11: GFLOPs: 56.4535. Time: 32779.0408 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #12: GFLOPs: 87.6667. Time: 21108.2534 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #13: GFLOPs: 2.0242. Time: 914183.1083 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #14: GFLOPs: 42.4843. Time: 43557.0717 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #15: GFLOPs: 73.7565. Time: 25089.1767 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #16: GFLOPs: 18.9336. Time: 97735.6583 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #17: GFLOPs: 7.6404. Time: 242196.9863 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #18: GFLOPs: 101.2511. Time: 18276.2515 us. Best GFLOPs: 177.8615
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #19: GFLOPs: 247.7275. Time: 7469.8651 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #20: GFLOPs: 25.8376. Time: 71620.0237 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #21: GFLOPs: 49.1773. Time: 37628.9850 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #22: GFLOPs: 35.3897. Time: 52289.0170 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #23: GFLOPs: 5.7505. Time: 321795.8520 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #24: GFLOPs: 31.8145. Time: 58165.0193 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #25: GFLOPs: 82.3354. Time: 22475.0428 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #26: GFLOPs: 45.9648. Time: 40258.8443 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #27: GFLOPs: 11.7195. Time: 157898.7557 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #29: GFLOPs: 119.4034. Time: 15497.8011 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #30: GFLOPs: 3.2821. Time: 563821.0920 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #31: GFLOPs: 39.3024. Time: 47083.3663 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #32: GFLOPs: 11.7855. Time: 157014.0267 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #33: GFLOPs: 39.6382. Time: 46684.5593 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(8) * T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(8) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(8) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(8) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b68)
l83 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b115)
b136 = sch.decompose_reduction(block=b115, loop=l120)
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #35: GFLOPs: 2.4910. Time: 742869.7157 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #36: GFLOPs: 67.0976. Time: 27579.1028 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #37: GFLOPs: 6.1766. Time: 299598.8957 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #38: GFLOPs: 229.2773. Time: 8070.9721 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #39: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(8), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b113)
b139 = sch.decompose_reduction(block=b113, loop=l123)
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #40: GFLOPs: 120.1963. Time: 15395.5744 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #41: GFLOPs: 41.3173. Time: 44787.3440 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #42: GFLOPs: 126.6034. Time: 14616.4409 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #43: GFLOPs: 99.5430. Time: 18589.8727 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #44: GFLOPs: 28.3978. Time: 65163.0943 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #45: GFLOPs: 5.2173. Time: 354684.2367 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #46: GFLOPs: 12.0563. Time: 153487.2040 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #47: GFLOPs: 1.5611. Time: 1185398.1990 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #48: GFLOPs: 51.6840. Time: 35803.9247 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #49: GFLOPs: 2.6823. Time: 689889.4917 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #50: GFLOPs: 3.3828. Time: 547021.5817 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #51: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #52: GFLOPs: 13.7480. Time: 134600.7763 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #53: GFLOPs: 39.9880. Time: 46276.1933 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #54: GFLOPs: 88.4531. Time: 20920.5892 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #55: GFLOPs: 1.2263. Time: 1508981.5260 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #56: GFLOPs: 104.6147. Time: 17688.6305 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #57: GFLOPs: 21.3933. Time: 86498.5747 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #58: GFLOPs: 59.8395. Time: 30924.2592 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #59: GFLOPs: 48.6245. Time: 38056.7803 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #60: GFLOPs: 80.9054. Time: 22872.2710 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #61: GFLOPs: 14.7108. Time: 125791.2967 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #62: GFLOPs: 55.9447. Time: 33077.1440 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #63: GFLOPs: 51.2581. Time: 36101.4533 us. Best GFLOPs: 247.7275
2024-04-29 20:59:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #64: GFLOPs: 10.2816. Time: 179980.1673 us. Best GFLOPs: 247.7275
2024-04-29 21:30:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:30:54 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 21:30:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 21:30:59 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 21:31:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 21:31:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 21:31:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 21:31:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 21:32:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9812  0.9812  0.9520  0.9456  0.9456  0.9268  0.9233  0.8828  0.8828  0.8546  0.8546  0.8472  0.8387  0.8376  0.8125  0.8021
[17 : 32]:	0.7764  0.7359  0.7337  0.7184  0.7070  0.7063  0.7063  0.6901  0.6857  0.6792  0.6617  0.6605  0.6557  0.6545  0.6389  0.6376
[33 : 48]:	0.6358  0.6325  0.6253  0.6218  0.6211  0.6204  0.6092  0.6092  0.6054  0.6026  0.5996  0.5984  0.5978  0.5928  0.5918  0.5846
[49 : 64]:	0.5846  0.5846  0.5846  0.5745  0.5734  0.5724  0.5687  0.5589  0.5583  0.5583  0.5524  0.5522  0.5514  0.5482  0.5444  0.5434
2024-04-29 21:32:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:32:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #65: GFLOPs: 78.3650. Time: 23613.7468 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #66: GFLOPs: 46.9743. Time: 39393.6653 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #67: GFLOPs: 235.7065. Time: 7850.8253 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #68: GFLOPs: 108.2232. Time: 17098.8380 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #69: GFLOPs: 58.7768. Time: 31483.3800 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #70: GFLOPs: 133.8566. Time: 13824.4238 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #71: GFLOPs: 134.4343. Time: 13765.0248 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #72: GFLOPs: 129.5401. Time: 14285.0786 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #73: GFLOPs: 238.9671. Time: 7743.7063 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #74: GFLOPs: 78.4692. Time: 23582.3804 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #75: GFLOPs: 141.2834. Time: 13097.7197 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #76: GFLOPs: 81.2972. Time: 22762.0442 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #77: GFLOPs: 122.1574. Time: 15148.4096 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #78: GFLOPs: 181.9603. Time: 10169.7492 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #79: GFLOPs: 101.4001. Time: 18249.3995 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #80: GFLOPs: 66.4036. Time: 27867.3378 us. Best GFLOPs: 247.7275
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #81: GFLOPs: 311.5693. Time: 5939.2600 us. Best GFLOPs: 311.5693
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #82: GFLOPs: 404.4785. Time: 4575.0047 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #83: GFLOPs: 151.4191. Time: 12220.9850 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #84: GFLOPs: 166.7364. Time: 11098.3002 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #85: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(4)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(3)):
                        for ax4_fused in T.vectorized(T.int64(64)):
                            with T.block("data_pad"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ax3)
                                v_i4 = T.axis.spatial(T.int64(256), ic_0 * T.int64(64) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b68)
l108 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l108)
l109 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l110, l111, l112, l113, l114, preserve_unit_iters=True)
l116, l117 = sch.split(loop=l115, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l116)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b118)
b139 = sch.decompose_reduction(block=b118, loop=l123)
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #86: GFLOPs: 104.4909. Time: 17709.5952 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #87: GFLOPs: 136.8846. Time: 13518.6243 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #88: GFLOPs: 109.6501. Time: 16876.3242 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #89: GFLOPs: 123.2573. Time: 15013.2330 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #90: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
b129 = sch.decompose_reduction(block=b111, loop=l113)
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #91: GFLOPs: 322.7021. Time: 5734.3627 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #92: GFLOPs: 71.0734. Time: 26036.3460 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #93: GFLOPs: 138.7376. Time: 13338.0586 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #94: GFLOPs: 111.2634. Time: 16631.6209 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #95: GFLOPs: 97.4583. Time: 18987.5188 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #96: GFLOPs: 92.7125. Time: 19959.4457 us. Best GFLOPs: 404.4785
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #97: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-29 21:33:33 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #98: GFLOPs: 82.8935. Time: 22323.7026 us. Best GFLOPs: 404.4785
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #99: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
b129 = sch.decompose_reduction(block=b111, loop=l113)
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #100: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(3)):
                        for ax4_fused in T.vectorized(T.int64(16)):
                            with T.block("data_pad"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ax3)
                                v_i4 = T.axis.spatial(T.int64(256), ic_0 * T.int64(16) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(896) // T.int64(128) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(128) // T.int64(32) * T.int64(7) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b68)
l108 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l108)
l109 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l110, l111, l112, l113, l114, preserve_unit_iters=True)
l116, l117 = sch.split(loop=l115, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l116)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b118)
b139 = sch.decompose_reduction(block=b118, loop=l123)
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #101: GFLOPs: 26.8689. Time: 68871.1167 us. Best GFLOPs: 404.4785
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #102: GFLOPs: 102.8956. Time: 17984.1632 us. Best GFLOPs: 404.4785
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #103: GFLOPs: 451.9576. Time: 4094.3900 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #104: GFLOPs: 346.7964. Time: 5335.9572 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #105: GFLOPs: 182.5265. Time: 10138.2056 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #106: GFLOPs: 189.5836. Time: 9760.8173 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #107: GFLOPs: 121.3314. Time: 15251.5399 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #108: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #109: GFLOPs: 76.0020. Time: 24347.9076 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #110: GFLOPs: 103.2799. Time: 17917.2437 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #111: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(4)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(3)):
                        for ax4_fused in T.vectorized(T.int64(64)):
                            with T.block("data_pad"):
                                v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                                v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                                v_i4 = T.axis.spatial(T.int64(256), ic_0 * T.int64(64) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(896) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l108, l109, l110, l111, l112, preserve_unit_iters=True)
l114, l115 = sch.split(loop=l113, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l114)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b116)
b135 = sch.decompose_reduction(block=b116, loop=l119)
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #112: GFLOPs: 180.6425. Time: 10243.9425 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #113: GFLOPs: 180.7274. Time: 10239.1274 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #114: GFLOPs: 180.0220. Time: 10279.2471 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #115: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #116: GFLOPs: 173.8690. Time: 10643.0164 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #117: GFLOPs: 166.1725. Time: 11135.9652 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #118: GFLOPs: 82.5896. Time: 22405.8580 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #119: GFLOPs: 176.5258. Time: 10482.8336 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #120: GFLOPs: 355.4821. Time: 5205.5812 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #121: GFLOPs: 131.6509. Time: 14056.0423 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #122: GFLOPs: 122.6015. Time: 15093.5371 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #123: GFLOPs: 106.2556. Time: 17415.4652 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #124: GFLOPs: 32.4847. Time: 56964.9913 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #125: GFLOPs: 28.5723. Time: 64765.1893 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #126: GFLOPs: 126.0366. Time: 14682.1716 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #127: GFLOPs: 17.5036. Time: 105720.7283 us. Best GFLOPs: 451.9576
2024-04-29 21:33:34 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #128: GFLOPs: 66.9920. Time: 27622.5732 us. Best GFLOPs: 451.9576
2024-04-29 22:19:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:19:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:19:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 22:19:54 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:20:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 22:20:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 22:20:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 22:20:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 22:20:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9442  0.9442  0.8980  0.8919  0.8860  0.8860  0.8768  0.8767  0.8759  0.8707  0.8642  0.8550  0.8296  0.8277  0.8091  0.8083
[17 : 32]:	0.7839  0.7828  0.7825  0.7756  0.7625  0.7568  0.7567  0.7408  0.7204  0.7176  0.6902  0.6900  0.6704  0.6622  0.6554  0.6554
[33 : 48]:	0.6539  0.6539  0.6533  0.6516  0.6505  0.6459  0.6376  0.6376  0.6297  0.6295  0.6295  0.6295  0.6266  0.6262  0.6256  0.6256
[49 : 64]:	0.6245  0.6245  0.6245  0.6245  0.6245  0.6226  0.6062  0.6062  0.6045  0.6018  0.5986  0.5983  0.5977  0.5977  0.5965  0.5958
2024-04-29 22:20:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:20:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #129: GFLOPs: 506.7028. Time: 3652.0239 us. Best GFLOPs: 506.7028
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #130: GFLOPs: 484.6574. Time: 3818.1420 us. Best GFLOPs: 506.7028
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #131: GFLOPs: 490.4137. Time: 3773.3260 us. Best GFLOPs: 506.7028
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #132: GFLOPs: 427.4324. Time: 4329.3187 us. Best GFLOPs: 506.7028
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #133: GFLOPs: 509.5136. Time: 3631.8771 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #134: GFLOPs: 509.2794. Time: 3633.5475 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #135: GFLOPs: 486.1960. Time: 3806.0592 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #136: GFLOPs: 433.7678. Time: 4266.0863 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #137: GFLOPs: 425.1694. Time: 4352.3613 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #138: GFLOPs: 509.0195. Time: 3635.4025 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #139: GFLOPs: 368.0401. Time: 5027.9604 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #140: GFLOPs: 448.4686. Time: 4126.2438 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #141: GFLOPs: 449.5658. Time: 4116.1736 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #142: GFLOPs: 354.9268. Time: 5213.7247 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #143: GFLOPs: 354.3027. Time: 5222.9089 us. Best GFLOPs: 509.5136
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #144: GFLOPs: 509.9524. Time: 3628.7520 us. Best GFLOPs: 509.9524
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #145: GFLOPs: 753.5920. Time: 2455.5605 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #146: GFLOPs: 358.4133. Time: 5163.0078 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #147: GFLOPs: 352.5617. Time: 5248.7003 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #148: GFLOPs: 357.3276. Time: 5178.6951 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #149: GFLOPs: 136.2174. Time: 13584.8313 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #150: GFLOPs: 355.4136. Time: 5206.5841 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #151: GFLOPs: 411.5046. Time: 4496.8895 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #152: GFLOPs: 355.2760. Time: 5208.6006 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #153: GFLOPs: 138.3468. Time: 13375.7389 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #154: GFLOPs: 437.6082. Time: 4228.6477 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #155: GFLOPs: 163.8570. Time: 11293.3264 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #156: GFLOPs: 537.0325. Time: 3445.7705 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #157: GFLOPs: 167.9859. Time: 11015.7526 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #158: GFLOPs: 540.1849. Time: 3425.6623 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #159: GFLOPs: 54.7454. Time: 33801.7650 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #160: GFLOPs: 120.5984. Time: 15344.2397 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #161: GFLOPs: 269.7336. Time: 6860.4380 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #162: GFLOPs: 530.5350. Time: 3487.9713 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #163: GFLOPs: 209.1948. Time: 8845.7772 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #164: GFLOPs: 472.7113. Time: 3914.6319 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #165: GFLOPs: 143.8830. Time: 12861.0825 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #166: GFLOPs: 275.4452. Time: 6718.1822 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #167: GFLOPs: 581.6216. Time: 3181.6063 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #168: GFLOPs: 582.4313. Time: 3177.1831 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #169: GFLOPs: 582.6189. Time: 3176.1600 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #170: GFLOPs: 486.8406. Time: 3801.0198 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #171: GFLOPs: 136.6781. Time: 13539.0430 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #172: GFLOPs: 415.5503. Time: 4453.1088 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #173: GFLOPs: 440.4385. Time: 4201.4735 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #174: GFLOPs: 521.2934. Time: 3549.8066 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #175: GFLOPs: 582.0064. Time: 3179.5028 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #176: GFLOPs: 597.1193. Time: 3099.0303 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #177: GFLOPs: 432.2206. Time: 4281.3574 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #178: GFLOPs: 136.9262. Time: 13514.5125 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #179: GFLOPs: 136.1605. Time: 13590.5089 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #180: GFLOPs: 512.4107. Time: 3611.3432 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #181: GFLOPs: 431.8988. Time: 4284.5471 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #182: GFLOPs: 226.2275. Time: 8179.7771 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #183: GFLOPs: 171.1768. Time: 10810.4070 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #184: GFLOPs: 193.1578. Time: 9580.2047 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #185: GFLOPs: 89.3244. Time: 20716.5284 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #186: GFLOPs: 380.3489. Time: 4865.2460 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #187: GFLOPs: 392.4916. Time: 4714.7270 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #188: GFLOPs: 149.0828. Time: 12412.5036 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #189: GFLOPs: 148.6284. Time: 12450.4542 us. Best GFLOPs: 753.5920
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #190: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b121)
b147 = sch.decompose_reduction(block=b121, loop=l131)
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #191: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(7), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b113)
b138 = sch.decompose_reduction(block=b113, loop=l122)
2024-04-29 22:23:14 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #192: GFLOPs: 1.6546. Time: 1118382.2723 us. Best GFLOPs: 753.5920
2024-04-29 23:53:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:53:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:53:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:53:57 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:54:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:54:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:54:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:55:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:55:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9436  0.9365  0.8384  0.8253  0.7847  0.7824  0.7824  0.7761  0.7761  0.7649  0.7646  0.7614  0.7424  0.7424  0.7342  0.7261
[17 : 32]:	0.7081  0.7081  0.7005  0.6933  0.6914  0.6875  0.6875  0.6849  0.6774  0.6728  0.6722  0.6689  0.6633  0.6605  0.6605  0.6588
[33 : 48]:	0.6567  0.6567  0.6519  0.6422  0.6422  0.6405  0.6400  0.6391  0.6377  0.6374  0.6372  0.6366  0.6360  0.6354  0.6350  0.6350
[49 : 64]:	0.6343  0.6337  0.6320  0.6260  0.6230  0.6222  0.6219  0.6120  0.6105  0.6089  0.6073  0.6053  0.6021  0.5968  0.5945  0.5940
2024-04-29 23:55:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:55:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #193: GFLOPs: 704.1412. Time: 2628.0110 us. Best GFLOPs: 753.5920
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #194: GFLOPs: 755.6955. Time: 2448.7254 us. Best GFLOPs: 755.6955
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #195: GFLOPs: 714.4422. Time: 2590.1198 us. Best GFLOPs: 755.6955
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #196: GFLOPs: 1059.0854. Time: 1747.2536 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #197: GFLOPs: 569.2419. Time: 3250.7990 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #198: GFLOPs: 579.4682. Time: 3193.4298 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #199: GFLOPs: 575.1197. Time: 3217.5752 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #200: GFLOPs: 574.6023. Time: 3220.4725 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #201: GFLOPs: 574.9581. Time: 3218.4796 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #202: GFLOPs: 577.9494. Time: 3201.8218 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #203: GFLOPs: 623.3891. Time: 2968.4365 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #204: GFLOPs: 574.5072. Time: 3221.0056 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #205: GFLOPs: 728.1471. Time: 2541.3696 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #206: GFLOPs: 735.9416. Time: 2514.4534 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #207: GFLOPs: 450.0980. Time: 4111.3062 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #208: GFLOPs: 591.0398. Time: 3130.9075 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #209: GFLOPs: 522.0168. Time: 3544.8878 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #210: GFLOPs: 527.8662. Time: 3505.6058 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #211: GFLOPs: 478.4639. Time: 3867.5661 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #212: GFLOPs: 414.2329. Time: 4467.2720 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #213: GFLOPs: 577.8036. Time: 3202.6298 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #214: GFLOPs: 500.8150. Time: 3694.9589 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #215: GFLOPs: 417.9780. Time: 4427.2448 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #216: GFLOPs: 531.1443. Time: 3483.9703 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #217: GFLOPs: 448.0642. Time: 4129.9686 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #218: GFLOPs: 510.6109. Time: 3624.0727 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #219: GFLOPs: 523.1825. Time: 3536.9891 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #220: GFLOPs: 483.2353. Time: 3829.3788 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #221: GFLOPs: 508.2494. Time: 3640.9112 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #222: GFLOPs: 509.4928. Time: 3632.0257 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #223: GFLOPs: 499.0212. Time: 3708.2408 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #224: GFLOPs: 426.6088. Time: 4337.6763 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #225: GFLOPs: 507.6610. Time: 3645.1312 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #226: GFLOPs: 511.4599. Time: 3618.0565 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #227: GFLOPs: 417.4909. Time: 4432.4101 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #228: GFLOPs: 586.9494. Time: 3152.7265 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #229: GFLOPs: 542.4547. Time: 3411.3280 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #230: GFLOPs: 469.3276. Time: 3942.8555 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #231: GFLOPs: 376.6748. Time: 4912.7016 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #232: GFLOPs: 432.5489. Time: 4278.1082 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #233: GFLOPs: 151.0275. Time: 12252.6729 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #234: GFLOPs: 202.9155. Time: 9119.5150 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #235: GFLOPs: 535.0460. Time: 3458.5643 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #236: GFLOPs: 467.3198. Time: 3959.7954 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #237: GFLOPs: 416.3865. Time: 4444.1669 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #238: GFLOPs: 209.6660. Time: 8825.8992 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #239: GFLOPs: 320.5495. Time: 5772.8713 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #240: GFLOPs: 488.1076. Time: 3791.1534 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #241: GFLOPs: 644.5942. Time: 2870.7842 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #242: GFLOPs: 488.0977. Time: 3791.2307 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #243: GFLOPs: 557.0404. Time: 3322.0049 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #244: GFLOPs: 489.1836. Time: 3782.8143 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #245: GFLOPs: 209.9083. Time: 8815.7125 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #246: GFLOPs: 511.2373. Time: 3619.6319 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #247: GFLOPs: 529.7324. Time: 3493.2563 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #248: GFLOPs: 490.8986. Time: 3769.5989 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #249: GFLOPs: 175.3344. Time: 10554.0635 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #250: GFLOPs: 509.3222. Time: 3633.2421 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #251: GFLOPs: 137.9016. Time: 13418.9246 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #252: GFLOPs: 367.7711. Time: 5031.6370 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #253: GFLOPs: 453.5044. Time: 4080.4258 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #254: GFLOPs: 50.4887. Time: 36651.5840 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #255: GFLOPs: 39.0044. Time: 47443.0970 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #256: GFLOPs: 26.3698. Time: 70174.5837 us. Best GFLOPs: 1059.0854
2024-04-29 23:56:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:56:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:56:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:56:35 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:56:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:57:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:57:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:57:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-29 23:57:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9217  0.7276  0.7269  0.7245  0.7232  0.7058  0.7041  0.6993  0.6949  0.6886  0.6879  0.6872  0.6836  0.6826  0.6741  0.6741
[17 : 32]:	0.6551  0.6550  0.6346  0.6275  0.6265  0.6202  0.6032  0.6031  0.6003  0.5798  0.5766  0.5708  0.5591  0.5565  0.5542  0.5507
[33 : 48]:	0.5479  0.5470  0.5470  0.5470  0.5446  0.5442  0.5407  0.5384  0.5371  0.5320  0.5283  0.5275  0.5251  0.5246  0.5207  0.5145
[49 : 64]:	0.5127  0.5117  0.5109  0.5102  0.5090  0.5073  0.5062  0.5044  0.5040  0.5006  0.4994  0.4976  0.4975  0.4963  0.4961  0.4959
2024-04-29 23:57:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:57:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #257: GFLOPs: 429.3513. Time: 4309.9689 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #258: GFLOPs: 755.6465. Time: 2448.8844 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #259: GFLOPs: 749.4298. Time: 2469.1985 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #260: GFLOPs: 1055.5864. Time: 1753.0454 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #261: GFLOPs: 731.0753. Time: 2531.1904 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #262: GFLOPs: 1025.4240. Time: 1804.6104 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #263: GFLOPs: 875.3172. Time: 2114.0804 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #264: GFLOPs: 734.7212. Time: 2518.6299 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #265: GFLOPs: 998.9976. Time: 1852.3477 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #266: GFLOPs: 715.5571. Time: 2586.0841 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #267: GFLOPs: 996.8211. Time: 1856.3922 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #268: GFLOPs: 629.6595. Time: 2938.8753 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #269: GFLOPs: 752.6530. Time: 2458.6241 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #270: GFLOPs: 720.5008. Time: 2568.3396 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #271: GFLOPs: 840.7007. Time: 2201.1293 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #272: GFLOPs: 822.7105. Time: 2249.2612 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #273: GFLOPs: 440.5363. Time: 4200.5416 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #274: GFLOPs: 898.6246. Time: 2059.2480 us. Best GFLOPs: 1059.0854
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #275: GFLOPs: 1110.0159. Time: 1667.0851 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #276: GFLOPs: 672.5705. Time: 2751.3707 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #277: GFLOPs: 1016.0772. Time: 1821.2110 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #278: GFLOPs: 820.3807. Time: 2255.6489 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #279: GFLOPs: 774.4306. Time: 2389.4857 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #280: GFLOPs: 1028.7608. Time: 1798.7573 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #281: GFLOPs: 525.4252. Time: 3521.8921 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #282: GFLOPs: 549.3688. Time: 3368.3947 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #283: GFLOPs: 681.5300. Time: 2715.2011 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #284: GFLOPs: 338.3076. Time: 5469.8475 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #285: GFLOPs: 563.1450. Time: 3285.9937 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #286: GFLOPs: 584.9685. Time: 3163.4023 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #287: GFLOPs: 568.7202. Time: 3253.7809 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #288: GFLOPs: 627.3561. Time: 2949.6660 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #289: GFLOPs: 642.3332. Time: 2880.8894 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #290: GFLOPs: 582.6956. Time: 3175.7419 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #291: GFLOPs: 589.9061. Time: 3136.9247 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #292: GFLOPs: 575.7009. Time: 3214.3270 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #293: GFLOPs: 463.8077. Time: 3989.7803 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #294: GFLOPs: 588.9501. Time: 3142.0163 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #295: GFLOPs: 530.3647. Time: 3489.0915 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #296: GFLOPs: 594.6197. Time: 3112.0580 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #297: GFLOPs: 344.5866. Time: 5370.1765 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #298: GFLOPs: 586.0625. Time: 3157.4977 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #299: GFLOPs: 193.8631. Time: 9545.3506 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #300: GFLOPs: 525.8807. Time: 3518.8419 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #301: GFLOPs: 585.3870. Time: 3161.1409 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #302: GFLOPs: 750.4903. Time: 2465.7092 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #303: GFLOPs: 364.3446. Time: 5078.9584 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #304: GFLOPs: 883.0659. Time: 2095.5297 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #305: GFLOPs: 1020.9138. Time: 1812.5829 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #306: GFLOPs: 563.1361. Time: 3286.0458 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #307: GFLOPs: 586.2601. Time: 3156.4333 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #308: GFLOPs: 258.8851. Time: 7147.9248 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #309: GFLOPs: 138.0067. Time: 13408.6984 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #310: GFLOPs: 98.5964. Time: 18768.3355 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #311: GFLOPs: 691.0313. Time: 2677.8684 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #312: GFLOPs: 529.5808. Time: 3494.2559 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #313: GFLOPs: 67.8023. Time: 27292.4353 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #314: GFLOPs: 481.0577. Time: 3846.7130 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #315: GFLOPs: 49.8555. Time: 37117.1203 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #316: GFLOPs: 548.4383. Time: 3374.1093 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #317: GFLOPs: 507.5602. Time: 3645.8552 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #318: GFLOPs: 4.1595. Time: 444878.4907 us. Best GFLOPs: 1110.0159
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #319: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(4), T.int64(8), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(256), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_n, v_ic // T.int64(256), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(256)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-29 23:59:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #320: GFLOPs: 96.7872. Time: 19119.1720 us. Best GFLOPs: 1110.0159
2024-04-30 01:05:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:05:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:05:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 01:05:26 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:05:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 01:05:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 01:06:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 01:06:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 01:06:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9202  0.9115  0.9018  0.8966  0.8884  0.8801  0.8801  0.8761  0.8761  0.8684  0.8676  0.8668  0.8422  0.8404  0.8279  0.8240
[17 : 32]:	0.8240  0.8226  0.8189  0.7998  0.7983  0.7964  0.7964  0.7949  0.7788  0.7754  0.7714  0.7691  0.7689  0.7685  0.7658  0.7654
[33 : 48]:	0.7641  0.7641  0.7614  0.7542  0.7455  0.7411  0.7342  0.7328  0.7328  0.7248  0.7199  0.7197  0.7193  0.7186  0.7048  0.7026
[49 : 64]:	0.7000  0.6879  0.6860  0.6849  0.6835  0.6806  0.6801  0.6800  0.6797  0.6794  0.6794  0.6794  0.6769  0.6738  0.6711  0.6707
2024-04-30 01:06:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:06:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #321: GFLOPs: 758.8291. Time: 2438.6136 us. Best GFLOPs: 1110.0159
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #322: GFLOPs: 1008.5292. Time: 1834.8412 us. Best GFLOPs: 1110.0159
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #323: GFLOPs: 1512.1555. Time: 1223.7437 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #324: GFLOPs: 1105.6051. Time: 1673.7358 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #325: GFLOPs: 976.1866. Time: 1895.6322 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #326: GFLOPs: 998.1904. Time: 1853.8456 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #327: GFLOPs: 1002.5377. Time: 1845.8069 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #328: GFLOPs: 1014.6656. Time: 1823.7445 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #329: GFLOPs: 976.6817. Time: 1894.6715 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #330: GFLOPs: 1016.3046. Time: 1820.8033 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #331: GFLOPs: 842.4054. Time: 2196.6750 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #332: GFLOPs: 843.1643. Time: 2194.6980 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #333: GFLOPs: 680.6090. Time: 2718.8752 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #334: GFLOPs: 845.8806. Time: 2187.6503 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #335: GFLOPs: 1230.7911. Time: 1503.4971 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #336: GFLOPs: 1219.9270. Time: 1516.8866 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #337: GFLOPs: 1221.0995. Time: 1515.4300 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #338: GFLOPs: 823.4004. Time: 2247.3767 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #339: GFLOPs: 71.4751. Time: 25890.0058 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #340: GFLOPs: 1124.3973. Time: 1645.7625 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #341: GFLOPs: 71.7561. Time: 25788.6162 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #342: GFLOPs: 1247.3743. Time: 1483.5089 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #343: GFLOPs: 1241.5586. Time: 1490.4580 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #344: GFLOPs: 70.2396. Time: 26345.3935 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #345: GFLOPs: 68.4259. Time: 27043.7105 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #346: GFLOPs: 913.1047. Time: 2026.5923 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #347: GFLOPs: 555.5575. Time: 3330.8720 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #348: GFLOPs: 952.7565. Time: 1942.2496 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #349: GFLOPs: 915.9917. Time: 2020.2048 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #350: GFLOPs: 637.8282. Time: 2901.2373 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #351: GFLOPs: 908.0005. Time: 2037.9845 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #352: GFLOPs: 71.4041. Time: 25915.7487 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #353: GFLOPs: 910.2964. Time: 2032.8444 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #354: GFLOPs: 880.7647. Time: 2101.0049 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #355: GFLOPs: 887.2732. Time: 2085.5930 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #356: GFLOPs: 786.1862. Time: 2353.7566 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #357: GFLOPs: 1029.0746. Time: 1798.2086 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #358: GFLOPs: 1145.8411. Time: 1614.9630 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #359: GFLOPs: 789.9577. Time: 2342.5189 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #360: GFLOPs: 1111.7563. Time: 1664.4753 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #361: GFLOPs: 1089.7105. Time: 1698.1491 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #362: GFLOPs: 1006.2848. Time: 1838.9335 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #363: GFLOPs: 145.1705. Time: 12747.0181 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #364: GFLOPs: 1026.0566. Time: 1803.4978 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #365: GFLOPs: 1025.4613. Time: 1804.5448 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #366: GFLOPs: 966.7156. Time: 1914.2041 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #367: GFLOPs: 385.1615. Time: 4804.4541 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #368: GFLOPs: 498.3955. Time: 3712.8968 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #369: GFLOPs: 839.4370. Time: 2204.4427 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #370: GFLOPs: 599.0565. Time: 3089.0087 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #371: GFLOPs: 694.5939. Time: 2664.1335 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #372: GFLOPs: 799.5400. Time: 2314.4444 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #373: GFLOPs: 141.2178. Time: 13103.8081 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #374: GFLOPs: 463.1612. Time: 3995.3496 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #375: GFLOPs: 1253.5072. Time: 1476.2507 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #376: GFLOPs: 787.2070. Time: 2350.7044 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #377: GFLOPs: 360.0402. Time: 5139.6790 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #378: GFLOPs: 756.8383. Time: 2445.0279 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #379: GFLOPs: 760.4761. Time: 2433.3321 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #380: GFLOPs: 764.7894. Time: 2419.6085 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #381: GFLOPs: 749.7067. Time: 2468.2864 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #382: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(16), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(256), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(28) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(28) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #383: GFLOPs: 24.0119. Time: 77065.6703 us. Best GFLOPs: 1512.1555
2024-04-30 01:08:17 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #384: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(256)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(256), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b112)
b136 = sch.decompose_reduction(block=b112, loop=l120)
2024-04-30 03:35:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:35:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:35:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 03:35:26 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 03:35:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 03:35:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 03:36:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 03:36:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x337d508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb976978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a9a808)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb9db368)]: 0 failure(s)
2024-04-30 03:36:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8189  0.8189  0.8159  0.7833  0.7805  0.7632  0.7331  0.7230  0.7105  0.7103  0.7014  0.7000  0.6931  0.6930  0.6920  0.6886
[17 : 32]:	0.6866  0.6866  0.6856  0.6817  0.6816  0.6816  0.6801  0.6774  0.6764  0.6755  0.6739  0.6734  0.6733  0.6722  0.6709  0.6709
[33 : 48]:	0.6701  0.6683  0.6672  0.6665  0.6646  0.6633  0.6611  0.6603  0.6603  0.6583  0.6581  0.6568  0.6568  0.6567  0.6562  0.6562
[49 : 64]:	0.6484  0.6472  0.6462  0.6451  0.6384  0.6380  0.6379  0.6345  0.6259  0.6259  0.6227  0.6226  0.6203  0.6197  0.6174  0.6173
2024-04-30 03:36:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:36:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #385: GFLOPs: 1154.5309. Time: 1602.8075 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #386: GFLOPs: 1339.5317. Time: 1381.4461 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #387: GFLOPs: 1281.0067. Time: 1444.5599 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #388: GFLOPs: 1275.5073. Time: 1450.7882 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #389: GFLOPs: 475.5162. Time: 3891.5413 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #390: GFLOPs: 464.1601. Time: 3986.7514 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #391: GFLOPs: 1031.0299. Time: 1794.7984 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #392: GFLOPs: 211.9553. Time: 8730.5713 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #393: GFLOPs: 1290.5987. Time: 1433.8236 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #394: GFLOPs: 1248.4992. Time: 1482.1723 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #395: GFLOPs: 1281.8309. Time: 1443.6311 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #396: GFLOPs: 1109.0910. Time: 1668.4753 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #397: GFLOPs: 1122.1490. Time: 1649.0599 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #398: GFLOPs: 941.2226. Time: 1966.0501 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #399: GFLOPs: 971.3841. Time: 1905.0043 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #400: GFLOPs: 1120.4731. Time: 1651.5263 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #401: GFLOPs: 1092.1888. Time: 1694.2958 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #402: GFLOPs: 1105.7627. Time: 1673.4973 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #403: GFLOPs: 1054.8564. Time: 1754.2585 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #404: GFLOPs: 980.6185. Time: 1887.0650 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #405: GFLOPs: 1016.6628. Time: 1820.1619 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #406: GFLOPs: 1035.6780. Time: 1786.7435 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #407: GFLOPs: 879.9926. Time: 2102.8483 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #408: GFLOPs: 999.1094. Time: 1852.1405 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #409: GFLOPs: 1114.4856. Time: 1660.3991 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #410: GFLOPs: 128.9440. Time: 14351.1157 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #411: GFLOPs: 1014.9341. Time: 1823.2621 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #412: GFLOPs: 768.8768. Time: 2406.7456 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #413: GFLOPs: 1231.4375. Time: 1502.7079 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #414: GFLOPs: 1004.3643. Time: 1842.4499 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #415: GFLOPs: 1240.7246. Time: 1491.4598 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #416: GFLOPs: 1253.4406. Time: 1476.3291 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #417: GFLOPs: 1015.3599. Time: 1822.4976 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #418: GFLOPs: 917.4103. Time: 2017.0809 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #419: GFLOPs: 179.7771. Time: 10293.2497 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #420: GFLOPs: 1042.7259. Time: 1774.6667 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #421: GFLOPs: 953.0589. Time: 1941.6333 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #422: GFLOPs: 1040.9628. Time: 1777.6724 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #423: GFLOPs: 953.7735. Time: 1940.1786 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #424: GFLOPs: 1015.9586. Time: 1821.4236 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #425: GFLOPs: 1011.4696. Time: 1829.5072 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #426: GFLOPs: 948.7243. Time: 1950.5044 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #427: GFLOPs: 986.8776. Time: 1875.0966 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #428: GFLOPs: 1127.7283. Time: 1640.9014 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #429: GFLOPs: 1069.6383. Time: 1730.0155 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #430: GFLOPs: 978.6540. Time: 1890.8529 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #431: GFLOPs: 1078.9256. Time: 1715.1238 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #432: GFLOPs: 1072.3893. Time: 1725.5775 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #433: GFLOPs: 1367.0508. Time: 1353.6373 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #434: GFLOPs: 1016.4692. Time: 1820.5085 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #435: GFLOPs: 978.3955. Time: 1891.3526 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #436: GFLOPs: 1096.0316. Time: 1688.3554 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #437: GFLOPs: 995.9947. Time: 1857.9324 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #438: GFLOPs: 995.0335. Time: 1859.7272 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #439: GFLOPs: 991.9347. Time: 1865.5370 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #440: GFLOPs: 1003.4214. Time: 1844.1812 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #441: GFLOPs: 1251.9152. Time: 1478.1280 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #442: GFLOPs: 1208.0938. Time: 1531.7443 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #443: GFLOPs: 751.3005. Time: 2463.0503 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #444: GFLOPs: 784.3724. Time: 2359.1993 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #445: GFLOPs: 607.1576. Time: 3047.7934 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #446: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(256)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(256), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(256)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(256)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(256), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(2), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(256), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b111)
b134 = sch.decompose_reduction(block=b111, loop=l118)
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #447: GFLOPs: 7.4473. Time: 248479.6223 us. Best GFLOPs: 1512.1555
2024-04-30 03:38:37 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #448: GFLOPs: 5.3182. Time: 347955.6673 us. Best GFLOPs: 1512.1555
