2024-04-29 19:45:25 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_max_pool2d_3"
2024-04-29 19:45:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 19:45:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:45:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:45:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:45:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 20:24:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:24:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:24:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x336d558)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x32b0fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332f408)]: 0 failure(s)
2024-04-29 20:24:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:24:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x336d558)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x32b0fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332f408)]: 0 failure(s)
2024-04-29 20:24:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x336d558)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x32b0fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332f408)]: 0 failure(s)
2024-04-29 20:24:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x336d558)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x32b0fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332f408)]: 0 failure(s)
2024-04-29 20:24:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x336d558)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x32b0fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332f408)]: 0 failure(s)
2024-04-29 20:24:36 [INFO] [evolutionary_search.cc:649] Scores of the best 53 candidates:
[1 : 16]:	0.9870  0.9574  0.9570  0.9341  0.9247  0.8920  0.8804  0.8554  0.8543  0.8442  0.7924  0.7836  0.7577  0.7337  0.7252  0.6684
[17 : 32]:	0.6560  0.6286  0.6235  0.6227  0.5649  0.5570  0.5486  0.5123  0.5088  0.4468  0.4424  0.4296  0.4169  0.4070  0.3812  0.3727
[33 : 48]:	0.3464  0.3404  0.3385  0.3237  0.3146  0.3052  0.3005  0.2458  0.2118  0.1929  0.1530  0.1479  0.1337  0.1263  0.1262  0.1038
[49 : 53]:	0.0884  0.0587  0.0530  0.0497  0.0382
2024-04-29 20:24:36 [INFO] [evolutionary_search.cc:727] Got 53 candidate(s) with evolutionary search
2024-04-29 20:24:36 [INFO] [evolutionary_search.cc:730] Sending 53 candidates(s) for measurement
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 4.3438. Time: 92.4089 us. Best GFLOPs: 4.3438
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 24.8141. Time: 16.1766 us. Best GFLOPs: 24.8141
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 12.3698. Time: 32.4506 us. Best GFLOPs: 24.8141
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 33.4944. Time: 11.9843 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #5: GFLOPs: 12.9021. Time: 31.1117 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 11.7341. Time: 34.2088 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 12.8198. Time: 31.3116 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 12.3594. Time: 32.4780 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 13.4210. Time: 29.9089 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 6.6087. Time: 60.7397 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 8.3755. Time: 47.9267 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 13.2970. Time: 30.1880 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 13.0670. Time: 30.7193 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 8.4962. Time: 47.2455 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 10.9165. Time: 36.7708 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 9.0985. Time: 44.1182 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 10.0942. Time: 39.7661 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 14.4228. Time: 27.8314 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 7.4743. Time: 53.7052 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 12.1585. Time: 33.0146 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 13.4721. Time: 29.7954 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 2.1018. Time: 190.9825 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 5.9658. Time: 67.2851 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #24: GFLOPs: 14.5304. Time: 27.6255 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 6.7832. Time: 59.1771 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #26: GFLOPs: 14.5020. Time: 27.6795 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 7.8002. Time: 51.4614 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #28: GFLOPs: 10.6053. Time: 37.8499 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 13.0800. Time: 30.6886 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 11.6904. Time: 34.3366 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 9.9659. Time: 40.2782 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_max_pool2d_3] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(4)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                            v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                    v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 5.7616. Time: 69.6697 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 8.5200. Time: 47.1139 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 9.2603. Time: 43.3472 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 21.5788. Time: 18.6020 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 6.6830. Time: 60.0641 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 7.5671. Time: 53.0464 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 7.4596. Time: 53.8113 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 9.0857. Time: 44.1800 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 28.1294. Time: 14.2700 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 13.4950. Time: 29.7450 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 11.0080. Time: 36.4652 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 14.2375. Time: 28.1937 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 30.4121. Time: 13.1990 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 26.9490. Time: 14.8951 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 8.9773. Time: 44.7139 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 13.0795. Time: 30.6899 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 28.2083. Time: 14.2302 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #50: GFLOPs: 31.6442. Time: 12.6850 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #51: GFLOPs: 11.6387. Time: 34.4890 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #52: GFLOPs: 21.0828. Time: 19.0396 us. Best GFLOPs: 33.4944
2024-04-29 20:59:58 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #53: GFLOPs: 9.0439. Time: 44.3843 us. Best GFLOPs: 33.4944
