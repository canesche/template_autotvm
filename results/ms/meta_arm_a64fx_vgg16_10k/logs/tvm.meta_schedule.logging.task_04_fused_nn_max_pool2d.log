2024-04-29 19:44:42 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d"
2024-04-29 19:44:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 19:44:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:44:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:44:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:44:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 19:52:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:52:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:52:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x368e858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33191f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33fe668)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a59288)]: 0 failure(s)
2024-04-29 19:52:09 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:52:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x368e858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33191f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33fe668)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a59288)]: 0 failure(s)
2024-04-29 19:52:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x368e858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33191f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33fe668)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a59288)]: 0 failure(s)
2024-04-29 19:52:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x368e858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33191f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33fe668)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a59288)]: 0 failure(s)
2024-04-29 19:52:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x368e858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33191f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33fe668)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a59288)]: 0 failure(s)
2024-04-29 19:52:15 [INFO] [evolutionary_search.cc:649] Scores of the best 60 candidates:
[1 : 16]:	0.9620  0.9445  0.9363  0.9353  0.8853  0.8733  0.8586  0.8418  0.8183  0.8093  0.7997  0.7774  0.7735  0.7622  0.7597  0.7591
[17 : 32]:	0.7427  0.7397  0.7159  0.6598  0.6449  0.6240  0.6159  0.6034  0.5832  0.5174  0.5161  0.5149  0.5117  0.4669  0.4557  0.4189
[33 : 48]:	0.3960  0.3819  0.3399  0.3396  0.3274  0.3181  0.3168  0.3093  0.3011  0.2453  0.2441  0.2235  0.2181  0.2143  0.1827  0.1817
[49 : 60]:	0.1353  0.1297  0.1207  0.1203  0.1107  0.1095  0.0771  0.0735  0.0657  0.0636  0.0535  0.0089
2024-04-29 19:52:15 [INFO] [evolutionary_search.cc:727] Got 60 candidate(s) with evolutionary search
2024-04-29 19:52:15 [INFO] [evolutionary_search.cc:730] Sending 60 candidates(s) for measurement
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #1: GFLOPs: 4.4828. Time: 716.3579 us. Best GFLOPs: 4.4828
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #2: GFLOPs: 10.6930. Time: 300.3145 us. Best GFLOPs: 10.6930
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #3: GFLOPs: 134.3797. Time: 23.8969 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #4: GFLOPs: 0.9326. Time: 3443.3678 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #5: GFLOPs: 63.6486. Time: 50.4530 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #6: GFLOPs: 40.1922. Time: 79.8978 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #7: GFLOPs: 12.3083. Time: 260.9020 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #8: GFLOPs: 26.3124. Time: 122.0437 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #9: GFLOPs: 51.4128. Time: 62.4604 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #10: GFLOPs: 10.8430. Time: 296.1608 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #11: GFLOPs: 52.0438. Time: 61.7031 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #12: GFLOPs: 5.6162. Time: 571.7866 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #13: GFLOPs: 27.3394. Time: 117.4592 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #14: GFLOPs: 5.5827. Time: 575.2136 us. Best GFLOPs: 134.3797
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #15: GFLOPs: 138.5385. Time: 23.1796 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #16: GFLOPs: 3.3057. Time: 971.4384 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #17: GFLOPs: 63.6464. Time: 50.4547 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #18: GFLOPs: 42.2365. Time: 76.0305 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #19: GFLOPs: 0.7728. Time: 4155.5302 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #20: GFLOPs: 20.1977. Time: 158.9915 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #21: GFLOPs: 0.7721. Time: 4158.8945 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #22: GFLOPs: 71.1784. Time: 45.1157 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #23: GFLOPs: 0.6963. Time: 4612.1238 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #24: GFLOPs: 0.7011. Time: 4580.2522 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #25: GFLOPs: 26.4388. Time: 121.4603 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #26: GFLOPs: 70.4181. Time: 45.6028 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #27: GFLOPs: 3.4144. Time: 940.5152 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #28: GFLOPs: 1.4365. Time: 2235.5235 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #29: GFLOPs: 20.4324. Time: 157.1650 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #30: GFLOPs: 17.5744. Time: 182.7235 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #31: GFLOPs: 4.8233. Time: 665.7858 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #32: GFLOPs: 65.1976. Time: 49.2543 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #33: GFLOPs: 27.3415. Time: 117.4500 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #34: GFLOPs: 0.5041. Time: 6370.5607 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #35: GFLOPs: 33.6017. Time: 95.5685 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #36: GFLOPs: 31.9232. Time: 100.5936 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #37: GFLOPs: 23.0863. Time: 139.0983 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #38: GFLOPs: 61.7457. Time: 52.0079 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #39: GFLOPs: 0.4468. Time: 7186.4756 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #40: GFLOPs: 11.3823. Time: 282.1270 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #41: GFLOPs: 77.8300. Time: 41.2600 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #42: GFLOPs: 24.9923. Time: 128.4904 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #43: GFLOPs: 72.3497. Time: 44.3853 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #44: GFLOPs: 106.6839. Time: 30.1007 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #45: GFLOPs: 10.4197. Time: 308.1906 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #46: GFLOPs: 24.9614. Time: 128.6490 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #47: GFLOPs: 18.0624. Time: 177.7874 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #48: GFLOPs: 1.5175. Time: 2116.1170 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #49: GFLOPs: 19.9732. Time: 160.7785 us. Best GFLOPs: 138.5385
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #50: GFLOPs: 141.8032. Time: 22.6459 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #51: GFLOPs: 1.9486. Time: 1647.9832 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #52: GFLOPs: 121.9122. Time: 26.3408 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #53: GFLOPs: 108.0602. Time: 29.7174 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #54: GFLOPs: 71.8158. Time: 44.7153 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #55: GFLOPs: 6.4899. Time: 494.8121 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #56: GFLOPs: 12.2117. Time: 262.9652 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #57: GFLOPs: 22.4885. Time: 142.7956 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #58: GFLOPs: 26.2515. Time: 122.3267 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #59: GFLOPs: 1.0623. Time: 3022.8234 us. Best GFLOPs: 141.8032
2024-04-29 20:59:28 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #60: GFLOPs: 50.9461. Time: 63.0326 us. Best GFLOPs: 141.8032
