2024-04-29 19:44:54 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_max_pool2d_1"
2024-04-29 19:44:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 19:44:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:44:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:44:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:44:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 20:03:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:03:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:03:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af0de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3348ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c1d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30ae428)]: 0 failure(s)
2024-04-29 20:03:16 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:03:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af0de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3348ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c1d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30ae428)]: 0 failure(s)
2024-04-29 20:03:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af0de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3348ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c1d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30ae428)]: 0 failure(s)
2024-04-29 20:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af0de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3348ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c1d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30ae428)]: 0 failure(s)
2024-04-29 20:03:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af0de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3348ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31c1d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30ae428)]: 0 failure(s)
2024-04-29 20:03:22 [INFO] [evolutionary_search.cc:649] Scores of the best 60 candidates:
[1 : 16]:	0.9600  0.9181  0.9033  0.9024  0.8950  0.8844  0.8772  0.8504  0.8383  0.8289  0.8215  0.8147  0.8032  0.7911  0.7830  0.7812
[17 : 32]:	0.7349  0.6995  0.6943  0.6756  0.6366  0.6283  0.6217  0.6185  0.5868  0.5671  0.5496  0.5387  0.5328  0.5033  0.5022  0.4735
[33 : 48]:	0.4346  0.4120  0.3784  0.3579  0.3442  0.3234  0.3139  0.3137  0.3119  0.2989  0.2836  0.2784  0.2628  0.2622  0.2504  0.2393
[49 : 60]:	0.2294  0.2263  0.2197  0.2181  0.1938  0.1924  0.1213  0.1159  0.1114  0.0512  0.0145  0.0042
2024-04-29 20:03:22 [INFO] [evolutionary_search.cc:727] Got 60 candidate(s) with evolutionary search
2024-04-29 20:03:22 [INFO] [evolutionary_search.cc:730] Sending 60 candidates(s) for measurement
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 20.7867. Time: 77.2433 us. Best GFLOPs: 20.7867
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 11.9962. Time: 133.8453 us. Best GFLOPs: 20.7867
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 21.3291. Time: 75.2789 us. Best GFLOPs: 21.3291
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(56), T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(56), T.int64(56), T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b34)
b41 = sch.decompose_reduction(block=b34, loop=l40)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46, l47 = sch.get_loops(block=b42)
b48 = sch.decompose_reduction(block=b42, loop=l47)
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 30.1059. Time: 53.3328 us. Best GFLOPs: 30.1059
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 6.7583. Time: 237.5781 us. Best GFLOPs: 30.1059
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 42.3355. Time: 37.9264 us. Best GFLOPs: 42.3355
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 6.5447. Time: 245.3337 us. Best GFLOPs: 42.3355
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 13.3407. Time: 120.3561 us. Best GFLOPs: 42.3355
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 24.0975. Time: 66.6306 us. Best GFLOPs: 42.3355
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 9.0211. Time: 177.9871 us. Best GFLOPs: 42.3355
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 44.7414. Time: 35.8869 us. Best GFLOPs: 44.7414
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 21.0238. Time: 76.3720 us. Best GFLOPs: 44.7414
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 8.5782. Time: 187.1758 us. Best GFLOPs: 44.7414
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 23.6299. Time: 67.9490 us. Best GFLOPs: 44.7414
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 1.0039. Time: 1599.4677 us. Best GFLOPs: 44.7414
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 46.9745. Time: 34.1809 us. Best GFLOPs: 46.9745
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 14.9720. Time: 107.2420 us. Best GFLOPs: 46.9745
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 92.5969. Time: 17.3400 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 20.0366. Time: 80.1350 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 17.3705. Time: 92.4346 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 0.8490. Time: 1891.1011 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 0.8637. Time: 1858.9628 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 1.4142. Time: 1135.3918 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 1.2950. Time: 1239.8450 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 0.5579. Time: 2878.0296 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 21.0438. Time: 76.2995 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 22.4237. Time: 71.6041 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 8.6783. Time: 185.0176 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 1.3667. Time: 1174.8514 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 43.4044. Time: 36.9924 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 11.9052. Time: 134.8683 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 10.0584. Time: 159.6305 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 10.1217. Time: 158.6325 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 31.5610. Time: 50.8739 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 48.2228. Time: 33.2961 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 42.7944. Time: 37.5197 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4, rv0_rv1_fused_0 in T.grid(T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SR", [ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, l22, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38 = sch.get_loops(block=b34)
b39 = sch.decompose_reduction(block=b34, loop=l38)
b40 = sch.get_block(name="pool_max", func_name="main")
l41, l42, l43 = sch.get_loops(block=b40)
b44 = sch.decompose_reduction(block=b40, loop=l43)
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 6.2717. Time: 256.0104 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 23.3745. Time: 68.6915 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 9.1266. Time: 175.9284 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 18.7127. Time: 85.8042 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 47.3762. Time: 33.8911 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 14.2919. Time: 112.3456 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 2.2904. Time: 701.0301 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 30.5827. Time: 52.5013 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 14.2726. Time: 112.4976 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 88.7148. Time: 18.0988 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 74.2655. Time: 21.6202 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 7.2691. Time: 220.8841 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 47.5321. Time: 33.7799 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 1.2006. Time: 1337.3076 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 91.8685. Time: 17.4775 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 22.3200. Time: 71.9369 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 45.5597. Time: 35.2424 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 18.8223. Time: 85.3046 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 13.5308. Time: 118.6654 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 23.1396. Time: 69.3889 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 9.7405. Time: 164.8402 us. Best GFLOPs: 92.5969
2024-04-29 20:59:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #60: GFLOPs: 12.0665. Time: 133.0655 us. Best GFLOPs: 92.5969
