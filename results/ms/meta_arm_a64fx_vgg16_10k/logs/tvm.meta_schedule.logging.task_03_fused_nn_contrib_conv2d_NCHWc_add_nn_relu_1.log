2024-04-29 19:44:37 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1"
2024-04-29 19:44:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32), T.int64(64), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:44:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:44:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2), T.int64(64), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(30), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(16) + ax1)
                        v_i2 = T.axis.spatial(T.int64(226), oh_0 * T.int64(56) + oh_1 * T.int64(14) + kh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), ow_1 * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(16) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), ow_0 * T.int64(224) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:44:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(58), T.int64(226), T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), oh_0 * T.int64(56) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), ow_0 * T.int64(224) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(224), oh_0 * T.int64(56) + oh_1 * T.int64(14) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:44:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(2), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), ow_0 * T.int64(224) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(225) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(225), p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(224), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(224), oh_0 * T.int64(56) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:48:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:48:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:48:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 19:48:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:48:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 19:48:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 19:48:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 19:48:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 19:48:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9980  0.9975  0.9974  0.9968  0.9959  0.9958  0.9954  0.9950  0.9941  0.9933  0.9933  0.9932  0.9924  0.9900  0.9892  0.9888
[17 : 32]:	0.9870  0.9869  0.9863  0.9862  0.9862  0.9859  0.9850  0.9848  0.9846  0.9844  0.9841  0.9829  0.9826  0.9824  0.9818  0.9814
[33 : 48]:	0.9812  0.9806  0.9805  0.9804  0.9799  0.9796  0.9786  0.9779  0.9778  0.9762  0.9762  0.9754  0.9741  0.9731  0.9728  0.9722
[49 : 64]:	0.9708  0.9696  0.9673  0.9637  0.9628  0.9626  0.9619  0.9614  0.9611  0.9610  0.9608  0.9603  0.9600  0.9599  0.9596  0.9594
2024-04-29 19:48:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:48:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #1: GFLOPs: 89.6254. Time: 41347.6497 us. Best GFLOPs: 89.6254
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #2: GFLOPs: 131.2769. Time: 28228.8698 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #3: GFLOPs: 72.0535. Time: 51431.1990 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #4: GFLOPs: 66.7659. Time: 55504.3783 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #5: GFLOPs: 11.5645. Time: 320446.6023 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #6: GFLOPs: 114.6908. Time: 32311.2220 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(114), T.int64(114)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(112) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(112) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(8), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(112) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(112) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(112) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(112) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(50176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1605632))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1605632) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 8, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 8, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #8: GFLOPs: 56.1362. Time: 66014.4580 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(112) + oh_1 * T.int64(112) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(114), T.int64(3)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(4) + ax1)
                                v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(112) + ax2)
                                v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(14) + ow_1 + ax3)
                                v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(4) * T.int64(4) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(112) + oh_1 * T.int64(112) + oh_2 * T.int64(14) + oh_3)
                                v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(14) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(112) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 8, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[16, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
l112 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l112)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #10: GFLOPs: 47.3260. Time: 78303.6080 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #11: GFLOPs: 30.3656. Time: 122039.1820 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #12: GFLOPs: 7.4387. Time: 498178.8560 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #13: GFLOPs: 66.2868. Time: 55905.4887 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #14: GFLOPs: 14.6198. Time: 253477.3250 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #15: GFLOPs: 6.3515. Time: 583456.0000 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #16: GFLOPs: 78.8440. Time: 47001.6567 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #17: GFLOPs: 27.5221. Time: 134648.3510 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #18: GFLOPs: 17.2274. Time: 215111.1883 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #19: GFLOPs: 113.2528. Time: 32721.4625 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #20: GFLOPs: 76.9131. Time: 48181.6623 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #21: GFLOPs: 12.6345. Time: 293308.6187 us. Best GFLOPs: 131.2769
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #22: GFLOPs: 144.7988. Time: 25592.7495 us. Best GFLOPs: 144.7988
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #23: GFLOPs: 46.9668. Time: 78902.4493 us. Best GFLOPs: 144.7988
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #24: GFLOPs: 369.2335. Time: 10036.4643 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #25: GFLOPs: 70.2450. Time: 52755.3613 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #26: GFLOPs: 132.5057. Time: 27967.0855 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #27: GFLOPs: 8.0415. Time: 460836.2887 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(58), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(4), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(56) + oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(56) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(56) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(8) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(56) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(50176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1605632))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1605632) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 56, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #29: GFLOPs: 24.1761. Time: 153283.5037 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #30: GFLOPs: 33.4604. Time: 110751.8727 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #31: GFLOPs: 19.4675. Time: 190358.1510 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #32: GFLOPs: 118.7816. Time: 31198.4212 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #33: GFLOPs: 102.0700. Time: 36306.4370 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(16), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), oh_1 * T.int64(16) + oh_2_init * T.int64(16) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0 in T.grid(T.int64(1), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(18), T.int64(28)):
                        for ax4_fused in T.vectorized(T.int64(16)):
                            with T.block("data_pad"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(226), oh_1 * T.int64(16) + ax2)
                                v_i3 = T.axis.spatial(T.int64(226), kw_0 + ow_1 * T.int64(28) + ax3)
                                v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(4)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(224), oh_1 * T.int64(16) + oh_2 * T.int64(16) + oh_3)
                                v_ow = T.axis.spatial(T.int64(224), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(224), T.int64(224)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 16])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b68)
l89 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l91, preserve_unit_iters=True)
sch.parallel(loop=l113)
l114 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l114)
sch.annotate(block_or_loop=l113, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l113, ann_key="pragma_unroll_explicit", ann_val=1)
l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b70)
l121 = sch.fuse(l120, preserve_unit_iters=True)
sch.vectorize(loop=l121)
b122 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b122)
b145 = sch.decompose_reduction(block=b122, loop=l129)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #35: GFLOPs: 134.0988. Time: 27634.8472 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #36: GFLOPs: 186.2081. Time: 19901.3787 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #37: GFLOPs: 69.7866. Time: 53101.8537 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #38: GFLOPs: 95.4289. Time: 38833.0707 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #39: GFLOPs: 10.3788. Time: 357053.2663 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(56) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(112) + ow_1 * T.int64(112) + ow_2_init * T.int64(16) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(56) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(112) + ow_1 * T.int64(112) + ow_2 * T.int64(16) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(225) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(225), p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(56) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(112) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 16])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b105)
b128 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #41: GFLOPs: 65.3859. Time: 56675.8153 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #42: GFLOPs: 4.3363. Time: 854605.6427 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #43: GFLOPs: 145.9444. Time: 25391.8444 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #44: GFLOPs: 96.3909. Time: 38445.5270 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(4), T.int64(16), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(32) + oh_1 * T.int64(16) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), ow_1 * T.int64(32) + ow_2_init * T.int64(16) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(18), T.int64(34)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(4) + ax1)
                                v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(32) + oh_1 * T.int64(16) + ax2)
                                v_i3 = T.axis.spatial(T.int64(226), ow_1 * T.int64(32) + ax3)
                                v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(4) * T.int64(4) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(16), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(32) + oh_1 * T.int64(16) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), ow_1 * T.int64(32) + ow_2 * T.int64(16) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(32), T.int64(224)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(32) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 4, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 16])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #46: GFLOPs: 76.2722. Time: 48586.4923 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #47: GFLOPs: 126.1078. Time: 29385.9700 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #48: GFLOPs: 19.3345. Time: 191668.1633 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #49: GFLOPs: 36.9361. Time: 100329.8727 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #50: GFLOPs: 176.3434. Time: 21014.6690 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #51: GFLOPs: 35.1436. Time: 105447.4243 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #52: GFLOPs: 98.1003. Time: 37775.6193 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #53: GFLOPs: 81.7638. Time: 45323.1960 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #54: GFLOPs: 7.0965. Time: 522198.6650 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #55: GFLOPs: 10.3219. Time: 359023.2003 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #56: GFLOPs: 29.0860. Time: 127408.4003 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #57: GFLOPs: 5.0642. Time: 731766.8410 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #58: GFLOPs: 10.5727. Time: 350507.5333 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #59: GFLOPs: 112.4252. Time: 32962.3542 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #60: GFLOPs: 41.9529. Time: 88332.3257 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #61: GFLOPs: 61.8544. Time: 59911.6113 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #62: GFLOPs: 8.2392. Time: 449779.1443 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #63: GFLOPs: 85.4485. Time: 43368.8123 us. Best GFLOPs: 369.2335
2024-04-29 20:59:26 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #64: GFLOPs: 33.6223. Time: 110218.4103 us. Best GFLOPs: 369.2335
2024-04-29 21:15:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:15:52 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 21:15:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 21:15:57 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 21:16:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 21:16:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 21:16:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 21:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 21:16:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1865  1.1820  1.1177  1.0727  1.0597  0.9966  0.9966  0.9945  0.9945  0.9943  0.9943  0.9943  0.9913  0.9853  0.9725  0.9722
[17 : 32]:	0.9525  0.9474  0.9261  0.9238  0.9007  0.8892  0.8885  0.8880  0.8766  0.8756  0.8754  0.8311  0.8185  0.8154  0.8092  0.8017
[33 : 48]:	0.7968  0.7846  0.7837  0.7805  0.7753  0.7706  0.7678  0.7616  0.7609  0.7604  0.7580  0.7566  0.7525  0.7503  0.7447  0.7439
[49 : 64]:	0.7422  0.7409  0.7399  0.7399  0.7385  0.7369  0.7369  0.7369  0.7341  0.7287  0.7283  0.7283  0.7283  0.7280  0.7265  0.7233
2024-04-29 21:16:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:16:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #66: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #67: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #68: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(14), T.int64(8), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #69: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 1, 28])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #70: GFLOPs: 147.9529. Time: 25047.1553 us. Best GFLOPs: 369.2335
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #71: GFLOPs: 406.2243. Time: 9122.5425 us. Best GFLOPs: 406.2243
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #72: GFLOPs: 513.8732. Time: 7211.5034 us. Best GFLOPs: 513.8732
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #73: GFLOPs: 515.4058. Time: 7190.0601 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #74: GFLOPs: 222.9288. Time: 16623.2393 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #75: GFLOPs: 223.9757. Time: 16545.5393 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #76: GFLOPs: 509.7721. Time: 7269.5209 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #77: GFLOPs: 351.0110. Time: 10557.5008 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #78: GFLOPs: 116.9955. Time: 31674.7160 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #79: GFLOPs: 333.8121. Time: 11101.4494 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #80: GFLOPs: 278.8423. Time: 13289.9464 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #81: GFLOPs: 124.4546. Time: 29776.3055 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #82: GFLOPs: 91.8965. Time: 40325.7817 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #83: GFLOPs: 65.5241. Time: 56556.2423 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #84: GFLOPs: 257.3266. Time: 14401.1505 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #85: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(8), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 28, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #86: GFLOPs: 35.6031. Time: 104086.4187 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #87: GFLOPs: 38.9562. Time: 95127.3437 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #88: GFLOPs: 38.1969. Time: 97018.4230 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #89: GFLOPs: 134.7086. Time: 27509.7413 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #90: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(6), T.int64(10)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(14) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(14) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(14) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(8)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(14) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(8) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 56, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 14, 8, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #91: GFLOPs: 228.4090. Time: 16224.3980 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #92: GFLOPs: 316.1642. Time: 11721.1207 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #93: GFLOPs: 40.0263. Time: 92584.0130 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #94: GFLOPs: 224.6432. Time: 16496.3727 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #95: GFLOPs: 188.0775. Time: 19703.5678 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #96: GFLOPs: 128.9613. Time: 28735.7475 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #97: GFLOPs: 502.3594. Time: 7376.7884 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #98: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ow_1 * T.int64(56) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(8), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 28, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #99: GFLOPs: 166.1866. Time: 22299.0160 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #100: GFLOPs: 119.7345. Time: 30950.1407 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #101: GFLOPs: 57.1184. Time: 64879.2000 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #102: GFLOPs: 107.4054. Time: 34502.9140 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #103: GFLOPs: 82.7213. Time: 44798.5890 us. Best GFLOPs: 515.4058
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #104: GFLOPs: 570.6188. Time: 6494.3511 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #105: GFLOPs: 52.3837. Time: 70743.3797 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #106: GFLOPs: 279.3312. Time: 13266.6819 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #107: GFLOPs: 123.7845. Time: 29937.5078 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #108: GFLOPs: 144.4749. Time: 25650.1210 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #109: GFLOPs: 308.6851. Time: 12005.1087 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #110: GFLOPs: 304.9208. Time: 12153.3146 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #111: GFLOPs: 175.6757. Time: 21094.5408 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #112: GFLOPs: 240.1185. Time: 15433.2097 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #113: GFLOPs: 89.3534. Time: 41473.5240 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #114: GFLOPs: 108.8090. Time: 34057.8357 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #115: GFLOPs: 97.8099. Time: 37887.7483 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #116: GFLOPs: 96.9831. Time: 38210.7843 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #117: GFLOPs: 140.1466. Time: 26442.3032 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #118: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(6), T.int64(34)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(32) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(32) + ow_1 * T.int64(32) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(32) + ow_1 * T.int64(32) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(50176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1605632))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1605632) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 2, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 8, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l121)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #119: GFLOPs: 92.2219. Time: 40183.4980 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #120: GFLOPs: 111.3224. Time: 33288.8905 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #121: GFLOPs: 176.9648. Time: 20940.8760 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #122: GFLOPs: 31.8793. Time: 116244.6800 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #123: GFLOPs: 155.6335. Time: 23811.0576 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #124: GFLOPs: 156.9716. Time: 23608.0802 us. Best GFLOPs: 570.6188
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(18)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(32)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(16) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(32) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(32)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(16) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(32) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(50176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1605632))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1605632) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 8, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 21:19:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #126: GFLOPs: 16.6484. Time: 222592.3490 us. Best GFLOPs: 570.6188
2024-04-29 21:19:19 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(7168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(3), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(3584) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(3584) // T.int64(448) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(3584) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(3584) // T.int64(448) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(3584) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(3584) // T.int64(448) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(3584) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(3584) // T.int64(448) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 112, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 1, 28])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 21:19:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #128: GFLOPs: 11.5505. Time: 320835.4910 us. Best GFLOPs: 570.6188
2024-04-29 22:00:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:00:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:00:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 22:00:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:01:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 22:01:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 22:01:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 22:01:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 22:01:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0324  1.0282  1.0027  0.9985  0.9873  0.9003  0.8981  0.8981  0.8981  0.8981  0.8981  0.8981  0.8981  0.8981  0.8952  0.8919
[17 : 32]:	0.8919  0.8793  0.8793  0.8745  0.8745  0.8745  0.8745  0.8745  0.8745  0.8745  0.8745  0.8745  0.8745  0.8683  0.8647  0.8631
[33 : 48]:	0.8631  0.8595  0.8562  0.8530  0.8448  0.8448  0.8448  0.8448  0.8448  0.8448  0.8448  0.8385  0.8355  0.8340  0.8284  0.8197
[49 : 64]:	0.8197  0.8197  0.8197  0.8178  0.8178  0.8178  0.8178  0.8178  0.8178  0.8178  0.8178  0.8178  0.8178  0.8140  0.8140  0.8140
2024-04-29 22:01:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:01:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #129: GFLOPs: 671.9998. Time: 5514.5831 us. Best GFLOPs: 671.9998
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #130: GFLOPs: 38.1008. Time: 97263.0083 us. Best GFLOPs: 671.9998
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #131: GFLOPs: 707.0603. Time: 5241.1350 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #132: GFLOPs: 48.9281. Time: 75739.7380 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #133: GFLOPs: 565.4278. Time: 6553.9731 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #134: GFLOPs: 689.9210. Time: 5371.3379 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #135: GFLOPs: 89.1849. Time: 41551.8780 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #136: GFLOPs: 670.6382. Time: 5525.7796 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #137: GFLOPs: 92.5460. Time: 40042.7550 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #138: GFLOPs: 106.1809. Time: 34900.8160 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #139: GFLOPs: 73.5848. Time: 50360.9410 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #140: GFLOPs: 89.2879. Time: 41503.9103 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #141: GFLOPs: 92.7834. Time: 39940.3030 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #142: GFLOPs: 96.7171. Time: 38315.8683 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #143: GFLOPs: 73.3098. Time: 50549.8707 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #144: GFLOPs: 200.7410. Time: 18460.5960 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #145: GFLOPs: 279.9231. Time: 13238.6324 us. Best GFLOPs: 707.0603
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #146: GFLOPs: 714.9253. Time: 5183.4765 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #147: GFLOPs: 620.6700. Time: 5970.6425 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #148: GFLOPs: 82.6617. Time: 44830.8813 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #149: GFLOPs: 102.6117. Time: 36114.7833 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #150: GFLOPs: 319.8416. Time: 11586.3567 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #151: GFLOPs: 76.7678. Time: 48272.8180 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #152: GFLOPs: 73.8125. Time: 50205.5947 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #153: GFLOPs: 92.0718. Time: 40248.9953 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #154: GFLOPs: 62.0970. Time: 59677.5490 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #155: GFLOPs: 73.8572. Time: 50175.1810 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #156: GFLOPs: 712.0671. Time: 5204.2828 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #157: GFLOPs: 92.3131. Time: 40143.8100 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #158: GFLOPs: 503.7811. Time: 7355.9698 us. Best GFLOPs: 714.9253
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #159: GFLOPs: 862.3427. Time: 4297.3617 us. Best GFLOPs: 862.3427
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #160: GFLOPs: 142.2148. Time: 26057.7597 us. Best GFLOPs: 862.3427
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #161: GFLOPs: 138.7249. Time: 26713.2863 us. Best GFLOPs: 862.3427
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #162: GFLOPs: 73.3496. Time: 50522.4270 us. Best GFLOPs: 862.3427
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #163: GFLOPs: 884.5144. Time: 4189.6419 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #164: GFLOPs: 510.4287. Time: 7260.1696 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #165: GFLOPs: 74.0941. Time: 50014.7783 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #166: GFLOPs: 58.6136. Time: 63224.2007 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #167: GFLOPs: 74.0518. Time: 50043.3020 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #168: GFLOPs: 465.5651. Time: 7959.7858 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #169: GFLOPs: 290.2598. Time: 12767.1804 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #170: GFLOPs: 492.5008. Time: 7524.4527 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #171: GFLOPs: 89.6697. Time: 41327.2337 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #172: GFLOPs: 71.9849. Time: 51480.2070 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #173: GFLOPs: 711.4660. Time: 5208.6799 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #174: GFLOPs: 512.5355. Time: 7230.3261 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #175: GFLOPs: 73.6997. Time: 50282.3893 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #176: GFLOPs: 35.5259. Time: 104312.7003 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #177: GFLOPs: 73.6367. Time: 50325.4200 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #178: GFLOPs: 75.3743. Time: 49165.2633 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #179: GFLOPs: 73.6957. Time: 50285.1127 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #180: GFLOPs: 566.3627. Time: 6543.1548 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #181: GFLOPs: 577.7504. Time: 6414.1863 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #182: GFLOPs: 453.7853. Time: 8166.4133 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #183: GFLOPs: 71.3554. Time: 51934.3647 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #184: GFLOPs: 41.2335. Time: 89873.4467 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #185: GFLOPs: 77.0739. Time: 48081.1343 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #186: GFLOPs: 451.1515. Time: 8214.0895 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #187: GFLOPs: 140.8267. Time: 26314.5968 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #188: GFLOPs: 298.0476. Time: 12433.5802 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #189: GFLOPs: 51.8897. Time: 71416.8360 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #190: GFLOPs: 201.7550. Time: 18367.8122 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #191: GFLOPs: 44.4687. Time: 83334.9030 us. Best GFLOPs: 884.5144
2024-04-29 22:04:36 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #192: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(56) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(16) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(56) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(16) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(225) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(225), p0[v_n, v_ic // T.int64(16), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(16)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(2) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(56) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(2) * T.int64(16) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 4, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b106)
b125 = sch.decompose_reduction(block=b106, loop=l109)
2024-04-29 23:00:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:00:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:00:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:00:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:00:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:01:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:01:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:01:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:01:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9604  0.9604  0.9485  0.9485  0.9485  0.9485  0.9485  0.9485  0.8896  0.8711  0.8592  0.8092  0.7973  0.7973  0.7973  0.7934
[17 : 32]:	0.7668  0.7637  0.7621  0.7621  0.7621  0.7616  0.7616  0.7579  0.7569  0.7564  0.7549  0.7549  0.7480  0.7480  0.7340  0.7309
[33 : 48]:	0.7221  0.7077  0.7000  0.6993  0.6793  0.6725  0.6695  0.6695  0.6695  0.6695  0.6695  0.6680  0.6646  0.6608  0.6489  0.6489
[49 : 64]:	0.6455  0.6409  0.6383  0.6235  0.6227  0.6092  0.6075  0.6009  0.5992  0.5978  0.5951  0.5941  0.5911  0.5874  0.5852  0.5852
2024-04-29 23:01:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:01:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #193: GFLOPs: 884.4434. Time: 4189.9782 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #194: GFLOPs: 778.7474. Time: 4758.6660 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #195: GFLOPs: 140.3877. Time: 26396.8910 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #196: GFLOPs: 559.7547. Time: 6620.3981 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #197: GFLOPs: 150.2255. Time: 24668.2424 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #198: GFLOPs: 578.2248. Time: 6408.9238 us. Best GFLOPs: 884.5144
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #199: GFLOPs: 900.3950. Time: 4115.7475 us. Best GFLOPs: 900.3950
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #200: GFLOPs: 152.5106. Time: 24298.6322 us. Best GFLOPs: 900.3950
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #201: GFLOPs: 144.0196. Time: 25731.2020 us. Best GFLOPs: 900.3950
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #202: GFLOPs: 1066.3461. Time: 3475.2307 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #203: GFLOPs: 182.7327. Time: 20279.8922 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #204: GFLOPs: 880.9201. Time: 4206.7364 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #205: GFLOPs: 112.0924. Time: 33060.2268 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #206: GFLOPs: 893.5611. Time: 4147.2248 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #207: GFLOPs: 655.9580. Time: 5649.4448 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #208: GFLOPs: 144.0708. Time: 25722.0593 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #209: GFLOPs: 732.5686. Time: 5058.6368 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #210: GFLOPs: 614.7762. Time: 6027.8824 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #211: GFLOPs: 694.4118. Time: 5336.6011 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #212: GFLOPs: 155.3977. Time: 23847.1862 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #213: GFLOPs: 160.8188. Time: 23043.3142 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #214: GFLOPs: 212.3057. Time: 17455.0148 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #215: GFLOPs: 678.1087. Time: 5464.9034 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #216: GFLOPs: 144.7648. Time: 25598.7470 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #217: GFLOPs: 146.7136. Time: 25258.7252 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #218: GFLOPs: 484.0010. Time: 7656.5934 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #219: GFLOPs: 579.4751. Time: 6395.0952 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #220: GFLOPs: 874.9656. Time: 4235.3651 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #221: GFLOPs: 567.1573. Time: 6533.9876 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #222: GFLOPs: 532.1337. Time: 6964.0374 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #223: GFLOPs: 620.6039. Time: 5971.2782 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #224: GFLOPs: 116.2705. Time: 31872.2148 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #225: GFLOPs: 13.0441. Time: 284097.2367 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #226: GFLOPs: 183.3419. Time: 20212.5062 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #227: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(8), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #228: GFLOPs: 13.5945. Time: 272596.0040 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #229: GFLOPs: 1013.8133. Time: 3655.3069 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #230: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(16), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #231: GFLOPs: 123.9066. Time: 29908.0033 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #232: GFLOPs: 150.0601. Time: 24695.4220 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #233: GFLOPs: 353.2096. Time: 10491.7828 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #234: GFLOPs: 452.3227. Time: 8192.8212 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #235: GFLOPs: 132.2804. Time: 28014.7280 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #236: GFLOPs: 433.6435. Time: 8545.7256 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #237: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(16), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(16), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 14, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #238: GFLOPs: 568.7891. Time: 6515.2423 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #239: GFLOPs: 90.7684. Time: 40826.9543 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #240: GFLOPs: 375.6153. Time: 9865.9428 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #241: GFLOPs: 539.9641. Time: 6863.0469 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #242: GFLOPs: 532.1014. Time: 6964.4593 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #243: GFLOPs: 500.6851. Time: 7401.4561 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #244: GFLOPs: 94.0631. Time: 39396.9327 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #245: GFLOPs: 74.9183. Time: 49464.5248 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #246: GFLOPs: 578.7175. Time: 6403.4678 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #247: GFLOPs: 13.6198. Time: 272089.6220 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #248: GFLOPs: 820.7946. Time: 4514.8917 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #249: GFLOPs: 563.7423. Time: 6573.5683 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #250: GFLOPs: 118.4302. Time: 31290.9898 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #251: GFLOPs: 156.1679. Time: 23729.5732 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #252: GFLOPs: 147.6152. Time: 25104.4450 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #253: GFLOPs: 544.3746. Time: 6807.4420 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #254: GFLOPs: 1.5296. Time: 2422796.6000 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #255: GFLOPs: 69.6997. Time: 53168.0960 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #256: GFLOPs: 101.6495. Time: 36456.6257 us. Best GFLOPs: 1066.3461
2024-04-29 23:04:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:04:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:04:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:04:46 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:04:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:05:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:05:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:05:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:05:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9005  0.9005  0.9005  0.8729  0.8729  0.7990  0.7990  0.7857  0.7857  0.7830  0.7830  0.7830  0.7830  0.7830  0.7830  0.7830
[17 : 32]:	0.7830  0.7830  0.7830  0.7830  0.7830  0.7785  0.7785  0.7740  0.7740  0.7662  0.7552  0.7493  0.7184  0.7184  0.7184  0.7184
[33 : 48]:	0.7184  0.7184  0.7184  0.7184  0.7184  0.7184  0.7135  0.7135  0.7135  0.7106  0.7076  0.7055  0.7017  0.6944  0.6898  0.6869
[49 : 64]:	0.6811  0.6761  0.6728  0.6643  0.6586  0.6451  0.6422  0.6399  0.6399  0.6391  0.6369  0.6352  0.6352  0.6352  0.6339  0.6332
2024-04-29 23:05:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:05:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #257: GFLOPs: 135.7973. Time: 27289.1958 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #258: GFLOPs: 173.6941. Time: 21335.2000 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #259: GFLOPs: 109.2629. Time: 33916.3450 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #260: GFLOPs: 614.8153. Time: 6027.4987 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #261: GFLOPs: 124.8763. Time: 29675.7473 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #262: GFLOPs: 641.9441. Time: 5772.7746 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #263: GFLOPs: 384.5284. Time: 9637.2548 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #264: GFLOPs: 772.1481. Time: 4799.3368 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #265: GFLOPs: 736.5592. Time: 5031.2299 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #266: GFLOPs: 956.2411. Time: 3875.3812 us. Best GFLOPs: 1066.3461
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #267: GFLOPs: 1097.8921. Time: 3375.3760 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #268: GFLOPs: 75.2918. Time: 49219.1707 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #269: GFLOPs: 75.8169. Time: 48878.2417 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #270: GFLOPs: 77.0686. Time: 48084.4410 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #271: GFLOPs: 626.1235. Time: 5918.6388 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #272: GFLOPs: 84.4240. Time: 43895.0887 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #273: GFLOPs: 93.0167. Time: 39840.1517 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #274: GFLOPs: 73.9806. Time: 50091.4657 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #275: GFLOPs: 605.2922. Time: 6122.3299 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #276: GFLOPs: 64.8521. Time: 57142.2710 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #277: GFLOPs: 83.6565. Time: 44297.7990 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #278: GFLOPs: 823.2329. Time: 4501.5191 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #279: GFLOPs: 994.9346. Time: 3724.6655 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #280: GFLOPs: 112.5029. Time: 32939.5967 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #281: GFLOPs: 89.3437. Time: 41478.0303 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #282: GFLOPs: 485.7232. Time: 7629.4449 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #283: GFLOPs: 171.9696. Time: 21549.1484 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #284: GFLOPs: 474.5712. Time: 7808.7312 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #285: GFLOPs: 118.8954. Time: 31168.5563 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #286: GFLOPs: 145.3979. Time: 25487.2955 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #287: GFLOPs: 903.8617. Time: 4099.9620 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #288: GFLOPs: 502.8348. Time: 7369.8131 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #289: GFLOPs: 93.7546. Time: 39526.5633 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #290: GFLOPs: 531.4805. Time: 6972.5959 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #291: GFLOPs: 412.6430. Time: 8980.6411 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #292: GFLOPs: 869.3602. Time: 4262.6737 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #293: GFLOPs: 91.7222. Time: 40402.4050 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #294: GFLOPs: 124.7519. Time: 29705.3585 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #295: GFLOPs: 112.6305. Time: 32902.2685 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #296: GFLOPs: 150.8472. Time: 24566.5686 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #297: GFLOPs: 99.8261. Time: 37122.5550 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #298: GFLOPs: 1058.5748. Time: 3500.7433 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #299: GFLOPs: 149.0853. Time: 24856.9058 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #300: GFLOPs: 995.2648. Time: 3723.4299 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #301: GFLOPs: 505.5273. Time: 7330.5603 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #302: GFLOPs: 63.6845. Time: 58189.9780 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #303: GFLOPs: 338.5071. Time: 10947.4769 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #304: GFLOPs: 64.4690. Time: 57481.8653 us. Best GFLOPs: 1097.8921
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #305: GFLOPs: 1313.5905. Time: 2821.1217 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #306: GFLOPs: 75.9064. Time: 48820.6560 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #307: GFLOPs: 486.9340. Time: 7610.4749 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #308: GFLOPs: 116.6230. Time: 31775.8808 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #309: GFLOPs: 13.4783. Time: 274946.4910 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #310: GFLOPs: 1088.2055. Time: 3405.4218 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #311: GFLOPs: 1124.3588. Time: 3295.9217 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #312: GFLOPs: 76.0933. Time: 48700.7403 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #313: GFLOPs: 76.0488. Time: 48729.1973 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #314: GFLOPs: 673.3682. Time: 5503.3761 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #315: GFLOPs: 591.6621. Time: 6263.3700 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #316: GFLOPs: 672.1369. Time: 5513.4577 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #317: GFLOPs: 613.1183. Time: 6044.1819 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #318: GFLOPs: 37.8479. Time: 97912.8627 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #319: GFLOPs: 34.0342. Time: 108884.4157 us. Best GFLOPs: 1313.5905
2024-04-29 23:07:57 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #320: GFLOPs: 177.3651. Time: 20893.6226 us. Best GFLOPs: 1313.5905
2024-04-29 23:41:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:41:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:41:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:41:28 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:41:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:41:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:42:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:42:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-29 23:42:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8516  0.8516  0.8213  0.7864  0.7864  0.7864  0.7824  0.7673  0.7622  0.7611  0.7607  0.7607  0.7607  0.7607  0.7607  0.7607
[17 : 32]:	0.7347  0.7163  0.6961  0.6955  0.6955  0.6888  0.6888  0.6685  0.6672  0.6672  0.6672  0.6672  0.6672  0.6672  0.6564  0.6564
[33 : 48]:	0.6524  0.6503  0.6503  0.6485  0.6394  0.6394  0.6394  0.6225  0.6050  0.6041  0.6020  0.6020  0.6014  0.5990  0.5968  0.5946
[49 : 64]:	0.5946  0.5927  0.5909  0.5880  0.5852  0.5852  0.5847  0.5842  0.5828  0.5827  0.5820  0.5820  0.5820  0.5820  0.5773  0.5773
2024-04-29 23:42:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:42:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #321: GFLOPs: 140.8028. Time: 26319.0768 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #322: GFLOPs: 1012.8057. Time: 3658.9432 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #323: GFLOPs: 73.2769. Time: 50572.5067 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #324: GFLOPs: 70.9821. Time: 52207.5143 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #325: GFLOPs: 1046.1580. Time: 3542.2936 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #326: GFLOPs: 63.2591. Time: 58581.2953 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #327: GFLOPs: 182.0209. Time: 20359.1896 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #328: GFLOPs: 1055.9370. Time: 3509.4885 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #329: GFLOPs: 560.0450. Time: 6616.9661 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #330: GFLOPs: 959.0506. Time: 3864.0281 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #331: GFLOPs: 1202.5133. Time: 3081.7111 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #332: GFLOPs: 137.3612. Time: 26978.5003 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #333: GFLOPs: 968.3533. Time: 3826.9076 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #334: GFLOPs: 133.1221. Time: 27837.5822 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #335: GFLOPs: 554.7884. Time: 6679.6614 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #336: GFLOPs: 84.1387. Time: 44043.9233 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #337: GFLOPs: 896.6979. Time: 4132.7170 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #338: GFLOPs: 625.4316. Time: 5925.1865 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #339: GFLOPs: 942.8301. Time: 3930.5052 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #340: GFLOPs: 476.3580. Time: 7779.4411 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #341: GFLOPs: 490.7149. Time: 7551.8369 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #342: GFLOPs: 845.4110. Time: 4383.4283 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #343: GFLOPs: 1001.8833. Time: 3698.8325 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #344: GFLOPs: 763.8192. Time: 4851.6700 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #345: GFLOPs: 70.7648. Time: 52367.8077 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #346: GFLOPs: 115.6473. Time: 32043.9685 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #347: GFLOPs: 951.1158. Time: 3896.2646 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #348: GFLOPs: 71.8596. Time: 51570.0040 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #349: GFLOPs: 64.2172. Time: 57707.2267 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #350: GFLOPs: 39.7210. Time: 93295.7547 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #351: GFLOPs: 72.9652. Time: 50788.5933 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #352: GFLOPs: 72.7988. Time: 50904.6657 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #353: GFLOPs: 78.3647. Time: 47289.1267 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #354: GFLOPs: 376.3472. Time: 9846.7545 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #355: GFLOPs: 72.6407. Time: 51015.4910 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #356: GFLOPs: 72.7171. Time: 50961.8933 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #357: GFLOPs: 991.7474. Time: 3736.6356 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #358: GFLOPs: 84.0158. Time: 44108.3380 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #359: GFLOPs: 76.6209. Time: 48365.3650 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #360: GFLOPs: 862.8040. Time: 4295.0642 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #361: GFLOPs: 1110.1980. Time: 3337.9618 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #362: GFLOPs: 80.9465. Time: 45780.8573 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #363: GFLOPs: 1113.1921. Time: 3328.9839 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #364: GFLOPs: 1205.6578. Time: 3073.6737 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #365: GFLOPs: 749.3587. Time: 4945.2935 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #366: GFLOPs: 610.6106. Time: 6069.0048 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #367: GFLOPs: 1252.1508. Time: 2959.5467 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #368: GFLOPs: 1019.3107. Time: 3635.5927 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #369: GFLOPs: 938.6368. Time: 3948.0643 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #370: GFLOPs: 642.6490. Time: 5766.4429 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #371: GFLOPs: 1063.5297. Time: 3484.4336 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #372: GFLOPs: 123.6296. Time: 29975.0175 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #373: GFLOPs: 948.9118. Time: 3905.3140 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #374: GFLOPs: 853.9731. Time: 4339.4796 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #375: GFLOPs: 579.4356. Time: 6395.5317 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #376: GFLOPs: 1069.5874. Time: 3464.6992 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #377: GFLOPs: 892.1382. Time: 4153.8393 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #378: GFLOPs: 900.6890. Time: 4114.4042 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #379: GFLOPs: 70.8244. Time: 52323.7533 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #380: GFLOPs: 931.4779. Time: 3978.4075 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #381: GFLOPs: 1012.4725. Time: 3660.1475 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #382: GFLOPs: 2.4693. Time: 1500751.6780 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #383: GFLOPs: 69.5024. Time: 53319.0263 us. Best GFLOPs: 1313.5905
2024-04-29 23:45:15 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #384: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(30), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(64) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(64) // T.int64(32) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) * T.int64(14) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(64) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(64) // T.int64(32) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(64) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(64) // T.int64(32) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(64) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(64) // T.int64(32) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 2, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 8, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-30 00:49:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:49:48 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:49:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 00:49:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 00:50:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 00:50:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 00:50:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 00:50:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 00:50:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8556  0.8469  0.8387  0.8319  0.8279  0.8234  0.8071  0.8071  0.8071  0.7820  0.7816  0.7801  0.7670  0.7618  0.7556  0.7469
[17 : 32]:	0.7398  0.7398  0.7352  0.7307  0.7279  0.7273  0.7241  0.7219  0.7197  0.7178  0.7173  0.7171  0.7171  0.7152  0.7135  0.7063
[33 : 48]:	0.7052  0.7052  0.7052  0.7052  0.7052  0.7036  0.7025  0.7025  0.7009  0.6999  0.6999  0.6944  0.6859  0.6857  0.6857  0.6835
[49 : 64]:	0.6826  0.6826  0.6826  0.6826  0.6826  0.6803  0.6803  0.6803  0.6803  0.6803  0.6803  0.6803  0.6803  0.6803  0.6798  0.6798
2024-04-30 00:50:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:50:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #385: GFLOPs: 1153.3449. Time: 3213.0881 us. Best GFLOPs: 1313.5905
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #386: GFLOPs: 1150.9579. Time: 3219.7517 us. Best GFLOPs: 1313.5905
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #387: GFLOPs: 995.3176. Time: 3723.2322 us. Best GFLOPs: 1313.5905
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #388: GFLOPs: 1239.9274. Time: 2988.7223 us. Best GFLOPs: 1313.5905
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #389: GFLOPs: 1345.9521. Time: 2753.2917 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #390: GFLOPs: 1132.2072. Time: 3273.0747 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #391: GFLOPs: 1221.7731. Time: 3033.1316 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #392: GFLOPs: 1000.3036. Time: 3704.6737 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #393: GFLOPs: 1220.2348. Time: 3036.9553 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #394: GFLOPs: 1160.4906. Time: 3193.3034 us. Best GFLOPs: 1345.9521
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #395: GFLOPs: 1369.9811. Time: 2704.9998 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #396: GFLOPs: 100.7212. Time: 36792.6367 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #397: GFLOPs: 1195.3989. Time: 3100.0518 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #398: GFLOPs: 857.9781. Time: 4319.2231 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #399: GFLOPs: 885.0176. Time: 4187.2600 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #400: GFLOPs: 928.4964. Time: 3991.1825 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #401: GFLOPs: 1055.4793. Time: 3511.0103 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #402: GFLOPs: 1116.3836. Time: 3319.4671 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #403: GFLOPs: 899.2743. Time: 4120.8769 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #404: GFLOPs: 925.5017. Time: 4004.0969 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #405: GFLOPs: 1064.4592. Time: 3481.3909 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #406: GFLOPs: 1014.1948. Time: 3653.9318 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #407: GFLOPs: 963.0801. Time: 3847.8612 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #408: GFLOPs: 938.8516. Time: 3947.1614 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #409: GFLOPs: 1196.7026. Time: 3096.6748 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #410: GFLOPs: 986.1314. Time: 3757.9158 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #411: GFLOPs: 1153.6676. Time: 3212.1893 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #412: GFLOPs: 40.2391. Time: 92094.4670 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #413: GFLOPs: 72.0114. Time: 51461.2507 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #414: GFLOPs: 1164.8147. Time: 3181.4491 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #415: GFLOPs: 822.4589. Time: 4505.7553 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #416: GFLOPs: 1280.8382. Time: 2893.2607 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #417: GFLOPs: 1356.0467. Time: 2732.7956 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #418: GFLOPs: 964.0415. Time: 3844.0239 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #419: GFLOPs: 60.1051. Time: 61655.3470 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #420: GFLOPs: 710.2758. Time: 5217.4077 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #421: GFLOPs: 948.4118. Time: 3907.3730 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #422: GFLOPs: 626.7845. Time: 5912.3970 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #423: GFLOPs: 41.2555. Time: 89825.6543 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #424: GFLOPs: 54.5707. Time: 67908.2720 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #425: GFLOPs: 800.4773. Time: 4629.4865 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #426: GFLOPs: 754.9175. Time: 4908.8790 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #427: GFLOPs: 932.2727. Time: 3975.0157 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #428: GFLOPs: 1062.9220. Time: 3486.4257 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #429: GFLOPs: 968.8647. Time: 3824.8877 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #430: GFLOPs: 757.3558. Time: 4893.0747 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #431: GFLOPs: 881.1629. Time: 4205.5773 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #432: GFLOPs: 574.2437. Time: 6453.3554 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #433: GFLOPs: 985.2752. Time: 3761.1814 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #434: GFLOPs: 40.3276. Time: 91892.4270 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #435: GFLOPs: 1047.1399. Time: 3538.9719 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #436: GFLOPs: 1202.8694. Time: 3080.7988 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #437: GFLOPs: 48.9447. Time: 75713.9503 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #438: GFLOPs: 1195.7228. Time: 3099.2121 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #439: GFLOPs: 101.2731. Time: 36592.1267 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #440: GFLOPs: 1152.4838. Time: 3215.4888 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #441: GFLOPs: 137.6738. Time: 26917.2332 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #442: GFLOPs: 1187.5265. Time: 3120.6028 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #443: GFLOPs: 940.7165. Time: 3939.3363 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #444: GFLOPs: 1163.6555. Time: 3184.6182 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #445: GFLOPs: 809.3688. Time: 4578.6279 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #446: GFLOPs: 42.4151. Time: 87369.8220 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #447: GFLOPs: 72.5174. Time: 51102.2177 us. Best GFLOPs: 1369.9811
2024-04-30 00:53:03 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #448: GFLOPs: 221.7095. Time: 16714.6610 us. Best GFLOPs: 1369.9811
2024-04-30 01:30:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:30:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:30:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 01:30:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:31:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 01:31:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 01:31:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 01:31:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 01:31:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0057  1.0057  1.0057  0.9151  0.9151  0.9151  0.9151  0.9151  0.9151  0.9054  0.8933  0.8797  0.8797  0.8797  0.8732  0.8732
[17 : 32]:	0.8732  0.8732  0.8622  0.8586  0.8541  0.8537  0.8412  0.8412  0.8381  0.8381  0.8381  0.8360  0.8348  0.8320  0.8320  0.8310
[33 : 48]:	0.8251  0.8186  0.8186  0.8186  0.8186  0.8141  0.8130  0.8130  0.8122  0.8122  0.8107  0.8101  0.8101  0.8101  0.8100  0.8032
[49 : 64]:	0.8032  0.8024  0.7928  0.7896  0.7877  0.7872  0.7864  0.7838  0.7807  0.7795  0.7793  0.7793  0.7778  0.7752  0.7741  0.7712
2024-04-30 01:31:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:31:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #449: GFLOPs: 35.8682. Time: 103317.1390 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #450: GFLOPs: 1278.2733. Time: 2899.0661 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #451: GFLOPs: 808.4109. Time: 4584.0533 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #452: GFLOPs: 114.1568. Time: 32462.3630 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #453: GFLOPs: 513.7481. Time: 7213.2596 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #454: GFLOPs: 90.0928. Time: 41133.1290 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #455: GFLOPs: 790.7398. Time: 4686.4954 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #456: GFLOPs: 1284.4016. Time: 2885.2336 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #457: GFLOPs: 996.5072. Time: 3718.7876 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #458: GFLOPs: 753.6713. Time: 4916.9958 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #459: GFLOPs: 1213.2262. Time: 3054.4995 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #460: GFLOPs: 954.7250. Time: 3881.5352 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #461: GFLOPs: 71.5594. Time: 51786.3283 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #462: GFLOPs: 1222.4840. Time: 3031.3679 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #463: GFLOPs: 69.0358. Time: 53679.3990 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #464: GFLOPs: 1294.1911. Time: 2863.4092 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #465: GFLOPs: 1251.3369. Time: 2961.4715 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #466: GFLOPs: 1335.5787. Time: 2774.6765 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #467: GFLOPs: 61.7620. Time: 60001.3200 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #468: GFLOPs: 1109.1863. Time: 3341.0066 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #469: GFLOPs: 1322.3345. Time: 2802.4668 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #470: GFLOPs: 1120.0028. Time: 3308.7406 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #471: GFLOPs: 84.4239. Time: 43895.1490 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #472: GFLOPs: 984.7164. Time: 3763.3155 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #473: GFLOPs: 911.3038. Time: 4066.4799 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #474: GFLOPs: 1292.8082. Time: 2866.4721 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #475: GFLOPs: 1228.0548. Time: 3017.6167 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #476: GFLOPs: 1178.3624. Time: 3144.8719 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #477: GFLOPs: 1113.8598. Time: 3326.9883 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #478: GFLOPs: 725.8827. Time: 5105.2309 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #479: GFLOPs: 1252.9344. Time: 2957.6956 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #480: GFLOPs: 1033.0288. Time: 3587.3139 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #481: GFLOPs: 1147.8291. Time: 3228.5281 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #482: GFLOPs: 84.1354. Time: 44045.6690 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #483: GFLOPs: 1231.6632. Time: 3008.7760 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #484: GFLOPs: 1009.0241. Time: 3672.6562 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #485: GFLOPs: 1016.3669. Time: 3646.1228 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #486: GFLOPs: 975.3953. Time: 3799.2787 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #487: GFLOPs: 39.4628. Time: 93906.0507 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #488: GFLOPs: 67.2468. Time: 55107.4510 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #489: GFLOPs: 75.6551. Time: 48982.7787 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #490: GFLOPs: 1095.4978. Time: 3382.7532 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #491: GFLOPs: 102.6475. Time: 36102.1853 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #492: GFLOPs: 535.3157. Time: 6922.6415 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #493: GFLOPs: 647.6954. Time: 5721.5148 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #494: GFLOPs: 77.6071. Time: 47750.7787 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #495: GFLOPs: 1356.1485. Time: 2732.5905 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #496: GFLOPs: 1124.1647. Time: 3296.4910 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #497: GFLOPs: 91.3533. Time: 40565.5663 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #498: GFLOPs: 955.5967. Time: 3877.9944 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #499: GFLOPs: 1084.3983. Time: 3417.3779 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #500: GFLOPs: 791.7219. Time: 4680.6825 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #501: GFLOPs: 1156.5951. Time: 3204.0587 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #502: GFLOPs: 1057.6602. Time: 3503.7707 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #503: GFLOPs: 1098.2553. Time: 3374.2597 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #504: GFLOPs: 1319.8174. Time: 2807.8117 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #505: GFLOPs: 446.3209. Time: 8302.9917 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #506: GFLOPs: 142.2347. Time: 26054.1055 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #507: GFLOPs: 1116.5759. Time: 3318.8953 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #508: GFLOPs: 1117.1054. Time: 3317.3224 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #509: GFLOPs: 1238.5076. Time: 2992.1485 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #510: GFLOPs: 133.9974. Time: 27655.7448 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #511: GFLOPs: 103.6164. Time: 35764.5843 us. Best GFLOPs: 1369.9811
2024-04-30 01:34:01 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #512: GFLOPs: 48.0124. Time: 77184.1367 us. Best GFLOPs: 1369.9811
2024-04-30 02:25:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:25:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:25:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 02:25:50 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 02:26:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 02:26:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 02:26:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 02:26:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 02:26:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9620  0.9620  0.9567  0.9429  0.9048  0.9043  0.8726  0.8697  0.8632  0.8606  0.8606  0.8602  0.8571  0.8557  0.8471  0.8398
[17 : 32]:	0.8367  0.8367  0.8333  0.8299  0.8299  0.8284  0.8284  0.8284  0.8284  0.8284  0.8284  0.8284  0.8218  0.8217  0.8216  0.8216
[33 : 48]:	0.8216  0.8216  0.8177  0.8144  0.8144  0.8080  0.8078  0.8076  0.8022  0.7985  0.7984  0.7960  0.7960  0.7960  0.7954  0.7953
[49 : 64]:	0.7945  0.7945  0.7934  0.7934  0.7934  0.7921  0.7906  0.7906  0.7891  0.7891  0.7887  0.7866  0.7852  0.7834  0.7823  0.7782
2024-04-30 02:26:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:26:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #513: GFLOPs: 1087.7918. Time: 3406.7168 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #514: GFLOPs: 1040.2744. Time: 3562.3280 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #515: GFLOPs: 151.1880. Time: 24511.1932 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #516: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(10), T.int64(30), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(16) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 8, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=448)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #517: GFLOPs: 1197.0521. Time: 3095.7705 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #518: GFLOPs: 1363.6828. Time: 2717.4932 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #519: GFLOPs: 1166.7998. Time: 3176.0364 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #520: GFLOPs: 1350.7839. Time: 2743.4431 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #521: GFLOPs: 1256.5128. Time: 2949.2724 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #522: GFLOPs: 1333.8772. Time: 2778.2158 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #523: GFLOPs: 1368.9744. Time: 2706.9891 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #524: GFLOPs: 1188.0592. Time: 3119.2036 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #525: GFLOPs: 1163.0678. Time: 3186.2276 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #526: GFLOPs: 1101.3589. Time: 3364.7512 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #527: GFLOPs: 858.1981. Time: 4318.1159 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #528: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0 in T.grid(T.int64(16), T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(16)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(4) + ax1)
                                v_i2 = T.axis.spatial(T.int64(226), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                                v_i3 = T.axis.spatial(T.int64(226), kw_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) * T.int64(16) + ax3)
                                v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(4) * T.int64(4) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(32), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 8, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 4, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b68)
l89 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l91, preserve_unit_iters=True)
sch.parallel(loop=l113)
sch.annotate(block_or_loop=l113, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l113, ann_key="pragma_unroll_explicit", ann_val=1)
l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b121)
b144 = sch.decompose_reduction(block=b121, loop=l128)
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #529: GFLOPs: 131.8985. Time: 28095.8328 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #530: GFLOPs: 132.2893. Time: 28012.8465 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #531: GFLOPs: 1295.6216. Time: 2860.2477 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #532: GFLOPs: 1029.3103. Time: 3600.2736 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #533: GFLOPs: 948.1102. Time: 3908.6160 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #534: GFLOPs: 89.7033. Time: 41311.7500 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #535: GFLOPs: 88.4826. Time: 41881.6630 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #536: GFLOPs: 1261.1370. Time: 2938.4585 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #537: GFLOPs: 70.7037. Time: 52413.1073 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #538: GFLOPs: 1258.4561. Time: 2944.7182 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #539: GFLOPs: 105.9803. Time: 34966.8610 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #540: GFLOPs: 76.4802. Time: 48454.3450 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #541: GFLOPs: 1101.2261. Time: 3365.1568 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #542: GFLOPs: 944.3229. Time: 3924.2917 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #543: GFLOPs: 1241.5295. Time: 2984.8657 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #544: GFLOPs: 1182.3027. Time: 3134.3907 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #545: GFLOPs: 1118.7819. Time: 3312.3514 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #546: GFLOPs: 1170.2055. Time: 3166.7932 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #547: GFLOPs: 1207.5249. Time: 3068.9212 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #548: GFLOPs: 779.4695. Time: 4754.2576 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #549: GFLOPs: 875.3146. Time: 4233.6765 us. Best GFLOPs: 1369.9811
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #550: GFLOPs: 1375.7833. Time: 2693.5918 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #551: GFLOPs: 1213.3077. Time: 3054.2943 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #552: GFLOPs: 927.7858. Time: 3994.2394 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #553: GFLOPs: 569.5953. Time: 6506.0199 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #554: GFLOPs: 84.4510. Time: 43881.0607 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #555: GFLOPs: 1185.7290. Time: 3125.3337 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #556: GFLOPs: 947.5285. Time: 3911.0157 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #557: GFLOPs: 218.0886. Time: 16992.1712 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #558: GFLOPs: 159.4328. Time: 23243.6444 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #559: GFLOPs: 64.6064. Time: 57359.6250 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #560: GFLOPs: 1335.8086. Time: 2774.1989 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #561: GFLOPs: 1247.8409. Time: 2969.7685 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #562: GFLOPs: 1192.0464. Time: 3108.7705 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #563: GFLOPs: 627.8601. Time: 5902.2682 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #564: GFLOPs: 1325.6112. Time: 2795.5396 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #565: GFLOPs: 1322.7095. Time: 2801.6724 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #566: GFLOPs: 1090.1275. Time: 3399.4176 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #567: GFLOPs: 1302.6496. Time: 2844.8163 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #568: GFLOPs: 128.4151. Time: 28857.9673 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #569: GFLOPs: 1128.1452. Time: 3284.8595 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #570: GFLOPs: 1131.3915. Time: 3275.4345 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #571: GFLOPs: 1071.0626. Time: 3459.9272 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #572: GFLOPs: 998.4459. Time: 3711.5669 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #573: GFLOPs: 982.9170. Time: 3770.2050 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #574: GFLOPs: 28.2324. Time: 131260.6313 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #575: GFLOPs: 88.4483. Time: 41897.9143 us. Best GFLOPs: 1375.7833
2024-04-30 02:29:24 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #576: GFLOPs: 12.9451. Time: 286270.7253 us. Best GFLOPs: 1375.7833
2024-04-30 03:24:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:24:04 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:24:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 03:24:09 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 03:24:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 03:24:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 03:24:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 03:25:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 03:25:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9699  0.9662  0.9558  0.9335  0.9275  0.9190  0.9136  0.9031  0.8900  0.8800  0.8770  0.8764  0.8764  0.8711  0.8702  0.8697
[17 : 32]:	0.8675  0.8630  0.8630  0.8630  0.8630  0.8567  0.8500  0.8487  0.8487  0.8481  0.8479  0.8478  0.8478  0.8428  0.8355  0.8334
[33 : 48]:	0.8332  0.8204  0.8198  0.8195  0.8172  0.8172  0.8112  0.8111  0.8058  0.8044  0.8027  0.8022  0.7998  0.7993  0.7993  0.7983
[49 : 64]:	0.7983  0.7974  0.7969  0.7958  0.7948  0.7943  0.7943  0.7943  0.7943  0.7941  0.7938  0.7938  0.7938  0.7938  0.7938  0.7938
2024-04-30 03:25:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:25:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #577: GFLOPs: 1085.9762. Time: 3412.4124 us. Best GFLOPs: 1375.7833
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #578: GFLOPs: 1367.3273. Time: 2710.2499 us. Best GFLOPs: 1375.7833
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #579: GFLOPs: 1592.0470. Time: 2327.6943 us. Best GFLOPs: 1592.0470
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #580: GFLOPs: 1074.3313. Time: 3449.4003 us. Best GFLOPs: 1592.0470
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #581: GFLOPs: 1312.1871. Time: 2824.1389 us. Best GFLOPs: 1592.0470
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #582: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(30), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(16) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 4, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #583: GFLOPs: 1628.1877. Time: 2276.0266 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #584: GFLOPs: 1273.1102. Time: 2910.8232 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #585: GFLOPs: 1452.0969. Time: 2552.0327 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #586: GFLOPs: 1299.2600. Time: 2852.2380 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #587: GFLOPs: 1428.7587. Time: 2593.7190 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #588: GFLOPs: 1365.8872. Time: 2713.1075 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #589: GFLOPs: 1141.8919. Time: 3245.3148 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #590: GFLOPs: 1395.7043. Time: 2655.1459 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #591: GFLOPs: 533.4531. Time: 6946.8128 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #592: GFLOPs: 592.1136. Time: 6258.5939 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #593: GFLOPs: 1309.7016. Time: 2829.4984 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #594: GFLOPs: 1114.4009. Time: 3325.3731 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #595: GFLOPs: 1120.4224. Time: 3307.5014 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #596: GFLOPs: 69.3559. Time: 53431.6663 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #597: GFLOPs: 764.1017. Time: 4849.8763 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #598: GFLOPs: 1267.7679. Time: 2923.0892 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #599: GFLOPs: 971.1031. Time: 3816.0714 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #600: GFLOPs: 1364.9901. Time: 2714.8905 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #601: GFLOPs: 1184.0172. Time: 3129.8519 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #602: GFLOPs: 1378.4960. Time: 2688.2912 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #603: GFLOPs: 1213.1397. Time: 3054.7171 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #604: GFLOPs: 1126.9484. Time: 3288.3482 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #605: GFLOPs: 1166.5331. Time: 3176.7625 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #606: GFLOPs: 1390.7780. Time: 2664.5508 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #607: GFLOPs: 729.3069. Time: 5081.2609 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #608: GFLOPs: 1066.2623. Time: 3475.5039 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #609: GFLOPs: 1008.5975. Time: 3674.2096 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #610: GFLOPs: 986.4770. Time: 3756.5991 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #611: GFLOPs: 1034.2608. Time: 3583.0409 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #612: GFLOPs: 1348.7345. Time: 2747.6116 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #613: GFLOPs: 1193.2594. Time: 3105.6104 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #614: GFLOPs: 1206.6771. Time: 3071.0774 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #615: GFLOPs: 1151.9417. Time: 3217.0019 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #616: GFLOPs: 982.5387. Time: 3771.6567 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #617: GFLOPs: 1146.3916. Time: 3232.5765 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #618: GFLOPs: 1147.0001. Time: 3230.8617 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #619: GFLOPs: 1172.8015. Time: 3159.7834 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #620: GFLOPs: 1238.5828. Time: 2991.9668 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #621: GFLOPs: 1063.6196. Time: 3484.1392 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #622: GFLOPs: 84.4237. Time: 43895.2537 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #623: GFLOPs: 1226.9949. Time: 3020.2234 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #624: GFLOPs: 1079.5596. Time: 3432.6947 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #625: GFLOPs: 1339.4948. Time: 2766.5644 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #626: GFLOPs: 809.6813. Time: 4576.8610 us. Best GFLOPs: 1628.1877
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #627: GFLOPs: 1692.9407. Time: 2188.9713 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #628: GFLOPs: 153.8824. Time: 24082.0150 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #629: GFLOPs: 1049.1150. Time: 3532.3091 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #630: GFLOPs: 36.5409. Time: 101414.9710 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #631: GFLOPs: 74.6529. Time: 49640.3803 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #632: GFLOPs: 1089.4804. Time: 3401.4368 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #633: GFLOPs: 1309.8251. Time: 2829.2317 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #634: GFLOPs: 90.1200. Time: 41120.7020 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #635: GFLOPs: 77.8612. Time: 47594.9247 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #636: GFLOPs: 74.7700. Time: 49562.6657 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #637: GFLOPs: 736.0632. Time: 5034.6201 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #638: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2)):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(114), T.int64(226)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(112) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(112) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(224), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(112) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(50176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1605632))
                    v_ax2 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1605632) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 8, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b114)
b139 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #639: GFLOPs: 40.9577. Time: 90478.7467 us. Best GFLOPs: 1692.9407
2024-04-30 03:28:19 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #640: GFLOPs: 26.2435. Time: 141208.0423 us. Best GFLOPs: 1692.9407
2024-04-30 04:39:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 04:39:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 04:39:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 04:39:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 04:39:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 04:39:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 04:40:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 04:40:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 04:40:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9308  0.9308  0.8963  0.8963  0.8963  0.8963  0.8963  0.8440  0.8440  0.8440  0.8440  0.8440  0.8416  0.8104  0.7949  0.7949
[17 : 32]:	0.7936  0.7936  0.7858  0.7857  0.7798  0.7672  0.7629  0.7614  0.7614  0.7614  0.7516  0.7504  0.7494  0.7482  0.7474  0.7474
[33 : 48]:	0.7424  0.7407  0.7315  0.7307  0.7193  0.7146  0.7002  0.6993  0.6991  0.6962  0.6960  0.6951  0.6923  0.6919  0.6919  0.6912
[49 : 64]:	0.6895  0.6880  0.6874  0.6853  0.6836  0.6829  0.6829  0.6817  0.6808  0.6775  0.6758  0.6756  0.6752  0.6716  0.6710  0.6691
2024-04-30 04:40:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 04:40:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 04:43:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #641: GFLOPs: 1454.5575. Time: 2547.7156 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #642: GFLOPs: 1582.5523. Time: 2341.6595 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #643: GFLOPs: 159.3912. Time: 23249.7096 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #644: GFLOPs: 101.8529. Time: 36383.8143 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #645: GFLOPs: 154.7853. Time: 23941.5376 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #646: GFLOPs: 147.1750. Time: 25179.5315 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #647: GFLOPs: 145.5774. Time: 25455.8662 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #648: GFLOPs: 995.8678. Time: 3721.1752 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #649: GFLOPs: 101.5569. Time: 36489.8797 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #650: GFLOPs: 1426.4635. Time: 2597.8925 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #651: GFLOPs: 148.0760. Time: 25026.3212 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #652: GFLOPs: 143.2010. Time: 25878.3037 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #653: GFLOPs: 1288.3450. Time: 2876.4024 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #654: GFLOPs: 503.8631. Time: 7354.7732 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #655: GFLOPs: 1226.7902. Time: 3020.7274 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #656: GFLOPs: 1223.9814. Time: 3027.6592 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #657: GFLOPs: 1410.1175. Time: 2628.0071 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #658: GFLOPs: 994.1665. Time: 3727.5431 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #659: GFLOPs: 1248.3768. Time: 2968.4938 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #660: GFLOPs: 1258.7300. Time: 2944.0776 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #661: GFLOPs: 1303.0730. Time: 2843.8918 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #662: GFLOPs: 1301.6934. Time: 2846.9060 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #663: GFLOPs: 149.0495. Time: 24862.8718 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #664: GFLOPs: 1292.5004. Time: 2867.1547 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #665: GFLOPs: 1338.1484. Time: 2769.3480 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #666: GFLOPs: 944.3005. Time: 3924.3849 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #667: GFLOPs: 1375.5254. Time: 2694.0969 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #668: GFLOPs: 1185.5677. Time: 3125.7589 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #669: GFLOPs: 148.1325. Time: 25016.7886 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #670: GFLOPs: 1230.1258. Time: 3012.5364 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #671: GFLOPs: 821.5671. Time: 4510.6465 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #672: GFLOPs: 105.0068. Time: 35291.0387 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #673: GFLOPs: 1069.8425. Time: 3463.8732 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #674: GFLOPs: 1122.9252. Time: 3300.1295 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #675: GFLOPs: 1253.6954. Time: 2955.9004 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #676: GFLOPs: 108.9209. Time: 34022.8497 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #677: GFLOPs: 630.3320. Time: 5879.1215 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #678: GFLOPs: 161.9186. Time: 22886.7952 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #679: GFLOPs: 956.1118. Time: 3875.9051 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #680: GFLOPs: 576.5824. Time: 6427.1801 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #681: GFLOPs: 1284.3888. Time: 2885.2623 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #682: GFLOPs: 1055.0578. Time: 3512.4129 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #683: GFLOPs: 1078.2490. Time: 3436.8673 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #684: GFLOPs: 1141.1655. Time: 3247.3805 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #685: GFLOPs: 900.7229. Time: 4114.2493 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #686: GFLOPs: 1250.9243. Time: 2962.4483 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #687: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(112) + ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(30), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(112) + ow_1 * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(16), ic_0 % T.int64(16) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(112) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(112) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[112, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 4, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #688: GFLOPs: 1376.5224. Time: 2692.1456 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #689: GFLOPs: 1110.6195. Time: 3336.6952 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #690: GFLOPs: 1291.6435. Time: 2869.0569 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #691: GFLOPs: 965.0714. Time: 3839.9218 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #692: GFLOPs: 1233.9603. Time: 3003.1750 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #693: GFLOPs: 649.4498. Time: 5706.0589 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #694: GFLOPs: 584.2518. Time: 6342.8112 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #695: GFLOPs: 1112.2704. Time: 3331.7426 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #696: GFLOPs: 1242.1405. Time: 2983.3973 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #697: GFLOPs: 1080.3526. Time: 3430.1752 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #698: GFLOPs: 975.2574. Time: 3799.8159 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #699: GFLOPs: 1034.4097. Time: 3582.5252 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #700: GFLOPs: 1175.9205. Time: 3151.4024 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #701: GFLOPs: 1307.4484. Time: 2834.3747 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #702: GFLOPs: 129.7206. Time: 28567.5513 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #703: GFLOPs: 141.2698. Time: 26232.0725 us. Best GFLOPs: 1692.9407
2024-04-30 04:43:05 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #704: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(30), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(16), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(2), T.int64(28), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 1, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 4, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b119)
b143 = sch.decompose_reduction(block=b119, loop=l127)
2024-04-30 05:12:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:12:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 05:12:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 05:12:31 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 05:12:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 05:12:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 05:13:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 05:13:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31cec98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30f62d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ef8a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3785868)]: 0 failure(s)
2024-04-30 05:13:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9215  0.8420  0.8420  0.8401  0.8401  0.8401  0.7986  0.7972  0.7884  0.7882  0.7874  0.7872  0.7727  0.7654  0.7644  0.7644
[17 : 32]:	0.7642  0.7627  0.7617  0.7617  0.7617  0.7598  0.7598  0.7574  0.7553  0.7531  0.7527  0.7527  0.7518  0.7491  0.7489  0.7475
[33 : 48]:	0.7475  0.7455  0.7315  0.7291  0.7271  0.7270  0.7205  0.7163  0.7162  0.7156  0.7141  0.7124  0.7124  0.7123  0.7123  0.7123
[49 : 64]:	0.7091  0.7086  0.7077  0.7077  0.6994  0.6994  0.6994  0.6986  0.6971  0.6971  0.6971  0.6971  0.6942  0.6926  0.6907  0.6907
2024-04-30 05:13:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 05:13:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #705: GFLOPs: 1592.9805. Time: 2326.3303 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #706: GFLOPs: 1547.3314. Time: 2394.9612 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #707: GFLOPs: 1461.3092. Time: 2535.9442 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #708: GFLOPs: 1525.3903. Time: 2429.4102 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #709: GFLOPs: 1370.7148. Time: 2703.5519 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #710: GFLOPs: 1565.1805. Time: 2367.6494 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #711: GFLOPs: 1297.2889. Time: 2856.5717 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #712: GFLOPs: 1234.0426. Time: 3002.9747 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #713: GFLOPs: 959.3470. Time: 3862.8346 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #714: GFLOPs: 1397.9675. Time: 2650.8475 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #715: GFLOPs: 1236.3814. Time: 2997.2940 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #716: GFLOPs: 1235.3162. Time: 2999.8787 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #717: GFLOPs: 1255.4249. Time: 2951.8282 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #718: GFLOPs: 1348.1011. Time: 2748.9026 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #719: GFLOPs: 1305.1888. Time: 2839.2816 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #720: GFLOPs: 1308.5512. Time: 2831.9859 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #721: GFLOPs: 1331.8197. Time: 2782.5078 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #722: GFLOPs: 1230.4925. Time: 3011.6385 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #723: GFLOPs: 1173.3651. Time: 3158.2655 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #724: GFLOPs: 1270.6012. Time: 2916.5710 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #725: GFLOPs: 1226.2126. Time: 3022.1502 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #726: GFLOPs: 1284.8424. Time: 2884.2437 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #727: GFLOPs: 1490.7873. Time: 2485.7998 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #728: GFLOPs: 1217.0719. Time: 3044.8478 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #729: GFLOPs: 141.7832. Time: 26137.0820 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #730: GFLOPs: 141.7640. Time: 26140.6120 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #731: GFLOPs: 831.0313. Time: 4459.2771 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #732: GFLOPs: 1376.5557. Time: 2692.0805 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #733: GFLOPs: 142.6844. Time: 25971.9965 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #734: GFLOPs: 1207.7859. Time: 3068.2579 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #735: GFLOPs: 169.9798. Time: 21801.4114 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #736: GFLOPs: 1152.3175. Time: 3215.9528 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #737: GFLOPs: 581.6116. Time: 6371.6039 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #738: GFLOPs: 1272.8608. Time: 2911.3935 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #739: GFLOPs: 115.7546. Time: 32014.2585 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #740: GFLOPs: 1322.5531. Time: 2802.0037 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #741: GFLOPs: 1274.4547. Time: 2907.7523 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #742: GFLOPs: 1206.2657. Time: 3072.1246 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #743: GFLOPs: 1087.5407. Time: 3407.5036 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #744: GFLOPs: 1045.7744. Time: 3543.5927 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #745: GFLOPs: 1218.5708. Time: 3041.1025 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #746: GFLOPs: 1388.2865. Time: 2669.3327 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #747: GFLOPs: 1271.3623. Time: 2914.8249 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #748: GFLOPs: 141.0670. Time: 26269.7717 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #749: GFLOPs: 161.8260. Time: 22899.8970 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #750: GFLOPs: 90.2722. Time: 41051.3757 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #751: GFLOPs: 113.2604. Time: 32719.2760 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #752: GFLOPs: 114.5685. Time: 32345.7117 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #753: GFLOPs: 158.6723. Time: 23355.0468 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #754: GFLOPs: 829.1044. Time: 4469.6403 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #755: GFLOPs: 1258.0344. Time: 2945.7052 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #756: GFLOPs: 1462.2695. Time: 2534.2789 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #757: GFLOPs: 1005.1740. Time: 3686.7234 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #758: GFLOPs: 1000.5322. Time: 3703.8276 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #759: GFLOPs: 160.9684. Time: 23021.9014 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #760: GFLOPs: 744.7357. Time: 4975.9917 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #761: GFLOPs: 158.9398. Time: 23315.7378 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #762: GFLOPs: 143.0252. Time: 25910.1155 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #763: GFLOPs: 1066.9495. Time: 3473.2654 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #764: GFLOPs: 1196.4557. Time: 3097.3136 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #765: GFLOPs: 1357.8419. Time: 2729.1827 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #766: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(224), T.int64(224), T.int64(16)), "float32"), p1: T.Buffer((T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(16), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(226), T.int64(226), T.int64(16)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(224)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(30)):
                    for ax3_ax4_fused in T.vectorized(T.int64(48)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(226), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(112) + oh_1 * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(226), ow_1 + ax3_ax4_fused // T.int64(16))
                            v_i4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(112) + oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(224), ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(112) + oh_1 * T.int64(28) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(224), ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)], p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(16), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(16)] * p1[v_oc_chunk, v_ic // T.int64(16), v_kh, v_kw, v_ic % T.int64(16), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(224)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(224), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(112) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(224), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 224, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
l110 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #767: GFLOPs: 2.3750. Time: 1560360.0933 us. Best GFLOPs: 1692.9407
2024-04-30 05:16:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_1] Trial #768: GFLOPs: 1.9528. Time: 1897688.0023 us. Best GFLOPs: 1692.9407
