2024-04-29 19:45:33 [INFO] [task_scheduler.cc:160] Initializing Task #21: "fused_nn_max_pool2d_4"
2024-04-29 19:45:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 19:45:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:45:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:45:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 19:45:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 20:30:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:30:08 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:30:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a43528)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x334c388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a59338)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x365ced8)]: 0 failure(s)
2024-04-29 20:30:08 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:30:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a43528)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x334c388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a59338)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x365ced8)]: 0 failure(s)
2024-04-29 20:30:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a43528)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x334c388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a59338)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x365ced8)]: 0 failure(s)
2024-04-29 20:30:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a43528)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x334c388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a59338)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x365ced8)]: 0 failure(s)
2024-04-29 20:30:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a43528)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x334c388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a59338)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x365ced8)]: 0 failure(s)
2024-04-29 20:30:14 [INFO] [evolutionary_search.cc:649] Scores of the best 61 candidates:
[1 : 16]:	0.9962  0.9703  0.9698  0.9656  0.9505  0.9444  0.9175  0.9116  0.8964  0.8798  0.8740  0.8483  0.8229  0.8079  0.7489  0.7409
[17 : 32]:	0.7326  0.7189  0.7008  0.6776  0.6768  0.6724  0.6599  0.6533  0.6154  0.6121  0.6016  0.5984  0.5885  0.5823  0.5700  0.5424
[33 : 48]:	0.5398  0.4972  0.4880  0.4788  0.4635  0.4604  0.4593  0.4554  0.4405  0.4111  0.4108  0.3801  0.3637  0.3508  0.3502  0.3265
[49 : 61]:	0.3247  0.3001  0.2980  0.2908  0.2814  0.2718  0.2565  0.2228  0.1775  0.1663  0.0951  0.0350  0.0061
2024-04-29 20:30:14 [INFO] [evolutionary_search.cc:727] Got 61 candidate(s) with evolutionary search
2024-04-29 20:30:14 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #1: GFLOPs: 1.8299. Time: 54.8411 us. Best GFLOPs: 1.8299
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #2: GFLOPs: 3.7554. Time: 26.7217 us. Best GFLOPs: 3.7554
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #3: GFLOPs: 4.1740. Time: 24.0422 us. Best GFLOPs: 4.1740
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #4: GFLOPs: 3.9293. Time: 25.5392 us. Best GFLOPs: 4.1740
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #5: GFLOPs: 8.3988. Time: 11.9483 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #6: GFLOPs: 4.1706. Time: 24.0618 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #7: GFLOPs: 1.0362. Time: 96.8490 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #8: GFLOPs: 4.6439. Time: 21.6096 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #9: GFLOPs: 2.6481. Time: 37.8965 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #10: GFLOPs: 5.0435. Time: 19.8974 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #11: GFLOPs: 3.7255. Time: 26.9365 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #12: GFLOPs: 4.0781. Time: 24.6073 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #13: GFLOPs: 3.8249. Time: 26.2367 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #14: GFLOPs: 2.5047. Time: 40.0655 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #15: GFLOPs: 5.0271. Time: 19.9624 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #16: GFLOPs: 4.8124. Time: 20.8528 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #17: GFLOPs: 4.1968. Time: 23.9114 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #18: GFLOPs: 3.1766. Time: 31.5907 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #19: GFLOPs: 4.0571. Time: 24.7352 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #20: GFLOPs: 3.4575. Time: 29.0246 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #21: GFLOPs: 3.6495. Time: 27.4972 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #22: GFLOPs: 2.3736. Time: 42.2785 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #23: GFLOPs: 5.1025. Time: 19.6673 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #24: GFLOPs: 3.4089. Time: 29.4380 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #25: GFLOPs: 4.2660. Time: 23.5237 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #26: GFLOPs: 3.9761. Time: 25.2388 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #27: GFLOPs: 3.8145. Time: 26.3083 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #28: GFLOPs: 4.3423. Time: 23.1103 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #29: GFLOPs: 5.0057. Time: 20.0476 us. Best GFLOPs: 8.3988
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #30: GFLOPs: 9.0114. Time: 11.1361 us. Best GFLOPs: 9.0114
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #31: GFLOPs: 4.5983. Time: 21.8239 us. Best GFLOPs: 9.0114
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #32: GFLOPs: 3.9930. Time: 25.1318 us. Best GFLOPs: 9.0114
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #33: GFLOPs: 4.7802. Time: 20.9932 us. Best GFLOPs: 9.0114
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #34: GFLOPs: 3.4032. Time: 29.4876 us. Best GFLOPs: 9.0114
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #35: GFLOPs: 10.4484. Time: 9.6045 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #36: GFLOPs: 4.6882. Time: 21.4052 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #37: GFLOPs: 4.8651. Time: 20.6271 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #38: GFLOPs: 3.0551. Time: 32.8472 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_max_pool2d_4] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #40: GFLOPs: 8.2694. Time: 12.1353 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #41: GFLOPs: 9.7544. Time: 10.2879 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #42: GFLOPs: 4.5707. Time: 21.9555 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #43: GFLOPs: 4.3479. Time: 23.0807 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #44: GFLOPs: 4.4367. Time: 22.6185 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #45: GFLOPs: 4.4379. Time: 22.6124 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #46: GFLOPs: 4.7262. Time: 21.2333 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #47: GFLOPs: 3.9015. Time: 25.7217 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #48: GFLOPs: 4.1168. Time: 24.3763 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #49: GFLOPs: 4.9514. Time: 20.2674 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #50: GFLOPs: 4.0011. Time: 25.0809 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #51: GFLOPs: 3.8185. Time: 26.2808 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #52: GFLOPs: 3.6402. Time: 27.5675 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #53: GFLOPs: 4.2767. Time: 23.4650 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #54: GFLOPs: 5.1595. Time: 19.4500 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #55: GFLOPs: 4.4363. Time: 22.6208 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #56: GFLOPs: 5.1774. Time: 19.3828 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #57: GFLOPs: 9.7190. Time: 10.3253 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #58: GFLOPs: 4.7768. Time: 21.0083 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #59: GFLOPs: 4.3920. Time: 22.8486 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #60: GFLOPs: 4.6454. Time: 21.6022 us. Best GFLOPs: 10.4484
2024-04-29 21:00:06 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #61: GFLOPs: 3.7358. Time: 26.8624 us. Best GFLOPs: 10.4484
