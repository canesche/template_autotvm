2024-04-29 19:44:49 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3"
2024-04-29 19:44:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 19:44:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 19:44:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(8), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(16) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(113) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(113), p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 19:44:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(8), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(16) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(113) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(113), p0[v_n, v_ic // T.int64(64), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(64)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(4), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), oh_1 * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(32) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:44:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(18), T.int64(4), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), oh_1 * T.int64(16) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_0 * T.int64(4) + kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(16) * T.int64(4) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(8), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(16) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(4), T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 19:57:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:57:20 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:57:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 19:57:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 19:57:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 19:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 19:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 19:57:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 19:57:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9989  0.9985  0.9982  0.9979  0.9972  0.9972  0.9953  0.9952  0.9949  0.9946  0.9943  0.9942  0.9941  0.9941  0.9940
[17 : 32]:	0.9935  0.9931  0.9924  0.9919  0.9915  0.9911  0.9905  0.9899  0.9895  0.9893  0.9893  0.9892  0.9888  0.9867  0.9864  0.9860
[33 : 48]:	0.9858  0.9852  0.9849  0.9841  0.9836  0.9832  0.9832  0.9830  0.9818  0.9813  0.9807  0.9806  0.9803  0.9801  0.9799  0.9797
[49 : 64]:	0.9793  0.9793  0.9790  0.9787  0.9765  0.9758  0.9749  0.9747  0.9745  0.9739  0.9738  0.9734  0.9723  0.9721  0.9720  0.9719
2024-04-29 19:57:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:57:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #1: GFLOPs: 140.4739. Time: 26357.8257 us. Best GFLOPs: 140.4739
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #2: GFLOPs: 119.5600. Time: 30968.4385 us. Best GFLOPs: 140.4739
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #3: GFLOPs: 33.8322. Time: 109439.7727 us. Best GFLOPs: 140.4739
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #4: GFLOPs: 58.9427. Time: 62816.7223 us. Best GFLOPs: 140.4739
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #5: GFLOPs: 51.7628. Time: 71529.9567 us. Best GFLOPs: 140.4739
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(25992)):
            for i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(2), i0_i1_i2_i3_fused // T.int64(12996))
                    v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_i3_fused % T.int64(12996) // T.int64(114))
                    v_i3 = T.axis.spatial(T.int64(114), i0_i1_i2_i3_fused % T.int64(114))
                    v_i4 = T.axis.spatial(T.int64(64), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(32) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(32) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(32) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 28, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #7: GFLOPs: 156.9299. Time: 23593.8922 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #8: GFLOPs: 124.6727. Time: 29698.4662 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #9: GFLOPs: 36.7979. Time: 100619.5893 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #10: GFLOPs: 119.8406. Time: 30895.9372 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #11: GFLOPs: 2.0236. Time: 1829666.6870 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #12: GFLOPs: 66.5980. Time: 55596.0873 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #13: GFLOPs: 42.5005. Time: 87118.6743 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #14: GFLOPs: 64.8433. Time: 57100.5733 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #15: GFLOPs: 76.1781. Time: 48604.3853 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #16: GFLOPs: 4.2491. Time: 871388.5600 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #17: GFLOPs: 35.2635. Time: 104997.7063 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #18: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(64)):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(30), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(28) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(25088)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(802816))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(802816) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #19: GFLOPs: 58.7282. Time: 63046.1307 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #20: GFLOPs: 66.6570. Time: 55546.8367 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #21: GFLOPs: 31.0900. Time: 119092.4357 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #22: GFLOPs: 39.3002. Time: 94212.8783 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #23: GFLOPs: 150.9519. Time: 24528.2582 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #24: GFLOPs: 50.0545. Time: 73971.0580 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #25: GFLOPs: 35.6724. Time: 103794.0957 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #26: GFLOPs: 24.8256. Time: 149144.0403 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #27: GFLOPs: 80.7757. Time: 45837.8800 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #28: GFLOPs: 30.8848. Time: 119883.8363 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #29: GFLOPs: 31.6010. Time: 117166.7357 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #30: GFLOPs: 30.9323. Time: 119699.8100 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #31: GFLOPs: 99.8701. Time: 37074.0207 us. Best GFLOPs: 156.9299
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(10), T.int64(10)):
                        for ax4_fused in T.vectorized(T.int64(8)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(8) + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ax3)
                                v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(8) * T.int64(8) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2 * T.int64(8) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 8])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
l112 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l112)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #33: GFLOPs: 173.6807. Time: 21318.3640 us. Best GFLOPs: 173.6807
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #34: GFLOPs: 58.9164. Time: 62844.7637 us. Best GFLOPs: 173.6807
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(10), T.int64(10)):
                        for ax4_fused in T.vectorized(T.int64(8)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(8) + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ax3)
                                v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(8) * T.int64(8) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                        for oc_block_3_fused in T.vectorized(T.int64(16)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2 * T.int64(8) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 8])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
l112 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l112)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #36: GFLOPs: 137.5317. Time: 26921.7050 us. Best GFLOPs: 173.6807
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #37: GFLOPs: 386.0069. Time: 9592.0238 us. Best GFLOPs: 386.0069
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(58), T.int64(18)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(16)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(56) + oh_1 * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(16) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(16)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(16) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(25088)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(802816))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(802816) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 16])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #39: GFLOPs: 1.8799. Time: 1969539.5623 us. Best GFLOPs: 386.0069
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #40: GFLOPs: 38.5964. Time: 95930.8480 us. Best GFLOPs: 386.0069
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #41: GFLOPs: 9.7084. Time: 381378.0083 us. Best GFLOPs: 386.0069
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #42: GFLOPs: 897.3459. Time: 4126.1540 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #43: GFLOPs: 18.7778. Time: 197178.5227 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0 in T.grid(T.int64(16), T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(10)):
                        for ax4_fused in T.vectorized(T.int64(8)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(8) + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ax3)
                                v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(8) * T.int64(8) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                        for oc_block_3_fused in T.vectorized(T.int64(16)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 2, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l112)
l113 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l113)
sch.annotate(block_or_loop=l112, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l112, ann_key="pragma_unroll_explicit", ann_val=1)
l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b121)
b144 = sch.decompose_reduction(block=b121, loop=l128)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #45: GFLOPs: 60.8476. Time: 60850.1790 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #46: GFLOPs: 1.5803. Time: 2342954.9583 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #47: GFLOPs: 17.0219. Time: 217518.5973 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #48: GFLOPs: 72.9799. Time: 50734.3523 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #49: GFLOPs: 9.2458. Time: 400462.1110 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #50: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for i0_i1_i2_fused in T.parallel(T.int64(228)):
            for i3 in range(T.int64(114)):
                for i4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(2), i0_i1_i2_fused // T.int64(114))
                        v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_fused % T.int64(114))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(112) + oh_2_init * T.int64(14) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(112) + oh_2 * T.int64(14) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 8, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=224)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l78, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l78, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b116)
b143 = sch.decompose_reduction(block=b116, loop=l127)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #51: GFLOPs: 119.0920. Time: 31090.1503 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #52: GFLOPs: 301.5626. Time: 12278.0043 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #53: GFLOPs: 2.7041. Time: 1369262.5703 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(32)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(128)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(6), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), oh_1 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(4) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 28, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(10), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(16) + oc_block_1 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #56: GFLOPs: 102.8972. Time: 35983.3780 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #57: GFLOPs: 72.6731. Time: 50948.4927 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #58: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(16)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(58), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(114), oh_1 * T.int64(56) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(28) + ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(56) + oh_2_init * T.int64(56) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(28) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(56), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(28) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(25088)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(802816))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(802816) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 14, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 16, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b68)
l110 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l110)
l111 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l111)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116 = sch.get_loops(block=b69)
l117 = sch.fuse(l112, l113, l114, l115, l116, preserve_unit_iters=True)
l118, l119 = sch.split(loop=l117, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l118)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b120)
b144 = sch.decompose_reduction(block=b120, loop=l128)
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #59: GFLOPs: 3.5848. Time: 1032851.3407 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #60: GFLOPs: 48.1437. Time: 76906.9927 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #61: GFLOPs: 95.5251. Time: 38760.3633 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #62: GFLOPs: 27.2578. Time: 135835.8847 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #63: GFLOPs: 22.5907. Time: 163898.8580 us. Best GFLOPs: 897.3459
2024-04-29 20:59:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #64: GFLOPs: 2.8970. Time: 1278079.3410 us. Best GFLOPs: 897.3459
2024-04-29 21:45:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:45:30 [INFO] [evolutionary_search.cc:715] Picked top 54 candidate(s) from database
2024-04-29 21:45:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 21:45:35 [INFO] [evolutionary_search.cc:723] Sampled 458 candidate(s)
2024-04-29 21:45:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 21:46:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 21:46:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 21:46:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 21:46:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0006  1.0006  0.9984  0.9801  0.9524  0.9436  0.9277  0.9083  0.8819  0.8776  0.8750  0.8700  0.8695  0.8692  0.8529  0.8513
[17 : 32]:	0.8508  0.8450  0.8450  0.8413  0.8382  0.8382  0.8382  0.8382  0.8359  0.8223  0.8050  0.8050  0.8010  0.7896  0.7896  0.7880
[33 : 48]:	0.7843  0.7827  0.7812  0.7775  0.7751  0.7709  0.7631  0.7618  0.7596  0.7581  0.7536  0.7500  0.7489  0.7478  0.7478  0.7478
[49 : 64]:	0.7420  0.7207  0.7207  0.7156  0.7016  0.7016  0.6994  0.6994  0.6922  0.6911  0.6885  0.6858  0.6729  0.6725  0.6648  0.6616
2024-04-29 21:46:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:46:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #65: GFLOPs: 892.2282. Time: 4149.8210 us. Best GFLOPs: 897.3459
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #66: GFLOPs: 898.0623. Time: 4122.8626 us. Best GFLOPs: 898.0623
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #67: GFLOPs: 939.7621. Time: 3939.9197 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #68: GFLOPs: 549.2625. Time: 6741.0167 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #69: GFLOPs: 549.3749. Time: 6739.6367 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #70: GFLOPs: 909.6231. Time: 4070.4632 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #71: GFLOPs: 95.8477. Time: 38629.8950 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #72: GFLOPs: 24.3434. Time: 152098.1310 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #73: GFLOPs: 912.9908. Time: 4055.4486 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #74: GFLOPs: 13.8038. Time: 268228.8200 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #75: GFLOPs: 842.6978. Time: 4393.7309 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #76: GFLOPs: 774.1988. Time: 4782.4761 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #77: GFLOPs: 845.7832. Time: 4377.7028 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #78: GFLOPs: 887.6707. Time: 4171.1272 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #79: GFLOPs: 41.7824. Time: 88615.9987 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #80: GFLOPs: 43.7415. Time: 84647.0237 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #81: GFLOPs: 56.1038. Time: 65995.2860 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #82: GFLOPs: 907.1913. Time: 4081.3746 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #83: GFLOPs: 897.3933. Time: 4125.9362 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #84: GFLOPs: 559.0577. Time: 6622.9071 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #85: GFLOPs: 78.5772. Time: 47120.3543 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #86: GFLOPs: 37.1538. Time: 99655.6720 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #87: GFLOPs: 83.1025. Time: 44554.4837 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #88: GFLOPs: 37.1554. Time: 99651.5253 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #89: GFLOPs: 77.1377. Time: 47999.7160 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #90: GFLOPs: 109.8152. Time: 33716.5337 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #91: GFLOPs: 657.5361. Time: 5631.0025 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #92: GFLOPs: 655.3803. Time: 5649.5250 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #93: GFLOPs: 717.4198. Time: 5160.9774 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #94: GFLOPs: 26.0724. Time: 142011.8177 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #95: GFLOPs: 41.4594. Time: 89306.3040 us. Best GFLOPs: 939.7621
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #96: GFLOPs: 1078.3259. Time: 3433.6441 us. Best GFLOPs: 1078.3259
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #97: GFLOPs: 310.6373. Time: 11919.3274 us. Best GFLOPs: 1078.3259
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #98: GFLOPs: 36.7361. Time: 100788.7250 us. Best GFLOPs: 1078.3259
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #99: GFLOPs: 77.3604. Time: 47861.5207 us. Best GFLOPs: 1078.3259
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #100: GFLOPs: 562.7146. Time: 6579.8676 us. Best GFLOPs: 1078.3259
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #101: GFLOPs: 1111.9883. Time: 3329.6999 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #102: GFLOPs: 889.3759. Time: 4163.1299 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #103: GFLOPs: 532.6785. Time: 6950.8863 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #104: GFLOPs: 567.6937. Time: 6522.1570 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #105: GFLOPs: 568.4265. Time: 6513.7490 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #106: GFLOPs: 194.8611. Time: 19001.1638 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #107: GFLOPs: 816.4065. Time: 4535.2250 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #108: GFLOPs: 1073.8887. Time: 3447.8317 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #109: GFLOPs: 392.4707. Time: 9434.0471 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #110: GFLOPs: 935.4856. Time: 3957.9308 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #111: GFLOPs: 540.7766. Time: 6846.7972 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #112: GFLOPs: 948.2691. Time: 3904.5745 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #113: GFLOPs: 39.9548. Time: 92669.3717 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #114: GFLOPs: 503.6414. Time: 7351.6344 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #115: GFLOPs: 13.7678. Time: 268930.6290 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #116: GFLOPs: 230.1465. Time: 16087.9597 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #117: GFLOPs: 77.6959. Time: 47654.8567 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #118: GFLOPs: 75.3722. Time: 49124.0453 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #119: GFLOPs: 82.3311. Time: 44971.9173 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #120: GFLOPs: 75.4608. Time: 49066.3880 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #121: GFLOPs: 859.7632. Time: 4306.5199 us. Best GFLOPs: 1111.9883
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #122: GFLOPs: 1250.5120. Time: 2960.8571 us. Best GFLOPs: 1250.5120
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #123: GFLOPs: 909.4096. Time: 4071.4189 us. Best GFLOPs: 1250.5120
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #124: GFLOPs: 197.6577. Time: 18732.3173 us. Best GFLOPs: 1250.5120
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(32)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(6)):
                        for ax4_fused in T.vectorized(T.int64(4)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(16) + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(14) + oh_1 * T.int64(7) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(4) + ax3)
                                v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(16) * T.int64(4) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                        for oc_block_3_fused in T.vectorized(T.int64(16)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(2) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(32) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
l112 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l112)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #126: GFLOPs: 5.5486. Time: 667304.5853 us. Best GFLOPs: 1250.5120
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(28)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(6), T.int64(58)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(114), oh_1 * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(56) + ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(56) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 4, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b69)
l108 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l108)
l109 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b117)
b140 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-29 21:48:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #128: GFLOPs: 96.2758. Time: 38458.1387 us. Best GFLOPs: 1250.5120
2024-04-29 22:53:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:53:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:54:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 22:54:03 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 22:54:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 22:54:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 22:54:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 22:55:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 22:55:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9799  0.9799  0.9709  0.9709  0.9615  0.9615  0.9615  0.9615  0.9569  0.9569  0.9367  0.9307  0.9260  0.9177  0.9177  0.9083
[17 : 32]:	0.8900  0.8900  0.8900  0.8900  0.8822  0.8816  0.8676  0.8654  0.8619  0.8599  0.8530  0.8465  0.8362  0.8350  0.8350  0.8340
[33 : 48]:	0.8336  0.8336  0.8315  0.8297  0.8297  0.8269  0.8261  0.8261  0.8261  0.8160  0.8107  0.8102  0.8102  0.8079  0.8058  0.8056
[49 : 64]:	0.8043  0.8040  0.7989  0.7982  0.7950  0.7950  0.7950  0.7950  0.7950  0.7950  0.7950  0.7946  0.7889  0.7866  0.7864  0.7855
2024-04-29 22:55:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:55:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #129: GFLOPs: 1252.5748. Time: 2955.9810 us. Best GFLOPs: 1252.5748
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #130: GFLOPs: 1245.7287. Time: 2972.2260 us. Best GFLOPs: 1252.5748
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #131: GFLOPs: 1270.7468. Time: 2913.7097 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #132: GFLOPs: 1246.0076. Time: 2971.5607 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #133: GFLOPs: 1250.3666. Time: 2961.2014 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #134: GFLOPs: 1219.5759. Time: 3035.9630 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #135: GFLOPs: 1242.5679. Time: 2979.7868 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #136: GFLOPs: 1196.1137. Time: 3095.5147 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #137: GFLOPs: 1169.2707. Time: 3166.5784 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #138: GFLOPs: 1169.4565. Time: 3166.0753 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #139: GFLOPs: 1043.3462. Time: 3548.7620 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #140: GFLOPs: 1035.4754. Time: 3575.7367 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #141: GFLOPs: 1033.4527. Time: 3582.7351 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #142: GFLOPs: 1228.2398. Time: 3014.5476 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #143: GFLOPs: 1240.5053. Time: 2984.7412 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #144: GFLOPs: 1248.5977. Time: 2965.3965 us. Best GFLOPs: 1270.7468
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #145: GFLOPs: 1343.1091. Time: 2756.7287 us. Best GFLOPs: 1343.1091
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #146: GFLOPs: 1327.8254. Time: 2788.4595 us. Best GFLOPs: 1343.1091
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #147: GFLOPs: 1357.9622. Time: 2726.5763 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #148: GFLOPs: 1342.9710. Time: 2757.0122 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #149: GFLOPs: 1236.0861. Time: 2995.4123 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #150: GFLOPs: 1102.0483. Time: 3359.7323 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #151: GFLOPs: 509.8593. Time: 7261.9789 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #152: GFLOPs: 854.2066. Time: 4334.5336 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #153: GFLOPs: 846.8021. Time: 4372.4350 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #154: GFLOPs: 802.4212. Time: 4614.2692 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #155: GFLOPs: 1073.1264. Time: 3450.2807 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #156: GFLOPs: 955.2718. Time: 3875.9519 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #157: GFLOPs: 834.2420. Time: 4438.2654 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #158: GFLOPs: 1096.2155. Time: 3377.6090 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #159: GFLOPs: 1075.0404. Time: 3444.1378 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #160: GFLOPs: 1306.7830. Time: 2833.3606 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #161: GFLOPs: 1054.2335. Time: 3512.1131 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #162: GFLOPs: 1052.5698. Time: 3517.6646 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #163: GFLOPs: 1053.2735. Time: 3515.3142 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #164: GFLOPs: 770.7603. Time: 4803.8120 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #165: GFLOPs: 778.8331. Time: 4754.0189 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #166: GFLOPs: 1147.0206. Time: 3228.0041 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #167: GFLOPs: 1078.7243. Time: 3432.3759 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #168: GFLOPs: 1096.3262. Time: 3377.2680 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #169: GFLOPs: 1078.9215. Time: 3431.7486 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #170: GFLOPs: 1023.8774. Time: 3616.2410 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #171: GFLOPs: 887.6358. Time: 4171.2914 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #172: GFLOPs: 460.5705. Time: 8039.1335 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #173: GFLOPs: 454.1074. Time: 8153.5508 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #174: GFLOPs: 895.4109. Time: 4135.0706 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #175: GFLOPs: 184.8930. Time: 20025.5638 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #176: GFLOPs: 825.7051. Time: 4484.1522 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #177: GFLOPs: 914.8694. Time: 4047.1211 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #178: GFLOPs: 595.1694. Time: 6221.0650 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #179: GFLOPs: 1217.2155. Time: 3041.8504 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #180: GFLOPs: 922.3662. Time: 4014.2269 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #181: GFLOPs: 885.6141. Time: 4180.8134 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #182: GFLOPs: 890.3937. Time: 4158.3710 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #183: GFLOPs: 1062.8122. Time: 3483.7646 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #184: GFLOPs: 1054.7777. Time: 3510.3013 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #185: GFLOPs: 831.8011. Time: 4451.2894 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #186: GFLOPs: 670.9548. Time: 5518.3857 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #187: GFLOPs: 669.6938. Time: 5528.7765 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #188: GFLOPs: 657.4296. Time: 5631.9144 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #189: GFLOPs: 942.9273. Time: 3926.6943 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #190: GFLOPs: 45.5581. Time: 81271.7113 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #191: GFLOPs: 32.3989. Time: 114281.4277 us. Best GFLOPs: 1357.9622
2024-04-29 22:56:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #192: GFLOPs: 52.7317. Time: 70215.6247 us. Best GFLOPs: 1357.9622
2024-04-29 23:32:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:32:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:32:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:32:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:33:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:33:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:33:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:33:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:33:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9708  0.9708  0.9706  0.9706  0.9544  0.9544  0.9478  0.9478  0.9356  0.9334  0.9334  0.9334  0.9334  0.9278  0.9278  0.9242
[17 : 32]:	0.9183  0.9115  0.9115  0.9093  0.9093  0.9044  0.8969  0.8942  0.8763  0.8763  0.8626  0.8604  0.8601  0.8564  0.8562  0.8533
[33 : 48]:	0.8533  0.8473  0.8473  0.8459  0.8385  0.8385  0.8308  0.8221  0.8172  0.8037  0.8009  0.7960  0.7960  0.7958  0.7923  0.7903
[49 : 64]:	0.7894  0.7881  0.7881  0.7878  0.7878  0.7874  0.7862  0.7819  0.7819  0.7819  0.7819  0.7819  0.7804  0.7804  0.7797  0.7752
2024-04-29 23:33:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:33:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #193: GFLOPs: 1267.2871. Time: 2921.6643 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #194: GFLOPs: 1239.4727. Time: 2987.2279 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #195: GFLOPs: 1234.3591. Time: 2999.6031 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #196: GFLOPs: 1217.7959. Time: 3040.4005 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #197: GFLOPs: 1214.9181. Time: 3047.6024 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #198: GFLOPs: 610.6811. Time: 6063.0459 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #199: GFLOPs: 226.3039. Time: 16361.1320 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #200: GFLOPs: 225.2384. Time: 16438.5289 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #201: GFLOPs: 1221.6514. Time: 3030.8052 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #202: GFLOPs: 1206.4557. Time: 3068.9792 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #203: GFLOPs: 1233.6648. Time: 3001.2913 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #204: GFLOPs: 1226.2385. Time: 3019.4675 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #205: GFLOPs: 1215.5610. Time: 3045.9906 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #206: GFLOPs: 1227.4950. Time: 3016.3768 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #207: GFLOPs: 1223.8371. Time: 3025.3923 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #208: GFLOPs: 1228.9278. Time: 3012.8600 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #209: GFLOPs: 1117.8060. Time: 3312.3702 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #210: GFLOPs: 626.4203. Time: 5910.7075 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #211: GFLOPs: 1230.1612. Time: 3009.8391 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #212: GFLOPs: 1233.9710. Time: 3000.5466 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #213: GFLOPs: 1245.9752. Time: 2971.6382 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #214: GFLOPs: 1246.9251. Time: 2969.3743 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #215: GFLOPs: 1219.8659. Time: 3035.2413 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #216: GFLOPs: 1035.7754. Time: 3574.7010 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #217: GFLOPs: 234.0351. Time: 15820.6529 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #218: GFLOPs: 233.0711. Time: 15886.0839 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #219: GFLOPs: 1170.3520. Time: 3163.6528 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #220: GFLOPs: 1177.0182. Time: 3145.7350 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #221: GFLOPs: 238.9152. Time: 15497.4946 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #222: GFLOPs: 1293.1253. Time: 2863.2858 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #223: GFLOPs: 999.0646. Time: 3706.0540 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #224: GFLOPs: 849.9642. Time: 4356.1685 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #225: GFLOPs: 910.0440. Time: 4068.5808 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #226: GFLOPs: 1041.0505. Time: 3556.5878 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #227: GFLOPs: 1036.6764. Time: 3571.5943 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #228: GFLOPs: 695.6779. Time: 5322.2727 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #229: GFLOPs: 240.2446. Time: 15411.7396 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #230: GFLOPs: 238.1901. Time: 15544.6734 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #231: GFLOPs: 751.4679. Time: 4927.1401 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #232: GFLOPs: 988.4372. Time: 3745.9004 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #233: GFLOPs: 989.6391. Time: 3741.3511 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #234: GFLOPs: 757.5774. Time: 4887.4047 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #235: GFLOPs: 1107.7957. Time: 3342.3016 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #236: GFLOPs: 1065.6117. Time: 3474.6123 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #237: GFLOPs: 1072.9765. Time: 3450.7629 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #238: GFLOPs: 149.3169. Time: 24796.8332 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #239: GFLOPs: 1259.0938. Time: 2940.6763 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #240: GFLOPs: 1030.0659. Time: 3594.5151 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #241: GFLOPs: 1044.9700. Time: 3543.2476 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #242: GFLOPs: 1306.1417. Time: 2834.7516 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #243: GFLOPs: 1308.6159. Time: 2829.3921 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #244: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(128)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(18), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 8, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b70)
l124 = sch.fuse(l123, preserve_unit_iters=True)
sch.vectorize(loop=l124)
b125 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b125)
b149 = sch.decompose_reduction(block=b125, loop=l133)
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #245: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(128)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(18), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(64), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(64) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(392) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 8, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b70)
l124 = sch.fuse(l123, preserve_unit_iters=True)
sch.vectorize(loop=l124)
b125 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b125)
b149 = sch.decompose_reduction(block=b125, loop=l133)
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #246: GFLOPs: 1035.5670. Time: 3575.4205 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #247: GFLOPs: 1107.5297. Time: 3343.1042 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #248: GFLOPs: 977.9344. Time: 3786.1307 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #249: GFLOPs: 992.7157. Time: 3729.7561 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #250: GFLOPs: 956.1316. Time: 3872.4663 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #251: GFLOPs: 998.4915. Time: 3708.1813 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #252: GFLOPs: 991.3227. Time: 3734.9969 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #253: GFLOPs: 1067.6401. Time: 3468.0108 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #254: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(28)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(2), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(58)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(8) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(25088)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(802816))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(802816) // T.int64(7168))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(7168) // T.int64(64))
                    v_ax4 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(64))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 28])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 8, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b67)
l87 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l108, l109, l110, l111, l112, preserve_unit_iters=True)
l114, l115 = sch.split(loop=l113, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l114)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b116)
b134 = sch.decompose_reduction(block=b116, loop=l118)
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #255: GFLOPs: 68.4285. Time: 54108.8587 us. Best GFLOPs: 1357.9622
2024-04-29 23:35:57 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #256: GFLOPs: 194.0342. Time: 19082.1337 us. Best GFLOPs: 1357.9622
2024-04-29 23:59:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:59:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:59:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-29 23:59:34 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 23:59:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 00:00:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 00:00:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 00:00:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 00:00:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9487  0.9431  0.9431  0.9408  0.9408  0.9408  0.9252  0.9233  0.9232  0.9229  0.9208  0.9207  0.9196  0.9132  0.9093  0.9056
[17 : 32]:	0.9055  0.8991  0.8991  0.8930  0.8929  0.8866  0.8866  0.8839  0.8815  0.8811  0.8805  0.8785  0.8753  0.8736  0.8696  0.8602
[33 : 48]:	0.8587  0.8507  0.8500  0.8500  0.8500  0.8498  0.8498  0.8488  0.8477  0.8477  0.8477  0.8477  0.8477  0.8469  0.8447  0.8437
[49 : 64]:	0.8437  0.8412  0.8412  0.8412  0.8412  0.8412  0.8411  0.8411  0.8388  0.8388  0.8388  0.8372  0.8372  0.8347  0.8347  0.8296
2024-04-30 00:00:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:00:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #257: GFLOPs: 703.3279. Time: 5264.3826 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #258: GFLOPs: 1213.5113. Time: 3051.1355 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #259: GFLOPs: 1203.0467. Time: 3077.6754 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #260: GFLOPs: 1213.3836. Time: 3051.4566 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #261: GFLOPs: 1253.1968. Time: 2954.5139 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #262: GFLOPs: 1213.4131. Time: 3051.3824 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #263: GFLOPs: 1269.4216. Time: 2916.7515 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #264: GFLOPs: 1193.1744. Time: 3103.1402 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #265: GFLOPs: 1181.2429. Time: 3134.4844 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #266: GFLOPs: 1235.4601. Time: 2996.9299 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #267: GFLOPs: 1323.7731. Time: 2796.9955 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #268: GFLOPs: 1237.4664. Time: 2992.0710 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #269: GFLOPs: 1293.6277. Time: 2862.1739 us. Best GFLOPs: 1357.9622
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #270: GFLOPs: 1487.8579. Time: 2488.5356 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #271: GFLOPs: 1215.5021. Time: 3046.1383 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #272: GFLOPs: 1203.2005. Time: 3077.2822 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #273: GFLOPs: 1198.1108. Time: 3090.3548 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #274: GFLOPs: 1122.5599. Time: 3298.3427 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #275: GFLOPs: 1122.4448. Time: 3298.6811 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #276: GFLOPs: 1184.3486. Time: 3126.2648 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #277: GFLOPs: 1250.5949. Time: 2960.6608 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #278: GFLOPs: 865.0568. Time: 4280.1668 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #279: GFLOPs: 853.1782. Time: 4339.7586 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #280: GFLOPs: 1249.1518. Time: 2964.0811 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #281: GFLOPs: 1203.0754. Time: 3077.6022 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #282: GFLOPs: 1154.2975. Time: 3207.6544 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #283: GFLOPs: 1114.0140. Time: 3323.6454 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #284: GFLOPs: 1440.2223. Time: 2570.8443 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #285: GFLOPs: 1371.0891. Time: 2700.4717 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #286: GFLOPs: 81.3693. Time: 45503.4863 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #287: GFLOPs: 1127.6117. Time: 3283.5660 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #288: GFLOPs: 1101.0937. Time: 3362.6450 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #289: GFLOPs: 1066.4969. Time: 3471.7282 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #290: GFLOPs: 921.7597. Time: 4016.8685 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #291: GFLOPs: 340.0786. Time: 10887.4459 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #292: GFLOPs: 774.5791. Time: 4780.1282 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #293: GFLOPs: 338.1702. Time: 10948.8880 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #294: GFLOPs: 1246.4749. Time: 2970.4469 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #295: GFLOPs: 1207.2692. Time: 3066.9111 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #296: GFLOPs: 1112.7347. Time: 3327.4665 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #297: GFLOPs: 774.3658. Time: 4781.4449 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #298: GFLOPs: 775.4663. Time: 4774.6590 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #299: GFLOPs: 317.8924. Time: 11647.2966 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #300: GFLOPs: 777.1117. Time: 4764.5498 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #301: GFLOPs: 318.1357. Time: 11638.3908 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #302: GFLOPs: 916.6069. Time: 4039.4497 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #303: GFLOPs: 1249.5828. Time: 2963.0588 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #304: GFLOPs: 1195.5514. Time: 3096.9704 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #305: GFLOPs: 1209.7843. Time: 3060.5352 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #306: GFLOPs: 1224.6886. Time: 3023.2889 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #307: GFLOPs: 1209.4443. Time: 3061.3955 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #308: GFLOPs: 1225.0386. Time: 3022.4251 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #309: GFLOPs: 1201.5304. Time: 3081.5595 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #310: GFLOPs: 1198.3426. Time: 3089.7570 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #311: GFLOPs: 751.0113. Time: 4930.1351 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #312: GFLOPs: 745.6775. Time: 4965.4004 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #313: GFLOPs: 315.1560. Time: 11748.4283 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #314: GFLOPs: 756.5745. Time: 4893.8835 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #315: GFLOPs: 215.6993. Time: 17165.5068 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #316: GFLOPs: 93.4765. Time: 39609.8273 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #317: GFLOPs: 30.8876. Time: 119872.9867 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #318: GFLOPs: 81.4575. Time: 45454.2223 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #319: GFLOPs: 3.8500. Time: 961718.1327 us. Best GFLOPs: 1487.8579
2024-04-30 00:02:29 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #320: GFLOPs: 107.3585. Time: 34488.0603 us. Best GFLOPs: 1487.8579
2024-04-30 01:02:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:02:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:02:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:02:15 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:02:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:02:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:02:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:03:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:03:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9741  0.9741  0.9542  0.8960  0.8845  0.8794  0.8754  0.8631  0.8516  0.8503  0.8464  0.8460  0.8362  0.8349  0.8311  0.8292
[17 : 32]:	0.8292  0.8279  0.8261  0.8261  0.8242  0.8242  0.8234  0.8232  0.8232  0.8232  0.8232  0.8223  0.8223  0.8198  0.8189  0.8179
[33 : 48]:	0.8150  0.8131  0.8131  0.8130  0.8090  0.8070  0.8065  0.8054  0.8054  0.8054  0.8054  0.8054  0.8046  0.8046  0.8046  0.8046
[49 : 64]:	0.8028  0.8010  0.7962  0.7951  0.7933  0.7933  0.7909  0.7903  0.7894  0.7863  0.7859  0.7847  0.7847  0.7847  0.7805  0.7785
2024-04-30 01:03:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:03:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #321: GFLOPs: 1416.7103. Time: 2613.5106 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #322: GFLOPs: 1412.7792. Time: 2620.7828 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #323: GFLOPs: 1445.2865. Time: 2561.8363 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #324: GFLOPs: 1249.1406. Time: 2964.1078 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #325: GFLOPs: 1169.5774. Time: 3165.7479 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #326: GFLOPs: 1273.3207. Time: 2907.8200 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #327: GFLOPs: 1170.2891. Time: 3163.8229 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #328: GFLOPs: 1196.5986. Time: 3094.2602 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #329: GFLOPs: 1077.0293. Time: 3437.7778 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #330: GFLOPs: 1318.7205. Time: 2807.7119 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #331: GFLOPs: 1261.4663. Time: 2935.1457 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #332: GFLOPs: 1276.1351. Time: 2901.4071 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #333: GFLOPs: 1212.8875. Time: 3052.7046 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #334: GFLOPs: 651.7532. Time: 5680.9657 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #335: GFLOPs: 1212.5410. Time: 3053.5771 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #336: GFLOPs: 1310.7860. Time: 2824.7078 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #337: GFLOPs: 1228.6743. Time: 3013.4816 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #338: GFLOPs: 1127.6264. Time: 3283.5233 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #339: GFLOPs: 1243.5884. Time: 2977.3415 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #340: GFLOPs: 682.2876. Time: 5426.7255 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #341: GFLOPs: 1286.4284. Time: 2878.1915 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #342: GFLOPs: 1290.1018. Time: 2869.9964 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #343: GFLOPs: 1242.2287. Time: 2980.6004 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #344: GFLOPs: 1286.1817. Time: 2878.7435 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #345: GFLOPs: 1229.6993. Time: 3010.9698 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #346: GFLOPs: 1298.2289. Time: 2852.0296 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #347: GFLOPs: 983.9440. Time: 3763.0060 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #348: GFLOPs: 1259.5323. Time: 2939.6527 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #349: GFLOPs: 1205.8016. Time: 3070.6441 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #350: GFLOPs: 1274.1278. Time: 2905.9780 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #351: GFLOPs: 1263.3175. Time: 2930.8447 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #352: GFLOPs: 1283.5312. Time: 2884.6882 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #353: GFLOPs: 1220.1546. Time: 3034.5231 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #354: GFLOPs: 1255.7878. Time: 2948.4181 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #355: GFLOPs: 1263.1168. Time: 2931.3105 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #356: GFLOPs: 1242.6569. Time: 2979.5733 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #357: GFLOPs: 671.0334. Time: 5517.7397 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #358: GFLOPs: 1255.0075. Time: 2950.2512 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #359: GFLOPs: 1188.5960. Time: 3115.0934 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #360: GFLOPs: 1269.9215. Time: 2915.6033 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #361: GFLOPs: 1255.3596. Time: 2949.4237 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #362: GFLOPs: 1287.2358. Time: 2876.3863 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #363: GFLOPs: 1269.6855. Time: 2916.1453 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #364: GFLOPs: 1271.2965. Time: 2912.4498 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #365: GFLOPs: 732.8938. Time: 5052.0108 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #366: GFLOPs: 1251.0097. Time: 2959.6791 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #367: GFLOPs: 1253.0745. Time: 2954.8023 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #368: GFLOPs: 1257.1888. Time: 2945.1324 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #369: GFLOPs: 1271.6614. Time: 2911.6141 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #370: GFLOPs: 1224.2238. Time: 3024.4368 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #371: GFLOPs: 1274.0099. Time: 2906.2469 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #372: GFLOPs: 738.4233. Time: 5014.1798 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #373: GFLOPs: 1317.8053. Time: 2809.6620 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #374: GFLOPs: 1310.7478. Time: 2824.7900 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #375: GFLOPs: 1219.9197. Time: 3035.1074 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #376: GFLOPs: 1204.4792. Time: 3074.0153 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #377: GFLOPs: 1183.3424. Time: 3128.9232 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #378: GFLOPs: 1298.4881. Time: 2851.4604 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #379: GFLOPs: 1200.6312. Time: 3083.8673 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #380: GFLOPs: 1129.4741. Time: 3278.1516 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #381: GFLOPs: 1098.4036. Time: 3370.8807 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #382: GFLOPs: 28.5668. Time: 129611.4533 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #383: GFLOPs: 4.0616. Time: 911599.2753 us. Best GFLOPs: 1487.8579
2024-04-30 01:05:20 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #384: GFLOPs: 68.8687. Time: 53762.9937 us. Best GFLOPs: 1487.8579
2024-04-30 01:39:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:39:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:39:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:39:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 01:40:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:40:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:40:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:40:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 01:40:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9630  0.9514  0.9377  0.9372  0.9296  0.9284  0.9153  0.9078  0.9029  0.8980  0.8947  0.8894  0.8702  0.8687  0.8676  0.8676
[17 : 32]:	0.8655  0.8618  0.8618  0.8575  0.8551  0.8526  0.8485  0.8448  0.8435  0.8435  0.8416  0.8404  0.8404  0.8395  0.8381  0.8374
[33 : 48]:	0.8353  0.8353  0.8337  0.8336  0.8333  0.8331  0.8323  0.8320  0.8294  0.8290  0.8229  0.8227  0.8209  0.8190  0.8171  0.8155
[49 : 64]:	0.8155  0.8155  0.8150  0.8138  0.8135  0.8091  0.8082  0.8082  0.8066  0.8066  0.8051  0.8049  0.8043  0.8034  0.8020  0.8012
2024-04-30 01:40:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:40:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #385: GFLOPs: 1396.5049. Time: 2651.3242 us. Best GFLOPs: 1487.8579
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #386: GFLOPs: 1448.7078. Time: 2555.7862 us. Best GFLOPs: 1487.8579
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #387: GFLOPs: 1026.7129. Time: 3606.2538 us. Best GFLOPs: 1487.8579
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #388: GFLOPs: 1386.2956. Time: 2670.8499 us. Best GFLOPs: 1487.8579
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #389: GFLOPs: 1368.1182. Time: 2706.3359 us. Best GFLOPs: 1487.8579
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #390: GFLOPs: 1493.0513. Time: 2479.8795 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #391: GFLOPs: 1402.9764. Time: 2639.0945 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #392: GFLOPs: 1360.5106. Time: 2721.4690 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #393: GFLOPs: 1355.4662. Time: 2731.5969 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #394: GFLOPs: 1095.8697. Time: 3378.6748 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #395: GFLOPs: 1126.2201. Time: 3287.6233 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #396: GFLOPs: 819.4479. Time: 4518.3927 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #397: GFLOPs: 1293.2152. Time: 2863.0869 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #398: GFLOPs: 1283.8708. Time: 2883.9253 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #399: GFLOPs: 1387.6330. Time: 2668.2756 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #400: GFLOPs: 1392.8075. Time: 2658.3625 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #401: GFLOPs: 980.7941. Time: 3775.0916 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #402: GFLOPs: 1282.6435. Time: 2886.6848 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #403: GFLOPs: 1286.9693. Time: 2876.9820 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #404: GFLOPs: 1266.7434. Time: 2922.9183 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #405: GFLOPs: 1176.1982. Time: 3147.9282 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #406: GFLOPs: 1310.3418. Time: 2825.6653 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #407: GFLOPs: 1317.5479. Time: 2810.2108 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #408: GFLOPs: 930.4056. Time: 3979.5413 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #409: GFLOPs: 1265.2871. Time: 2926.2824 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #410: GFLOPs: 1269.1488. Time: 2917.3785 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #411: GFLOPs: 1289.8145. Time: 2870.6356 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #412: GFLOPs: 1266.5307. Time: 2923.4092 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #413: GFLOPs: 1261.5778. Time: 2934.8863 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #414: GFLOPs: 1290.6860. Time: 2868.6973 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #415: GFLOPs: 1304.3715. Time: 2838.5989 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #416: GFLOPs: 1137.2625. Time: 3255.7016 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #417: GFLOPs: 1266.2673. Time: 2924.0172 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #418: GFLOPs: 1260.7009. Time: 2936.9277 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #419: GFLOPs: 1291.7979. Time: 2866.2281 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #420: GFLOPs: 1283.0012. Time: 2885.8799 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #421: GFLOPs: 761.8278. Time: 4860.1371 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #422: GFLOPs: 1265.3417. Time: 2926.1561 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #423: GFLOPs: 1341.8875. Time: 2759.2383 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #424: GFLOPs: 1252.8332. Time: 2955.3713 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #425: GFLOPs: 603.7940. Time: 6132.2025 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #426: GFLOPs: 1238.2673. Time: 2990.1359 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #427: GFLOPs: 1280.0642. Time: 2892.5014 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #428: GFLOPs: 1256.8992. Time: 2945.8109 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #429: GFLOPs: 1274.8014. Time: 2904.4425 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #430: GFLOPs: 1271.2159. Time: 2912.6347 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #431: GFLOPs: 1193.8671. Time: 3101.3395 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #432: GFLOPs: 1281.4788. Time: 2889.3083 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #433: GFLOPs: 1276.7679. Time: 2899.9691 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #434: GFLOPs: 718.4118. Time: 5153.8509 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #435: GFLOPs: 1286.4631. Time: 2878.1139 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #436: GFLOPs: 1255.5788. Time: 2948.9089 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #437: GFLOPs: 1291.1670. Time: 2867.6287 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #438: GFLOPs: 1152.8742. Time: 3211.6145 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #439: GFLOPs: 1249.5412. Time: 2963.1574 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #440: GFLOPs: 1250.3711. Time: 2961.1909 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #441: GFLOPs: 1041.5028. Time: 3555.0431 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #442: GFLOPs: 983.3633. Time: 3765.2282 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #443: GFLOPs: 1014.4170. Time: 3649.9658 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #444: GFLOPs: 1360.8959. Time: 2720.6984 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #445: GFLOPs: 1273.0711. Time: 2908.3901 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #446: GFLOPs: 31.8361. Time: 116301.6703 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #447: GFLOPs: 2.3570. Time: 1570885.2197 us. Best GFLOPs: 1493.0513
2024-04-30 01:43:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #448: GFLOPs: 47.3043. Time: 78271.6187 us. Best GFLOPs: 1493.0513
2024-04-30 02:09:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:09:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:09:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 02:09:34 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 02:09:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 02:10:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 02:10:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 02:10:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 02:10:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9619  0.9426  0.9426  0.9426  0.9409  0.9409  0.9356  0.9354  0.9354  0.9165  0.9134  0.9133  0.9133  0.9104  0.8909  0.8893
[17 : 32]:	0.8861  0.8851  0.8840  0.8814  0.8749  0.8726  0.8683  0.8626  0.8618  0.8602  0.8588  0.8578  0.8578  0.8561  0.8468  0.8468
[33 : 48]:	0.8451  0.8411  0.8367  0.8367  0.8361  0.8345  0.8345  0.8322  0.8322  0.8322  0.8322  0.8322  0.8322  0.8302  0.8298  0.8287
[49 : 64]:	0.8283  0.8272  0.8258  0.8254  0.8223  0.8222  0.8222  0.8221  0.8204  0.8186  0.8179  0.8175  0.8154  0.8142  0.8142  0.8142
2024-04-30 02:10:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:10:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #449: GFLOPs: 1400.0050. Time: 2644.6958 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #450: GFLOPs: 1394.1393. Time: 2655.8231 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #451: GFLOPs: 1462.7836. Time: 2531.1928 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #452: GFLOPs: 1468.3277. Time: 2521.6357 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #453: GFLOPs: 1303.4411. Time: 2840.6250 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #454: GFLOPs: 1088.5905. Time: 3401.2675 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #455: GFLOPs: 1374.7163. Time: 2693.3466 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #456: GFLOPs: 1428.4883. Time: 2591.9620 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #457: GFLOPs: 1380.6416. Time: 2681.7874 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #458: GFLOPs: 1433.0789. Time: 2583.6591 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #459: GFLOPs: 1347.5247. Time: 2747.6954 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #460: GFLOPs: 1425.7367. Time: 2596.9644 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #461: GFLOPs: 1385.7209. Time: 2671.9575 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #462: GFLOPs: 1451.7539. Time: 2550.4236 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #463: GFLOPs: 1356.4461. Time: 2729.6237 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #464: GFLOPs: 1390.9332. Time: 2661.9447 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #465: GFLOPs: 1386.3191. Time: 2670.8046 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #466: GFLOPs: 1411.5968. Time: 2622.9780 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #467: GFLOPs: 1337.7560. Time: 2767.7598 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #468: GFLOPs: 1252.4652. Time: 2956.2396 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #469: GFLOPs: 1405.5682. Time: 2634.2282 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #470: GFLOPs: 1305.3513. Time: 2836.4682 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #471: GFLOPs: 1267.4821. Time: 2921.2148 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #472: GFLOPs: 1269.5284. Time: 2916.5062 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #473: GFLOPs: 1257.1566. Time: 2945.2077 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #474: GFLOPs: 1372.5596. Time: 2697.5785 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #475: GFLOPs: 1167.7732. Time: 3170.6392 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #476: GFLOPs: 1287.1156. Time: 2876.6549 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #477: GFLOPs: 1466.7705. Time: 2524.3127 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #478: GFLOPs: 1252.8360. Time: 2955.3647 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #479: GFLOPs: 1238.8136. Time: 2988.8173 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #480: GFLOPs: 1240.6865. Time: 2984.3055 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #481: GFLOPs: 1257.4081. Time: 2944.6186 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #482: GFLOPs: 1281.4782. Time: 2889.3097 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #483: GFLOPs: 1217.9089. Time: 3040.1185 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #484: GFLOPs: 1272.1688. Time: 2910.4529 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #485: GFLOPs: 1227.8980. Time: 3015.3869 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #486: GFLOPs: 1110.8851. Time: 3333.0066 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #487: GFLOPs: 980.8961. Time: 3774.6989 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #488: GFLOPs: 1286.3224. Time: 2878.4287 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #489: GFLOPs: 1216.1247. Time: 3044.5787 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #490: GFLOPs: 1275.3500. Time: 2903.1931 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #491: GFLOPs: 1212.5992. Time: 3053.4304 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #492: GFLOPs: 1390.7072. Time: 2662.3774 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #493: GFLOPs: 1154.1100. Time: 3208.1755 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #494: GFLOPs: 1273.2230. Time: 2908.0432 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #495: GFLOPs: 1257.1383. Time: 2945.2506 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #496: GFLOPs: 1314.8536. Time: 2815.9693 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #497: GFLOPs: 1273.7229. Time: 2906.9017 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #498: GFLOPs: 894.4234. Time: 4139.6360 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #499: GFLOPs: 1138.4514. Time: 3252.3017 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #500: GFLOPs: 1262.5958. Time: 2932.5199 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #501: GFLOPs: 1319.7480. Time: 2805.5260 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #502: GFLOPs: 1281.3147. Time: 2889.6783 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #503: GFLOPs: 1208.4133. Time: 3064.0076 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #504: GFLOPs: 1221.8571. Time: 3030.2949 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #505: GFLOPs: 1177.9178. Time: 3143.3325 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #506: GFLOPs: 1294.8429. Time: 2859.4878 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #507: GFLOPs: 1155.3989. Time: 3204.5966 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #508: GFLOPs: 1229.8037. Time: 3010.7142 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #509: GFLOPs: 1230.0072. Time: 3010.2159 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #510: GFLOPs: 36.9140. Time: 100303.0757 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #511: GFLOPs: 45.9473. Time: 80583.2843 us. Best GFLOPs: 1493.0513
2024-04-30 02:12:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #512: GFLOPs: 38.4983. Time: 96175.2780 us. Best GFLOPs: 1493.0513
2024-04-30 03:20:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:20:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:20:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 03:20:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 03:20:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 03:20:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 03:21:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 03:21:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 03:21:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9563  0.9563  0.9538  0.9529  0.9510  0.9497  0.9497  0.9477  0.9414  0.9319  0.9301  0.9291  0.9270  0.9255  0.9241  0.9237
[17 : 32]:	0.9232  0.9195  0.9148  0.9101  0.9100  0.9063  0.9051  0.8993  0.8966  0.8943  0.8926  0.8803  0.8797  0.8688  0.8675  0.8654
[33 : 48]:	0.8635  0.8576  0.8573  0.8558  0.8554  0.8547  0.8523  0.8523  0.8523  0.8518  0.8515  0.8491  0.8466  0.8452  0.8447  0.8436
[49 : 64]:	0.8394  0.8392  0.8387  0.8384  0.8364  0.8363  0.8348  0.8346  0.8319  0.8316  0.8310  0.8304  0.8290  0.8287  0.8286  0.8225
2024-04-30 03:21:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:21:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #513: GFLOPs: 1473.2111. Time: 2513.2768 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #514: GFLOPs: 1487.9479. Time: 2488.3851 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #515: GFLOPs: 1347.9956. Time: 2746.7355 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #516: GFLOPs: 1348.9968. Time: 2744.6970 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #517: GFLOPs: 1438.0451. Time: 2574.7367 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #518: GFLOPs: 1400.5570. Time: 2643.6535 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #519: GFLOPs: 1391.9204. Time: 2660.0569 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #520: GFLOPs: 1420.8433. Time: 2605.9083 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #521: GFLOPs: 1375.9800. Time: 2690.8729 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #522: GFLOPs: 1087.7654. Time: 3403.8473 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #523: GFLOPs: 708.5348. Time: 5225.6962 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #524: GFLOPs: 1399.6298. Time: 2645.4048 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #525: GFLOPs: 1008.2488. Time: 3672.2953 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #526: GFLOPs: 586.1820. Time: 6316.4464 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #527: GFLOPs: 1223.0509. Time: 3027.3372 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #528: GFLOPs: 1417.6815. Time: 2611.7202 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #529: GFLOPs: 1462.1071. Time: 2532.3641 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #530: GFLOPs: 1061.9401. Time: 3486.6254 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #531: GFLOPs: 1365.3362. Time: 2711.8502 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #532: GFLOPs: 1334.9612. Time: 2773.5543 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #533: GFLOPs: 1342.4049. Time: 2758.1749 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #534: GFLOPs: 1317.2317. Time: 2810.8855 us. Best GFLOPs: 1493.0513
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #535: GFLOPs: 1541.7865. Time: 2401.4916 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #536: GFLOPs: 1322.9714. Time: 2798.6904 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #537: GFLOPs: 1313.4812. Time: 2818.9116 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #538: GFLOPs: 1356.2043. Time: 2730.1103 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #539: GFLOPs: 1311.1171. Time: 2823.9945 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #540: GFLOPs: 1102.5864. Time: 3358.0929 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #541: GFLOPs: 1385.6574. Time: 2672.0800 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #542: GFLOPs: 1302.5344. Time: 2842.6023 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #543: GFLOPs: 1052.4761. Time: 3517.9776 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #544: GFLOPs: 1359.4947. Time: 2723.5026 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #545: GFLOPs: 1350.0978. Time: 2742.4586 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #546: GFLOPs: 1300.7367. Time: 2846.5310 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #547: GFLOPs: 1311.4552. Time: 2823.2664 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #548: GFLOPs: 1330.1357. Time: 2783.6163 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #549: GFLOPs: 1313.4958. Time: 2818.8802 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #550: GFLOPs: 1211.2311. Time: 3056.8795 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #551: GFLOPs: 1298.2912. Time: 2851.8928 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #552: GFLOPs: 1284.1495. Time: 2883.2994 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #553: GFLOPs: 1298.2417. Time: 2852.0016 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #554: GFLOPs: 1255.4392. Time: 2949.2367 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #555: GFLOPs: 1332.7163. Time: 2778.2263 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #556: GFLOPs: 1282.3213. Time: 2887.4101 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #557: GFLOPs: 1108.8414. Time: 3339.1496 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #558: GFLOPs: 1132.3507. Time: 3269.8238 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #559: GFLOPs: 1279.8804. Time: 2892.9167 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #560: GFLOPs: 1264.7059. Time: 2927.6273 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #561: GFLOPs: 1292.1449. Time: 2865.4583 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #562: GFLOPs: 1210.4286. Time: 3058.9061 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #563: GFLOPs: 1307.3531. Time: 2832.1249 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #564: GFLOPs: 1286.8712. Time: 2877.2013 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #565: GFLOPs: 1308.2207. Time: 2830.2469 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #566: GFLOPs: 1227.2753. Time: 3016.9167 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #567: GFLOPs: 1248.2776. Time: 2966.1570 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #568: GFLOPs: 1233.6465. Time: 3001.3359 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #569: GFLOPs: 1334.5525. Time: 2774.4038 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #570: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(128)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(18), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(14) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 4, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #571: GFLOPs: 1203.8974. Time: 3075.5009 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #572: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(128)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(18), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 2, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 4, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #573: GFLOPs: 1309.1756. Time: 2828.1823 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #574: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(18)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(16)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(112) + oh_2_init * T.int64(8) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(16) + ow_2_init * T.int64(16) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(16)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(112) + oh_2 * T.int64(8) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(16) + ow_2 * T.int64(16) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(64) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 16])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b70)
l123 = sch.fuse(l122, preserve_unit_iters=True)
sch.vectorize(loop=l123)
b124 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b124)
b151 = sch.decompose_reduction(block=b124, loop=l135)
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #575: GFLOPs: 23.7227. Time: 156077.8980 us. Best GFLOPs: 1541.7865
2024-04-30 03:24:03 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #576: GFLOPs: 77.3783. Time: 47850.4457 us. Best GFLOPs: 1541.7865
2024-04-30 04:29:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 04:29:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 04:29:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 04:29:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 04:29:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 04:29:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 04:29:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 04:30:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 04:30:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9358  0.9323  0.9114  0.9108  0.9089  0.9089  0.9080  0.9080  0.9080  0.8981  0.8975  0.8950  0.8926  0.8918  0.8918  0.8910
[17 : 32]:	0.8910  0.8847  0.8815  0.8804  0.8785  0.8753  0.8750  0.8676  0.8676  0.8643  0.8599  0.8569  0.8568  0.8539  0.8525  0.8471
[33 : 48]:	0.8467  0.8434  0.8434  0.8434  0.8434  0.8395  0.8395  0.8395  0.8363  0.8359  0.8316  0.8316  0.8300  0.8296  0.8280  0.8280
[49 : 64]:	0.8262  0.8262  0.8225  0.8224  0.8224  0.8222  0.8212  0.8186  0.8166  0.8153  0.8142  0.8142  0.8128  0.8121  0.8121  0.8121
2024-04-30 04:30:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 04:30:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #577: GFLOPs: 1392.9910. Time: 2658.0124 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #578: GFLOPs: 1500.2735. Time: 2467.9416 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #579: GFLOPs: 1238.9530. Time: 2988.4810 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #580: GFLOPs: 1487.5188. Time: 2489.1030 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #581: GFLOPs: 1353.1054. Time: 2736.3629 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #582: GFLOPs: 1240.9530. Time: 2983.6644 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #583: GFLOPs: 1330.6667. Time: 2782.5055 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #584: GFLOPs: 1336.3681. Time: 2770.6343 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #585: GFLOPs: 1396.0387. Time: 2652.2097 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #586: GFLOPs: 1372.5955. Time: 2697.5081 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #587: GFLOPs: 910.2677. Time: 4067.5806 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #588: GFLOPs: 1297.0159. Time: 2854.6970 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #589: GFLOPs: 1497.4929. Time: 2472.5241 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #590: GFLOPs: 1366.9469. Time: 2708.6548 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #591: GFLOPs: 1373.5841. Time: 2695.5665 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #592: GFLOPs: 1419.4883. Time: 2608.3958 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #593: GFLOPs: 1383.9933. Time: 2675.2928 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #594: GFLOPs: 1442.2689. Time: 2567.1963 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #595: GFLOPs: 1458.2220. Time: 2539.1108 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #596: GFLOPs: 1237.0599. Time: 2993.0543 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #597: GFLOPs: 1400.0302. Time: 2644.6483 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #598: GFLOPs: 1277.1679. Time: 2899.0609 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #599: GFLOPs: 1378.4009. Time: 2686.1469 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #600: GFLOPs: 1346.6742. Time: 2749.4307 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #601: GFLOPs: 1352.0882. Time: 2738.4216 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #602: GFLOPs: 1319.4318. Time: 2806.1984 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #603: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(49) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(8) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(64) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(128)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(18), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(49) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(49) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(8) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(64), oc_block_1 * T.int64(64) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(49) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(16) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 4, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 8])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=56)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b117)
b137 = sch.decompose_reduction(block=b117, loop=l121)
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #604: GFLOPs: 1338.9384. Time: 2765.3158 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #605: GFLOPs: 1315.3983. Time: 2814.8033 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #606: GFLOPs: 1161.7281. Time: 3187.1378 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #607: GFLOPs: 1461.5278. Time: 2533.3677 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #608: GFLOPs: 1312.0286. Time: 2822.0326 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #609: GFLOPs: 1278.0254. Time: 2897.1157 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #610: GFLOPs: 1274.2123. Time: 2905.7853 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #611: GFLOPs: 1279.2211. Time: 2894.4077 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #612: GFLOPs: 1295.1323. Time: 2858.8488 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #613: GFLOPs: 1279.7771. Time: 2893.1502 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #614: GFLOPs: 1298.4398. Time: 2851.5664 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #615: GFLOPs: 1298.2579. Time: 2851.9659 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #616: GFLOPs: 1296.4415. Time: 2855.9619 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #617: GFLOPs: 1292.4350. Time: 2864.8152 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #618: GFLOPs: 1347.1701. Time: 2748.4186 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #619: GFLOPs: 1275.9231. Time: 2901.8893 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #620: GFLOPs: 1293.0723. Time: 2863.4032 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #621: GFLOPs: 1291.5171. Time: 2866.8512 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #622: GFLOPs: 1363.7667. Time: 2714.9712 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #623: GFLOPs: 1227.4864. Time: 3016.3980 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #624: GFLOPs: 1230.6191. Time: 3008.7192 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #625: GFLOPs: 1280.5253. Time: 2891.4597 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #626: GFLOPs: 1288.8124. Time: 2872.8677 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #627: GFLOPs: 1277.8468. Time: 2897.5206 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #628: GFLOPs: 1268.3059. Time: 2919.3173 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #629: GFLOPs: 1279.7686. Time: 2893.1694 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #630: GFLOPs: 1298.8805. Time: 2850.5990 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #631: GFLOPs: 1252.5702. Time: 2955.9920 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #632: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), p1: T.Buffer((T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(64)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(128)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(18), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(2), ic_0 // T.int64(64) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(64), ic_0 % T.int64(64) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(64), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 8, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #633: GFLOPs: 1319.2086. Time: 2806.6732 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #634: GFLOPs: 1321.1348. Time: 2802.5810 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #635: GFLOPs: 1282.8581. Time: 2886.2019 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #636: GFLOPs: 1279.9993. Time: 2892.6480 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #637: GFLOPs: 1309.2633. Time: 2827.9930 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #638: GFLOPs: 3.2597. Time: 1135864.5810 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #639: GFLOPs: 4.2994. Time: 861184.2520 us. Best GFLOPs: 1541.7865
2024-04-30 04:32:33 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #640: GFLOPs: 176.9907. Time: 20919.6714 us. Best GFLOPs: 1541.7865
2024-04-30 05:05:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:05:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 05:06:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 05:06:02 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 05:06:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 05:06:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 05:06:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 05:06:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aead18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3108238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x521f998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30a3248)]: 0 failure(s)
2024-04-30 05:07:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9663  0.9435  0.9414  0.9301  0.9241  0.9081  0.9073  0.9060  0.9034  0.9034  0.9029  0.9022  0.8944  0.8928  0.8928  0.8848
[17 : 32]:	0.8815  0.8779  0.8755  0.8734  0.8724  0.8673  0.8477  0.8471  0.8446  0.8444  0.8433  0.8433  0.8424  0.8421  0.8380  0.8379
[33 : 48]:	0.8359  0.8349  0.8344  0.8318  0.8274  0.8219  0.8213  0.8213  0.8175  0.8142  0.8137  0.8137  0.8130  0.8110  0.8105  0.8099
[49 : 64]:	0.8069  0.8069  0.8029  0.8022  0.8014  0.8013  0.8005  0.8003  0.8001  0.7950  0.7941  0.7935  0.7918  0.7904  0.7889  0.7861
2024-04-30 05:07:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 05:07:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #641: GFLOPs: 1468.2730. Time: 2521.7295 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #642: GFLOPs: 1440.2887. Time: 2570.7259 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #643: GFLOPs: 1445.3728. Time: 2561.6834 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #644: GFLOPs: 1494.4471. Time: 2477.5634 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #645: GFLOPs: 1417.1894. Time: 2612.6270 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #646: GFLOPs: 1357.5392. Time: 2727.4257 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #647: GFLOPs: 1385.4690. Time: 2672.4434 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #648: GFLOPs: 1338.7388. Time: 2765.7281 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #649: GFLOPs: 1334.3707. Time: 2774.7817 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #650: GFLOPs: 1437.3005. Time: 2576.0705 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #651: GFLOPs: 1370.7409. Time: 2701.1577 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #652: GFLOPs: 1443.9727. Time: 2564.1672 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #653: GFLOPs: 1327.3965. Time: 2789.3606 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #654: GFLOPs: 1398.9102. Time: 2646.7655 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #655: GFLOPs: 1407.5151. Time: 2630.5844 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #656: GFLOPs: 1359.7660. Time: 2722.9593 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #657: GFLOPs: 1311.6935. Time: 2822.7534 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #658: GFLOPs: 1350.3851. Time: 2741.8751 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #659: GFLOPs: 1443.4754. Time: 2565.0506 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #660: GFLOPs: 1390.4669. Time: 2662.8375 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #661: GFLOPs: 1477.3710. Time: 2506.2002 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #662: GFLOPs: 1130.9007. Time: 3274.0165 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #663: GFLOPs: 1348.9364. Time: 2744.8198 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #664: GFLOPs: 724.3253. Time: 5111.7742 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #665: GFLOPs: 632.9758. Time: 5849.4925 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #666: GFLOPs: 635.9342. Time: 5822.2803 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #667: GFLOPs: 1247.6116. Time: 2967.7405 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #668: GFLOPs: 1238.2341. Time: 2990.2160 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #669: GFLOPs: 1273.4685. Time: 2907.4825 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #670: GFLOPs: 153.0864. Time: 24186.2530 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #671: GFLOPs: 1259.2537. Time: 2940.3029 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #672: GFLOPs: 1241.2604. Time: 2982.9257 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #673: GFLOPs: 1322.8953. Time: 2798.8515 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #674: GFLOPs: 1315.9216. Time: 2813.6839 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #675: GFLOPs: 1251.9616. Time: 2957.4289 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #676: GFLOPs: 1231.1158. Time: 3007.5054 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #677: GFLOPs: 1312.0740. Time: 2821.9348 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #678: GFLOPs: 1440.7076. Time: 2569.9785 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #679: GFLOPs: 1232.3249. Time: 3004.5544 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #680: GFLOPs: 1238.4415. Time: 2989.7151 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #681: GFLOPs: 1144.3144. Time: 3235.6381 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #682: GFLOPs: 1204.3504. Time: 3074.3440 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #683: GFLOPs: 1008.8798. Time: 3669.9985 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #684: GFLOPs: 889.2293. Time: 4163.8161 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #685: GFLOPs: 1309.2524. Time: 2828.0166 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #686: GFLOPs: 883.1481. Time: 4192.4877 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #687: GFLOPs: 1252.6577. Time: 2955.7854 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #688: GFLOPs: 1272.8436. Time: 2908.9099 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #689: GFLOPs: 1127.1407. Time: 3284.9380 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #690: GFLOPs: 1213.0114. Time: 3052.3929 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #691: GFLOPs: 1224.0832. Time: 3024.7841 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #692: GFLOPs: 1210.2603. Time: 3059.3315 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #693: GFLOPs: 1191.1832. Time: 3108.3275 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #694: GFLOPs: 1205.9571. Time: 3070.2479 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #695: GFLOPs: 1266.2146. Time: 2924.1389 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #696: GFLOPs: 1188.4589. Time: 3115.4527 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #697: GFLOPs: 1153.6703. Time: 3209.3982 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #698: GFLOPs: 1284.0543. Time: 2883.5131 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #699: GFLOPs: 1117.5509. Time: 3313.1264 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #700: GFLOPs: 1141.5155. Time: 3243.5717 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #701: GFLOPs: 1290.1389. Time: 2869.9138 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #702: GFLOPs: 10.4682. Time: 353700.2597 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #703: GFLOPs: 144.8533. Time: 25560.9397 us. Best GFLOPs: 1541.7865
2024-04-30 05:09:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #704: GFLOPs: 111.1088. Time: 33323.9910 us. Best GFLOPs: 1541.7865
