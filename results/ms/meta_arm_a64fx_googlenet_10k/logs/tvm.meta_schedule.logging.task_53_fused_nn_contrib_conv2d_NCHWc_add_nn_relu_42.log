2024-04-29 13:22:11 [INFO] [task_scheduler.cc:160] Initializing Task #53: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42"
2024-04-29 13:22:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:22:11 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(48) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 24, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[10, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:22:11 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 24, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[10, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:22:11 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 24, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[10, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:47:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:47:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:47:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 14:47:25 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:47:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 14:47:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 14:47:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 14:47:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 14:47:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9978  0.9964  0.9963  0.9958  0.9955  0.9950  0.9948  0.9944  0.9942  0.9941  0.9935  0.9926  0.9924  0.9905
[17 : 32]:	0.9900  0.9900  0.9880  0.9880  0.9875  0.9873  0.9871  0.9870  0.9865  0.9865  0.9864  0.9863  0.9859  0.9839  0.9834  0.9832
[33 : 48]:	0.9830  0.9818  0.9810  0.9803  0.9798  0.9793  0.9785  0.9785  0.9783  0.9782  0.9766  0.9763  0.9762  0.9758  0.9743  0.9721
[49 : 64]:	0.9719  0.9719  0.9707  0.9706  0.9705  0.9702  0.9689  0.9688  0.9682  0.9677  0.9676  0.9662  0.9662  0.9659  0.9655  0.9653
2024-04-29 14:47:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:47:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #1: GFLOPs: 49.9354. Time: 724.9766 us. Best GFLOPs: 49.9354
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #2: GFLOPs: 53.5188. Time: 676.4353 us. Best GFLOPs: 53.5188
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(6) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(160), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[160, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #4: GFLOPs: 12.2780. Time: 2948.5365 us. Best GFLOPs: 53.5188
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #5: GFLOPs: 46.7275. Time: 774.7461 us. Best GFLOPs: 53.5188
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #6: GFLOPs: 51.7038. Time: 700.1804 us. Best GFLOPs: 53.5188
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #7: GFLOPs: 9.6754. Time: 3741.6443 us. Best GFLOPs: 53.5188
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #8: GFLOPs: 81.6499. Time: 443.3807 us. Best GFLOPs: 81.6499
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #9: GFLOPs: 26.0039. Time: 1392.1778 us. Best GFLOPs: 81.6499
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #10: GFLOPs: 12.4631. Time: 2904.7296 us. Best GFLOPs: 81.6499
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #11: GFLOPs: 84.4803. Time: 428.5256 us. Best GFLOPs: 84.4803
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #13: GFLOPs: 8.4587. Time: 4279.8536 us. Best GFLOPs: 84.4803
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #14: GFLOPs: 215.0775. Time: 168.3206 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #15: GFLOPs: 72.9498. Time: 496.2587 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #16: GFLOPs: 22.5421. Time: 1605.9712 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #17: GFLOPs: 16.7069. Time: 2166.8944 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #18: GFLOPs: 141.6020. Time: 255.6601 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #19: GFLOPs: 35.6319. Time: 1016.0006 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #20: GFLOPs: 21.5635. Time: 1678.8512 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #21: GFLOPs: 84.0673. Time: 430.6310 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #22: GFLOPs: 56.5813. Time: 639.8228 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #23: GFLOPs: 59.8507. Time: 604.8711 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #24: GFLOPs: 7.3144. Time: 4949.4115 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #25: GFLOPs: 6.3613. Time: 5690.9521 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #26: GFLOPs: 7.1499. Time: 5063.2847 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #27: GFLOPs: 90.0055. Time: 402.2198 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #28: GFLOPs: 191.1337. Time: 189.4066 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #29: GFLOPs: 41.9609. Time: 862.7562 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #30: GFLOPs: 46.8799. Time: 772.2289 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #31: GFLOPs: 18.7590. Time: 1929.8477 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #32: GFLOPs: 58.3999. Time: 619.8983 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #33: GFLOPs: 12.2920. Time: 2945.1674 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #34: GFLOPs: 155.2654. Time: 233.1619 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #35: GFLOPs: 80.3897. Time: 450.3311 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #36: GFLOPs: 13.7089. Time: 2640.7641 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #37: GFLOPs: 37.5618. Time: 963.7971 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #38: GFLOPs: 65.8878. Time: 549.4486 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #39: GFLOPs: 71.3797. Time: 507.1747 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #40: GFLOPs: 76.5328. Time: 473.0255 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #41: GFLOPs: 4.3597. Time: 8303.8488 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #42: GFLOPs: 44.5583. Time: 812.4627 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #43: GFLOPs: 29.6172. Time: 1222.3313 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(24) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(4), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(24) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(48) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 3, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[10, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #45: GFLOPs: 29.5230. Time: 1226.2307 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #46: GFLOPs: 39.1682. Time: 924.2699 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #47: GFLOPs: 8.9394. Time: 4049.7142 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #48: GFLOPs: 86.2576. Time: 419.6962 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #49: GFLOPs: 86.6037. Time: 418.0189 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #50: GFLOPs: 2.8898. Time: 12527.5529 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #51: GFLOPs: 55.7528. Time: 649.3303 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #52: GFLOPs: 97.2922. Time: 372.0953 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #53: GFLOPs: 133.1806. Time: 271.8264 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #54: GFLOPs: 52.8039. Time: 685.5934 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #55: GFLOPs: 35.3913. Time: 1022.9066 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #56: GFLOPs: 18.1781. Time: 1991.5209 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #57: GFLOPs: 90.5994. Time: 399.5832 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #58: GFLOPs: 122.2772. Time: 296.0649 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #59: GFLOPs: 3.0735. Time: 11778.8302 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #60: GFLOPs: 4.5915. Time: 7884.6464 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(12) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(7), T.int64(1), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(12) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 3, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #62: GFLOPs: 32.2675. Time: 1121.9346 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #63: GFLOPs: 4.0655. Time: 8904.6961 us. Best GFLOPs: 215.0775
2024-04-29 15:07:56 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #64: GFLOPs: 102.8896. Time: 351.8527 us. Best GFLOPs: 215.0775
2024-04-29 16:25:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:25:50 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 16:25:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 16:25:52 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 16:25:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 16:26:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 16:26:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 16:26:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 16:26:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8382  0.7462  0.7211  0.6950  0.6930  0.6806  0.6787  0.6768  0.6698  0.6666  0.6666  0.6550  0.6550  0.6546  0.6533  0.6498
[17 : 32]:	0.6491  0.6464  0.6394  0.6393  0.6389  0.6275  0.6253  0.6215  0.6197  0.6177  0.6177  0.6133  0.6130  0.6119  0.6119  0.6108
[33 : 48]:	0.6058  0.6056  0.6023  0.6019  0.6019  0.6019  0.6014  0.6013  0.6003  0.5996  0.5996  0.5993  0.5980  0.5958  0.5916  0.5903
[49 : 64]:	0.5902  0.5898  0.5890  0.5881  0.5864  0.5857  0.5853  0.5853  0.5842  0.5839  0.5839  0.5839  0.5838  0.5809  0.5797  0.5791
2024-04-29 16:26:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:26:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #65: GFLOPs: 80.6452. Time: 448.9043 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #66: GFLOPs: 111.2863. Time: 325.3049 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #67: GFLOPs: 80.6811. Time: 448.7049 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #68: GFLOPs: 73.7507. Time: 490.8698 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #69: GFLOPs: 131.4616. Time: 275.3807 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #70: GFLOPs: 147.2164. Time: 245.9100 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #71: GFLOPs: 149.7642. Time: 241.7266 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #72: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(12) + oc_chunk_2_init * T.int64(6) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(12) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(10) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #73: GFLOPs: 88.9363. Time: 407.0553 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #74: GFLOPs: 14.2292. Time: 2544.2094 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #75: GFLOPs: 13.6816. Time: 2646.0290 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #76: GFLOPs: 135.9049. Time: 266.3774 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #77: GFLOPs: 135.6925. Time: 266.7942 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #78: GFLOPs: 170.5267. Time: 212.2951 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #79: GFLOPs: 7.7594. Time: 4665.5801 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #80: GFLOPs: 210.4701. Time: 172.0054 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #81: GFLOPs: 92.2741. Time: 392.3309 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #82: GFLOPs: 79.1633. Time: 457.3079 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #83: GFLOPs: 125.3292. Time: 288.8551 us. Best GFLOPs: 215.0775
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #84: GFLOPs: 242.3534. Time: 149.3769 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #85: GFLOPs: 147.1889. Time: 245.9559 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #86: GFLOPs: 85.0433. Time: 425.6887 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #87: GFLOPs: 116.1509. Time: 311.6805 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #88: GFLOPs: 32.0638. Time: 1129.0610 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #89: GFLOPs: 125.3907. Time: 288.7134 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #90: GFLOPs: 144.0658. Time: 251.2879 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #91: GFLOPs: 179.6422. Time: 201.5227 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #92: GFLOPs: 120.6936. Time: 299.9494 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #93: GFLOPs: 141.1259. Time: 256.5227 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #94: GFLOPs: 29.8618. Time: 1212.3167 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #95: GFLOPs: 32.2055. Time: 1124.0927 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #96: GFLOPs: 72.3581. Time: 500.3167 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #97: GFLOPs: 197.4480. Time: 183.3495 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #98: GFLOPs: 99.6767. Time: 363.1942 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #99: GFLOPs: 141.9120. Time: 255.1016 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #100: GFLOPs: 103.0668. Time: 351.2477 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #101: GFLOPs: 101.5483. Time: 356.5003 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #102: GFLOPs: 102.5446. Time: 353.0365 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #103: GFLOPs: 190.2022. Time: 190.3342 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #104: GFLOPs: 127.1951. Time: 284.6178 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #105: GFLOPs: 121.7342. Time: 297.3855 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #106: GFLOPs: 155.4042. Time: 232.9537 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #107: GFLOPs: 151.6035. Time: 238.7938 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #108: GFLOPs: 182.4816. Time: 198.3871 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #109: GFLOPs: 104.5129. Time: 346.3878 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #110: GFLOPs: 191.7461. Time: 188.8017 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #111: GFLOPs: 97.2004. Time: 372.4468 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #112: GFLOPs: 119.2224. Time: 303.6509 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #113: GFLOPs: 143.3965. Time: 252.4607 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #114: GFLOPs: 112.1490. Time: 322.8026 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #115: GFLOPs: 183.2792. Time: 197.5237 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #116: GFLOPs: 112.0144. Time: 323.1905 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #117: GFLOPs: 110.1872. Time: 328.5497 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #118: GFLOPs: 75.3574. Time: 480.4041 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #119: GFLOPs: 192.5971. Time: 187.9674 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #120: GFLOPs: 109.0398. Time: 332.0071 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #121: GFLOPs: 102.7248. Time: 352.4173 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #122: GFLOPs: 111.5553. Time: 324.5206 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #123: GFLOPs: 111.5583. Time: 324.5119 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #124: GFLOPs: 111.5232. Time: 324.6140 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #125: GFLOPs: 25.9562. Time: 1394.7356 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(1176), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(49) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(49) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[24, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[15, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b102)
b126 = sch.decompose_reduction(block=b102, loop=l110)
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #127: GFLOPs: 51.5475. Time: 702.3029 us. Best GFLOPs: 242.3534
2024-04-29 16:27:52 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #128: GFLOPs: 95.3089. Time: 379.8385 us. Best GFLOPs: 242.3534
2024-04-29 18:28:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:28:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:28:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 18:28:10 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:28:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 18:28:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 18:28:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 18:28:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32b00b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6303158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ea2318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ed0228)]: 0 failure(s)
2024-04-29 18:28:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9912  0.9182  0.9182  0.7646  0.7593  0.7571  0.7385  0.7268  0.7268  0.7222  0.7176  0.7087  0.7082  0.7033  0.6991  0.6798
[17 : 32]:	0.6789  0.6765  0.6722  0.6686  0.6637  0.6636  0.6609  0.6602  0.6602  0.6563  0.6526  0.6522  0.6517  0.6501  0.6495  0.6470
[33 : 48]:	0.6466  0.6450  0.6407  0.6407  0.6380  0.6361  0.6352  0.6352  0.6351  0.6323  0.6291  0.6287  0.6283  0.6275  0.6250  0.6231
[49 : 64]:	0.6197  0.6192  0.6173  0.6173  0.6172  0.6172  0.6124  0.6124  0.6120  0.6104  0.6099  0.6079  0.6008  0.5973  0.5972  0.5964
2024-04-29 18:28:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:28:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #129: GFLOPs: 113.2871. Time: 319.5597 us. Best GFLOPs: 242.3534
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #130: GFLOPs: 248.1956. Time: 145.8607 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #131: GFLOPs: 120.0373. Time: 301.5894 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #132: GFLOPs: 164.0221. Time: 220.7140 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #133: GFLOPs: 192.3024. Time: 188.2555 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #134: GFLOPs: 221.9742. Time: 163.0909 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #135: GFLOPs: 215.3029. Time: 168.1444 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #136: GFLOPs: 132.3482. Time: 273.5359 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #137: GFLOPs: 136.1936. Time: 265.8126 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #138: GFLOPs: 161.6854. Time: 223.9038 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #139: GFLOPs: 100.7647. Time: 359.2724 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #140: GFLOPs: 244.5720. Time: 148.0218 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #141: GFLOPs: 189.3501. Time: 191.1907 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #142: GFLOPs: 209.5161. Time: 172.7886 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #143: GFLOPs: 199.3015. Time: 181.6443 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #144: GFLOPs: 124.7855. Time: 290.1137 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #145: GFLOPs: 122.8795. Time: 294.6136 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #146: GFLOPs: 6.9185. Time: 5232.6238 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #147: GFLOPs: 86.1397. Time: 420.2706 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #148: GFLOPs: 179.8208. Time: 201.3225 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #149: GFLOPs: 130.3252. Time: 277.7818 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #150: GFLOPs: 57.7947. Time: 626.3897 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #151: GFLOPs: 69.7982. Time: 518.6664 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #152: GFLOPs: 188.6630. Time: 191.8870 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #153: GFLOPs: 78.4837. Time: 461.2674 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #154: GFLOPs: 159.1181. Time: 227.5165 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #155: GFLOPs: 112.6141. Time: 321.4694 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #156: GFLOPs: 191.0732. Time: 189.4666 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #157: GFLOPs: 165.7067. Time: 218.4703 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #158: GFLOPs: 135.9527. Time: 266.2837 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #159: GFLOPs: 159.4264. Time: 227.0765 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #160: GFLOPs: 176.0305. Time: 205.6575 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #161: GFLOPs: 195.9560. Time: 184.7455 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #162: GFLOPs: 88.7501. Time: 407.9094 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #163: GFLOPs: 184.7027. Time: 196.0014 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #164: GFLOPs: 160.3785. Time: 225.7284 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #165: GFLOPs: 147.4196. Time: 245.5710 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #166: GFLOPs: 71.4654. Time: 506.5666 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #167: GFLOPs: 202.1183. Time: 179.1128 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #168: GFLOPs: 167.9091. Time: 215.6047 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #169: GFLOPs: 179.4664. Time: 201.7202 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #170: GFLOPs: 150.9198. Time: 239.8757 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #171: GFLOPs: 107.6260. Time: 336.3682 us. Best GFLOPs: 248.1956
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #172: GFLOPs: 265.3776. Time: 136.4169 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #173: GFLOPs: 151.1055. Time: 239.5809 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #174: GFLOPs: 147.4586. Time: 245.5061 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #175: GFLOPs: 95.4972. Time: 379.0893 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #176: GFLOPs: 187.7278. Time: 192.8430 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #177: GFLOPs: 161.3839. Time: 224.3221 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #178: GFLOPs: 100.5198. Time: 360.1476 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #179: GFLOPs: 234.6757. Time: 154.2639 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #180: GFLOPs: 127.8985. Time: 283.0524 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #181: GFLOPs: 90.1424. Time: 401.6090 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #182: GFLOPs: 163.5223. Time: 221.3887 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #183: GFLOPs: 138.1672. Time: 262.0157 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #184: GFLOPs: 149.3744. Time: 242.3574 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #185: GFLOPs: 222.7666. Time: 162.5108 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #186: GFLOPs: 88.0368. Time: 411.2142 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #187: GFLOPs: 107.5557. Time: 336.5882 us. Best GFLOPs: 265.3776
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #188: GFLOPs: 294.4798. Time: 122.9354 us. Best GFLOPs: 294.4798
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #189: GFLOPs: 187.8425. Time: 192.7252 us. Best GFLOPs: 294.4798
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #190: GFLOPs: 4.9292. Time: 7344.3876 us. Best GFLOPs: 294.4798
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #191: GFLOPs: 74.0304. Time: 489.0153 us. Best GFLOPs: 294.4798
2024-04-29 18:30:07 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_42] Trial #192: GFLOPs: 22.8788. Time: 1582.3379 us. Best GFLOPs: 294.4798
