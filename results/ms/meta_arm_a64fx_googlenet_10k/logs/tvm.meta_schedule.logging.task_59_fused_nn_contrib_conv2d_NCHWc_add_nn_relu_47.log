2024-04-29 13:22:34 [INFO] [task_scheduler.cc:160] Initializing Task #59: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47"
2024-04-29 13:22:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4), T.int64(832), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:22:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:22:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:22:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:56:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:56:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:56:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 14:56:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:57:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 14:57:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 14:57:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 14:57:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 14:57:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9989  0.9988  0.9983  0.9981  0.9980  0.9979  0.9972  0.9968  0.9962  0.9955  0.9951  0.9949  0.9942  0.9939  0.9938
[17 : 32]:	0.9934  0.9931  0.9928  0.9926  0.9924  0.9919  0.9918  0.9918  0.9916  0.9908  0.9907  0.9902  0.9897  0.9884  0.9883  0.9875
[33 : 48]:	0.9874  0.9873  0.9866  0.9861  0.9859  0.9857  0.9850  0.9842  0.9840  0.9840  0.9839  0.9830  0.9830  0.9825  0.9819  0.9818
[49 : 64]:	0.9813  0.9811  0.9805  0.9805  0.9803  0.9801  0.9799  0.9797  0.9776  0.9776  0.9754  0.9743  0.9742  0.9737  0.9736  0.9735
2024-04-29 14:57:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:57:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #1: GFLOPs: 27.8576. Time: 750.1826 us. Best GFLOPs: 27.8576
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #2: GFLOPs: 10.4540. Time: 1999.0801 us. Best GFLOPs: 27.8576
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #3: GFLOPs: 51.5958. Time: 405.0388 us. Best GFLOPs: 51.5958
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #4: GFLOPs: 41.5093. Time: 503.4607 us. Best GFLOPs: 51.5958
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #5: GFLOPs: 137.3753. Time: 152.1256 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #6: GFLOPs: 105.6863. Time: 197.7391 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #7: GFLOPs: 56.2592. Time: 371.4650 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #8: GFLOPs: 6.1257. Time: 3411.5545 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #9: GFLOPs: 47.9197. Time: 436.1110 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #10: GFLOPs: 51.6873. Time: 404.3221 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #11: GFLOPs: 25.6604. Time: 814.4198 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #12: GFLOPs: 73.7913. Time: 283.2083 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #13: GFLOPs: 81.5449. Time: 256.2798 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #14: GFLOPs: 36.7486. Time: 568.6823 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #15: GFLOPs: 71.4697. Time: 292.4077 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #16: GFLOPs: 9.0792. Time: 2301.7824 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #17: GFLOPs: 28.4809. Time: 733.7668 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #18: GFLOPs: 10.3265. Time: 2023.7529 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #19: GFLOPs: 34.0148. Time: 614.3885 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #20: GFLOPs: 46.5040. Time: 449.3874 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #21: GFLOPs: 31.5878. Time: 661.5951 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #22: GFLOPs: 95.3675. Time: 219.1344 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:121] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[52, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #24: GFLOPs: 11.5819. Time: 1804.3970 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #25: GFLOPs: 71.1785. Time: 293.6042 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #26: GFLOPs: 42.8716. Time: 487.4631 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #27: GFLOPs: 28.9730. Time: 721.3031 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #28: GFLOPs: 5.2669. Time: 3967.8322 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #29: GFLOPs: 9.9795. Time: 2094.1318 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #30: GFLOPs: 39.9986. Time: 522.4761 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #31: GFLOPs: 59.6904. Time: 350.1115 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #32: GFLOPs: 3.5452. Time: 5894.7601 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #33: GFLOPs: 24.3266. Time: 859.0708 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #34: GFLOPs: 0.5118. Time: 40829.5690 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #35: GFLOPs: 11.7227. Time: 1782.7138 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #36: GFLOPs: 42.3149. Time: 493.8758 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:121] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #38: GFLOPs: 106.6230. Time: 196.0018 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #39: GFLOPs: 8.3819. Time: 2493.2738 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #40: GFLOPs: 17.5925. Time: 1187.9124 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #41: GFLOPs: 107.6103. Time: 194.2035 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #42: GFLOPs: 13.1028. Time: 1594.9502 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #43: GFLOPs: 53.5009. Time: 390.6160 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #44: GFLOPs: 4.2302. Time: 4940.3123 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #45: GFLOPs: 67.5229. Time: 309.4995 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #46: GFLOPs: 25.0159. Time: 835.4009 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #47: GFLOPs: 8.2442. Time: 2534.9151 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #48: GFLOPs: 28.2480. Time: 739.8152 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #49: GFLOPs: 23.1248. Time: 903.7179 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #50: GFLOPs: 9.0657. Time: 2305.2016 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #51: GFLOPs: 51.4648. Time: 406.0700 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #52: GFLOPs: 1.7199. Time: 12150.7852 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #53: GFLOPs: 54.4233. Time: 383.9957 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #54: GFLOPs: 3.0315. Time: 6893.6512 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #55: GFLOPs: 14.6197. Time: 1429.4615 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #56: GFLOPs: 8.6718. Time: 2409.9179 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #57: GFLOPs: 29.0068. Time: 720.4616 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #58: GFLOPs: 0.7168. Time: 29153.3370 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #59: GFLOPs: 50.0792. Time: 417.3047 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #60: GFLOPs: 129.5461. Time: 161.3194 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #61: GFLOPs: 127.5216. Time: 163.8805 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #62: GFLOPs: 114.3799. Time: 182.7096 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #63: GFLOPs: 8.0591. Time: 2593.1428 us. Best GFLOPs: 137.3753
2024-04-29 15:08:37 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #64: GFLOPs: 48.5411. Time: 430.5282 us. Best GFLOPs: 137.3753
2024-04-29 16:34:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:34:38 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 16:34:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 16:34:41 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 16:34:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 16:34:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 16:34:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 16:35:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68d3a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341a858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5431368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x78fc058)]: 0 failure(s)
2024-04-29 16:35:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9210  0.8842  0.8773  0.8746  0.8708  0.8691  0.8650  0.8535  0.8503  0.8490  0.8483  0.8442  0.8436  0.8425  0.8423  0.8422
[17 : 32]:	0.8422  0.8390  0.8365  0.8359  0.8349  0.8347  0.8347  0.8346  0.8336  0.8320  0.8301  0.8294  0.8279  0.8266  0.8261  0.8260
[33 : 48]:	0.8254  0.8251  0.8250  0.8250  0.8229  0.8209  0.8206  0.8206  0.8200  0.8200  0.8195  0.8177  0.8177  0.8168  0.8164  0.8162
[49 : 64]:	0.8156  0.8150  0.8146  0.8124  0.8115  0.8074  0.8049  0.8044  0.8044  0.8043  0.8038  0.8037  0.8023  0.8023  0.8022  0.8019
2024-04-29 16:35:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:35:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #65: GFLOPs: 130.3457. Time: 160.3298 us. Best GFLOPs: 137.3753
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #66: GFLOPs: 107.2785. Time: 194.8041 us. Best GFLOPs: 137.3753
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #67: GFLOPs: 105.5173. Time: 198.0558 us. Best GFLOPs: 137.3753
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #68: GFLOPs: 104.6507. Time: 199.6958 us. Best GFLOPs: 137.3753
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #69: GFLOPs: 157.3075. Time: 132.8500 us. Best GFLOPs: 157.3075
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #70: GFLOPs: 111.8803. Time: 186.7916 us. Best GFLOPs: 157.3075
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #71: GFLOPs: 17.1139. Time: 1221.1275 us. Best GFLOPs: 157.3075
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #72: GFLOPs: 133.3502. Time: 156.7174 us. Best GFLOPs: 157.3075
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #73: GFLOPs: 208.8312. Time: 100.0727 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #74: GFLOPs: 136.1565. Time: 153.4874 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #75: GFLOPs: 168.9331. Time: 123.7075 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #76: GFLOPs: 132.3763. Time: 157.8704 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #77: GFLOPs: 6.6385. Time: 3148.0605 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #78: GFLOPs: 115.8422. Time: 180.4032 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #79: GFLOPs: 178.6189. Time: 116.9994 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #80: GFLOPs: 147.1201. Time: 142.0493 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #81: GFLOPs: 129.6297. Time: 161.2154 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #82: GFLOPs: 156.8860. Time: 133.2069 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #83: GFLOPs: 54.6620. Time: 382.3187 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #84: GFLOPs: 135.0260. Time: 154.7724 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #85: GFLOPs: 157.2120. Time: 132.9307 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #86: GFLOPs: 149.9731. Time: 139.3470 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #87: GFLOPs: 128.7063. Time: 162.3720 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #88: GFLOPs: 145.4515. Time: 143.6788 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #89: GFLOPs: 109.5548. Time: 190.7566 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #90: GFLOPs: 153.1266. Time: 136.4773 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #91: GFLOPs: 93.7305. Time: 222.9616 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #92: GFLOPs: 6.0276. Time: 3467.0822 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #93: GFLOPs: 120.5854. Time: 173.3070 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #94: GFLOPs: 130.0813. Time: 160.6557 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #95: GFLOPs: 79.9211. Time: 261.4866 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #96: GFLOPs: 65.3840. Time: 319.6241 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:121] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #97: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(196)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #98: GFLOPs: 95.9401. Time: 217.8265 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #99: GFLOPs: 16.5735. Time: 1260.9487 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #100: GFLOPs: 116.0650. Time: 180.0569 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #101: GFLOPs: 109.1744. Time: 191.4213 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #102: GFLOPs: 177.2849. Time: 117.8798 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #103: GFLOPs: 102.1134. Time: 204.6579 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #104: GFLOPs: 101.8763. Time: 205.1342 us. Best GFLOPs: 208.8312
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #105: GFLOPs: 222.5167. Time: 93.9179 us. Best GFLOPs: 222.5167
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #106: GFLOPs: 223.6232. Time: 93.4532 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #107: GFLOPs: 159.6226. Time: 130.9232 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #108: GFLOPs: 130.4358. Time: 160.2190 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #109: GFLOPs: 128.6283. Time: 162.4705 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #110: GFLOPs: 120.2917. Time: 173.7302 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #111: GFLOPs: 146.3189. Time: 142.8271 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #112: GFLOPs: 118.5306. Time: 176.3114 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #113: GFLOPs: 181.1436. Time: 115.3687 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #114: GFLOPs: 131.8662. Time: 158.4812 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #115: GFLOPs: 106.2177. Time: 196.7497 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #116: GFLOPs: 156.9244. Time: 133.1744 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #117: GFLOPs: 159.6499. Time: 130.9008 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #118: GFLOPs: 165.3897. Time: 126.3579 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #119: GFLOPs: 110.0724. Time: 189.8596 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #120: GFLOPs: 106.7907. Time: 195.6940 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #121: GFLOPs: 111.1665. Time: 187.9911 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #122: GFLOPs: 156.7363. Time: 133.3341 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #123: GFLOPs: 92.8619. Time: 225.0472 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #124: GFLOPs: 146.8563. Time: 142.3044 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #125: GFLOPs: 108.6571. Time: 192.3327 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #126: GFLOPs: 86.8831. Time: 240.5335 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #127: GFLOPs: 107.6949. Time: 194.0510 us. Best GFLOPs: 223.6232
2024-04-29 16:36:42 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #128: GFLOPs: 56.0318. Time: 372.9723 us. Best GFLOPs: 223.6232
