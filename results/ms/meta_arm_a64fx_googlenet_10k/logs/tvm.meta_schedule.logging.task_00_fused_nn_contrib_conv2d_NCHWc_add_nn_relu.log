2024-04-29 13:18:35 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu"
2024-04-29 13:18:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4), T.int64(832), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:18:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:18:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(832), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:18:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:18:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:22:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:22:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:22:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5a419e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x656f8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ba27b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d6fdb8)]: 0 failure(s)
2024-04-29 13:22:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:22:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5a419e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x656f8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ba27b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d6fdb8)]: 0 failure(s)
2024-04-29 13:22:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5a419e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x656f8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ba27b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d6fdb8)]: 0 failure(s)
2024-04-29 13:23:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5a419e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x656f8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ba27b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d6fdb8)]: 0 failure(s)
2024-04-29 13:23:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5a419e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x656f8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5ba27b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d6fdb8)]: 0 failure(s)
2024-04-29 13:23:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9992  0.9986  0.9977  0.9964  0.9961  0.9961  0.9960  0.9952  0.9936  0.9933  0.9929  0.9929  0.9925  0.9924
[17 : 32]:	0.9924  0.9912  0.9907  0.9903  0.9903  0.9900  0.9879  0.9857  0.9853  0.9844  0.9844  0.9844  0.9842  0.9832  0.9827  0.9821
[33 : 48]:	0.9816  0.9815  0.9796  0.9791  0.9783  0.9782  0.9780  0.9762  0.9762  0.9760  0.9756  0.9754  0.9752  0.9750  0.9748  0.9745
[49 : 64]:	0.9724  0.9722  0.9722  0.9721  0.9719  0.9719  0.9718  0.9715  0.9714  0.9711  0.9711  0.9710  0.9704  0.9700  0.9698  0.9689
2024-04-29 13:23:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:23:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #1: GFLOPs: 2.6347. Time: 1487.2429 us. Best GFLOPs: 2.6347
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #2: GFLOPs: 13.6756. Time: 286.5277 us. Best GFLOPs: 13.6756
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #3: GFLOPs: 10.2099. Time: 383.7891 us. Best GFLOPs: 13.6756
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #4: GFLOPs: 101.2220. Time: 38.7113 us. Best GFLOPs: 101.2220
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #5: GFLOPs: 12.9216. Time: 303.2475 us. Best GFLOPs: 101.2220
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #6: GFLOPs: 30.4073. Time: 128.8647 us. Best GFLOPs: 101.2220
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #7: GFLOPs: 50.1549. Time: 78.1267 us. Best GFLOPs: 101.2220
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #8: GFLOPs: 13.8142. Time: 283.6524 us. Best GFLOPs: 101.2220
2024-04-29 15:03:49 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #9: GFLOPs: 3.1115. Time: 1259.3425 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #10: GFLOPs: 16.7536. Time: 233.8864 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #11: GFLOPs: 8.9449. Time: 438.0656 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #12: GFLOPs: 24.4220. Time: 160.4468 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #13: GFLOPs: 75.7469. Time: 51.7306 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #14: GFLOPs: 0.8942. Time: 4382.0736 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #15: GFLOPs: 8.3289. Time: 470.4602 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #16: GFLOPs: 34.5441. Time: 113.4328 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #17: GFLOPs: 0.2201. Time: 17801.3211 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #18: GFLOPs: 55.2980. Time: 70.8602 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #19: GFLOPs: 33.2939. Time: 117.6921 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #20: GFLOPs: 0.9502. Time: 4123.8221 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #21: GFLOPs: 55.5343. Time: 70.5588 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #22: GFLOPs: 5.4024. Time: 725.3138 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #23: GFLOPs: 2.2108. Time: 1772.3786 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #24: GFLOPs: 2.2754. Time: 1722.0495 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #25: GFLOPs: 65.7594. Time: 59.5874 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #26: GFLOPs: 19.6016. Time: 199.9035 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #27: GFLOPs: 45.0130. Time: 87.0511 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #28: GFLOPs: 1.0637. Time: 3683.8922 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #29: GFLOPs: 25.3338. Time: 154.6722 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #30: GFLOPs: 4.4358. Time: 883.3727 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #31: GFLOPs: 14.1766. Time: 276.4009 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #32: GFLOPs: 59.6919. Time: 65.6443 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #33: GFLOPs: 58.1349. Time: 67.4024 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #34: GFLOPs: 21.0594. Time: 186.0657 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #35: GFLOPs: 45.6125. Time: 85.9070 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #36: GFLOPs: 1.8805. Time: 2083.6994 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #37: GFLOPs: 16.0264. Time: 244.4990 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #38: GFLOPs: 17.0619. Time: 229.6598 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #39: GFLOPs: 25.9811. Time: 150.8184 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #40: GFLOPs: 15.5848. Time: 251.4259 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #41: GFLOPs: 4.5727. Time: 856.9140 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #42: GFLOPs: 41.8147. Time: 93.7093 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #43: GFLOPs: 1.6304. Time: 2403.2933 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #44: GFLOPs: 1.3756. Time: 2848.5737 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #45: GFLOPs: 4.1914. Time: 934.8750 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #46: GFLOPs: 4.6998. Time: 833.7436 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #47: GFLOPs: 25.8427. Time: 151.6263 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #48: GFLOPs: 0.2987. Time: 13118.7546 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #49: GFLOPs: 30.7318. Time: 127.5041 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #50: GFLOPs: 3.0157. Time: 1299.3522 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #51: GFLOPs: 27.9232. Time: 140.3289 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #52: GFLOPs: 16.8737. Time: 232.2211 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #53: GFLOPs: 54.6006. Time: 71.7654 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #54: GFLOPs: 5.1085. Time: 767.0480 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #55: GFLOPs: 82.4179. Time: 47.5435 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #56: GFLOPs: 10.6324. Time: 368.5369 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #57: GFLOPs: 23.4297. Time: 167.2418 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #58: GFLOPs: 3.5586. Time: 1101.1092 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #59: GFLOPs: 13.2917. Time: 294.8039 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #60: GFLOPs: 37.4329. Time: 104.6789 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #61: GFLOPs: 91.0590. Time: 43.0318 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(6)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l98, l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #63: GFLOPs: 17.0992. Time: 229.1587 us. Best GFLOPs: 101.2220
2024-04-29 15:03:50 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #64: GFLOPs: 2.5738. Time: 1522.4270 us. Best GFLOPs: 101.2220
