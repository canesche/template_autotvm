2024-04-29 13:22:09 [INFO] [task_scheduler.cc:160] Initializing Task #52: "fused_nn_max_pool2d_8"
2024-04-29 13:22:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(29), T.int64(29), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(29), T.int64(29), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(28) and v_ax3 < T.int64(28), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 13:22:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], T.if_then_else(v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) < T.int64(28) and v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) < T.int64(28), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4], T.float32(-3.4028234663852886e+38)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(29), T.int64(29), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(1), T.int64(9)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(120), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(29), ax2 * T.int64(2) + rv0_rv1_fused_1 // T.int64(3) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(29), ax3 * T.int64(2) + rv0_rv1_fused_1 % T.int64(3) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(28) and v_ax3 < T.int64(28), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(29), T.int64(29), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(29), T.int64(29), T.int64(4)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(28) and v_ax3 < T.int64(28), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:45:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:45:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:46:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bb8d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b36e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4891258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a297e8)]: 0 failure(s)
2024-04-29 14:46:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:46:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bb8d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b36e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4891258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a297e8)]: 0 failure(s)
2024-04-29 14:46:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bb8d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b36e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4891258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a297e8)]: 0 failure(s)
2024-04-29 14:46:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bb8d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b36e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4891258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a297e8)]: 0 failure(s)
2024-04-29 14:46:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62bb8d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b36e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4891258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a297e8)]: 0 failure(s)
2024-04-29 14:46:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9993  0.9764  0.9734  0.9703  0.9668  0.9647  0.9615  0.9503  0.9442  0.9439  0.9350  0.9251  0.9229  0.9208  0.9186
[17 : 32]:	0.9186  0.9079  0.9066  0.9040  0.8971  0.8953  0.8892  0.8865  0.8839  0.8817  0.8805  0.8799  0.8645  0.8535  0.8440  0.8418
[33 : 48]:	0.8417  0.8350  0.8283  0.8277  0.8274  0.8189  0.8169  0.8118  0.8072  0.7994  0.7965  0.7951  0.7846  0.7843  0.7713  0.7673
[49 : 64]:	0.7507  0.7449  0.7382  0.7201  0.7153  0.6949  0.6949  0.6929  0.6851  0.6850  0.6831  0.6803  0.6715  0.6575  0.6571  0.6539
2024-04-29 14:46:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:46:16 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #1: GFLOPs: 7.4822. Time: 113.1648 us. Best GFLOPs: 7.4822
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #2: GFLOPs: 16.3856. Time: 51.6748 us. Best GFLOPs: 16.3856
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #3: GFLOPs: 33.7163. Time: 25.1130 us. Best GFLOPs: 33.7163
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #4: GFLOPs: 7.8730. Time: 107.5471 us. Best GFLOPs: 33.7163
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #5: GFLOPs: 4.9030. Time: 172.6943 us. Best GFLOPs: 33.7163
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #6: GFLOPs: 39.5619. Time: 21.4024 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #7: GFLOPs: 12.2885. Time: 68.9034 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #8: GFLOPs: 24.7741. Time: 34.1776 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #9: GFLOPs: 12.4498. Time: 68.0105 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #10: GFLOPs: 13.3667. Time: 63.3455 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #11: GFLOPs: 25.0925. Time: 33.7440 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #12: GFLOPs: 13.1583. Time: 64.3488 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #13: GFLOPs: 16.5232. Time: 51.2442 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #14: GFLOPs: 13.4915. Time: 62.7595 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #15: GFLOPs: 9.9500. Time: 85.0973 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #16: GFLOPs: 12.8999. Time: 65.6379 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #17: GFLOPs: 16.2261. Time: 52.1825 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #18: GFLOPs: 13.1639. Time: 64.3213 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #19: GFLOPs: 10.2468. Time: 82.6325 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #20: GFLOPs: 11.6591. Time: 72.6231 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #21: GFLOPs: 11.9738. Time: 70.7145 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #22: GFLOPs: 10.3200. Time: 82.0467 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #23: GFLOPs: 10.3700. Time: 81.6511 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #24: GFLOPs: 12.3767. Time: 68.4124 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #25: GFLOPs: 6.2392. Time: 135.7100 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #26: GFLOPs: 12.4971. Time: 67.7534 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #27: GFLOPs: 14.2723. Time: 59.3260 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #28: GFLOPs: 8.7974. Time: 96.2466 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #29: GFLOPs: 12.2913. Time: 68.8878 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #30: GFLOPs: 7.5664. Time: 111.9055 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #31: GFLOPs: 7.5286. Time: 112.4678 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #32: GFLOPs: 16.8808. Time: 50.1587 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #33: GFLOPs: 7.5619. Time: 111.9720 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #34: GFLOPs: 13.8300. Time: 61.2235 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #35: GFLOPs: 13.2704. Time: 63.8050 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #36: GFLOPs: 13.9887. Time: 60.5291 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #37: GFLOPs: 6.6070. Time: 128.1555 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #38: GFLOPs: 24.8779. Time: 34.0350 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #39: GFLOPs: 12.0187. Time: 70.4504 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #40: GFLOPs: 7.2458. Time: 116.8569 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #41: GFLOPs: 13.9395. Time: 60.7426 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #42: GFLOPs: 12.1176. Time: 69.8754 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #43: GFLOPs: 14.9718. Time: 56.5543 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #44: GFLOPs: 8.7675. Time: 96.5752 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #45: GFLOPs: 7.7980. Time: 108.5817 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #46: GFLOPs: 11.7034. Time: 72.3484 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #47: GFLOPs: 9.3047. Time: 90.9996 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #48: GFLOPs: 8.7682. Time: 96.5670 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #49: GFLOPs: 7.7430. Time: 109.3524 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #50: GFLOPs: 17.4854. Time: 48.4243 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #51: GFLOPs: 12.4628. Time: 67.9399 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #52: GFLOPs: 7.3402. Time: 115.3531 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #53: GFLOPs: 11.6827. Time: 72.4761 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #54: GFLOPs: 9.7990. Time: 86.4092 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #55: GFLOPs: 14.0771. Time: 60.1488 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #56: GFLOPs: 13.5379. Time: 62.5446 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #57: GFLOPs: 12.1361. Time: 69.7685 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #58: GFLOPs: 19.2336. Time: 44.0230 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #59: GFLOPs: 13.2262. Time: 64.0186 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #60: GFLOPs: 12.5501. Time: 67.4674 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #61: GFLOPs: 13.1739. Time: 64.2726 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #62: GFLOPs: 15.3190. Time: 55.2725 us. Best GFLOPs: 39.5619
2024-04-29 15:07:48 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_max_pool2d_8] Trial #63: GFLOPs: 44.9921. Time: 18.8193 us. Best GFLOPs: 44.9921
