2024-04-29 13:22:42 [INFO] [task_scheduler.cc:160] Initializing Task #61: "fused_nn_global_avg_pool2d"
2024-04-29 13:22:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 13:22:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(256)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("adaptive_pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:59:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:59:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:59:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5a6a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6cd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x574d508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x666c4c8)]: 0 failure(s)
2024-04-29 14:59:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:59:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5a6a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6cd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x574d508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x666c4c8)]: 0 failure(s)
2024-04-29 15:00:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5a6a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6cd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x574d508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x666c4c8)]: 0 failure(s)
2024-04-29 15:00:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5a6a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6cd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x574d508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x666c4c8)]: 0 failure(s)
2024-04-29 15:00:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5a6a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6cd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x574d508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x666c4c8)]: 0 failure(s)
2024-04-29 15:00:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9966  0.9950  0.9899  0.9832  0.9823  0.9808  0.9798  0.9760  0.9760  0.9706  0.9695  0.9691  0.9685  0.9666  0.9652  0.9609
[17 : 32]:	0.9573  0.9540  0.9498  0.9481  0.9433  0.9430  0.9387  0.9223  0.9114  0.9109  0.9073  0.9043  0.8963  0.8961  0.8916  0.8908
[33 : 48]:	0.8873  0.8853  0.8839  0.8689  0.8663  0.8631  0.8630  0.8558  0.8533  0.8374  0.8330  0.8318  0.8317  0.8313  0.8304  0.8296
[49 : 64]:	0.8229  0.8191  0.8184  0.8165  0.8143  0.8119  0.8097  0.8093  0.8069  0.8048  0.8028  0.7998  0.7994  0.7991  0.7934  0.7929
2024-04-29 15:00:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:00:07 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 0.5678. Time: 90.1667 us. Best GFLOPs: 0.5678
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 0.8438. Time: 60.6777 us. Best GFLOPs: 0.8438
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 0.8415. Time: 60.8416 us. Best GFLOPs: 0.8438
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 3.9826. Time: 12.8560 us. Best GFLOPs: 3.9826
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 1.9858. Time: 25.7833 us. Best GFLOPs: 3.9826
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 2.1587. Time: 23.7181 us. Best GFLOPs: 3.9826
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 2.2507. Time: 22.7483 us. Best GFLOPs: 3.9826
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 4.8101. Time: 10.6444 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 2.7932. Time: 18.3304 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 4.3885. Time: 11.6668 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 2.2910. Time: 22.3488 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 2.2493. Time: 22.7623 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 2.3304. Time: 21.9707 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 1.3616. Time: 37.6021 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 1.5992. Time: 32.0165 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 1.7220. Time: 29.7329 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 3.5936. Time: 14.2474 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 3.6158. Time: 14.1600 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.2190. Time: 23.0731 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.2725. Time: 11.9835 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 2.1489. Time: 23.8261 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 3.6292. Time: 14.1078 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 1.6625. Time: 30.7968 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 2.2253. Time: 23.0079 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 4.1987. Time: 12.1944 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 3.2326. Time: 15.8387 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 1.2657. Time: 40.4525 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 2.1029. Time: 24.3469 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 4.1209. Time: 12.4246 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 4.3006. Time: 11.9054 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 3.4636. Time: 14.7821 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 4.2339. Time: 12.0928 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 1.9996. Time: 25.6048 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 4.2917. Time: 11.9301 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 3.4716. Time: 14.7483 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 3.9857. Time: 12.8459 us. Best GFLOPs: 4.8101
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 4.8125. Time: 10.6389 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 1.5081. Time: 33.9494 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 2.0648. Time: 24.7966 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 1.6656. Time: 30.7394 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.0093. Time: 25.4817 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 2.0760. Time: 24.6634 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 4.1824. Time: 12.2417 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 4.4128. Time: 11.6025 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 3.7102. Time: 13.7999 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 2.0332. Time: 25.1821 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 4.3773. Time: 11.6968 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 3.4438. Time: 14.8671 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 1.3874. Time: 36.9044 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 4.3466. Time: 11.7794 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 3.7456. Time: 13.6692 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 3.8513. Time: 13.2943 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 4.4575. Time: 11.4863 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 4.1477. Time: 12.3443 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.0511. Time: 24.9619 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 1.9462. Time: 26.3078 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 2.0669. Time: 24.7716 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 1.9909. Time: 25.7171 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 3.4960. Time: 14.6454 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.8589. Time: 27.5425 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 1.3338. Time: 38.3865 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 1.8875. Time: 27.1260 us. Best GFLOPs: 4.8125
2024-04-29 15:08:52 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 1.3487. Time: 37.9638 us. Best GFLOPs: 4.8125
