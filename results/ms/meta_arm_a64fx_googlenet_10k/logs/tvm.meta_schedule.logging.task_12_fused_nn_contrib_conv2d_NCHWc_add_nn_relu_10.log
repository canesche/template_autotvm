2024-04-29 13:19:25 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10"
2024-04-29 13:19:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:19:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:19:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:19:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:19:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:42:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:42:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:42:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cc52c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75e96c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68cbda8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a22198)]: 0 failure(s)
2024-04-29 13:42:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:42:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cc52c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75e96c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68cbda8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a22198)]: 0 failure(s)
2024-04-29 13:42:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cc52c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75e96c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68cbda8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a22198)]: 0 failure(s)
2024-04-29 13:42:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cc52c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75e96c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68cbda8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a22198)]: 0 failure(s)
2024-04-29 13:42:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cc52c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75e96c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68cbda8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a22198)]: 0 failure(s)
2024-04-29 13:42:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9990  0.9989  0.9976  0.9973  0.9971  0.9969  0.9962  0.9961  0.9961  0.9958  0.9955  0.9949  0.9942  0.9942  0.9941
[17 : 32]:	0.9929  0.9922  0.9913  0.9911  0.9906  0.9895  0.9889  0.9870  0.9862  0.9861  0.9854  0.9848  0.9845  0.9842  0.9839  0.9837
[33 : 48]:	0.9834  0.9833  0.9816  0.9810  0.9810  0.9802  0.9801  0.9796  0.9793  0.9792  0.9782  0.9779  0.9773  0.9773  0.9772  0.9759
[49 : 64]:	0.9759  0.9752  0.9751  0.9749  0.9748  0.9741  0.9739  0.9737  0.9737  0.9730  0.9729  0.9725  0.9723  0.9718  0.9714  0.9709
2024-04-29 13:42:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:42:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #1: GFLOPs: 5.6267. Time: 1179.3429 us. Best GFLOPs: 5.6267
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #2: GFLOPs: 12.8569. Time: 516.1268 us. Best GFLOPs: 12.8569
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #3: GFLOPs: 67.6118. Time: 98.1453 us. Best GFLOPs: 67.6118
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #4: GFLOPs: 78.4808. Time: 84.5528 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #5: GFLOPs: 24.1627. Time: 274.6285 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #6: GFLOPs: 1.9963. Time: 3324.0066 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #7: GFLOPs: 72.9880. Time: 90.9160 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #8: GFLOPs: 13.8884. Time: 477.7938 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #9: GFLOPs: 25.5112. Time: 260.1124 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #10: GFLOPs: 10.5208. Time: 630.7314 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #11: GFLOPs: 20.8584. Time: 318.1348 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #12: GFLOPs: 0.6173. Time: 10750.3031 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #13: GFLOPs: 10.6976. Time: 620.3075 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #14: GFLOPs: 32.3183. Time: 205.3257 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #15: GFLOPs: 6.1127. Time: 1085.5698 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #16: GFLOPs: 1.6784. Time: 3953.7204 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #17: GFLOPs: 12.0719. Time: 549.6856 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #18: GFLOPs: 62.4528. Time: 106.2526 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #19: GFLOPs: 35.7613. Time: 185.5577 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #20: GFLOPs: 65.5039. Time: 101.3035 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #21: GFLOPs: 27.0501. Time: 245.3139 us. Best GFLOPs: 78.4808
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #22: GFLOPs: 79.1679. Time: 83.8191 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #23: GFLOPs: 45.6835. Time: 145.2553 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #24: GFLOPs: 8.9802. Time: 738.9313 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #25: GFLOPs: 52.9461. Time: 125.3308 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #26: GFLOPs: 19.7790. Time: 335.4963 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #27: GFLOPs: 66.2083. Time: 100.2257 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #28: GFLOPs: 69.8487. Time: 95.0021 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #29: GFLOPs: 31.6628. Time: 209.5761 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #30: GFLOPs: 64.7028. Time: 102.5579 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #31: GFLOPs: 9.2320. Time: 718.7792 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #32: GFLOPs: 13.7051. Time: 484.1836 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #33: GFLOPs: 62.6669. Time: 105.8897 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #34: GFLOPs: 0.9536. Time: 6958.4436 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #35: GFLOPs: 31.6532. Time: 209.6397 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #36: GFLOPs: 40.2041. Time: 165.0521 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #37: GFLOPs: 13.8172. Time: 480.2542 us. Best GFLOPs: 79.1679
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #38: GFLOPs: 123.3408. Time: 53.8003 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #39: GFLOPs: 12.4434. Time: 533.2783 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #40: GFLOPs: 47.0817. Time: 140.9417 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #41: GFLOPs: 79.9407. Time: 83.0087 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #42: GFLOPs: 3.1079. Time: 2135.1274 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #43: GFLOPs: 6.6867. Time: 992.3879 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #44: GFLOPs: 10.3163. Time: 643.2310 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #45: GFLOPs: 4.6753. Time: 1419.3301 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #46: GFLOPs: 11.1475. Time: 595.2729 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #47: GFLOPs: 3.1971. Time: 2075.5731 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #48: GFLOPs: 5.3526. Time: 1239.7326 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #49: GFLOPs: 50.8983. Time: 130.3731 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #50: GFLOPs: 19.1018. Time: 347.3900 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #51: GFLOPs: 54.6873. Time: 121.3403 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #52: GFLOPs: 41.7687. Time: 158.8694 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #53: GFLOPs: 106.3473. Time: 62.3972 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #54: GFLOPs: 47.2785. Time: 140.3550 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #55: GFLOPs: 38.2953. Time: 173.2789 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #56: GFLOPs: 5.6658. Time: 1171.1915 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #57: GFLOPs: 1.3088. Time: 5070.1610 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #58: GFLOPs: 1.4082. Time: 4712.2551 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #59: GFLOPs: 13.7330. Time: 483.1996 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #60: GFLOPs: 6.2181. Time: 1067.1660 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #61: GFLOPs: 0.3819. Time: 17374.8675 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #62: GFLOPs: 3.3257. Time: 1995.2950 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #63: GFLOPs: 72.9303. Time: 90.9879 us. Best GFLOPs: 123.3408
2024-04-29 15:04:23 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_10] Trial #64: GFLOPs: 63.6482. Time: 104.2570 us. Best GFLOPs: 123.3408
