2024-04-29 13:21:43 [INFO] [task_scheduler.cc:160] Initializing Task #44: "fused_nn_max_pool2d_6"
2024-04-29 13:21:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(112) and v_ax3 < T.int64(112), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 13:21:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:21:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(113), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(113), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(112) and v_ax3 < T.int64(112), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(113), ax2 * T.int64(2) + rv0_rv1_fused_0 // T.int64(3) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(113), ax3 * T.int64(2) + rv0_rv1_fused_0 % T.int64(3) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(112) and v_ax3 < T.int64(112), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(56)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113), T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(113), ax2 * T.int64(2) + ax2_1)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(112) and v_ax3 < T.int64(112), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:35:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:35:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:35:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5ee18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f8f308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3508418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fcd078)]: 0 failure(s)
2024-04-29 14:35:29 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:35:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5ee18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f8f308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3508418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fcd078)]: 0 failure(s)
2024-04-29 14:35:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5ee18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f8f308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3508418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fcd078)]: 0 failure(s)
2024-04-29 14:35:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5ee18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f8f308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3508418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fcd078)]: 0 failure(s)
2024-04-29 14:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f5ee18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f8f308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3508418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fcd078)]: 0 failure(s)
2024-04-29 14:35:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9967  0.9909  0.9890  0.9732  0.9718  0.9718  0.9712  0.9685  0.9681  0.9649  0.9603  0.9570  0.9522  0.9346  0.9327
[17 : 32]:	0.9252  0.9221  0.9138  0.9121  0.9015  0.8995  0.8920  0.8894  0.8862  0.8857  0.8851  0.8847  0.8821  0.8650  0.8646  0.8602
[33 : 48]:	0.8510  0.8501  0.8501  0.8496  0.8425  0.8392  0.8335  0.8319  0.8260  0.8215  0.8210  0.8208  0.8197  0.8135  0.8021  0.8020
[49 : 64]:	0.8013  0.7979  0.7916  0.7895  0.7829  0.7809  0.7755  0.7747  0.7650  0.7569  0.7498  0.7456  0.7239  0.7226  0.7052  0.6980
2024-04-29 14:35:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:35:45 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #1: GFLOPs: 19.1878. Time: 94.1400 us. Best GFLOPs: 19.1878
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #2: GFLOPs: 11.9739. Time: 150.8558 us. Best GFLOPs: 19.1878
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #3: GFLOPs: 40.3959. Time: 44.7158 us. Best GFLOPs: 40.3959
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #4: GFLOPs: 87.1604. Time: 20.7243 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #5: GFLOPs: 12.7914. Time: 141.2144 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #6: GFLOPs: 17.1851. Time: 105.1106 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #7: GFLOPs: 33.0947. Time: 54.5809 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #8: GFLOPs: 14.6097. Time: 123.6396 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #9: GFLOPs: 6.8506. Time: 263.6770 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #10: GFLOPs: 44.4526. Time: 40.6351 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #11: GFLOPs: 0.6593. Time: 2739.5875 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #12: GFLOPs: 29.5806. Time: 61.0648 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #13: GFLOPs: 21.0730. Time: 85.7180 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #14: GFLOPs: 11.4351. Time: 157.9642 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #15: GFLOPs: 0.4732. Time: 3817.5770 us. Best GFLOPs: 87.1604
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #16: GFLOPs: 87.6317. Time: 20.6128 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #17: GFLOPs: 31.1521. Time: 57.9845 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #18: GFLOPs: 32.1944. Time: 56.1071 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #19: GFLOPs: 28.0074. Time: 64.4948 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #20: GFLOPs: 8.0574. Time: 224.1848 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #21: GFLOPs: 0.5964. Time: 3028.6167 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #22: GFLOPs: 17.8857. Time: 100.9933 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #23: GFLOPs: 37.1894. Time: 48.5713 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #24: GFLOPs: 39.7852. Time: 45.4022 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #25: GFLOPs: 13.3947. Time: 134.8550 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #26: GFLOPs: 9.9749. Time: 181.0887 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #27: GFLOPs: 3.8250. Time: 472.2458 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #28: GFLOPs: 14.4193. Time: 125.2724 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #29: GFLOPs: 38.1548. Time: 47.3422 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #30: GFLOPs: 6.6345. Time: 272.2651 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #31: GFLOPs: 38.4207. Time: 47.0146 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #32: GFLOPs: 5.7264. Time: 315.4428 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #33: GFLOPs: 7.2570. Time: 248.9098 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #34: GFLOPs: 11.2948. Time: 159.9265 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #35: GFLOPs: 13.3609. Time: 135.1961 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #36: GFLOPs: 14.4583. Time: 124.9344 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #37: GFLOPs: 13.6017. Time: 132.8018 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #38: GFLOPs: 86.0602. Time: 20.9892 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #39: GFLOPs: 38.6917. Time: 46.6854 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #40: GFLOPs: 1.5193. Time: 1188.9364 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #41: GFLOPs: 26.5042. Time: 68.1528 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #42: GFLOPs: 49.9345. Time: 36.1741 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #43: GFLOPs: 16.2513. Time: 111.1503 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #44: GFLOPs: 0.4081. Time: 4426.0912 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #45: GFLOPs: 12.3042. Time: 146.8068 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #46: GFLOPs: 33.0842. Time: 54.5982 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #47: GFLOPs: 10.3523. Time: 174.4870 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #48: GFLOPs: 45.4882. Time: 39.7100 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #49: GFLOPs: 1.4103. Time: 1280.8422 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #50: GFLOPs: 53.3347. Time: 33.8679 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #51: GFLOPs: 13.4537. Time: 134.2633 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #52: GFLOPs: 10.1667. Time: 177.6712 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #53: GFLOPs: 29.7799. Time: 60.6562 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #54: GFLOPs: 29.7631. Time: 60.6904 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_max_pool2d_6] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(113), T.int64(113), T.int64(32)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(113), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(112) and v_ax3 < T.int64(112), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(56), T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b21)
l44 = sch.fuse(l38, l39, l40, preserve_unit_iters=True)
sch.parallel(loop=l44)
sch.annotate(block_or_loop=l44, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l44, ann_key="pragma_unroll_explicit", ann_val=1)
b45 = sch.get_block(name="pool_max_rf", func_name="main")
l46, l47, l48, l49, l50 = sch.get_loops(block=b45)
b51 = sch.decompose_reduction(block=b45, loop=l50)
b52 = sch.get_block(name="pool_max", func_name="main")
l53, l54, l55, l56 = sch.get_loops(block=b52)
b57 = sch.decompose_reduction(block=b52, loop=l56)
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #56: GFLOPs: 8.1393. Time: 221.9273 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #57: GFLOPs: 9.9615. Time: 181.3326 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #58: GFLOPs: 1.1583. Time: 1559.4510 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #59: GFLOPs: 10.8050. Time: 167.1763 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #60: GFLOPs: 9.2612. Time: 195.0441 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #61: GFLOPs: 16.0643. Time: 112.4442 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #62: GFLOPs: 29.7822. Time: 60.6514 us. Best GFLOPs: 87.6317
2024-04-29 15:06:58 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_max_pool2d_6] Trial #63: GFLOPs: 12.3415. Time: 146.3633 us. Best GFLOPs: 87.6317
