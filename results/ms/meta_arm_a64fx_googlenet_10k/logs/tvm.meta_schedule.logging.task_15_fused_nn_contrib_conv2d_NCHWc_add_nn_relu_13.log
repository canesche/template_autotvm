2024-04-29 13:19:38 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13"
2024-04-29 13:19:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4), T.int64(160), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:19:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:19:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(10), T.int64(3), T.int64(3), T.int64(1), T.int64(20), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(80) + oc_chunk_2 * T.int64(20) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 20])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:19:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(10), T.int64(3), T.int64(3), T.int64(1), T.int64(20), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(80) + oc_chunk_2 * T.int64(20) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(2), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 20])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:19:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(16)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(16), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(40), ic_0 * T.int64(10) // T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(10), T.int64(3), T.int64(3), T.int64(1), T.int64(20), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(80) + oc_chunk_2 * T.int64(20) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 20])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:46:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:46:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:46:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 13:46:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:46:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 13:47:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 13:47:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 13:47:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 13:47:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9991  0.9979  0.9975  0.9974  0.9970  0.9968  0.9966  0.9964  0.9962  0.9961  0.9956  0.9954  0.9953  0.9946
[17 : 32]:	0.9936  0.9932  0.9931  0.9929  0.9927  0.9924  0.9917  0.9914  0.9911  0.9908  0.9905  0.9901  0.9899  0.9894  0.9890  0.9889
[33 : 48]:	0.9887  0.9876  0.9872  0.9865  0.9864  0.9854  0.9854  0.9849  0.9848  0.9844  0.9843  0.9842  0.9840  0.9832  0.9830  0.9828
[49 : 64]:	0.9827  0.9818  0.9817  0.9810  0.9808  0.9796  0.9785  0.9781  0.9776  0.9773  0.9770  0.9761  0.9753  0.9752  0.9741  0.9732
2024-04-29 13:47:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:47:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #1: GFLOPs: 17.9608. Time: 10064.0593 us. Best GFLOPs: 17.9608
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #2: GFLOPs: 16.6034. Time: 10886.8377 us. Best GFLOPs: 17.9608
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #3: GFLOPs: 63.5103. Time: 2846.1396 us. Best GFLOPs: 63.5103
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(20), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(20), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(20) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_fused_fused * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[20, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 20])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b116)
b142 = sch.decompose_reduction(block=b116, loop=l126)
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #5: GFLOPs: 29.3372. Time: 6161.4288 us. Best GFLOPs: 63.5103
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #6: GFLOPs: 119.9306. Time: 1507.1970 us. Best GFLOPs: 119.9306
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #7: GFLOPs: 140.3035. Time: 1288.3435 us. Best GFLOPs: 140.3035
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #8: GFLOPs: 12.0413. Time: 15011.6001 us. Best GFLOPs: 140.3035
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #9: GFLOPs: 5.7998. Time: 31166.1870 us. Best GFLOPs: 140.3035
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #10: GFLOPs: 235.1634. Time: 768.6531 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #11: GFLOPs: 37.7178. Time: 4792.4053 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #12: GFLOPs: 31.2269. Time: 5788.5749 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #13: GFLOPs: 10.6401. Time: 16988.4208 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #14: GFLOPs: 2.8404. Time: 63638.0317 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #15: GFLOPs: 14.2219. Time: 12709.9373 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #16: GFLOPs: 3.7200. Time: 48591.3060 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #17: GFLOPs: 84.1258. Time: 2148.6747 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #18: GFLOPs: 17.8866. Time: 10105.8122 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #19: GFLOPs: 44.6568. Time: 4047.7421 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #20: GFLOPs: 10.7469. Time: 16819.6870 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #21: GFLOPs: 7.9537. Time: 22726.2674 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #22: GFLOPs: 26.1124. Time: 6922.3537 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #23: GFLOPs: 59.3892. Time: 3043.6331 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #24: GFLOPs: 16.8490. Time: 10728.1545 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #25: GFLOPs: 16.9731. Time: 10649.7363 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(10), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_2_init * T.int64(10) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(2), T.int64(14), T.int64(2), T.int64(40), T.int64(3), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_2 * T.int64(10) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(80), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 10])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 40])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #27: GFLOPs: 25.5998. Time: 7060.9628 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #28: GFLOPs: 27.0290. Time: 6687.5881 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #29: GFLOPs: 24.0574. Time: 7513.6579 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #30: GFLOPs: 43.6534. Time: 4140.7763 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #31: GFLOPs: 18.9174. Time: 9555.1927 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #32: GFLOPs: 2.9337. Time: 61614.1473 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_0, oc_block_0 in T.grid(T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_fused // T.int64(7) * T.int64(20) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_fused // T.int64(7) * T.int64(20) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(20), T.int64(2), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_fused // T.int64(7) * T.int64(20) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused % T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 5, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[20, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b107)
b132 = sch.decompose_reduction(block=b107, loop=l116)
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #34: GFLOPs: 30.2839. Time: 5968.8079 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #35: GFLOPs: 87.9735. Time: 2054.6984 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #36: GFLOPs: 5.7792. Time: 31277.6270 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(10), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(3), T.int64(16)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(40), ic_0 * T.int64(10) // T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(2) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(980)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #38: GFLOPs: 47.9833. Time: 3767.1219 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #39: GFLOPs: 31.4963. Time: 5739.0499 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #40: GFLOPs: 23.1511. Time: 7807.7942 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #41: GFLOPs: 14.9284. Time: 12108.3753 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #42: GFLOPs: 197.8686. Time: 913.5307 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #43: GFLOPs: 95.2857. Time: 1897.0219 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #44: GFLOPs: 80.4759. Time: 2246.1263 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #45: GFLOPs: 57.4019. Time: 3149.0063 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #46: GFLOPs: 46.7166. Time: 3869.2647 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #47: GFLOPs: 53.0358. Time: 3408.2439 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #48: GFLOPs: 48.4485. Time: 3730.9501 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #49: GFLOPs: 97.4985. Time: 1853.9672 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #50: GFLOPs: 43.9214. Time: 4115.5074 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #51: GFLOPs: 6.6786. Time: 27065.5940 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #52: GFLOPs: 50.4271. Time: 3584.5636 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #53: GFLOPs: 198.7963. Time: 909.2675 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #54: GFLOPs: 65.8161. Time: 2746.4274 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #55: GFLOPs: 22.6945. Time: 7964.8713 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #56: GFLOPs: 17.9275. Time: 10082.8055 us. Best GFLOPs: 235.1634
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #57: GFLOPs: 257.8343. Time: 701.0668 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #58: GFLOPs: 52.2933. Time: 3456.6366 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #59: GFLOPs: 82.7545. Time: 2184.2811 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #60: GFLOPs: 68.7426. Time: 2629.5073 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #61: GFLOPs: 22.5852. Time: 8003.4407 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(8), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(40) + oc_chunk_1 * T.int64(5) + oc_chunk_2_init * T.int64(5) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(40) + oc_chunk_1 * T.int64(5) + oc_chunk_2 * T.int64(5) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 8, 1, 5])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[10, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b69)
l108 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l108)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b116)
b139 = sch.decompose_reduction(block=b116, loop=l123)
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #63: GFLOPs: 13.5081. Time: 13381.5243 us. Best GFLOPs: 257.8343
2024-04-29 15:04:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #64: GFLOPs: 90.2489. Time: 2002.8942 us. Best GFLOPs: 257.8343
2024-04-29 15:21:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:21:52 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 15:21:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 15:21:57 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 15:22:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 15:22:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 15:22:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 15:22:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 15:22:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9954  0.9947  0.9890  0.9867  0.9852  0.9852  0.9852  0.9813  0.9813  0.9813  0.9813  0.9807  0.9772  0.9768  0.9730  0.9407
[17 : 32]:	0.9385  0.9078  0.9018  0.8939  0.8939  0.8909  0.8909  0.8909  0.8401  0.8321  0.8188  0.8130  0.8125  0.8044  0.7989  0.7989
[33 : 48]:	0.7989  0.7980  0.7967  0.7963  0.7960  0.7945  0.7932  0.7903  0.7871  0.7819  0.7800  0.7790  0.7754  0.7717  0.7713  0.7713
[49 : 64]:	0.7688  0.7628  0.7568  0.7478  0.7458  0.7427  0.7425  0.7391  0.7389  0.7389  0.7376  0.7352  0.7334  0.7273  0.7247  0.7238
2024-04-29 15:22:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:22:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #65: GFLOPs: 143.3384. Time: 1261.0648 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #66: GFLOPs: 256.1512. Time: 705.6731 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #67: GFLOPs: 123.2473. Time: 1466.6369 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #68: GFLOPs: 132.9982. Time: 1359.1086 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #69: GFLOPs: 213.7106. Time: 845.8122 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #70: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 20, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #71: GFLOPs: 224.3383. Time: 805.7432 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #72: GFLOPs: 218.5999. Time: 826.8944 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 20, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 40])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #74: GFLOPs: 220.2696. Time: 820.6264 us. Best GFLOPs: 257.8343
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #75: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(40), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 20, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 40])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #76: GFLOPs: 296.0700. Time: 610.5280 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #77: GFLOPs: 224.7846. Time: 804.1434 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #78: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(80), T.int64(3), T.int64(3), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 20, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[80, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #79: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(80), T.int64(3), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(40) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 20, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[80, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #80: GFLOPs: 183.7783. Time: 983.5710 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #81: GFLOPs: 195.0083. Time: 926.9299 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #82: GFLOPs: 68.9153. Time: 2622.9178 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #83: GFLOPs: 266.8645. Time: 677.3440 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #84: GFLOPs: 268.3994. Time: 673.4703 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #85: GFLOPs: 238.8908. Time: 756.6596 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #86: GFLOPs: 146.0476. Time: 1237.6723 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #87: GFLOPs: 99.9616. Time: 1808.2843 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #88: GFLOPs: 118.0759. Time: 1530.8711 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #89: GFLOPs: 214.2731. Time: 843.5918 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #90: GFLOPs: 215.2686. Time: 839.6906 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #91: GFLOPs: 121.2893. Time: 1490.3127 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #92: GFLOPs: 202.3091. Time: 893.4797 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #93: GFLOPs: 194.7453. Time: 928.1819 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #94: GFLOPs: 179.6154. Time: 1006.3672 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #95: GFLOPs: 71.0069. Time: 2545.6538 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #96: GFLOPs: 110.7100. Time: 1632.7254 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #97: GFLOPs: 145.9839. Time: 1238.2125 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #98: GFLOPs: 210.1281. Time: 860.2327 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #99: GFLOPs: 173.6260. Time: 1041.0829 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #100: GFLOPs: 242.8565. Time: 744.3039 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #101: GFLOPs: 265.7206. Time: 680.2597 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #102: GFLOPs: 244.2735. Time: 739.9864 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #103: GFLOPs: 201.7539. Time: 895.9383 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #104: GFLOPs: 115.0344. Time: 1571.3477 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #105: GFLOPs: 151.3660. Time: 1194.1854 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #106: GFLOPs: 82.4371. Time: 2192.6894 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #107: GFLOPs: 193.4682. Time: 934.3090 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #108: GFLOPs: 285.1192. Time: 633.9770 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #109: GFLOPs: 141.9592. Time: 1273.3171 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #110: GFLOPs: 123.9719. Time: 1458.0645 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #111: GFLOPs: 161.2651. Time: 1120.8811 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #112: GFLOPs: 161.8722. Time: 1116.6773 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #113: GFLOPs: 71.7266. Time: 2520.1108 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #114: GFLOPs: 161.6529. Time: 1118.1927 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #115: GFLOPs: 184.9136. Time: 977.5325 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #116: GFLOPs: 58.6407. Time: 3082.4843 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #117: GFLOPs: 161.4766. Time: 1119.4130 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #118: GFLOPs: 286.1911. Time: 631.6026 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #119: GFLOPs: 171.3796. Time: 1054.7290 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #120: GFLOPs: 211.2040. Time: 855.8504 us. Best GFLOPs: 296.0700
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #121: GFLOPs: 359.4583. Time: 502.8651 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #122: GFLOPs: 331.5443. Time: 545.2033 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #123: GFLOPs: 217.8422. Time: 829.7704 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #124: GFLOPs: 289.5410. Time: 624.2951 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #125: GFLOPs: 91.7481. Time: 1970.1661 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #126: GFLOPs: 1.7081. Time: 105822.2357 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #127: GFLOPs: 17.3783. Time: 10401.3966 us. Best GFLOPs: 359.4583
2024-04-29 15:24:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #128: GFLOPs: 0.6991. Time: 258562.7943 us. Best GFLOPs: 359.4583
2024-04-29 16:03:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:03:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:03:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:03:15 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:03:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:03:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:03:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:04:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:04:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9450  0.9450  0.9450  0.9260  0.9119  0.9041  0.8890  0.8253  0.8103  0.8098  0.8062  0.7869  0.7869  0.7797  0.7693  0.7532
[17 : 32]:	0.7359  0.7345  0.7288  0.7288  0.7203  0.7203  0.7150  0.7150  0.7098  0.7050  0.7009  0.7007  0.7000  0.6944  0.6942  0.6936
[33 : 48]:	0.6936  0.6919  0.6897  0.6876  0.6813  0.6813  0.6810  0.6781  0.6770  0.6764  0.6764  0.6735  0.6716  0.6711  0.6697  0.6697
[49 : 64]:	0.6694  0.6673  0.6640  0.6611  0.6611  0.6596  0.6596  0.6576  0.6557  0.6544  0.6528  0.6528  0.6528  0.6528  0.6477  0.6474
2024-04-29 16:04:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:04:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #129: GFLOPs: 329.9332. Time: 547.8655 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #130: GFLOPs: 305.6125. Time: 591.4647 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #131: GFLOPs: 357.0619. Time: 506.2401 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #132: GFLOPs: 296.2492. Time: 610.1588 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #133: GFLOPs: 132.4569. Time: 1364.6634 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #134: GFLOPs: 136.6682. Time: 1322.6125 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #135: GFLOPs: 130.5074. Time: 1385.0482 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #136: GFLOPs: 285.4618. Time: 633.2163 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #137: GFLOPs: 287.5352. Time: 628.6502 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #138: GFLOPs: 46.8754. Time: 3856.1615 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #139: GFLOPs: 185.0143. Time: 977.0004 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #140: GFLOPs: 86.8633. Time: 2080.9590 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #141: GFLOPs: 87.4453. Time: 2067.1109 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #142: GFLOPs: 285.6049. Time: 632.8988 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #143: GFLOPs: 91.2554. Time: 1980.8047 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #144: GFLOPs: 236.3997. Time: 764.6332 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #145: GFLOPs: 248.4108. Time: 727.6618 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #146: GFLOPs: 169.3842. Time: 1067.1544 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #147: GFLOPs: 310.2454. Time: 582.6325 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #148: GFLOPs: 260.8262. Time: 693.0249 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #149: GFLOPs: 155.9545. Time: 1159.0499 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #150: GFLOPs: 225.7239. Time: 800.7973 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #151: GFLOPs: 286.4805. Time: 630.9645 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #152: GFLOPs: 287.6629. Time: 628.3710 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #153: GFLOPs: 218.5901. Time: 826.9316 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #154: GFLOPs: 75.6783. Time: 2388.5200 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #155: GFLOPs: 264.4594. Time: 683.5039 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #156: GFLOPs: 266.9741. Time: 677.0658 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #157: GFLOPs: 288.8028. Time: 625.8910 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #158: GFLOPs: 278.8843. Time: 648.1506 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #159: GFLOPs: 298.0509. Time: 606.4705 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #160: GFLOPs: 125.7862. Time: 1437.0343 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #161: GFLOPs: 223.9125. Time: 807.2755 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #162: GFLOPs: 70.0738. Time: 2579.5535 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #163: GFLOPs: 140.5839. Time: 1285.7738 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #164: GFLOPs: 177.9201. Time: 1015.9563 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #165: GFLOPs: 264.6793. Time: 682.9360 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #166: GFLOPs: 244.7563. Time: 738.5267 us. Best GFLOPs: 359.4583
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #167: GFLOPs: 409.6398. Time: 441.2634 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #168: GFLOPs: 238.0058. Time: 759.4734 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #169: GFLOPs: 132.2444. Time: 1366.8555 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #170: GFLOPs: 236.7773. Time: 763.4138 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #171: GFLOPs: 237.6405. Time: 760.6407 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #172: GFLOPs: 293.7507. Time: 615.3484 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #173: GFLOPs: 391.1950. Time: 462.0689 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #174: GFLOPs: 321.6316. Time: 562.0065 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #175: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(20), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 10, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 10])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #176: GFLOPs: 276.7215. Time: 653.2165 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #177: GFLOPs: 340.9642. Time: 530.1409 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #178: GFLOPs: 244.1624. Time: 740.3231 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #179: GFLOPs: 242.6583. Time: 744.9118 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #180: GFLOPs: 141.4855. Time: 1277.5799 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #181: GFLOPs: 193.0058. Time: 936.5474 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #182: GFLOPs: 98.5214. Time: 1834.7180 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #183: GFLOPs: 164.9122. Time: 1096.0924 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #184: GFLOPs: 190.0279. Time: 951.2237 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #185: GFLOPs: 141.6756. Time: 1275.8661 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #186: GFLOPs: 231.6420. Time: 780.3379 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #187: GFLOPs: 150.7338. Time: 1199.1939 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #188: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(40), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(640)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(40), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(20), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(40) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(20) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 10, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 40])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #189: GFLOPs: 152.6473. Time: 1184.1617 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #190: GFLOPs: 1.0623. Time: 170152.2777 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #191: GFLOPs: 33.8643. Time: 5337.7452 us. Best GFLOPs: 409.6398
2024-04-29 16:05:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #192: GFLOPs: 17.0878. Time: 10578.2225 us. Best GFLOPs: 409.6398
2024-04-29 16:43:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:43:33 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:43:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:43:38 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:43:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:44:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:44:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:44:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 16:44:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9448  0.9430  0.9401  0.8655  0.8609  0.8483  0.8448  0.8434  0.8193  0.8179  0.8140  0.8140  0.8093  0.8093  0.8018  0.8018
[17 : 32]:	0.8018  0.8018  0.7940  0.7933  0.7933  0.7905  0.7881  0.7881  0.7881  0.7881  0.7848  0.7800  0.7627  0.7625  0.7621  0.7621
[33 : 48]:	0.7581  0.7581  0.7581  0.7540  0.7532  0.7532  0.7409  0.7409  0.7378  0.7344  0.7344  0.7277  0.7256  0.7254  0.7239  0.7223
[49 : 64]:	0.7220  0.7220  0.7220  0.7195  0.7195  0.7195  0.7194  0.7137  0.7111  0.7111  0.7073  0.7053  0.7032  0.6929  0.6925  0.6896
2024-04-29 16:44:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:44:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #193: GFLOPs: 326.5994. Time: 553.4579 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #194: GFLOPs: 370.7905. Time: 487.4964 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #195: GFLOPs: 385.6771. Time: 468.6797 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #196: GFLOPs: 359.7372. Time: 502.4752 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #197: GFLOPs: 394.5107. Time: 458.1854 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #198: GFLOPs: 369.9600. Time: 488.5908 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #199: GFLOPs: 259.1456. Time: 697.5191 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #200: GFLOPs: 280.8469. Time: 643.6212 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #201: GFLOPs: 354.3695. Time: 510.0863 us. Best GFLOPs: 409.6398
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #202: GFLOPs: 463.8355. Time: 389.7050 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #203: GFLOPs: 308.0461. Time: 586.7922 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #204: GFLOPs: 356.9217. Time: 506.4389 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #205: GFLOPs: 309.0874. Time: 584.8153 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #206: GFLOPs: 337.3745. Time: 535.7815 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #207: GFLOPs: 359.3513. Time: 503.0148 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #208: GFLOPs: 308.6337. Time: 585.6749 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #209: GFLOPs: 358.2026. Time: 504.6279 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #210: GFLOPs: 330.5579. Time: 546.8302 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #211: GFLOPs: 356.3804. Time: 507.2082 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #212: GFLOPs: 339.0919. Time: 533.0680 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #213: GFLOPs: 403.2036. Time: 448.3071 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #214: GFLOPs: 114.7551. Time: 1575.1721 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #215: GFLOPs: 339.7703. Time: 532.0036 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #216: GFLOPs: 354.2338. Time: 510.2818 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #217: GFLOPs: 353.0978. Time: 511.9234 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #218: GFLOPs: 337.9221. Time: 534.9134 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #219: GFLOPs: 337.5409. Time: 535.5174 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #220: GFLOPs: 355.9416. Time: 507.8335 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #221: GFLOPs: 178.8465. Time: 1010.6936 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #222: GFLOPs: 148.0242. Time: 1221.1453 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #223: GFLOPs: 319.3276. Time: 566.0615 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #224: GFLOPs: 398.7312. Time: 453.3356 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #225: GFLOPs: 390.0964. Time: 463.3702 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #226: GFLOPs: 279.7035. Time: 646.2523 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #227: GFLOPs: 384.3945. Time: 470.2436 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #228: GFLOPs: 361.4129. Time: 500.1455 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #229: GFLOPs: 127.7622. Time: 1414.8089 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #230: GFLOPs: 146.3472. Time: 1235.1383 us. Best GFLOPs: 463.8355
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #231: GFLOPs: 482.5178. Time: 374.6163 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #232: GFLOPs: 423.8772. Time: 426.4420 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #233: GFLOPs: 312.4086. Time: 578.5981 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #234: GFLOPs: 118.2912. Time: 1528.0851 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #235: GFLOPs: 141.5043. Time: 1277.4102 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #236: GFLOPs: 255.9693. Time: 706.1745 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #237: GFLOPs: 313.5892. Time: 576.4198 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #238: GFLOPs: 263.5171. Time: 685.9479 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #239: GFLOPs: 186.2387. Time: 970.5772 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #240: GFLOPs: 333.8937. Time: 541.3670 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #241: GFLOPs: 362.6648. Time: 498.4190 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #242: GFLOPs: 138.6900. Time: 1303.3315 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #243: GFLOPs: 123.6865. Time: 1461.4291 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #244: GFLOPs: 262.6377. Time: 688.2448 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #245: GFLOPs: 333.9823. Time: 541.2235 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #246: GFLOPs: 227.8748. Time: 793.2384 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #247: GFLOPs: 362.9232. Time: 498.0642 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #248: GFLOPs: 114.6138. Time: 1577.1143 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #249: GFLOPs: 263.3407. Time: 686.4074 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #250: GFLOPs: 264.3205. Time: 683.8631 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #251: GFLOPs: 308.5575. Time: 585.8197 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #252: GFLOPs: 293.8896. Time: 615.0576 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #253: GFLOPs: 136.4591. Time: 1324.6389 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #254: GFLOPs: 78.2991. Time: 2308.5709 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #255: GFLOPs: 51.4460. Time: 3513.5665 us. Best GFLOPs: 482.5178
2024-04-29 16:45:53 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #256: GFLOPs: 33.4877. Time: 5397.7705 us. Best GFLOPs: 482.5178
2024-04-29 17:06:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:06:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:06:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:06:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:06:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:06:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:07:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:07:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:07:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9339  0.9280  0.9280  0.9229  0.9000  0.9000  0.8623  0.8344  0.8025  0.7857  0.7713  0.7618  0.7618  0.7618  0.7514  0.7487
[17 : 32]:	0.7485  0.7332  0.7311  0.7305  0.7305  0.7300  0.7291  0.7291  0.7290  0.7290  0.7284  0.7266  0.7262  0.7218  0.7179  0.7151
[33 : 48]:	0.7151  0.7151  0.7151  0.7052  0.7046  0.6985  0.6985  0.6980  0.6980  0.6980  0.6968  0.6967  0.6967  0.6961  0.6938  0.6919
[49 : 64]:	0.6919  0.6919  0.6914  0.6906  0.6906  0.6900  0.6869  0.6834  0.6834  0.6803  0.6763  0.6762  0.6739  0.6739  0.6721  0.6721
2024-04-29 17:07:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:07:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #257: GFLOPs: 468.1333. Time: 386.1273 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #258: GFLOPs: 419.8430. Time: 430.5396 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #259: GFLOPs: 472.1547. Time: 382.8386 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #260: GFLOPs: 469.6228. Time: 384.9026 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #261: GFLOPs: 451.5894. Time: 400.2730 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #262: GFLOPs: 418.8012. Time: 431.6106 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #263: GFLOPs: 180.1260. Time: 1003.5144 us. Best GFLOPs: 482.5178
2024-04-29 17:08:35 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #264: GFLOPs: 351.5740. Time: 514.1422 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #265: GFLOPs: 144.9913. Time: 1246.6887 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #266: GFLOPs: 423.5369. Time: 426.7847 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #267: GFLOPs: 386.6026. Time: 467.5578 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #268: GFLOPs: 349.3410. Time: 517.4287 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #269: GFLOPs: 322.5010. Time: 560.4914 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #270: GFLOPs: 359.3909. Time: 502.9594 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #271: GFLOPs: 367.4653. Time: 491.9077 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #272: GFLOPs: 372.6335. Time: 485.0853 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #273: GFLOPs: 340.1487. Time: 531.4119 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #274: GFLOPs: 371.9921. Time: 485.9217 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #275: GFLOPs: 423.5839. Time: 426.7373 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #276: GFLOPs: 369.9971. Time: 488.5418 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #277: GFLOPs: 125.7585. Time: 1437.3502 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #278: GFLOPs: 403.8707. Time: 447.5666 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #279: GFLOPs: 157.1640. Time: 1150.1300 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #280: GFLOPs: 358.4822. Time: 504.2343 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #281: GFLOPs: 368.6412. Time: 490.3387 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #282: GFLOPs: 367.2964. Time: 492.1339 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #283: GFLOPs: 370.1199. Time: 488.3797 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #284: GFLOPs: 368.5546. Time: 490.4539 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #285: GFLOPs: 352.2591. Time: 513.1423 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #286: GFLOPs: 369.9709. Time: 488.5764 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #287: GFLOPs: 311.7688. Time: 579.7856 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #288: GFLOPs: 393.8521. Time: 458.9516 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #289: GFLOPs: 235.9209. Time: 766.1850 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #290: GFLOPs: 214.2749. Time: 843.5846 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #291: GFLOPs: 235.1571. Time: 768.6735 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #292: GFLOPs: 212.4455. Time: 850.8489 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #293: GFLOPs: 331.9050. Time: 544.6107 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #294: GFLOPs: 327.7175. Time: 551.5696 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #295: GFLOPs: 300.5049. Time: 601.5178 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #296: GFLOPs: 481.4186. Time: 375.4716 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #297: GFLOPs: 246.9153. Time: 732.0690 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #298: GFLOPs: 239.9192. Time: 753.4162 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #299: GFLOPs: 185.2735. Time: 975.6333 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #300: GFLOPs: 306.8367. Time: 589.1050 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #301: GFLOPs: 340.2973. Time: 531.1798 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #302: GFLOPs: 306.8791. Time: 589.0236 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #303: GFLOPs: 324.0280. Time: 557.8500 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #304: GFLOPs: 321.7628. Time: 561.7773 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #305: GFLOPs: 324.7635. Time: 556.5866 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #306: GFLOPs: 320.2160. Time: 564.4910 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #307: GFLOPs: 217.8682. Time: 829.6715 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #308: GFLOPs: 316.9850. Time: 570.2447 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #309: GFLOPs: 317.3668. Time: 569.5587 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #310: GFLOPs: 331.4003. Time: 545.4401 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #311: GFLOPs: 248.3687. Time: 727.7850 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #312: GFLOPs: 346.9150. Time: 521.0470 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #313: GFLOPs: 306.1759. Time: 590.3764 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #314: GFLOPs: 316.6148. Time: 570.9116 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #315: GFLOPs: 461.7299. Time: 391.4822 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #316: GFLOPs: 358.8133. Time: 503.7691 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #317: GFLOPs: 180.8062. Time: 999.7390 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #318: GFLOPs: 1.3516. Time: 133739.2027 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #319: GFLOPs: 12.8682. Time: 14046.9129 us. Best GFLOPs: 482.5178
2024-04-29 17:08:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #320: GFLOPs: 90.2081. Time: 2003.7997 us. Best GFLOPs: 482.5178
2024-04-29 17:58:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:58:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:58:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:58:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:58:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:59:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:59:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75528f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71e2268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x78d67e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7481958)]: 0 failure(s)
2024-04-29 17:59:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9549  0.9412  0.9412  0.9410  0.9410  0.9343  0.9272  0.9272  0.8977  0.8807  0.8651  0.8651  0.8651  0.8600  0.8595  0.8506
[17 : 32]:	0.8421  0.8400  0.8400  0.8280  0.8273  0.8262  0.8262  0.8236  0.8150  0.8141  0.8141  0.7954  0.7954  0.7913  0.7815  0.7701
[33 : 48]:	0.7701  0.7701  0.7701  0.7675  0.7626  0.7596  0.7596  0.7560  0.7511  0.7511  0.7506  0.7493  0.7479  0.7478  0.7440  0.7434
[49 : 64]:	0.7388  0.7376  0.7376  0.7351  0.7290  0.7290  0.7290  0.7286  0.7274  0.7264  0.7249  0.7249  0.7229  0.7229  0.7228  0.7217
2024-04-29 17:59:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:59:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #321: GFLOPs: 425.7692. Time: 424.5470 us. Best GFLOPs: 482.5178
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #322: GFLOPs: 483.9355. Time: 373.5188 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #323: GFLOPs: 424.5413. Time: 425.7749 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #324: GFLOPs: 462.4631. Time: 390.8616 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #325: GFLOPs: 401.8207. Time: 449.8500 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #326: GFLOPs: 466.4697. Time: 387.5044 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #327: GFLOPs: 380.1542. Time: 475.4888 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #328: GFLOPs: 463.9629. Time: 389.5981 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #329: GFLOPs: 465.4868. Time: 388.3226 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #330: GFLOPs: 467.3640. Time: 386.7628 us. Best GFLOPs: 483.9355
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #331: GFLOPs: 483.9573. Time: 373.5020 us. Best GFLOPs: 483.9573
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #332: GFLOPs: 423.8228. Time: 426.4968 us. Best GFLOPs: 483.9573
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #333: GFLOPs: 174.2440. Time: 1037.3900 us. Best GFLOPs: 483.9573
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #334: GFLOPs: 206.7209. Time: 874.4110 us. Best GFLOPs: 483.9573
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #335: GFLOPs: 417.9329. Time: 432.5074 us. Best GFLOPs: 483.9573
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #336: GFLOPs: 496.3686. Time: 364.1629 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #337: GFLOPs: 127.1989. Time: 1421.0740 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #338: GFLOPs: 495.6121. Time: 364.7188 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #339: GFLOPs: 473.8097. Time: 381.5013 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #340: GFLOPs: 82.9622. Time: 2178.8123 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #341: GFLOPs: 243.0242. Time: 743.7903 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #342: GFLOPs: 167.0269. Time: 1082.2151 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #343: GFLOPs: 328.1762. Time: 550.7988 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #344: GFLOPs: 424.8857. Time: 425.4298 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #345: GFLOPs: 487.0685. Time: 371.1162 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #346: GFLOPs: 165.9106. Time: 1089.4967 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #347: GFLOPs: 420.1794. Time: 430.1949 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #348: GFLOPs: 381.8575. Time: 473.3678 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #349: GFLOPs: 274.9208. Time: 657.4949 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #350: GFLOPs: 390.6229. Time: 462.7456 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #351: GFLOPs: 393.7593. Time: 459.0597 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #352: GFLOPs: 388.4629. Time: 465.3187 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #353: GFLOPs: 325.9411. Time: 554.5759 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #354: GFLOPs: 393.1285. Time: 459.7963 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #355: GFLOPs: 392.9036. Time: 460.0595 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #356: GFLOPs: 141.4732. Time: 1277.6914 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #357: GFLOPs: 290.4374. Time: 622.3683 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #358: GFLOPs: 398.3703. Time: 453.7463 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #359: GFLOPs: 398.3667. Time: 453.7503 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #360: GFLOPs: 479.8862. Time: 376.6706 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #361: GFLOPs: 389.1697. Time: 464.4736 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #362: GFLOPs: 388.3850. Time: 465.4120 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #363: GFLOPs: 168.2586. Time: 1074.2931 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #364: GFLOPs: 311.9892. Time: 579.3760 us. Best GFLOPs: 496.3686
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #365: GFLOPs: 581.1098. Time: 311.0583 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #366: GFLOPs: 475.5120. Time: 380.1356 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #367: GFLOPs: 112.9480. Time: 1600.3740 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #368: GFLOPs: 379.5039. Time: 476.3035 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #369: GFLOPs: 462.8993. Time: 390.4932 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #370: GFLOPs: 356.9728. Time: 506.3664 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #371: GFLOPs: 360.9942. Time: 500.7256 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #372: GFLOPs: 356.0008. Time: 507.7489 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #373: GFLOPs: 175.1387. Time: 1032.0908 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #374: GFLOPs: 448.1486. Time: 403.3462 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #375: GFLOPs: 202.7600. Time: 891.4926 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #376: GFLOPs: 403.1886. Time: 448.3237 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #377: GFLOPs: 355.8508. Time: 507.9630 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #378: GFLOPs: 335.7591. Time: 538.3594 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #379: GFLOPs: 356.7857. Time: 506.6320 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #380: GFLOPs: 359.4753. Time: 502.8413 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #381: GFLOPs: 325.0190. Time: 556.1491 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #382: GFLOPs: 92.6473. Time: 1951.0455 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #383: GFLOPs: 1.8298. Time: 98786.4370 us. Best GFLOPs: 581.1098
2024-04-29 18:00:59 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #384: GFLOPs: 98.1409. Time: 1841.8318 us. Best GFLOPs: 581.1098
