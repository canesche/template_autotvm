2024-04-29 13:22:31 [INFO] [task_scheduler.cc:160] Initializing Task #58: "fused_nn_max_pool2d_9"
2024-04-29 13:22:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(14) and v_ax3 < T.int64(14), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 13:22:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(208), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(15), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(15), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(14) and v_ax3 < T.int64(14), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(208), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(15), ax2 * T.int64(2) + rv0_rv1_fused_0 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(15), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(14) and v_ax3 < T.int64(14), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:22:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(208), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(208), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(15), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(15), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(14) and v_ax3 < T.int64(14), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:55:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:55:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:55:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x354eca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x534f418)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7560978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x595f648)]: 0 failure(s)
2024-04-29 14:55:19 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:55:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x354eca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x534f418)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7560978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x595f648)]: 0 failure(s)
2024-04-29 14:55:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x354eca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x534f418)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7560978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x595f648)]: 0 failure(s)
2024-04-29 14:55:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x354eca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x534f418)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7560978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x595f648)]: 0 failure(s)
2024-04-29 14:55:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x354eca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x534f418)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7560978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x595f648)]: 0 failure(s)
2024-04-29 14:55:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9969  0.9923  0.9889  0.9887  0.9871  0.9847  0.9812  0.9724  0.9720  0.9708  0.9708  0.9696  0.9659  0.9643  0.9567  0.9511
[17 : 32]:	0.9427  0.9397  0.9378  0.9371  0.9212  0.9178  0.9082  0.9071  0.9046  0.9002  0.8980  0.8909  0.8891  0.8881  0.8856  0.8836
[33 : 48]:	0.8745  0.8715  0.8709  0.8661  0.8636  0.8576  0.8558  0.8462  0.8461  0.8363  0.8264  0.8264  0.8232  0.8213  0.8158  0.8143
[49 : 64]:	0.8126  0.8075  0.8042  0.8018  0.7963  0.7916  0.7894  0.7844  0.7816  0.7647  0.7632  0.7594  0.7546  0.7543  0.7429  0.7406
2024-04-29 14:55:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:55:35 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #1: GFLOPs: 2.4242. Time: 67.2676 us. Best GFLOPs: 2.4242
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #2: GFLOPs: 1.9305. Time: 84.4711 us. Best GFLOPs: 2.4242
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #3: GFLOPs: 5.8727. Time: 27.7676 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #4: GFLOPs: 5.0926. Time: 32.0213 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #5: GFLOPs: 3.4397. Time: 47.4090 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #6: GFLOPs: 3.4687. Time: 47.0127 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #7: GFLOPs: 5.2362. Time: 31.1430 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #8: GFLOPs: 1.7361. Time: 93.9299 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #9: GFLOPs: 2.6057. Time: 62.5837 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #10: GFLOPs: 3.5258. Time: 46.2507 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #11: GFLOPs: 5.7813. Time: 28.2067 us. Best GFLOPs: 5.8727
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #12: GFLOPs: 5.9606. Time: 27.3581 us. Best GFLOPs: 5.9606
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #13: GFLOPs: 6.0705. Time: 26.8630 us. Best GFLOPs: 6.0705
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #14: GFLOPs: 3.7014. Time: 44.0564 us. Best GFLOPs: 6.0705
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #15: GFLOPs: 3.6386. Time: 44.8178 us. Best GFLOPs: 6.0705
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #16: GFLOPs: 6.2182. Time: 26.2248 us. Best GFLOPs: 6.2182
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #17: GFLOPs: 5.9773. Time: 27.2819 us. Best GFLOPs: 6.2182
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #18: GFLOPs: 6.3080. Time: 25.8516 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #19: GFLOPs: 4.9975. Time: 32.6309 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #20: GFLOPs: 4.3841. Time: 37.1965 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #21: GFLOPs: 5.0511. Time: 32.2847 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #22: GFLOPs: 2.7375. Time: 59.5707 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #23: GFLOPs: 3.9159. Time: 41.6438 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #24: GFLOPs: 3.2234. Time: 50.5901 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #25: GFLOPs: 3.3895. Time: 48.1103 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #26: GFLOPs: 4.5528. Time: 35.8183 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #27: GFLOPs: 4.7335. Time: 34.4509 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #28: GFLOPs: 3.2769. Time: 49.7639 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #29: GFLOPs: 5.5347. Time: 29.4638 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #30: GFLOPs: 5.9589. Time: 27.3663 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #31: GFLOPs: 4.3747. Time: 37.2760 us. Best GFLOPs: 6.3080
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #32: GFLOPs: 6.3882. Time: 25.5272 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #33: GFLOPs: 3.4716. Time: 46.9732 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #34: GFLOPs: 3.6669. Time: 44.4709 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #35: GFLOPs: 6.3861. Time: 25.5353 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:121] [Task #58: fused_nn_max_pool2d_9] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(15), T.int64(15), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused_fused in T.parallel(T.int64(208), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_fused_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(15), ax2)
                        v_ax3 = T.axis.spatial(T.int64(15), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(14) and v_ax3 < T.int64(14), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(4)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1456), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b19)
l29 = sch.fuse(l22, l23, preserve_unit_iters=True)
sch.parallel(loop=l29)
l30 = sch.fuse(l27, l28, preserve_unit_iters=True)
sch.vectorize(loop=l30)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l31, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
b53 = sch.decompose_reduction(block=b46, loop=l51)
b54 = sch.get_block(name="pool_max", func_name="main")
l55, l56, l57, l58 = sch.get_loops(block=b54)
b59 = sch.decompose_reduction(block=b54, loop=l58)
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #37: GFLOPs: 4.3143. Time: 37.7979 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #38: GFLOPs: 4.6456. Time: 35.1027 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #39: GFLOPs: 4.1921. Time: 38.8998 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #40: GFLOPs: 5.8202. Time: 28.0183 us. Best GFLOPs: 6.3882
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #41: GFLOPs: 9.7443. Time: 16.7351 us. Best GFLOPs: 9.7443
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #42: GFLOPs: 5.4124. Time: 30.1294 us. Best GFLOPs: 9.7443
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #43: GFLOPs: 5.4406. Time: 29.9733 us. Best GFLOPs: 9.7443
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #44: GFLOPs: 14.0229. Time: 11.6290 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #45: GFLOPs: 6.0233. Time: 27.0735 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #46: GFLOPs: 4.6190. Time: 35.3045 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #47: GFLOPs: 5.8406. Time: 27.9204 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #48: GFLOPs: 6.3758. Time: 25.5766 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #49: GFLOPs: 4.4092. Time: 36.9841 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #50: GFLOPs: 4.3522. Time: 37.4692 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #51: GFLOPs: 5.2293. Time: 31.1843 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #52: GFLOPs: 6.3415. Time: 25.7153 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #53: GFLOPs: 5.3418. Time: 30.5275 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #54: GFLOPs: 5.1102. Time: 31.9108 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #55: GFLOPs: 5.4919. Time: 29.6929 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #56: GFLOPs: 5.3811. Time: 30.3047 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #57: GFLOPs: 5.5704. Time: 29.2750 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #58: GFLOPs: 6.1884. Time: 26.3514 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #59: GFLOPs: 6.2897. Time: 25.9269 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #60: GFLOPs: 4.5831. Time: 35.5810 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #61: GFLOPs: 5.2262. Time: 31.2028 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #62: GFLOPs: 11.5449. Time: 14.1251 us. Best GFLOPs: 14.0229
2024-04-29 15:08:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_nn_max_pool2d_9] Trial #63: GFLOPs: 3.8162. Time: 42.7316 us. Best GFLOPs: 14.0229
