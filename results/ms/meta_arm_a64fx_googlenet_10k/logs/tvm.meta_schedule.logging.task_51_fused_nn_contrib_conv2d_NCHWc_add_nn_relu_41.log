2024-04-29 13:22:05 [INFO] [task_scheduler.cc:160] Initializing Task #51: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41"
2024-04-29 13:22:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:22:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:22:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:22:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:44:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:44:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:44:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 14:44:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:44:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 14:44:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 14:44:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 14:44:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 14:44:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9985  0.9979  0.9966  0.9964  0.9964  0.9960  0.9958  0.9952  0.9952  0.9949  0.9948  0.9946  0.9941  0.9941  0.9931
[17 : 32]:	0.9927  0.9914  0.9901  0.9891  0.9887  0.9886  0.9886  0.9871  0.9858  0.9854  0.9844  0.9843  0.9836  0.9823  0.9823  0.9822
[33 : 48]:	0.9822  0.9822  0.9805  0.9802  0.9797  0.9795  0.9787  0.9785  0.9784  0.9782  0.9782  0.9779  0.9777  0.9771  0.9768  0.9767
[49 : 64]:	0.9759  0.9759  0.9755  0.9744  0.9743  0.9741  0.9740  0.9735  0.9733  0.9732  0.9721  0.9721  0.9720  0.9716  0.9714  0.9714
2024-04-29 14:44:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:44:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #1: GFLOPs: 10.6640. Time: 4836.9150 us. Best GFLOPs: 10.6640
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #2: GFLOPs: 2.4236. Time: 21282.3646 us. Best GFLOPs: 10.6640
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #3: GFLOPs: 23.9917. Time: 2149.9460 us. Best GFLOPs: 23.9917
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #5: GFLOPs: 130.9414. Time: 393.9238 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #6: GFLOPs: 34.1792. Time: 1509.1328 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #7: GFLOPs: 17.9922. Time: 2866.8544 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #8: GFLOPs: 19.0261. Time: 2711.0615 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #9: GFLOPs: 2.9038. Time: 17763.1520 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #10: GFLOPs: 2.7839. Time: 18528.4115 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #11: GFLOPs: 57.7052. Time: 893.8703 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #12: GFLOPs: 7.0132. Time: 7354.8763 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #13: GFLOPs: 41.3112. Time: 1248.5950 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #14: GFLOPs: 54.6094. Time: 944.5423 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #15: GFLOPs: 14.3897. Time: 3584.5782 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #16: GFLOPs: 25.4832. Time: 2024.1121 us. Best GFLOPs: 130.9414
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #17: GFLOPs: 187.2528. Time: 275.4614 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #18: GFLOPs: 70.4930. Time: 731.7175 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(512), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(64) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(64) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #20: GFLOPs: 44.8063. Time: 1151.1988 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #21: GFLOPs: 7.6198. Time: 6769.3223 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #22: GFLOPs: 96.4725. Time: 534.6698 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #23: GFLOPs: 37.0858. Time: 1390.8549 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #24: GFLOPs: 85.5570. Time: 602.8841 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #25: GFLOPs: 90.6177. Time: 569.2145 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #26: GFLOPs: 49.1356. Time: 1049.7661 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #27: GFLOPs: 2.9979. Time: 17205.5013 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #28: GFLOPs: 18.5328. Time: 2783.2307 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #29: GFLOPs: 43.4424. Time: 1187.3415 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #30: GFLOPs: 64.1284. Time: 804.3384 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #31: GFLOPs: 64.9082. Time: 794.6756 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #32: GFLOPs: 101.1766. Time: 509.8110 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #33: GFLOPs: 102.6311. Time: 502.5859 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #34: GFLOPs: 186.0478. Time: 277.2456 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #35: GFLOPs: 55.5835. Time: 927.9892 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #36: GFLOPs: 89.4180. Time: 576.8519 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #37: GFLOPs: 84.3450. Time: 611.5468 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #38: GFLOPs: 56.8828. Time: 906.7935 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #39: GFLOPs: 82.5908. Time: 624.5362 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #40: GFLOPs: 155.2350. Time: 332.2764 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #41: GFLOPs: 24.3165. Time: 2121.2276 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #42: GFLOPs: 20.0211. Time: 2576.3301 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #43: GFLOPs: 63.7674. Time: 808.8921 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #44: GFLOPs: 25.1416. Time: 2051.6176 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #45: GFLOPs: 95.0622. Time: 542.6017 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #47: GFLOPs: 59.5284. Time: 866.4925 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #48: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(2) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #49: GFLOPs: 27.6574. Time: 1864.9926 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #50: GFLOPs: 35.4569. Time: 1454.7502 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #51: GFLOPs: 70.3652. Time: 733.0465 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #52: GFLOPs: 108.2167. Time: 476.6449 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #53: GFLOPs: 118.7158. Time: 434.4910 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #54: GFLOPs: 53.2149. Time: 969.2956 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #55: GFLOPs: 50.8123. Time: 1015.1266 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #56: GFLOPs: 62.3751. Time: 826.9473 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #57: GFLOPs: 37.4912. Time: 1375.8138 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #58: GFLOPs: 11.7039. Time: 4407.1424 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #59: GFLOPs: 70.9285. Time: 727.2239 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #60: GFLOPs: 32.6828. Time: 1578.2296 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #61: GFLOPs: 0.2441. Time: 211340.8893 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #62: GFLOPs: 24.7187. Time: 2086.7138 us. Best GFLOPs: 187.2528
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 15:07:41 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #64: GFLOPs: 72.0889. Time: 715.5180 us. Best GFLOPs: 187.2528
2024-04-29 15:26:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:26:56 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 15:26:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 15:26:58 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 15:27:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 15:27:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 15:27:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 15:27:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 15:27:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9734  0.9552  0.9454  0.8319  0.8319  0.8107  0.8074  0.7998  0.7972  0.7963  0.7868  0.7868  0.7855  0.7826  0.7820  0.7620
[17 : 32]:	0.7620  0.7562  0.7558  0.7558  0.7549  0.7509  0.7509  0.7450  0.7356  0.7310  0.7260  0.7204  0.7179  0.7144  0.7140  0.7133
[33 : 48]:	0.7131  0.7120  0.7120  0.7112  0.7097  0.7083  0.7067  0.7067  0.7041  0.7025  0.7000  0.7000  0.6999  0.6984  0.6960  0.6850
[49 : 64]:	0.6843  0.6835  0.6832  0.6830  0.6827  0.6821  0.6802  0.6802  0.6793  0.6768  0.6767  0.6750  0.6737  0.6726  0.6726  0.6696
2024-04-29 15:27:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:27:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #65: GFLOPs: 194.5705. Time: 265.1014 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #66: GFLOPs: 160.7666. Time: 320.8436 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #67: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(4) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #68: GFLOPs: 180.8811. Time: 285.1648 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #69: GFLOPs: 178.4892. Time: 288.9863 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #70: GFLOPs: 111.6788. Time: 461.8686 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #71: GFLOPs: 149.7016. Time: 344.5584 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #72: GFLOPs: 48.2668. Time: 1068.6628 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #73: GFLOPs: 101.0193. Time: 510.6046 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #74: GFLOPs: 107.9164. Time: 477.9713 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #75: GFLOPs: 150.5759. Time: 342.5576 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #76: GFLOPs: 166.0336. Time: 310.6655 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #77: GFLOPs: 135.8913. Time: 379.5750 us. Best GFLOPs: 194.5705
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #78: GFLOPs: 223.4191. Time: 230.8707 us. Best GFLOPs: 223.4191
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #79: GFLOPs: 100.4564. Time: 513.4656 us. Best GFLOPs: 223.4191
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #80: GFLOPs: 238.3719. Time: 216.3884 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #81: GFLOPs: 227.9813. Time: 226.2507 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #82: GFLOPs: 178.2288. Time: 289.4085 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #83: GFLOPs: 192.5174. Time: 267.9286 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #84: GFLOPs: 110.0867. Time: 468.5483 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #85: GFLOPs: 98.7784. Time: 522.1882 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #86: GFLOPs: 200.4678. Time: 257.3028 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #87: GFLOPs: 174.1839. Time: 296.1292 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #88: GFLOPs: 177.2318. Time: 291.0365 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #89: GFLOPs: 139.9177. Time: 368.6519 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #90: GFLOPs: 74.7910. Time: 689.6679 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #91: GFLOPs: 14.6197. Time: 3528.1891 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #92: GFLOPs: 101.7884. Time: 506.7468 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #93: GFLOPs: 128.1383. Time: 402.5411 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #94: GFLOPs: 152.6344. Time: 337.9377 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #95: GFLOPs: 121.5991. Time: 424.1884 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #96: GFLOPs: 160.8531. Time: 320.6710 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #97: GFLOPs: 70.3036. Time: 733.6883 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #98: GFLOPs: 63.0536. Time: 818.0490 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #99: GFLOPs: 20.8474. Time: 2474.2110 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #100: GFLOPs: 67.1919. Time: 767.6661 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #101: GFLOPs: 115.1979. Time: 447.7595 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #102: GFLOPs: 158.7763. Time: 324.8653 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #103: GFLOPs: 120.4793. Time: 428.1309 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #104: GFLOPs: 148.4493. Time: 347.4649 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #105: GFLOPs: 182.8558. Time: 282.0852 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #106: GFLOPs: 175.9311. Time: 293.1882 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #107: GFLOPs: 118.0523. Time: 436.9329 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #108: GFLOPs: 118.7988. Time: 434.1875 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #109: GFLOPs: 173.9737. Time: 296.4870 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #110: GFLOPs: 155.8555. Time: 330.9536 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #111: GFLOPs: 116.9962. Time: 440.8769 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #112: GFLOPs: 94.4152. Time: 546.3204 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #113: GFLOPs: 121.7492. Time: 423.6653 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #114: GFLOPs: 86.5946. Time: 595.6601 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #115: GFLOPs: 154.5567. Time: 333.7347 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #116: GFLOPs: 165.8039. Time: 311.0961 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #117: GFLOPs: 167.1612. Time: 308.5699 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #118: GFLOPs: 84.6313. Time: 609.4781 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #119: GFLOPs: 159.4299. Time: 323.5336 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #120: GFLOPs: 148.7378. Time: 346.7910 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #121: GFLOPs: 73.1551. Time: 705.0902 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #122: GFLOPs: 102.9706. Time: 500.9288 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #123: GFLOPs: 100.2857. Time: 514.3399 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #124: GFLOPs: 79.9841. Time: 644.8896 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #125: GFLOPs: 107.7469. Time: 478.7229 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #126: GFLOPs: 6.6038. Time: 7810.7733 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #127: GFLOPs: 14.5820. Time: 3537.3129 us. Best GFLOPs: 238.3719
2024-04-29 15:28:48 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #128: GFLOPs: 40.4934. Time: 1273.8098 us. Best GFLOPs: 238.3719
2024-04-29 16:09:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:09:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:10:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:10:00 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:10:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:10:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:10:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:10:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:10:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9537  0.9438  0.9408  0.9346  0.9316  0.9186  0.8805  0.8797  0.8769  0.8616  0.8616  0.8596  0.8577  0.8517  0.8507  0.8485
[17 : 32]:	0.8438  0.8325  0.8325  0.8325  0.8311  0.8310  0.8242  0.8201  0.8087  0.8027  0.7992  0.7959  0.7816  0.7761  0.7750  0.7711
[33 : 48]:	0.7676  0.7637  0.7585  0.7581  0.7537  0.7442  0.7442  0.7438  0.7420  0.7411  0.7371  0.7369  0.7338  0.7295  0.7295  0.7241
[49 : 64]:	0.7209  0.7176  0.7150  0.7128  0.7123  0.7075  0.7067  0.7065  0.7056  0.7029  0.7025  0.7021  0.6981  0.6976  0.6976  0.6965
2024-04-29 16:10:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:10:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #129: GFLOPs: 234.8641. Time: 219.6203 us. Best GFLOPs: 238.3719
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #130: GFLOPs: 247.0231. Time: 208.8102 us. Best GFLOPs: 247.0231
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #131: GFLOPs: 225.8471. Time: 228.3887 us. Best GFLOPs: 247.0231
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #132: GFLOPs: 213.6240. Time: 241.4566 us. Best GFLOPs: 247.0231
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #133: GFLOPs: 200.0587. Time: 257.8290 us. Best GFLOPs: 247.0231
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #134: GFLOPs: 226.2455. Time: 227.9865 us. Best GFLOPs: 247.0231
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #135: GFLOPs: 255.6602. Time: 201.7558 us. Best GFLOPs: 255.6602
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #136: GFLOPs: 220.2592. Time: 234.1828 us. Best GFLOPs: 255.6602
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #137: GFLOPs: 263.3106. Time: 195.8938 us. Best GFLOPs: 263.3106
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #138: GFLOPs: 262.7992. Time: 196.2751 us. Best GFLOPs: 263.3106
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #139: GFLOPs: 263.8926. Time: 195.4618 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #140: GFLOPs: 202.8888. Time: 254.2325 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #141: GFLOPs: 179.6087. Time: 287.1849 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #142: GFLOPs: 239.4078. Time: 215.4522 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #143: GFLOPs: 207.6509. Time: 248.4022 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #144: GFLOPs: 162.3995. Time: 317.6175 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #145: GFLOPs: 240.7967. Time: 214.2095 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #146: GFLOPs: 161.6809. Time: 319.0291 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #147: GFLOPs: 140.0928. Time: 368.1912 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #148: GFLOPs: 203.7007. Time: 253.2192 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #149: GFLOPs: 235.5066. Time: 219.0212 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #150: GFLOPs: 115.7065. Time: 445.7910 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #151: GFLOPs: 210.2816. Time: 245.2946 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #152: GFLOPs: 179.8460. Time: 286.8061 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #153: GFLOPs: 167.4044. Time: 308.1216 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #154: GFLOPs: 114.8104. Time: 449.2706 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #155: GFLOPs: 137.0144. Time: 376.4634 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #156: GFLOPs: 197.1619. Time: 261.6171 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #157: GFLOPs: 246.9706. Time: 208.8546 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #158: GFLOPs: 182.0476. Time: 283.3376 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #159: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(14) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(224) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(224) // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #160: GFLOPs: 158.9282. Time: 324.5550 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #161: GFLOPs: 147.2228. Time: 350.3597 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #162: GFLOPs: 159.8545. Time: 322.6743 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #163: GFLOPs: 131.5736. Time: 392.0309 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #164: GFLOPs: 157.0539. Time: 328.4281 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #165: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(56) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(56) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(56) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #166: GFLOPs: 124.0548. Time: 415.7914 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #167: GFLOPs: 129.9766. Time: 396.8478 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #168: GFLOPs: 193.9840. Time: 265.9030 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #169: GFLOPs: 150.9908. Time: 341.6163 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #170: GFLOPs: 120.9426. Time: 426.4911 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #171: GFLOPs: 155.8229. Time: 331.0228 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #172: GFLOPs: 128.0171. Time: 402.9221 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #173: GFLOPs: 146.2575. Time: 352.6720 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #174: GFLOPs: 70.5456. Time: 731.1719 us. Best GFLOPs: 263.8926
2024-04-29 16:11:54 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #175: GFLOPs: 70.4761. Time: 731.8926 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #176: GFLOPs: 146.3515. Time: 352.4455 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #177: GFLOPs: 144.2685. Time: 357.5341 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #178: GFLOPs: 119.2618. Time: 432.5016 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #179: GFLOPs: 129.9930. Time: 396.7976 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #180: GFLOPs: 189.5260. Time: 272.1575 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #181: GFLOPs: 87.7767. Time: 587.6381 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #182: GFLOPs: 151.0228. Time: 341.5439 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #183: GFLOPs: 115.4073. Time: 446.9467 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #184: GFLOPs: 19.0700. Time: 2704.8183 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #185: GFLOPs: 208.3001. Time: 247.6279 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #186: GFLOPs: 178.1746. Time: 289.4965 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #187: GFLOPs: 140.1509. Time: 368.0384 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #188: GFLOPs: 214.8994. Time: 240.0236 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #189: GFLOPs: 211.1312. Time: 244.3074 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #190: GFLOPs: 90.3359. Time: 570.9906 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #191: GFLOPs: 6.7729. Time: 7615.8319 us. Best GFLOPs: 263.8926
2024-04-29 16:11:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #192: GFLOPs: 61.3348. Time: 840.9728 us. Best GFLOPs: 263.8926
2024-04-29 16:57:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:57:31 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:57:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:57:33 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:57:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:57:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 16:57:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9933  0.9720  0.9715  0.9703  0.9666  0.9541  0.9369  0.8965  0.8886  0.8804  0.8786  0.8732  0.8599  0.8564  0.8467  0.8330
[17 : 32]:	0.8330  0.8316  0.8308  0.8287  0.8272  0.8188  0.8094  0.8038  0.8038  0.7966  0.7918  0.7914  0.7870  0.7716  0.7703  0.7614
[33 : 48]:	0.7600  0.7590  0.7590  0.7584  0.7566  0.7549  0.7517  0.7503  0.7476  0.7448  0.7444  0.7424  0.7398  0.7392  0.7358  0.7356
[49 : 64]:	0.7356  0.7336  0.7317  0.7312  0.7312  0.7301  0.7271  0.7204  0.7204  0.7181  0.7169  0.7148  0.7112  0.7087  0.6998  0.6992
2024-04-29 16:57:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:57:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #193: GFLOPs: 130.1125. Time: 396.4332 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #194: GFLOPs: 240.3409. Time: 214.6157 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #195: GFLOPs: 236.2386. Time: 218.3425 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #196: GFLOPs: 236.8454. Time: 217.7831 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #197: GFLOPs: 260.7050. Time: 197.8517 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #198: GFLOPs: 248.3341. Time: 207.7078 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #199: GFLOPs: 248.2051. Time: 207.8158 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #200: GFLOPs: 224.4763. Time: 229.7834 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #201: GFLOPs: 125.8216. Time: 409.9527 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #202: GFLOPs: 229.0840. Time: 225.1616 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #203: GFLOPs: 256.6748. Time: 200.9583 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #204: GFLOPs: 206.3552. Time: 249.9619 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #205: GFLOPs: 255.8087. Time: 201.6387 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #206: GFLOPs: 184.9275. Time: 278.9251 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #207: GFLOPs: 238.3371. Time: 216.4201 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #208: GFLOPs: 148.4512. Time: 347.4605 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #209: GFLOPs: 212.9917. Time: 242.1734 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #210: GFLOPs: 180.3109. Time: 286.0667 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #211: GFLOPs: 226.3487. Time: 227.8826 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #212: GFLOPs: 255.1722. Time: 202.1416 us. Best GFLOPs: 263.8926
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #213: GFLOPs: 271.9383. Time: 189.6788 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #214: GFLOPs: 270.0513. Time: 191.0042 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #215: GFLOPs: 201.8947. Time: 255.4843 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #216: GFLOPs: 270.8283. Time: 190.4562 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #217: GFLOPs: 181.7403. Time: 283.8166 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #218: GFLOPs: 181.2694. Time: 284.5540 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #219: GFLOPs: 247.6832. Time: 208.2536 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #220: GFLOPs: 185.9167. Time: 277.4411 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #221: GFLOPs: 208.7701. Time: 247.0705 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #222: GFLOPs: 232.8036. Time: 221.5641 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #223: GFLOPs: 184.4730. Time: 279.6124 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #224: GFLOPs: 188.6013. Time: 273.4919 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #225: GFLOPs: 200.1255. Time: 257.7430 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #226: GFLOPs: 226.2232. Time: 228.0090 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #227: GFLOPs: 94.1887. Time: 547.6340 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #228: GFLOPs: 148.2877. Time: 347.8436 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #229: GFLOPs: 202.4198. Time: 254.8216 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #230: GFLOPs: 191.7285. Time: 269.0312 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #231: GFLOPs: 195.0501. Time: 264.4497 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #232: GFLOPs: 156.4001. Time: 329.8010 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #233: GFLOPs: 252.6726. Time: 204.1414 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #234: GFLOPs: 232.3992. Time: 221.9496 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #235: GFLOPs: 202.7447. Time: 254.4132 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #236: GFLOPs: 152.8979. Time: 337.3554 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #237: GFLOPs: 250.6054. Time: 205.8253 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #238: GFLOPs: 189.9498. Time: 271.5502 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #239: GFLOPs: 233.2625. Time: 221.1283 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #240: GFLOPs: 158.6268. Time: 325.1716 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #241: GFLOPs: 216.5355. Time: 238.2100 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #242: GFLOPs: 167.9062. Time: 307.2009 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #243: GFLOPs: 185.0788. Time: 278.6971 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #244: GFLOPs: 194.5203. Time: 265.1699 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #245: GFLOPs: 194.3636. Time: 265.3837 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #246: GFLOPs: 219.2888. Time: 235.2192 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #247: GFLOPs: 234.7859. Time: 219.6935 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #248: GFLOPs: 166.9448. Time: 308.9699 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #249: GFLOPs: 154.2262. Time: 334.4499 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #250: GFLOPs: 259.2284. Time: 198.9787 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #251: GFLOPs: 255.1450. Time: 202.1632 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #252: GFLOPs: 222.2827. Time: 232.0510 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #253: GFLOPs: 253.5922. Time: 203.4011 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #254: GFLOPs: 30.7496. Time: 1677.4482 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #255: GFLOPs: 61.1774. Time: 843.1363 us. Best GFLOPs: 271.9383
2024-04-29 16:59:38 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #256: GFLOPs: 50.8690. Time: 1013.9956 us. Best GFLOPs: 271.9383
2024-04-29 17:20:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:20:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:20:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 17:20:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:20:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 17:20:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 17:20:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 17:20:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 17:20:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9864  0.9558  0.9527  0.9388  0.9365  0.9332  0.9327  0.9327  0.9292  0.9292  0.9292  0.9283  0.9250  0.9225  0.9223  0.9201
[17 : 32]:	0.9154  0.9121  0.8933  0.8885  0.8885  0.8813  0.8813  0.8796  0.8793  0.8775  0.8761  0.8761  0.8755  0.8736  0.8726  0.8726
[33 : 48]:	0.8726  0.8726  0.8726  0.8726  0.8705  0.8700  0.8672  0.8671  0.8660  0.8624  0.8589  0.8583  0.8580  0.8580  0.8572  0.8568
[49 : 64]:	0.8568  0.8552  0.8545  0.8541  0.8519  0.8517  0.8503  0.8501  0.8501  0.8494  0.8490  0.8474  0.8453  0.8452  0.8447  0.8381
2024-04-29 17:20:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:20:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #257: GFLOPs: 234.2863. Time: 220.1619 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #258: GFLOPs: 250.5878. Time: 205.8397 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #259: GFLOPs: 239.6965. Time: 215.1927 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #260: GFLOPs: 230.4492. Time: 223.8278 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #261: GFLOPs: 243.9375. Time: 211.4514 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #262: GFLOPs: 248.6155. Time: 207.4727 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #263: GFLOPs: 266.6516. Time: 193.4394 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #264: GFLOPs: 257.3250. Time: 200.4505 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #265: GFLOPs: 237.8006. Time: 216.9083 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #266: GFLOPs: 235.8552. Time: 218.6975 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #267: GFLOPs: 255.8339. Time: 201.6188 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #268: GFLOPs: 251.9188. Time: 204.7522 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #269: GFLOPs: 229.7011. Time: 224.5567 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #270: GFLOPs: 249.9785. Time: 206.3415 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #271: GFLOPs: 235.6137. Time: 218.9216 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #272: GFLOPs: 220.6877. Time: 233.7281 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #273: GFLOPs: 111.5686. Time: 462.3247 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #274: GFLOPs: 165.8018. Time: 311.0999 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #275: GFLOPs: 227.8522. Time: 226.3789 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #276: GFLOPs: 204.0813. Time: 252.7469 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #277: GFLOPs: 196.4211. Time: 262.6038 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #278: GFLOPs: 218.8804. Time: 235.6581 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #279: GFLOPs: 118.1087. Time: 436.7241 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #280: GFLOPs: 107.8403. Time: 478.3083 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #281: GFLOPs: 246.8496. Time: 208.9569 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #282: GFLOPs: 174.5961. Time: 295.4300 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #283: GFLOPs: 233.5700. Time: 220.8372 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #284: GFLOPs: 226.2887. Time: 227.9430 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #285: GFLOPs: 128.7472. Time: 400.6372 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #286: GFLOPs: 158.7587. Time: 324.9014 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #287: GFLOPs: 227.3975. Time: 226.8315 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #288: GFLOPs: 249.8850. Time: 206.4187 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #289: GFLOPs: 241.7854. Time: 213.3335 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #290: GFLOPs: 228.9480. Time: 225.2954 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #291: GFLOPs: 244.3865. Time: 211.0629 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #292: GFLOPs: 242.7712. Time: 212.4673 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #293: GFLOPs: 189.9492. Time: 271.5512 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #294: GFLOPs: 219.7201. Time: 234.7574 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #295: GFLOPs: 240.7112. Time: 214.2855 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #296: GFLOPs: 146.5097. Time: 352.0651 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #297: GFLOPs: 175.7226. Time: 293.5361 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #298: GFLOPs: 194.9512. Time: 264.5839 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #299: GFLOPs: 189.8984. Time: 271.6237 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #300: GFLOPs: 211.2636. Time: 244.1543 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #301: GFLOPs: 215.1575. Time: 239.7357 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #302: GFLOPs: 126.2634. Time: 408.5184 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #303: GFLOPs: 113.0020. Time: 456.4603 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #304: GFLOPs: 180.6964. Time: 285.4563 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #305: GFLOPs: 226.2358. Time: 227.9963 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #306: GFLOPs: 117.4096. Time: 439.3248 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #307: GFLOPs: 113.5997. Time: 454.0587 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #308: GFLOPs: 218.3142. Time: 236.2693 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #309: GFLOPs: 125.6566. Time: 410.4912 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #310: GFLOPs: 166.8841. Time: 309.0823 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #311: GFLOPs: 222.6997. Time: 231.6165 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #312: GFLOPs: 245.3485. Time: 210.2354 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #313: GFLOPs: 164.2140. Time: 314.1081 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #314: GFLOPs: 238.4273. Time: 216.3382 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #315: GFLOPs: 161.8256. Time: 318.7440 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #316: GFLOPs: 159.8281. Time: 322.7276 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #317: GFLOPs: 157.5747. Time: 327.3426 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #318: GFLOPs: 17.6730. Time: 2918.6340 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #319: GFLOPs: 1.2159. Time: 42423.3067 us. Best GFLOPs: 271.9383
2024-04-29 17:21:55 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #320: GFLOPs: 102.5047. Time: 503.2056 us. Best GFLOPs: 271.9383
2024-04-29 18:13:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:13:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:13:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 18:13:21 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:13:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 18:13:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 18:13:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 18:13:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6068818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3478508)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x653ee78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x334fba8)]: 0 failure(s)
2024-04-29 18:13:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9246  0.9124  0.9124  0.9070  0.8998  0.8985  0.8919  0.8919  0.8863  0.8812  0.8812  0.8812  0.8812  0.8808  0.8729  0.8617
[17 : 32]:	0.8598  0.8585  0.8561  0.8560  0.8515  0.8468  0.8468  0.8376  0.8372  0.8372  0.8359  0.8309  0.8283  0.8282  0.8264  0.8219
[33 : 48]:	0.8200  0.8181  0.8091  0.8065  0.8054  0.8054  0.8054  0.8042  0.8033  0.7987  0.7960  0.7920  0.7917  0.7897  0.7895  0.7874
[49 : 64]:	0.7874  0.7800  0.7780  0.7779  0.7776  0.7774  0.7769  0.7751  0.7745  0.7741  0.7732  0.7727  0.7723  0.7708  0.7704  0.7701
2024-04-29 18:13:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:13:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #321: GFLOPs: 248.8573. Time: 207.2711 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #322: GFLOPs: 243.0898. Time: 212.1888 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #323: GFLOPs: 251.4630. Time: 205.1234 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #324: GFLOPs: 252.5281. Time: 204.2582 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #325: GFLOPs: 251.8771. Time: 204.7861 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #326: GFLOPs: 250.7222. Time: 205.7294 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #327: GFLOPs: 123.1267. Time: 418.9257 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #328: GFLOPs: 238.4444. Time: 216.3227 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #329: GFLOPs: 226.3457. Time: 227.8856 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #330: GFLOPs: 228.2893. Time: 225.9455 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #331: GFLOPs: 228.2024. Time: 226.0315 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #332: GFLOPs: 250.4655. Time: 205.9402 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #333: GFLOPs: 242.8934. Time: 212.3603 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #334: GFLOPs: 265.1228. Time: 194.5548 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #335: GFLOPs: 131.1306. Time: 393.3554 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #336: GFLOPs: 131.4168. Time: 392.4987 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #337: GFLOPs: 222.9508. Time: 231.3557 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #338: GFLOPs: 245.2075. Time: 210.3562 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #339: GFLOPs: 198.0110. Time: 260.4952 us. Best GFLOPs: 271.9383
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #340: GFLOPs: 274.4672. Time: 187.9311 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #341: GFLOPs: 128.5828. Time: 401.1495 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #342: GFLOPs: 245.5707. Time: 210.0451 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #343: GFLOPs: 245.2065. Time: 210.3571 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #344: GFLOPs: 234.8954. Time: 219.5911 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #345: GFLOPs: 234.3909. Time: 220.0637 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #346: GFLOPs: 234.6350. Time: 219.8348 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #347: GFLOPs: 180.7606. Time: 285.3549 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #348: GFLOPs: 205.3105. Time: 251.2337 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #349: GFLOPs: 235.8313. Time: 218.7196 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #350: GFLOPs: 154.4550. Time: 333.9545 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #351: GFLOPs: 236.1569. Time: 218.4181 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #352: GFLOPs: 162.4759. Time: 317.4683 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #353: GFLOPs: 193.6523. Time: 266.3584 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #354: GFLOPs: 252.7873. Time: 204.0487 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #355: GFLOPs: 238.0657. Time: 216.6668 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #356: GFLOPs: 242.3976. Time: 212.7947 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #357: GFLOPs: 175.2068. Time: 294.4002 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #358: GFLOPs: 186.6083. Time: 276.4129 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #359: GFLOPs: 249.7750. Time: 206.5095 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #360: GFLOPs: 230.9420. Time: 223.3501 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #361: GFLOPs: 242.7851. Time: 212.4550 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #362: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=224)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #363: GFLOPs: 233.9202. Time: 220.5065 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #364: GFLOPs: 207.0756. Time: 249.0922 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #365: GFLOPs: 203.2092. Time: 253.8317 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #366: GFLOPs: 200.8034. Time: 256.8728 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #367: GFLOPs: 192.2554. Time: 268.2937 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #368: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(12544), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #369: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(12544), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(448) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #370: GFLOPs: 250.6936. Time: 205.7529 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #371: GFLOPs: 203.5554. Time: 253.3999 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #372: GFLOPs: 134.2425. Time: 384.2368 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #373: GFLOPs: 268.3311. Time: 192.2286 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #374: GFLOPs: 246.3984. Time: 209.3396 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #375: GFLOPs: 224.9524. Time: 229.2971 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #376: GFLOPs: 165.6282. Time: 311.4260 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #377: GFLOPs: 198.5443. Time: 259.7956 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #378: GFLOPs: 207.7767. Time: 248.2518 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #379: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(1568) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(1568) // T.int64(112) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(1568) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(1568) // T.int64(112) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(1568) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(1568) // T.int64(112) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b67)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b104)
b123 = sch.decompose_reduction(block=b104, loop=l107)
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #380: GFLOPs: 181.2459. Time: 284.5908 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #381: GFLOPs: 237.0258. Time: 217.6173 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #382: GFLOPs: 35.4146. Time: 1456.4885 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #383: GFLOPs: 71.6343. Time: 720.0590 us. Best GFLOPs: 274.4672
2024-04-29 18:15:29 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #384: GFLOPs: 89.4073. Time: 576.9207 us. Best GFLOPs: 274.4672
