2024-04-29 13:18:53 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d"
2024-04-29 13:18:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(9), T.int64(9), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(208), T.int64(9), T.int64(9), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(8) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(8), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:18:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:18:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(9), T.int64(9), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(9)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(208), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0 // T.int64(3) + ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(9), ax3 + rv0_rv1_fused_0 % T.int64(3) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(8) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(8), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:18:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(9), T.int64(9), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(208), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(9), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(9), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(8) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(8), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:18:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0 - T.int64(1), v_ax3 + v_rv1 - T.int64(1), v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.if_then_else(T.int64(1) <= v_ax2 + v_rv0 and v_ax2 + v_rv0 < T.int64(8) and T.int64(1) <= v_ax3 + v_rv1 and v_ax3 + v_rv1 < T.int64(8), p0[v_ax0, v_ax1, v_ax2 + v_rv0 - T.int64(1), v_ax3 + v_rv1 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 13:29:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:29:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:29:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68e5778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30afdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5f156f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a4a598)]: 0 failure(s)
2024-04-29 13:29:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:29:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68e5778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30afdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5f156f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a4a598)]: 0 failure(s)
2024-04-29 13:29:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68e5778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30afdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5f156f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a4a598)]: 0 failure(s)
2024-04-29 13:29:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68e5778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30afdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5f156f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a4a598)]: 0 failure(s)
2024-04-29 13:29:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x68e5778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30afdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5f156f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a4a598)]: 0 failure(s)
2024-04-29 13:29:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9948  0.9938  0.9907  0.9864  0.9844  0.9832  0.9736  0.9735  0.9714  0.9623  0.9593  0.9559  0.9554  0.9530  0.9457
[17 : 32]:	0.9435  0.9431  0.9419  0.9384  0.9370  0.9339  0.9330  0.9233  0.9156  0.9154  0.9059  0.8946  0.8938  0.8926  0.8879  0.8873
[33 : 48]:	0.8873  0.8836  0.8830  0.8714  0.8632  0.8598  0.8499  0.8370  0.8341  0.8317  0.8314  0.8266  0.8264  0.8205  0.8174  0.8141
[49 : 64]:	0.8095  0.8034  0.7956  0.7928  0.7878  0.7869  0.7828  0.7816  0.7804  0.7770  0.7707  0.7700  0.7697  0.7596  0.7526  0.7460
2024-04-29 13:29:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:29:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #1: GFLOPs: 10.2808. Time: 35.6889 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #2: GFLOPs: 7.6091. Time: 48.2204 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #3: GFLOPs: 9.5379. Time: 38.4689 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #4: GFLOPs: 4.3104. Time: 85.1226 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #5: GFLOPs: 5.2471. Time: 69.9262 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #6: GFLOPs: 10.1420. Time: 36.1774 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #7: GFLOPs: 9.2787. Time: 39.5436 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #8: GFLOPs: 6.4154. Time: 57.1927 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #9: GFLOPs: 5.5469. Time: 66.1467 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #10: GFLOPs: 9.1870. Time: 39.9383 us. Best GFLOPs: 10.2808
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #11: GFLOPs: 14.5782. Time: 25.1686 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #12: GFLOPs: 5.4832. Time: 66.9163 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #13: GFLOPs: 11.2364. Time: 32.6538 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #14: GFLOPs: 9.4294. Time: 38.9114 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #15: GFLOPs: 10.9272. Time: 33.5778 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #16: GFLOPs: 8.2773. Time: 44.3277 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_max_pool2d] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(9), T.int64(9), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1872)):
            for ax3_ax4_fused in T.vectorized(T.int64(36)):
                with T.block("pad_temp"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(9))
                    v_ax2 = T.axis.spatial(T.int64(9), ax0_ax1_ax2_fused % T.int64(9))
                    v_ax3 = T.axis.spatial(T.int64(9), ax3_ax4_fused // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(8) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(8), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1456), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(7), T.int64(4), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1456), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26 = sch.get_loops(block=b19)
l27 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l27)
l28 = sch.fuse(l25, l26, preserve_unit_iters=True)
sch.vectorize(loop=l28)
l29, l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b20)
l36 = sch.fuse(l29, l30, l31, preserve_unit_iters=True)
sch.parallel(loop=l36)
sch.annotate(block_or_loop=l36, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l36, ann_key="pragma_unroll_explicit", ann_val=1)
l37, l38, l39, l40, l41, l42 = sch.get_loops(block=b21)
l43 = sch.fuse(l37, l38, l39, preserve_unit_iters=True)
sch.parallel(loop=l43)
sch.annotate(block_or_loop=l43, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l43, ann_key="pragma_unroll_explicit", ann_val=1)
b44 = sch.get_block(name="pool_max_rf", func_name="main")
l45, l46, l47, l48, l49 = sch.get_loops(block=b44)
b50 = sch.decompose_reduction(block=b44, loop=l49)
b51 = sch.get_block(name="pool_max", func_name="main")
l52, l53, l54, l55 = sch.get_loops(block=b51)
b56 = sch.decompose_reduction(block=b51, loop=l55)
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #18: GFLOPs: 11.8359. Time: 30.9999 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #19: GFLOPs: 9.9563. Time: 36.8521 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #20: GFLOPs: 11.6296. Time: 31.5498 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #21: GFLOPs: 7.9419. Time: 46.1998 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #22: GFLOPs: 13.6111. Time: 26.9568 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #23: GFLOPs: 8.9995. Time: 40.7705 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #24: GFLOPs: 11.2757. Time: 32.5400 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #25: GFLOPs: 9.3754. Time: 39.1355 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #26: GFLOPs: 11.3154. Time: 32.4260 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #27: GFLOPs: 8.7395. Time: 41.9833 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #28: GFLOPs: 11.4289. Time: 32.1039 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #29: GFLOPs: 9.1214. Time: 40.2256 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #30: GFLOPs: 7.8454. Time: 46.7675 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #31: GFLOPs: 5.6383. Time: 65.0755 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #32: GFLOPs: 5.8667. Time: 62.5417 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #33: GFLOPs: 8.1797. Time: 44.8563 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #34: GFLOPs: 7.4373. Time: 49.3340 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #35: GFLOPs: 9.3524. Time: 39.2319 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #36: GFLOPs: 9.8406. Time: 37.2857 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #37: GFLOPs: 9.8872. Time: 37.1097 us. Best GFLOPs: 14.5782
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #38: GFLOPs: 26.1887. Time: 14.0103 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #39: GFLOPs: 8.9388. Time: 41.0472 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #40: GFLOPs: 10.9423. Time: 33.5314 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #41: GFLOPs: 13.2604. Time: 27.6697 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #42: GFLOPs: 6.8052. Time: 53.9162 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #43: GFLOPs: 7.7928. Time: 47.0835 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #44: GFLOPs: 11.8591. Time: 30.9392 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #45: GFLOPs: 15.0984. Time: 24.3014 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #46: GFLOPs: 9.0540. Time: 40.5246 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #47: GFLOPs: 5.3143. Time: 69.0422 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #48: GFLOPs: 10.6021. Time: 34.6074 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #49: GFLOPs: 7.1082. Time: 51.6183 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #50: GFLOPs: 10.1190. Time: 36.2595 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #51: GFLOPs: 9.6732. Time: 37.9308 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #52: GFLOPs: 10.0365. Time: 36.5579 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #53: GFLOPs: 15.3878. Time: 23.8443 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #54: GFLOPs: 5.5354. Time: 66.2851 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #55: GFLOPs: 6.7261. Time: 54.5503 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #56: GFLOPs: 7.2851. Time: 50.3648 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #57: GFLOPs: 8.6806. Time: 42.2680 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #58: GFLOPs: 7.8011. Time: 47.0335 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_max_pool2d] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(208), T.int64(7), T.int64(7), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1456), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(7), T.int64(4), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], T.if_then_else(T.int64(1) <= v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3) and v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3) < T.int64(8) and T.int64(1) <= v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3) and v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3) < T.int64(8), p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1456), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(208), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20 = sch.get_child_blocks(b18)
l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b19)
l28 = sch.fuse(l21, l22, l23, preserve_unit_iters=True)
sch.parallel(loop=l28)
sch.annotate(block_or_loop=l28, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l28, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b20)
l35 = sch.fuse(l29, l30, l31, preserve_unit_iters=True)
sch.parallel(loop=l35)
sch.annotate(block_or_loop=l35, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l35, ann_key="pragma_unroll_explicit", ann_val=1)
b36 = sch.get_block(name="pool_max_rf", func_name="main")
l37, l38, l39, l40, l41 = sch.get_loops(block=b36)
b42 = sch.decompose_reduction(block=b36, loop=l41)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47 = sch.get_loops(block=b43)
b48 = sch.decompose_reduction(block=b43, loop=l47)
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #60: GFLOPs: 7.8267. Time: 46.8796 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #61: GFLOPs: 8.9724. Time: 40.8932 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #62: GFLOPs: 11.4359. Time: 32.0843 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #63: GFLOPs: 10.2497. Time: 35.7973 us. Best GFLOPs: 26.1887
2024-04-29 15:03:58 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #64: GFLOPs: 22.0709. Time: 16.6242 us. Best GFLOPs: 26.1887
