2024-04-29 13:20:09 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19"
2024-04-29 13:20:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:20:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:20:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:58:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:58:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:58:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 13:58:27 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:58:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 13:58:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 13:58:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 13:58:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 13:58:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9990  0.9988  0.9988  0.9986  0.9986  0.9985  0.9972  0.9966  0.9947  0.9941  0.9935  0.9935  0.9930  0.9928
[17 : 32]:	0.9920  0.9905  0.9901  0.9893  0.9893  0.9869  0.9865  0.9861  0.9861  0.9848  0.9846  0.9828  0.9827  0.9825  0.9820  0.9815
[33 : 48]:	0.9814  0.9810  0.9802  0.9796  0.9794  0.9793  0.9787  0.9785  0.9772  0.9765  0.9760  0.9757  0.9756  0.9753  0.9741  0.9737
[49 : 64]:	0.9728  0.9721  0.9716  0.9709  0.9700  0.9695  0.9688  0.9686  0.9681  0.9678  0.9678  0.9670  0.9669  0.9667  0.9665  0.9660
2024-04-29 13:58:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:58:40 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #1: GFLOPs: 13.6264. Time: 944.4986 us. Best GFLOPs: 13.6264
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #2: GFLOPs: 43.0600. Time: 298.8886 us. Best GFLOPs: 43.0600
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #3: GFLOPs: 47.0125. Time: 273.7599 us. Best GFLOPs: 47.0125
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #4: GFLOPs: 4.1544. Time: 3097.9200 us. Best GFLOPs: 47.0125
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #5: GFLOPs: 52.3347. Time: 245.9198 us. Best GFLOPs: 52.3347
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #6: GFLOPs: 33.7222. Time: 381.6525 us. Best GFLOPs: 52.3347
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #7: GFLOPs: 47.9465. Time: 268.4270 us. Best GFLOPs: 52.3347
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #8: GFLOPs: 107.2696. Time: 119.9794 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #9: GFLOPs: 65.1242. Time: 197.6245 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #10: GFLOPs: 47.9869. Time: 268.2013 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #11: GFLOPs: 3.7628. Time: 3420.3739 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #12: GFLOPs: 5.6759. Time: 2267.4963 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #13: GFLOPs: 41.9737. Time: 306.6236 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #14: GFLOPs: 17.8204. Time: 722.2149 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #15: GFLOPs: 49.2314. Time: 261.4214 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #16: GFLOPs: 3.0155. Time: 4268.0662 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #17: GFLOPs: 95.4544. Time: 134.8302 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #18: GFLOPs: 44.6063. Time: 288.5274 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #19: GFLOPs: 7.7379. Time: 1663.2711 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #20: GFLOPs: 22.9135. Time: 561.6828 us. Best GFLOPs: 107.2696
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #21: GFLOPs: 107.9929. Time: 119.1758 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #22: GFLOPs: 90.0273. Time: 142.9583 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #23: GFLOPs: 38.4454. Time: 334.7641 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #24: GFLOPs: 0.3477. Time: 37019.4507 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #25: GFLOPs: 40.7715. Time: 315.6650 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #26: GFLOPs: 26.9809. Time: 477.0087 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #27: GFLOPs: 1.1149. Time: 11544.2301 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #28: GFLOPs: 19.9985. Time: 643.5565 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #29: GFLOPs: 0.3596. Time: 35790.2620 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #30: GFLOPs: 7.1126. Time: 1809.4885 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #31: GFLOPs: 6.0230. Time: 2136.8488 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #33: GFLOPs: 42.1895. Time: 305.0556 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #34: GFLOPs: 104.7760. Time: 122.8349 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #35: GFLOPs: 23.7787. Time: 541.2460 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #36: GFLOPs: 17.3661. Time: 741.1057 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #37: GFLOPs: 32.8597. Time: 391.6690 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #38: GFLOPs: 63.3073. Time: 203.2965 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #39: GFLOPs: 63.2970. Time: 203.3296 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #40: GFLOPs: 34.7879. Time: 369.9600 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #41: GFLOPs: 5.3418. Time: 2409.3347 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #42: GFLOPs: 66.7829. Time: 192.7162 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #43: GFLOPs: 50.2276. Time: 256.2365 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #45: GFLOPs: 66.1441. Time: 194.5774 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #47: GFLOPs: 97.7833. Time: 131.6190 us. Best GFLOPs: 107.9929
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #48: GFLOPs: 116.1982. Time: 110.7603 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #49: GFLOPs: 37.3840. Time: 344.2689 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #50: GFLOPs: 0.2516. Time: 51158.2773 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #51: GFLOPs: 1.3216. Time: 9738.1215 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #52: GFLOPs: 94.7416. Time: 135.8446 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #53: GFLOPs: 5.3567. Time: 2402.6380 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #54: GFLOPs: 59.3328. Time: 216.9145 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #55: GFLOPs: 51.1713. Time: 251.5109 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #56: GFLOPs: 100.3124. Time: 128.3006 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #57: GFLOPs: 54.3712. Time: 236.7090 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #58: GFLOPs: 30.1620. Time: 426.7006 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #59: GFLOPs: 0.7613. Time: 16906.0162 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #60: GFLOPs: 3.8688. Time: 3326.6755 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #61: GFLOPs: 77.3999. Time: 166.2811 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #62: GFLOPs: 1.3612. Time: 9454.8383 us. Best GFLOPs: 116.1982
2024-04-29 15:05:03 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #63: GFLOPs: 4.6711. Time: 2755.2907 us. Best GFLOPs: 116.1982
2024-04-29 15:49:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:49:40 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 15:49:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 15:49:42 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 15:49:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 15:49:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 15:49:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 15:50:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 15:50:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0556  1.0181  1.0139  1.0139  0.9665  0.9401  0.9384  0.9362  0.9359  0.9268  0.9262  0.9262  0.9259  0.9257  0.9213  0.9185
[17 : 32]:	0.9156  0.9146  0.9124  0.9086  0.9081  0.9074  0.9067  0.9007  0.8972  0.8959  0.8958  0.8939  0.8934  0.8919  0.8909  0.8887
[33 : 48]:	0.8868  0.8856  0.8852  0.8819  0.8819  0.8819  0.8780  0.8708  0.8708  0.8659  0.8636  0.8581  0.8563  0.8539  0.8515  0.8496
[49 : 64]:	0.8486  0.8426  0.8414  0.8408  0.8400  0.8395  0.8382  0.8336  0.8310  0.8308  0.8294  0.8294  0.8260  0.8257  0.8249  0.8242
2024-04-29 15:50:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:50:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #64: GFLOPs: 63.1314. Time: 203.8629 us. Best GFLOPs: 116.1982
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #65: GFLOPs: 59.0636. Time: 217.9033 us. Best GFLOPs: 116.1982
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #66: GFLOPs: 156.6203. Time: 82.1742 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #67: GFLOPs: 154.6233. Time: 83.2355 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #68: GFLOPs: 112.1226. Time: 114.7863 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #69: GFLOPs: 152.7828. Time: 84.2382 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #70: GFLOPs: 92.7047. Time: 138.8295 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #71: GFLOPs: 152.4662. Time: 84.4131 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #72: GFLOPs: 91.2972. Time: 140.9698 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #73: GFLOPs: 83.1192. Time: 154.8396 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #74: GFLOPs: 126.6797. Time: 101.5959 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #75: GFLOPs: 137.5099. Time: 93.5943 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #76: GFLOPs: 64.2874. Time: 200.1969 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #77: GFLOPs: 111.9035. Time: 115.0111 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #78: GFLOPs: 113.3148. Time: 113.5787 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #79: GFLOPs: 120.1528. Time: 107.1148 us. Best GFLOPs: 156.6203
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #80: GFLOPs: 168.1779. Time: 76.5269 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #81: GFLOPs: 119.8097. Time: 107.4216 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #82: GFLOPs: 105.3386. Time: 122.1788 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #83: GFLOPs: 124.1253. Time: 103.6867 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #84: GFLOPs: 119.1611. Time: 108.0063 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #85: GFLOPs: 101.5730. Time: 126.7083 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #86: GFLOPs: 86.8888. Time: 148.1220 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #87: GFLOPs: 155.8774. Time: 82.5658 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #88: GFLOPs: 118.0693. Time: 109.0050 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #89: GFLOPs: 108.8204. Time: 118.2695 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #90: GFLOPs: 66.3145. Time: 194.0775 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #91: GFLOPs: 101.3724. Time: 126.9591 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #92: GFLOPs: 112.1738. Time: 114.7339 us. Best GFLOPs: 168.1779
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #93: GFLOPs: 175.0018. Time: 73.5429 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #94: GFLOPs: 95.1058. Time: 135.3245 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #95: GFLOPs: 127.0428. Time: 101.3056 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #96: GFLOPs: 53.4317. Time: 240.8707 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #97: GFLOPs: 123.1244. Time: 104.5296 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #98: GFLOPs: 126.8382. Time: 101.4690 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #99: GFLOPs: 73.4551. Time: 175.2112 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #100: GFLOPs: 154.5829. Time: 83.2572 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #101: GFLOPs: 153.7447. Time: 83.7111 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #102: GFLOPs: 58.2113. Time: 221.0936 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #103: GFLOPs: 106.2889. Time: 121.0864 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #104: GFLOPs: 107.7378. Time: 119.4580 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #105: GFLOPs: 143.5249. Time: 89.6718 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #106: GFLOPs: 94.5377. Time: 136.1377 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #107: GFLOPs: 103.9050. Time: 123.8646 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #108: GFLOPs: 55.5957. Time: 231.4954 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #109: GFLOPs: 91.7409. Time: 140.2879 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #110: GFLOPs: 130.5797. Time: 98.5616 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #111: GFLOPs: 113.2575. Time: 113.6361 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #112: GFLOPs: 101.1785. Time: 127.2023 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #113: GFLOPs: 125.2673. Time: 102.7415 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #114: GFLOPs: 67.8466. Time: 189.6949 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #115: GFLOPs: 75.5995. Time: 170.2412 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #116: GFLOPs: 107.7739. Time: 119.4180 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #117: GFLOPs: 88.6671. Time: 145.1514 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #118: GFLOPs: 122.8403. Time: 104.7714 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #119: GFLOPs: 89.0655. Time: 144.5019 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #120: GFLOPs: 122.0528. Time: 105.4473 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #121: GFLOPs: 76.1725. Time: 168.9606 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #122: GFLOPs: 44.5050. Time: 289.1842 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #123: GFLOPs: 44.2999. Time: 290.5233 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #124: GFLOPs: 70.4352. Time: 182.7233 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #125: GFLOPs: 6.4068. Time: 2008.8257 us. Best GFLOPs: 175.0018
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(196)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:51:43 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #127: GFLOPs: 63.9629. Time: 201.2126 us. Best GFLOPs: 175.0018
2024-04-29 17:17:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:17:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:17:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 17:17:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:18:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 17:18:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 17:18:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 17:18:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b2a688)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5a52648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b0afe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a781c8)]: 0 failure(s)
2024-04-29 17:18:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9077  0.8886  0.8795  0.8769  0.8658  0.8593  0.8543  0.8513  0.8467  0.8318  0.8276  0.8101  0.8049  0.8018  0.8006  0.7944
[17 : 32]:	0.7943  0.7851  0.7803  0.7801  0.7782  0.7764  0.7739  0.7739  0.7738  0.7735  0.7735  0.7717  0.7699  0.7675  0.7670  0.7664
[33 : 48]:	0.7664  0.7636  0.7617  0.7595  0.7558  0.7555  0.7545  0.7521  0.7465  0.7456  0.7445  0.7419  0.7377  0.7369  0.7369  0.7341
[49 : 64]:	0.7326  0.7326  0.7319  0.7316  0.7311  0.7303  0.7292  0.7288  0.7265  0.7257  0.7246  0.7191  0.7189  0.7182  0.7171  0.7145
2024-04-29 17:18:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:18:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #128: GFLOPs: 139.9571. Time: 91.9578 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #129: GFLOPs: 172.8831. Time: 74.4442 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #130: GFLOPs: 159.3425. Time: 80.7703 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #131: GFLOPs: 157.2934. Time: 81.8225 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #132: GFLOPs: 171.8331. Time: 74.8991 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #133: GFLOPs: 102.2608. Time: 125.8561 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #134: GFLOPs: 139.7206. Time: 92.1134 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #135: GFLOPs: 134.1994. Time: 95.9031 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #136: GFLOPs: 135.8299. Time: 94.7519 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #137: GFLOPs: 100.3320. Time: 128.2756 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #138: GFLOPs: 142.2073. Time: 90.5027 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #139: GFLOPs: 82.0081. Time: 156.9375 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #140: GFLOPs: 145.7234. Time: 88.3190 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #141: GFLOPs: 125.1114. Time: 102.8695 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #142: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #143: GFLOPs: 110.3210. Time: 116.6609 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #144: GFLOPs: 123.1107. Time: 104.5412 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #145: GFLOPs: 146.5396. Time: 87.8271 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #146: GFLOPs: 123.2713. Time: 104.4050 us. Best GFLOPs: 175.0018
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #147: GFLOPs: 183.8588. Time: 70.0001 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #148: GFLOPs: 127.4496. Time: 100.9823 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #149: GFLOPs: 146.1636. Time: 88.0530 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #150: GFLOPs: 154.1466. Time: 83.4929 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #151: GFLOPs: 100.0799. Time: 128.5987 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #152: GFLOPs: 141.7393. Time: 90.8015 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #153: GFLOPs: 118.6635. Time: 108.4591 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #154: GFLOPs: 116.9857. Time: 110.0147 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #155: GFLOPs: 94.1032. Time: 136.7663 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #156: GFLOPs: 110.0594. Time: 116.9382 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #157: GFLOPs: 160.5628. Time: 80.1565 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #158: GFLOPs: 129.1396. Time: 99.6607 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #159: GFLOPs: 126.7331. Time: 101.5531 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #160: GFLOPs: 124.5902. Time: 103.2998 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #161: GFLOPs: 135.7704. Time: 94.7935 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #162: GFLOPs: 172.7641. Time: 74.4955 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #163: GFLOPs: 124.4929. Time: 103.3805 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #164: GFLOPs: 111.0985. Time: 115.8444 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #165: GFLOPs: 167.5547. Time: 76.8116 us. Best GFLOPs: 183.8588
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #166: GFLOPs: 197.7997. Time: 65.0666 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #167: GFLOPs: 91.8445. Time: 140.1297 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #168: GFLOPs: 116.3810. Time: 110.5863 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #169: GFLOPs: 80.1875. Time: 160.5006 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #170: GFLOPs: 92.2819. Time: 139.4656 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #171: GFLOPs: 138.0260. Time: 93.2444 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #172: GFLOPs: 79.5901. Time: 161.7054 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #173: GFLOPs: 85.1617. Time: 151.1259 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #174: GFLOPs: 71.4694. Time: 180.0791 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #175: GFLOPs: 118.9141. Time: 108.2306 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #176: GFLOPs: 109.4298. Time: 117.6109 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #177: GFLOPs: 113.7088. Time: 113.1852 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #178: GFLOPs: 109.2264. Time: 117.8300 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #179: GFLOPs: 64.6703. Time: 199.0116 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #180: GFLOPs: 123.4871. Time: 104.2226 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #181: GFLOPs: 113.6811. Time: 113.2127 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #182: GFLOPs: 180.8998. Time: 71.1452 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #183: GFLOPs: 100.7038. Time: 127.8019 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #184: GFLOPs: 84.3493. Time: 152.5814 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #185: GFLOPs: 127.9604. Time: 100.5792 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #186: GFLOPs: 36.8844. Time: 348.9318 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #187: GFLOPs: 124.6379. Time: 103.2603 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #188: GFLOPs: 101.4916. Time: 126.8099 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #189: GFLOPs: 20.1335. Time: 639.2409 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #190: GFLOPs: 50.2908. Time: 255.9143 us. Best GFLOPs: 197.7997
2024-04-29 17:20:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_19] Trial #191: GFLOPs: 50.0998. Time: 256.8902 us. Best GFLOPs: 197.7997
