2024-04-29 13:21:13 [INFO] [task_scheduler.cc:160] Initializing Task #37: "fused_nn_max_pool2d_5"
2024-04-29 13:21:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:21:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:21:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(30), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(30), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(30), T.int64(30), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(28)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(30), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(30), ax2 + ax2_1)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:23:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:23:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:23:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x40a7168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x530a8c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e76cc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x62e1f48)]: 0 failure(s)
2024-04-29 14:23:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:23:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x40a7168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x530a8c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e76cc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x62e1f48)]: 0 failure(s)
2024-04-29 14:23:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x40a7168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x530a8c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e76cc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x62e1f48)]: 0 failure(s)
2024-04-29 14:23:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x40a7168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x530a8c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e76cc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x62e1f48)]: 0 failure(s)
2024-04-29 14:23:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x40a7168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x530a8c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e76cc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x62e1f48)]: 0 failure(s)
2024-04-29 14:23:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9985  0.9969  0.9955  0.9947  0.9930  0.9863  0.9844  0.9820  0.9787  0.9748  0.9734  0.9640  0.9613  0.9540  0.9535  0.9518
[17 : 32]:	0.9428  0.9425  0.9412  0.9350  0.9339  0.9314  0.9259  0.9238  0.9120  0.9107  0.9056  0.8968  0.8950  0.8946  0.8935  0.8843
[33 : 48]:	0.8815  0.8739  0.8733  0.8725  0.8716  0.8559  0.8517  0.8466  0.8323  0.8220  0.8178  0.8165  0.8156  0.8154  0.8090  0.8072
[49 : 64]:	0.8062  0.8049  0.7736  0.7724  0.7712  0.7694  0.7623  0.7562  0.7553  0.7480  0.7447  0.7382  0.7344  0.7335  0.7299  0.7278
2024-04-29 14:23:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:23:59 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #1: GFLOPs: 7.2078. Time: 187.9572 us. Best GFLOPs: 7.2078
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #2: GFLOPs: 7.9737. Time: 169.9026 us. Best GFLOPs: 7.9737
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #3: GFLOPs: 7.9744. Time: 169.8875 us. Best GFLOPs: 7.9744
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #4: GFLOPs: 14.2792. Time: 94.8758 us. Best GFLOPs: 14.2792
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #5: GFLOPs: 20.4466. Time: 66.2582 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #6: GFLOPs: 20.3828. Time: 66.4654 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #7: GFLOPs: 7.7679. Time: 174.4037 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #8: GFLOPs: 18.8854. Time: 71.7356 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #9: GFLOPs: 16.3470. Time: 82.8748 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #10: GFLOPs: 7.8619. Time: 172.3185 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #11: GFLOPs: 14.6608. Time: 92.4062 us. Best GFLOPs: 20.4466
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #12: GFLOPs: 22.2702. Time: 60.8324 us. Best GFLOPs: 22.2702
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #13: GFLOPs: 22.2726. Time: 60.8259 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #14: GFLOPs: 16.9445. Time: 79.9523 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #15: GFLOPs: 9.1267. Time: 148.4382 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #16: GFLOPs: 9.7370. Time: 139.1340 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #17: GFLOPs: 15.7711. Time: 85.9011 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #18: GFLOPs: 8.2665. Time: 163.8839 us. Best GFLOPs: 22.2726
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #19: GFLOPs: 26.5571. Time: 51.0129 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #20: GFLOPs: 26.0316. Time: 52.0427 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #21: GFLOPs: 15.6377. Time: 86.6335 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #22: GFLOPs: 17.4196. Time: 77.7717 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #23: GFLOPs: 8.0124. Time: 169.0821 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #24: GFLOPs: 16.1551. Time: 83.8588 us. Best GFLOPs: 26.5571
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #25: GFLOPs: 31.6365. Time: 42.8224 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #26: GFLOPs: 18.0069. Time: 75.2351 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #27: GFLOPs: 13.9964. Time: 96.7929 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #28: GFLOPs: 13.3173. Time: 101.7290 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #29: GFLOPs: 18.9818. Time: 71.3711 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #30: GFLOPs: 15.4452. Time: 87.7137 us. Best GFLOPs: 31.6365
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #31: GFLOPs: 38.7581. Time: 34.9540 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #32: GFLOPs: 9.8244. Time: 137.8962 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #33: GFLOPs: 21.0092. Time: 64.4836 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #34: GFLOPs: 6.7066. Time: 202.0015 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #35: GFLOPs: 10.7953. Time: 125.4945 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #36: GFLOPs: 24.4140. Time: 55.4909 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #37: GFLOPs: 20.3568. Time: 66.5504 us. Best GFLOPs: 38.7581
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #38: GFLOPs: 51.1501. Time: 26.4858 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #39: GFLOPs: 16.5221. Time: 81.9966 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #40: GFLOPs: 17.6568. Time: 76.7267 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #41: GFLOPs: 11.1304. Time: 121.7166 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #42: GFLOPs: 13.3205. Time: 101.7042 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #43: GFLOPs: 17.8293. Time: 75.9844 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #44: GFLOPs: 18.0162. Time: 75.1963 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #45: GFLOPs: 18.8102. Time: 72.0222 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #46: GFLOPs: 33.0804. Time: 40.9533 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #47: GFLOPs: 17.4563. Time: 77.6082 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #48: GFLOPs: 17.6720. Time: 76.6608 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #49: GFLOPs: 12.0710. Time: 112.2320 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #50: GFLOPs: 17.3496. Time: 78.0853 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #51: GFLOPs: 7.9390. Time: 170.6455 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #52: GFLOPs: 17.5528. Time: 77.1814 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #53: GFLOPs: 14.3972. Time: 94.0981 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #54: GFLOPs: 23.5826. Time: 57.4472 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #55: GFLOPs: 26.5661. Time: 50.9956 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #56: GFLOPs: 10.2748. Time: 131.8513 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #57: GFLOPs: 8.2487. Time: 164.2382 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #58: GFLOPs: 13.9058. Time: 97.4238 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #59: GFLOPs: 17.6202. Time: 76.8862 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #60: GFLOPs: 15.1224. Time: 89.5859 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #61: GFLOPs: 14.6994. Time: 92.1638 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #62: GFLOPs: 14.0612. Time: 96.3467 us. Best GFLOPs: 51.1501
2024-04-29 15:06:17 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_max_pool2d_5] Trial #63: GFLOPs: 26.8218. Time: 50.5094 us. Best GFLOPs: 51.1501
