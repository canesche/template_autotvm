2024-04-29 13:20:06 [INFO] [task_scheduler.cc:160] Initializing Task #21: "fused_nn_max_pool2d_2"
2024-04-29 13:20:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:20:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(14), T.int64(4), T.int64(1), T.int64(9)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(9)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(128)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(14), T.int64(14), T.int64(4), T.int64(1), T.int64(9)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(16), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 13:56:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:56:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:56:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52aa048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33c3708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5a8c138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x46e57f8)]: 0 failure(s)
2024-04-29 13:56:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:56:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52aa048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33c3708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5a8c138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x46e57f8)]: 0 failure(s)
2024-04-29 13:57:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52aa048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33c3708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5a8c138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x46e57f8)]: 0 failure(s)
2024-04-29 13:57:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52aa048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33c3708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5a8c138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x46e57f8)]: 0 failure(s)
2024-04-29 13:57:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52aa048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33c3708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5a8c138)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x46e57f8)]: 0 failure(s)
2024-04-29 13:57:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9889  0.9841  0.9809  0.9775  0.9692  0.9660  0.9568  0.9538  0.9470  0.9415  0.9304  0.9239  0.9213  0.9185  0.9175
[17 : 32]:	0.9123  0.9111  0.9088  0.9055  0.9013  0.8856  0.8768  0.8748  0.8715  0.8700  0.8659  0.8548  0.8454  0.8451  0.8423  0.8414
[33 : 48]:	0.8361  0.8248  0.8202  0.8167  0.7887  0.7869  0.7785  0.7761  0.7759  0.7758  0.7739  0.7546  0.7529  0.7521  0.7520  0.7506
[49 : 64]:	0.7500  0.7351  0.7327  0.7303  0.7268  0.7265  0.7242  0.7229  0.7136  0.7136  0.7082  0.7064  0.7047  0.6916  0.6832  0.6744
2024-04-29 13:57:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:57:13 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 16.2542. Time: 55.5653 us. Best GFLOPs: 16.2542
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 14.4869. Time: 62.3436 us. Best GFLOPs: 16.2542
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 15.8734. Time: 56.8983 us. Best GFLOPs: 16.2542
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 14.6781. Time: 61.5316 us. Best GFLOPs: 16.2542
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 16.5519. Time: 54.5657 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 15.5039. Time: 58.2543 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 10.3376. Time: 87.3676 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 10.5409. Time: 85.6822 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 15.6168. Time: 57.8330 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 12.0838. Time: 74.7421 us. Best GFLOPs: 16.5519
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 27.0837. Time: 33.3473 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 6.9716. Time: 129.5500 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 16.2932. Time: 55.4322 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 10.8447. Time: 83.2822 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 18.0978. Time: 49.9049 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 14.3973. Time: 62.7318 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 13.7627. Time: 65.6243 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 14.4483. Time: 62.5104 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 14.8179. Time: 60.9513 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 10.7147. Time: 84.2925 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 11.3324. Time: 79.6976 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 12.6750. Time: 71.2557 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 9.5399. Time: 94.6722 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 19.3200. Time: 46.7478 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 18.8100. Time: 48.0154 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 15.1239. Time: 59.7179 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 14.2052. Time: 63.5799 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 18.4247. Time: 49.0193 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 13.6878. Time: 65.9834 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 14.3170. Time: 63.0835 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 8.8173. Time: 102.4309 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 9.6317. Time: 93.7707 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 10.9232. Time: 82.6837 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 20.8524. Time: 43.3125 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 14.8262. Time: 60.9171 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 17.5882. Time: 51.3508 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 15.0081. Time: 60.1788 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 21.9012. Time: 41.2384 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 14.8527. Time: 60.8082 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 25.4590. Time: 35.4753 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 14.1301. Time: 63.9179 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 11.2672. Time: 80.1592 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 13.6388. Time: 66.2207 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 11.3860. Time: 79.3228 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 12.8322. Time: 70.3830 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 7.9795. Time: 113.1858 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 22.9162. Time: 39.4117 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 12.3018. Time: 73.4174 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 14.7568. Time: 61.2033 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 13.4615. Time: 67.0927 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #51: GFLOPs: 7.0926. Time: 127.3394 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #52: GFLOPs: 12.8655. Time: 70.2005 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #53: GFLOPs: 23.4359. Time: 38.5378 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #54: GFLOPs: 18.2836. Time: 49.3977 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #55: GFLOPs: 15.9997. Time: 56.4489 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #56: GFLOPs: 9.6056. Time: 94.0256 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #57: GFLOPs: 7.4043. Time: 121.9790 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #58: GFLOPs: 13.6244. Time: 66.2904 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #59: GFLOPs: 10.2035. Time: 88.5152 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #60: GFLOPs: 12.3098. Time: 73.3700 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #61: GFLOPs: 18.2651. Time: 49.4478 us. Best GFLOPs: 27.0837
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #62: GFLOPs: 40.2638. Time: 22.4312 us. Best GFLOPs: 40.2638
2024-04-29 15:05:00 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_2] Trial #63: GFLOPs: 11.7717. Time: 76.7234 us. Best GFLOPs: 40.2638
