2024-04-29 13:19:18 [INFO] [task_scheduler.cc:160] Initializing Task #10: "fused_nn_max_pool2d_1"
2024-04-29 13:19:18 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(16), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(132), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:19:18 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:19:18 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(16), T.int64(16), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(132), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(16), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:19:18 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(16), T.int64(16), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(132), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(132), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:19:18 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(132), T.int64(16), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(132), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(132), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 13:39:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:39:08 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:39:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x347aef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6329798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x73d1728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x600b408)]: 0 failure(s)
2024-04-29 13:39:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:39:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x347aef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6329798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x73d1728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x600b408)]: 0 failure(s)
2024-04-29 13:39:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x347aef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6329798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x73d1728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x600b408)]: 0 failure(s)
2024-04-29 13:39:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x347aef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6329798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x73d1728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x600b408)]: 0 failure(s)
2024-04-29 13:39:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x347aef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6329798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x73d1728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x600b408)]: 0 failure(s)
2024-04-29 13:39:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9861  0.9858  0.9698  0.9681  0.9644  0.9632  0.9553  0.9504  0.9476  0.9403  0.9039  0.8965  0.8928  0.8928  0.8904  0.8850
[17 : 32]:	0.8845  0.8808  0.8682  0.8652  0.8628  0.8519  0.8496  0.8491  0.8464  0.8429  0.8383  0.8361  0.8274  0.8241  0.8192  0.8170
[33 : 48]:	0.8168  0.8047  0.7995  0.7940  0.7900  0.7841  0.7544  0.7520  0.7517  0.7491  0.7430  0.7349  0.7306  0.7275  0.7275  0.7239
[49 : 64]:	0.7228  0.7200  0.7115  0.7084  0.6972  0.6876  0.6843  0.6788  0.6778  0.6768  0.6757  0.6517  0.6513  0.6505  0.6485  0.6479
2024-04-29 13:39:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:39:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 13.7193. Time: 67.8894 us. Best GFLOPs: 13.7193
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 16.4037. Time: 56.7793 us. Best GFLOPs: 16.4037
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 11.2649. Time: 82.6807 us. Best GFLOPs: 16.4037
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 15.1962. Time: 61.2911 us. Best GFLOPs: 16.4037
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 14.7118. Time: 63.3093 us. Best GFLOPs: 16.4037
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 16.8092. Time: 55.4098 us. Best GFLOPs: 16.8092
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 13.2214. Time: 70.4457 us. Best GFLOPs: 16.8092
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 18.4369. Time: 50.5178 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 10.7418. Time: 86.7072 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 7.4178. Time: 125.5612 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 15.0697. Time: 61.8057 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 2.5876. Time: 359.9462 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 7.4477. Time: 125.0577 us. Best GFLOPs: 18.4369
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 23.7632. Time: 39.1946 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 23.4321. Time: 39.7486 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 7.4177. Time: 125.5632 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 23.3965. Time: 39.8090 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 5.3044. Time: 175.5889 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 15.3080. Time: 60.8435 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 11.0365. Time: 84.3917 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 14.4927. Time: 64.2663 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 18.7236. Time: 49.7444 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 10.2147. Time: 91.1820 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 12.0825. Time: 77.0860 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 11.8972. Time: 78.2869 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 12.9320. Time: 72.0222 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 11.8998. Time: 78.2694 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 10.6437. Time: 87.5067 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 18.7340. Time: 49.7165 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 20.3985. Time: 45.6599 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 15.0943. Time: 61.7047 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 14.8219. Time: 62.8387 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 7.2521. Time: 128.4306 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 19.8107. Time: 47.0146 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 13.6816. Time: 68.0763 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 15.5577. Time: 59.8670 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 11.4835. Time: 81.1068 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 14.8420. Time: 62.7536 us. Best GFLOPs: 23.7632
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 23.9726. Time: 38.8524 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 14.8570. Time: 62.6905 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 17.8165. Time: 52.2768 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 6.4833. Time: 143.6598 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 12.3621. Time: 75.3426 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 10.7749. Time: 86.4409 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 13.9099. Time: 66.9588 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 13.8427. Time: 67.2839 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 13.2200. Time: 70.4534 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 19.1034. Time: 48.7554 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 19.2041. Time: 48.4996 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 6.8740. Time: 135.4948 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 18.3600. Time: 50.7295 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 12.2878. Time: 75.7984 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 12.0792. Time: 77.1068 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 12.2864. Time: 75.8065 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 14.3421. Time: 64.9411 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 14.0103. Time: 66.4790 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 18.9680. Time: 49.1033 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 11.8113. Time: 78.8563 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 16.5630. Time: 56.2332 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #60: GFLOPs: 11.0516. Time: 84.2763 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #61: GFLOPs: 14.3909. Time: 64.7208 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #62: GFLOPs: 13.2407. Time: 70.3432 us. Best GFLOPs: 23.9726
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #63: GFLOPs: 42.9425. Time: 21.6893 us. Best GFLOPs: 42.9425
2024-04-29 15:04:17 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #64: GFLOPs: 6.7945. Time: 137.0796 us. Best GFLOPs: 42.9425
